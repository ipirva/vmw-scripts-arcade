# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.management_plane_api_networking_logical_routing_and_services_routing_configuration_api import ManagementPlaneAPINetworkingLogicalRoutingAndServicesRoutingConfigurationApi  # noqa: E501
from swagger_client.rest import ApiException


class TestManagementPlaneAPINetworkingLogicalRoutingAndServicesRoutingConfigurationApi(unittest.TestCase):
    """ManagementPlaneAPINetworkingLogicalRoutingAndServicesRoutingConfigurationApi unit test stubs"""

    def setUp(self):
        self.api = ManagementPlaneAPINetworkingLogicalRoutingAndServicesRoutingConfigurationApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_bgp_neighbor(self):
        """Test case for add_bgp_neighbor

        Add a new BGP Neighbor on a Logical Router  # noqa: E501
        """
        pass

    def test_add_ip_prefix_list(self):
        """Test case for add_ip_prefix_list

        Add IPPrefixList on a Logical Router  # noqa: E501
        """
        pass

    def test_add_route_map(self):
        """Test case for add_route_map

        Add RouteMap on a Logical Router  # noqa: E501
        """
        pass

    def test_add_static_route(self):
        """Test case for add_static_route

        Add Static Routes on a Logical Router  # noqa: E501
        """
        pass

    def test_create_bgp_community_list(self):
        """Test case for create_bgp_community_list

        Create a new BGP community list on a logical router  # noqa: E501
        """
        pass

    def test_create_dad_profile(self):
        """Test case for create_dad_profile

        Create a new DADProfile  # noqa: E501
        """
        pass

    def test_create_ndra_profile(self):
        """Test case for create_ndra_profile

        Create a new NDRA Profile  # noqa: E501
        """
        pass

    def test_delete_bgp_community_list(self):
        """Test case for delete_bgp_community_list

        Delete a specific BGP community list from a logical router  # noqa: E501
        """
        pass

    def test_delete_bgp_neighbor(self):
        """Test case for delete_bgp_neighbor

        Delete a specific BGP Neighbor on a Logical Router  # noqa: E501
        """
        pass

    def test_delete_dad_profile(self):
        """Test case for delete_dad_profile

        Delete DAD Profile  # noqa: E501
        """
        pass

    def test_delete_ip_prefix_list(self):
        """Test case for delete_ip_prefix_list

        Delete a specific IPPrefixList on a Logical Router  # noqa: E501
        """
        pass

    def test_delete_ndra_profile(self):
        """Test case for delete_ndra_profile

        Delete NDRA Profile  # noqa: E501
        """
        pass

    def test_delete_route_map(self):
        """Test case for delete_route_map

        Delete a specific RouteMap on a Logical Router  # noqa: E501
        """
        pass

    def test_delete_static_route(self):
        """Test case for delete_static_route

        Delete a specific Static Route on a Logical Router  # noqa: E501
        """
        pass

    def test_list_bgp_community_lists(self):
        """Test case for list_bgp_community_lists

        Paginated list of BGP community lists on a logical router  # noqa: E501
        """
        pass

    def test_list_bgp_neighbors(self):
        """Test case for list_bgp_neighbors

        Paginated list of BGP Neighbors on a Logical Router  # noqa: E501
        """
        pass

    def test_list_dad_profiles(self):
        """Test case for list_dad_profiles

        Read All IPV6 DADProfiles  # noqa: E501
        """
        pass

    def test_list_ip_prefix_lists(self):
        """Test case for list_ip_prefix_lists

        Paginated List of IPPrefixLists  # noqa: E501
        """
        pass

    def test_list_ndra_profiles(self):
        """Test case for list_ndra_profiles

        Read All IPV6 NDRA Profiles  # noqa: E501
        """
        pass

    def test_list_route_maps(self):
        """Test case for list_route_maps

        Paginated List of RouteMaps  # noqa: E501
        """
        pass

    def test_list_static_routes(self):
        """Test case for list_static_routes

        Paginated List of Static Routes  # noqa: E501
        """
        pass

    def test_read_advertise_rule_list(self):
        """Test case for read_advertise_rule_list

        Read the Advertisement Rules on a Logical Router  # noqa: E501
        """
        pass

    def test_read_advertisement_config(self):
        """Test case for read_advertisement_config

        Read the Advertisement Configuration on a Logical Router  # noqa: E501
        """
        pass

    def test_read_bgp_community_list(self):
        """Test case for read_bgp_community_list

        Read a specific BGP community list from a logical router  # noqa: E501
        """
        pass

    def test_read_bgp_config(self):
        """Test case for read_bgp_config

        Read the BGP Configuration on a Logical Router  # noqa: E501
        """
        pass

    def test_read_bgp_neighbor(self):
        """Test case for read_bgp_neighbor

        Read a specific BGP Neighbor on a Logical Router  # noqa: E501
        """
        pass

    def test_read_bgp_neighbor_with_password_show_sensitive_data(self):
        """Test case for read_bgp_neighbor_with_password_show_sensitive_data

        Read a specific BGP Neighbor with password on a Logical Router  # noqa: E501
        """
        pass

    def test_read_dad_profile(self):
        """Test case for read_dad_profile

        Read specified IPV6 DADProfile  # noqa: E501
        """
        pass

    def test_read_debug_info_text(self):
        """Test case for read_debug_info_text

        Read the debug information for the logical router  # noqa: E501
        """
        pass

    def test_read_ip_prefix_list(self):
        """Test case for read_ip_prefix_list

        Get a specific IPPrefixList on a Logical Router  # noqa: E501
        """
        pass

    def test_read_ndra_profile(self):
        """Test case for read_ndra_profile

        Read specified IPV6 NDRA Profile  # noqa: E501
        """
        pass

    def test_read_redistribution_config(self):
        """Test case for read_redistribution_config

        Read the Redistribution Configuration on a Logical Router  # noqa: E501
        """
        pass

    def test_read_redistribution_rule_list(self):
        """Test case for read_redistribution_rule_list

        Read All the Redistribution Rules on a Logical Router  # noqa: E501
        """
        pass

    def test_read_route_map(self):
        """Test case for read_route_map

        Get a specific RouteMap on a Logical Router  # noqa: E501
        """
        pass

    def test_read_routing_config(self):
        """Test case for read_routing_config

        Read the Routing Configuration  # noqa: E501
        """
        pass

    def test_read_static_route(self):
        """Test case for read_static_route

        Get a specific Static Route on a Logical Router  # noqa: E501
        """
        pass

    def test_un_set_password_on_bgp_neighbor(self):
        """Test case for un_set_password_on_bgp_neighbor

        Unset/Delete password property on specific BGP Neighbor on Logical Router  # noqa: E501
        """
        pass

    def test_update_advertise_rule_list(self):
        """Test case for update_advertise_rule_list

        Update the Advertisement Rules on a Logical Router  # noqa: E501
        """
        pass

    def test_update_advertisement_config(self):
        """Test case for update_advertisement_config

        Update the Advertisement Configuration on a Logical Router  # noqa: E501
        """
        pass

    def test_update_bgp_community_list(self):
        """Test case for update_bgp_community_list

        Update a specific BGP community list from a logical router  # noqa: E501
        """
        pass

    def test_update_bgp_community_list_old(self):
        """Test case for update_bgp_community_list_old

        Update a specific BGP community list from a logical router  # noqa: E501
        """
        pass

    def test_update_bgp_config(self):
        """Test case for update_bgp_config

        Update the BGP Configuration on a Logical Router  # noqa: E501
        """
        pass

    def test_update_bgp_neighbor(self):
        """Test case for update_bgp_neighbor

        Update a specific BGP Neighbor on a Logical Router  # noqa: E501
        """
        pass

    def test_update_dad_profile(self):
        """Test case for update_dad_profile

        Update DADProfile  # noqa: E501
        """
        pass

    def test_update_ip_prefix_list(self):
        """Test case for update_ip_prefix_list

        Update a specific IPPrefixList on a Logical Router  # noqa: E501
        """
        pass

    def test_update_ndra_profile(self):
        """Test case for update_ndra_profile

        Update NDRA Profile  # noqa: E501
        """
        pass

    def test_update_redistribution_config(self):
        """Test case for update_redistribution_config

        Update the Redistribution Configuration on a Logical Router  # noqa: E501
        """
        pass

    def test_update_redistribution_rule_list(self):
        """Test case for update_redistribution_rule_list

        Update All the Redistribution Rules on a Logical Router  # noqa: E501
        """
        pass

    def test_update_route_map(self):
        """Test case for update_route_map

        Update a specific RouteMap on a Logical Router  # noqa: E501
        """
        pass

    def test_update_routing_config(self):
        """Test case for update_routing_config

        Update the Routing Configuration  # noqa: E501
        """
        pass

    def test_update_static_route(self):
        """Test case for update_static_route

        Update a specific Static Route Rule on a Logical Router  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
