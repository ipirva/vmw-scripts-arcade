# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuccessNodeSupportBundleResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle_name': 'str',
        'node_display_name': 'str',
        'node_id': 'str',
        'sha256_thumbprint': 'str',
        'bundle_size': 'int'
    }

    attribute_map = {
        'bundle_name': 'bundle_name',
        'node_display_name': 'node_display_name',
        'node_id': 'node_id',
        'sha256_thumbprint': 'sha256_thumbprint',
        'bundle_size': 'bundle_size'
    }

    def __init__(self, bundle_name=None, node_display_name=None, node_id=None, sha256_thumbprint=None, bundle_size=None):  # noqa: E501
        """SuccessNodeSupportBundleResult - a model defined in Swagger"""  # noqa: E501
        self._bundle_name = None
        self._node_display_name = None
        self._node_id = None
        self._sha256_thumbprint = None
        self._bundle_size = None
        self.discriminator = None
        if bundle_name is not None:
            self.bundle_name = bundle_name
        if node_display_name is not None:
            self.node_display_name = node_display_name
        if node_id is not None:
            self.node_id = node_id
        if sha256_thumbprint is not None:
            self.sha256_thumbprint = sha256_thumbprint
        if bundle_size is not None:
            self.bundle_size = bundle_size

    @property
    def bundle_name(self):
        """Gets the bundle_name of this SuccessNodeSupportBundleResult.  # noqa: E501

        Name of support bundle, e.g. nsx_NODETYPE_UUID_YYYYMMDD_HHMMSS.tgz  # noqa: E501

        :return: The bundle_name of this SuccessNodeSupportBundleResult.  # noqa: E501
        :rtype: str
        """
        return self._bundle_name

    @bundle_name.setter
    def bundle_name(self, bundle_name):
        """Sets the bundle_name of this SuccessNodeSupportBundleResult.

        Name of support bundle, e.g. nsx_NODETYPE_UUID_YYYYMMDD_HHMMSS.tgz  # noqa: E501

        :param bundle_name: The bundle_name of this SuccessNodeSupportBundleResult.  # noqa: E501
        :type: str
        """

        self._bundle_name = bundle_name

    @property
    def node_display_name(self):
        """Gets the node_display_name of this SuccessNodeSupportBundleResult.  # noqa: E501

        Display name of node  # noqa: E501

        :return: The node_display_name of this SuccessNodeSupportBundleResult.  # noqa: E501
        :rtype: str
        """
        return self._node_display_name

    @node_display_name.setter
    def node_display_name(self, node_display_name):
        """Sets the node_display_name of this SuccessNodeSupportBundleResult.

        Display name of node  # noqa: E501

        :param node_display_name: The node_display_name of this SuccessNodeSupportBundleResult.  # noqa: E501
        :type: str
        """

        self._node_display_name = node_display_name

    @property
    def node_id(self):
        """Gets the node_id of this SuccessNodeSupportBundleResult.  # noqa: E501

        UUID of node  # noqa: E501

        :return: The node_id of this SuccessNodeSupportBundleResult.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this SuccessNodeSupportBundleResult.

        UUID of node  # noqa: E501

        :param node_id: The node_id of this SuccessNodeSupportBundleResult.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def sha256_thumbprint(self):
        """Gets the sha256_thumbprint of this SuccessNodeSupportBundleResult.  # noqa: E501

        File's SHA256 thumbprint  # noqa: E501

        :return: The sha256_thumbprint of this SuccessNodeSupportBundleResult.  # noqa: E501
        :rtype: str
        """
        return self._sha256_thumbprint

    @sha256_thumbprint.setter
    def sha256_thumbprint(self, sha256_thumbprint):
        """Sets the sha256_thumbprint of this SuccessNodeSupportBundleResult.

        File's SHA256 thumbprint  # noqa: E501

        :param sha256_thumbprint: The sha256_thumbprint of this SuccessNodeSupportBundleResult.  # noqa: E501
        :type: str
        """

        self._sha256_thumbprint = sha256_thumbprint

    @property
    def bundle_size(self):
        """Gets the bundle_size of this SuccessNodeSupportBundleResult.  # noqa: E501

        Size of support bundle in bytes  # noqa: E501

        :return: The bundle_size of this SuccessNodeSupportBundleResult.  # noqa: E501
        :rtype: int
        """
        return self._bundle_size

    @bundle_size.setter
    def bundle_size(self, bundle_size):
        """Sets the bundle_size of this SuccessNodeSupportBundleResult.

        Size of support bundle in bytes  # noqa: E501

        :param bundle_size: The bundle_size of this SuccessNodeSupportBundleResult.  # noqa: E501
        :type: int
        """

        self._bundle_size = bundle_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuccessNodeSupportBundleResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuccessNodeSupportBundleResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
