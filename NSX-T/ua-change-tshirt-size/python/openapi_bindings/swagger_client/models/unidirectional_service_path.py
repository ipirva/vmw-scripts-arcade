# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnidirectionalServicePath(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hops': 'list[ServicePathHop]',
        'in_maintenance_mode': 'bool',
        'host_cross_count': 'int',
        'is_active': 'bool',
        'unidir_service_path_id': 'int'
    }

    attribute_map = {
        'hops': 'hops',
        'in_maintenance_mode': 'in_maintenance_mode',
        'host_cross_count': 'host_cross_count',
        'is_active': 'is_active',
        'unidir_service_path_id': 'unidir_service_path_id'
    }

    def __init__(self, hops=None, in_maintenance_mode=None, host_cross_count=None, is_active=None, unidir_service_path_id=None):  # noqa: E501
        """UnidirectionalServicePath - a model defined in Swagger"""  # noqa: E501
        self._hops = None
        self._in_maintenance_mode = None
        self._host_cross_count = None
        self._is_active = None
        self._unidir_service_path_id = None
        self.discriminator = None
        if hops is not None:
            self.hops = hops
        if in_maintenance_mode is not None:
            self.in_maintenance_mode = in_maintenance_mode
        if host_cross_count is not None:
            self.host_cross_count = host_cross_count
        if is_active is not None:
            self.is_active = is_active
        if unidir_service_path_id is not None:
            self.unidir_service_path_id = unidir_service_path_id

    @property
    def hops(self):
        """Gets the hops of this UnidirectionalServicePath.  # noqa: E501

        List of service path hops that constitutes the forward or reverse service path.  # noqa: E501

        :return: The hops of this UnidirectionalServicePath.  # noqa: E501
        :rtype: list[ServicePathHop]
        """
        return self._hops

    @hops.setter
    def hops(self, hops):
        """Sets the hops of this UnidirectionalServicePath.

        List of service path hops that constitutes the forward or reverse service path.  # noqa: E501

        :param hops: The hops of this UnidirectionalServicePath.  # noqa: E501
        :type: list[ServicePathHop]
        """

        self._hops = hops

    @property
    def in_maintenance_mode(self):
        """Gets the in_maintenance_mode of this UnidirectionalServicePath.  # noqa: E501

        Is forward or revserse service path in maintenance mode or not.  # noqa: E501

        :return: The in_maintenance_mode of this UnidirectionalServicePath.  # noqa: E501
        :rtype: bool
        """
        return self._in_maintenance_mode

    @in_maintenance_mode.setter
    def in_maintenance_mode(self, in_maintenance_mode):
        """Sets the in_maintenance_mode of this UnidirectionalServicePath.

        Is forward or revserse service path in maintenance mode or not.  # noqa: E501

        :param in_maintenance_mode: The in_maintenance_mode of this UnidirectionalServicePath.  # noqa: E501
        :type: bool
        """

        self._in_maintenance_mode = in_maintenance_mode

    @property
    def host_cross_count(self):
        """Gets the host_cross_count of this UnidirectionalServicePath.  # noqa: E501

        The number of times the traffic needs to cross hosts for the given forward or reverse service path.  # noqa: E501

        :return: The host_cross_count of this UnidirectionalServicePath.  # noqa: E501
        :rtype: int
        """
        return self._host_cross_count

    @host_cross_count.setter
    def host_cross_count(self, host_cross_count):
        """Sets the host_cross_count of this UnidirectionalServicePath.

        The number of times the traffic needs to cross hosts for the given forward or reverse service path.  # noqa: E501

        :param host_cross_count: The host_cross_count of this UnidirectionalServicePath.  # noqa: E501
        :type: int
        """

        self._host_cross_count = host_cross_count

    @property
    def is_active(self):
        """Gets the is_active of this UnidirectionalServicePath.  # noqa: E501

        Is forward or revserse service path active or not.  # noqa: E501

        :return: The is_active of this UnidirectionalServicePath.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UnidirectionalServicePath.

        Is forward or revserse service path active or not.  # noqa: E501

        :param is_active: The is_active of this UnidirectionalServicePath.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def unidir_service_path_id(self):
        """Gets the unidir_service_path_id of this UnidirectionalServicePath.  # noqa: E501

        Unique identifier of one directional service path.  # noqa: E501

        :return: The unidir_service_path_id of this UnidirectionalServicePath.  # noqa: E501
        :rtype: int
        """
        return self._unidir_service_path_id

    @unidir_service_path_id.setter
    def unidir_service_path_id(self, unidir_service_path_id):
        """Sets the unidir_service_path_id of this UnidirectionalServicePath.

        Unique identifier of one directional service path.  # noqa: E501

        :param unidir_service_path_id: The unidir_service_path_id of this UnidirectionalServicePath.  # noqa: E501
        :type: int
        """

        self._unidir_service_path_id = unidir_service_path_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnidirectionalServicePath, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnidirectionalServicePath):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
