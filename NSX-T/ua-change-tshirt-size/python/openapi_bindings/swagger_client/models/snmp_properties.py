# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnmpProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'v2c': 'Snmpv2cProperties',
        'v3': 'Snmpv3Properties'
    }

    attribute_map = {
        'v2c': 'v2c',
        'v3': 'v3'
    }

    def __init__(self, v2c=None, v3=None):  # noqa: E501
        """SnmpProperties - a model defined in Swagger"""  # noqa: E501
        self._v2c = None
        self._v3 = None
        self.discriminator = None
        if v2c is not None:
            self.v2c = v2c
        if v3 is not None:
            self.v3 = v3

    @property
    def v2c(self):
        """Gets the v2c of this SnmpProperties.  # noqa: E501


        :return: The v2c of this SnmpProperties.  # noqa: E501
        :rtype: Snmpv2cProperties
        """
        return self._v2c

    @v2c.setter
    def v2c(self, v2c):
        """Sets the v2c of this SnmpProperties.


        :param v2c: The v2c of this SnmpProperties.  # noqa: E501
        :type: Snmpv2cProperties
        """

        self._v2c = v2c

    @property
    def v3(self):
        """Gets the v3 of this SnmpProperties.  # noqa: E501


        :return: The v3 of this SnmpProperties.  # noqa: E501
        :rtype: Snmpv3Properties
        """
        return self._v3

    @v3.setter
    def v3(self, v3):
        """Sets the v3 of this SnmpProperties.


        :param v3: The v3 of this SnmpProperties.  # noqa: E501
        :type: Snmpv3Properties
        """

        self._v3 = v3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnmpProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
