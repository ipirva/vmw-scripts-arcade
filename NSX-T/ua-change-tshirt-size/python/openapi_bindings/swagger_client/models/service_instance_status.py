# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceInstanceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_deployment_status': 'ServiceDeploymentStatus',
        'configuration_issue': 'SVMConfigureIssue',
        'service_instance_id': 'str',
        'instance_health_status': 'ServiceInstanceHealthStatus'
    }

    attribute_map = {
        'instance_deployment_status': 'instance_deployment_status',
        'configuration_issue': 'configuration_issue',
        'service_instance_id': 'service_instance_id',
        'instance_health_status': 'instance_health_status'
    }

    def __init__(self, instance_deployment_status=None, configuration_issue=None, service_instance_id=None, instance_health_status=None):  # noqa: E501
        """ServiceInstanceStatus - a model defined in Swagger"""  # noqa: E501
        self._instance_deployment_status = None
        self._configuration_issue = None
        self._service_instance_id = None
        self._instance_health_status = None
        self.discriminator = None
        if instance_deployment_status is not None:
            self.instance_deployment_status = instance_deployment_status
        if configuration_issue is not None:
            self.configuration_issue = configuration_issue
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if instance_health_status is not None:
            self.instance_health_status = instance_health_status

    @property
    def instance_deployment_status(self):
        """Gets the instance_deployment_status of this ServiceInstanceStatus.  # noqa: E501


        :return: The instance_deployment_status of this ServiceInstanceStatus.  # noqa: E501
        :rtype: ServiceDeploymentStatus
        """
        return self._instance_deployment_status

    @instance_deployment_status.setter
    def instance_deployment_status(self, instance_deployment_status):
        """Sets the instance_deployment_status of this ServiceInstanceStatus.


        :param instance_deployment_status: The instance_deployment_status of this ServiceInstanceStatus.  # noqa: E501
        :type: ServiceDeploymentStatus
        """

        self._instance_deployment_status = instance_deployment_status

    @property
    def configuration_issue(self):
        """Gets the configuration_issue of this ServiceInstanceStatus.  # noqa: E501


        :return: The configuration_issue of this ServiceInstanceStatus.  # noqa: E501
        :rtype: SVMConfigureIssue
        """
        return self._configuration_issue

    @configuration_issue.setter
    def configuration_issue(self, configuration_issue):
        """Sets the configuration_issue of this ServiceInstanceStatus.


        :param configuration_issue: The configuration_issue of this ServiceInstanceStatus.  # noqa: E501
        :type: SVMConfigureIssue
        """

        self._configuration_issue = configuration_issue

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this ServiceInstanceStatus.  # noqa: E501

        Id of an instantiation of a registered service.  # noqa: E501

        :return: The service_instance_id of this ServiceInstanceStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this ServiceInstanceStatus.

        Id of an instantiation of a registered service.  # noqa: E501

        :param service_instance_id: The service_instance_id of this ServiceInstanceStatus.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def instance_health_status(self):
        """Gets the instance_health_status of this ServiceInstanceStatus.  # noqa: E501


        :return: The instance_health_status of this ServiceInstanceStatus.  # noqa: E501
        :rtype: ServiceInstanceHealthStatus
        """
        return self._instance_health_status

    @instance_health_status.setter
    def instance_health_status(self, instance_health_status):
        """Sets the instance_health_status of this ServiceInstanceStatus.


        :param instance_health_status: The instance_health_status of this ServiceInstanceStatus.  # noqa: E501
        :type: ServiceInstanceHealthStatus
        """

        self._instance_health_status = instance_health_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInstanceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInstanceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
