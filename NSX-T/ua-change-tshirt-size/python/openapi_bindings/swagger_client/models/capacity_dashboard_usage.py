# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CapacityDashboardUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_usage_count': 'int',
        'max_threshold_percentage': 'float',
        'display_name': 'str',
        'severity': 'str',
        'max_supported_count': 'int',
        'usage_type': 'str',
        'min_threshold_percentage': 'float',
        'current_usage_percentage': 'float'
    }

    attribute_map = {
        'current_usage_count': 'current_usage_count',
        'max_threshold_percentage': 'max_threshold_percentage',
        'display_name': 'display_name',
        'severity': 'severity',
        'max_supported_count': 'max_supported_count',
        'usage_type': 'usage_type',
        'min_threshold_percentage': 'min_threshold_percentage',
        'current_usage_percentage': 'current_usage_percentage'
    }

    def __init__(self, current_usage_count=None, max_threshold_percentage=None, display_name=None, severity=None, max_supported_count=None, usage_type=None, min_threshold_percentage=None, current_usage_percentage=None):  # noqa: E501
        """CapacityDashboardUsage - a model defined in Swagger"""  # noqa: E501
        self._current_usage_count = None
        self._max_threshold_percentage = None
        self._display_name = None
        self._severity = None
        self._max_supported_count = None
        self._usage_type = None
        self._min_threshold_percentage = None
        self._current_usage_percentage = None
        self.discriminator = None
        self.current_usage_count = current_usage_count
        self.max_threshold_percentage = max_threshold_percentage
        self.display_name = display_name
        self.severity = severity
        self.max_supported_count = max_supported_count
        self.usage_type = usage_type
        self.min_threshold_percentage = min_threshold_percentage
        self.current_usage_percentage = current_usage_percentage

    @property
    def current_usage_count(self):
        """Gets the current_usage_count of this CapacityDashboardUsage.  # noqa: E501

        Indicate the current usage count of object type.   # noqa: E501

        :return: The current_usage_count of this CapacityDashboardUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_usage_count

    @current_usage_count.setter
    def current_usage_count(self, current_usage_count):
        """Sets the current_usage_count of this CapacityDashboardUsage.

        Indicate the current usage count of object type.   # noqa: E501

        :param current_usage_count: The current_usage_count of this CapacityDashboardUsage.  # noqa: E501
        :type: int
        """
        if current_usage_count is None:
            raise ValueError("Invalid value for `current_usage_count`, must not be `None`")  # noqa: E501

        self._current_usage_count = current_usage_count

    @property
    def max_threshold_percentage(self):
        """Gets the max_threshold_percentage of this CapacityDashboardUsage.  # noqa: E501

        This indicates the maximum threshold percentage for object type.   # noqa: E501

        :return: The max_threshold_percentage of this CapacityDashboardUsage.  # noqa: E501
        :rtype: float
        """
        return self._max_threshold_percentage

    @max_threshold_percentage.setter
    def max_threshold_percentage(self, max_threshold_percentage):
        """Sets the max_threshold_percentage of this CapacityDashboardUsage.

        This indicates the maximum threshold percentage for object type.   # noqa: E501

        :param max_threshold_percentage: The max_threshold_percentage of this CapacityDashboardUsage.  # noqa: E501
        :type: float
        """
        if max_threshold_percentage is None:
            raise ValueError("Invalid value for `max_threshold_percentage`, must not be `None`")  # noqa: E501

        self._max_threshold_percentage = max_threshold_percentage

    @property
    def display_name(self):
        """Gets the display_name of this CapacityDashboardUsage.  # noqa: E501

        Display name for NSX object type.   # noqa: E501

        :return: The display_name of this CapacityDashboardUsage.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CapacityDashboardUsage.

        Display name for NSX object type.   # noqa: E501

        :param display_name: The display_name of this CapacityDashboardUsage.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def severity(self):
        """Gets the severity of this CapacityDashboardUsage.  # noqa: E501

        Severity calculated from percentage usage   # noqa: E501

        :return: The severity of this CapacityDashboardUsage.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CapacityDashboardUsage.

        Severity calculated from percentage usage   # noqa: E501

        :param severity: The severity of this CapacityDashboardUsage.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["INFO", "WARNING", "CRITICAL", "ERROR"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def max_supported_count(self):
        """Gets the max_supported_count of this CapacityDashboardUsage.  # noqa: E501

        This is the maximum supported count for object type in consideration.   # noqa: E501

        :return: The max_supported_count of this CapacityDashboardUsage.  # noqa: E501
        :rtype: int
        """
        return self._max_supported_count

    @max_supported_count.setter
    def max_supported_count(self, max_supported_count):
        """Sets the max_supported_count of this CapacityDashboardUsage.

        This is the maximum supported count for object type in consideration.   # noqa: E501

        :param max_supported_count: The max_supported_count of this CapacityDashboardUsage.  # noqa: E501
        :type: int
        """
        if max_supported_count is None:
            raise ValueError("Invalid value for `max_supported_count`, must not be `None`")  # noqa: E501

        self._max_supported_count = max_supported_count

    @property
    def usage_type(self):
        """Gets the usage_type of this CapacityDashboardUsage.  # noqa: E501

        Indicate the object type for which usage is calculated.   # noqa: E501

        :return: The usage_type of this CapacityDashboardUsage.  # noqa: E501
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """Sets the usage_type of this CapacityDashboardUsage.

        Indicate the object type for which usage is calculated.   # noqa: E501

        :param usage_type: The usage_type of this CapacityDashboardUsage.  # noqa: E501
        :type: str
        """
        if usage_type is None:
            raise ValueError("Invalid value for `usage_type`, must not be `None`")  # noqa: E501

        self._usage_type = usage_type

    @property
    def min_threshold_percentage(self):
        """Gets the min_threshold_percentage of this CapacityDashboardUsage.  # noqa: E501

        This indicates the minimum threshold percentage for object type.   # noqa: E501

        :return: The min_threshold_percentage of this CapacityDashboardUsage.  # noqa: E501
        :rtype: float
        """
        return self._min_threshold_percentage

    @min_threshold_percentage.setter
    def min_threshold_percentage(self, min_threshold_percentage):
        """Sets the min_threshold_percentage of this CapacityDashboardUsage.

        This indicates the minimum threshold percentage for object type.   # noqa: E501

        :param min_threshold_percentage: The min_threshold_percentage of this CapacityDashboardUsage.  # noqa: E501
        :type: float
        """
        if min_threshold_percentage is None:
            raise ValueError("Invalid value for `min_threshold_percentage`, must not be `None`")  # noqa: E501

        self._min_threshold_percentage = min_threshold_percentage

    @property
    def current_usage_percentage(self):
        """Gets the current_usage_percentage of this CapacityDashboardUsage.  # noqa: E501

        Current usage percentage for object type   # noqa: E501

        :return: The current_usage_percentage of this CapacityDashboardUsage.  # noqa: E501
        :rtype: float
        """
        return self._current_usage_percentage

    @current_usage_percentage.setter
    def current_usage_percentage(self, current_usage_percentage):
        """Sets the current_usage_percentage of this CapacityDashboardUsage.

        Current usage percentage for object type   # noqa: E501

        :param current_usage_percentage: The current_usage_percentage of this CapacityDashboardUsage.  # noqa: E501
        :type: float
        """
        if current_usage_percentage is None:
            raise ValueError("Invalid value for `current_usage_percentage`, must not be `None`")  # noqa: E501

        self._current_usage_percentage = current_usage_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CapacityDashboardUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityDashboardUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
