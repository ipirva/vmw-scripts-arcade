# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoutesPerTransportNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'routes': 'list[RouteDetails]',
        'source_address': 'str',
        'transport_node_id': 'str'
    }

    attribute_map = {
        'routes': 'routes',
        'source_address': 'source_address',
        'transport_node_id': 'transport_node_id'
    }

    def __init__(self, routes=None, source_address=None, transport_node_id=None):  # noqa: E501
        """RoutesPerTransportNode - a model defined in Swagger"""  # noqa: E501
        self._routes = None
        self._source_address = None
        self._transport_node_id = None
        self.discriminator = None
        if routes is not None:
            self.routes = routes
        if source_address is not None:
            self.source_address = source_address
        if transport_node_id is not None:
            self.transport_node_id = transport_node_id

    @property
    def routes(self):
        """Gets the routes of this RoutesPerTransportNode.  # noqa: E501

        Array of BGP neighbor route details for this transport node.   # noqa: E501

        :return: The routes of this RoutesPerTransportNode.  # noqa: E501
        :rtype: list[RouteDetails]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this RoutesPerTransportNode.

        Array of BGP neighbor route details for this transport node.   # noqa: E501

        :param routes: The routes of this RoutesPerTransportNode.  # noqa: E501
        :type: list[RouteDetails]
        """

        self._routes = routes

    @property
    def source_address(self):
        """Gets the source_address of this RoutesPerTransportNode.  # noqa: E501

        BGP neighbor source address.  # noqa: E501

        :return: The source_address of this RoutesPerTransportNode.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this RoutesPerTransportNode.

        BGP neighbor source address.  # noqa: E501

        :param source_address: The source_address of this RoutesPerTransportNode.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def transport_node_id(self):
        """Gets the transport_node_id of this RoutesPerTransportNode.  # noqa: E501

        Transport node id  # noqa: E501

        :return: The transport_node_id of this RoutesPerTransportNode.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_id

    @transport_node_id.setter
    def transport_node_id(self, transport_node_id):
        """Sets the transport_node_id of this RoutesPerTransportNode.

        Transport node id  # noqa: E501

        :param transport_node_id: The transport_node_id of this RoutesPerTransportNode.  # noqa: E501
        :type: str
        """

        self._transport_node_id = transport_node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutesPerTransportNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutesPerTransportNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
