# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class InterfaceNeighborProperties(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ifindex': 'int',
        'neighbors': 'list[NeighborProperties]',
        'mac': 'str',
        'name': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'ifindex': 'ifindex',
        'neighbors': 'neighbors',
        'mac': 'mac',
        'name': 'name'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, ifindex=None, neighbors=None, mac=None, name=None, *args, **kwargs):  # noqa: E501
        """InterfaceNeighborProperties - a model defined in Swagger"""  # noqa: E501
        self._ifindex = None
        self._neighbors = None
        self._mac = None
        self._name = None
        self.discriminator = None
        if ifindex is not None:
            self.ifindex = ifindex
        if neighbors is not None:
            self.neighbors = neighbors
        if mac is not None:
            self.mac = mac
        if name is not None:
            self.name = name
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def ifindex(self):
        """Gets the ifindex of this InterfaceNeighborProperties.  # noqa: E501

        Interface index  # noqa: E501

        :return: The ifindex of this InterfaceNeighborProperties.  # noqa: E501
        :rtype: int
        """
        return self._ifindex

    @ifindex.setter
    def ifindex(self, ifindex):
        """Sets the ifindex of this InterfaceNeighborProperties.

        Interface index  # noqa: E501

        :param ifindex: The ifindex of this InterfaceNeighborProperties.  # noqa: E501
        :type: int
        """

        self._ifindex = ifindex

    @property
    def neighbors(self):
        """Gets the neighbors of this InterfaceNeighborProperties.  # noqa: E501

        Neighbor properties  # noqa: E501

        :return: The neighbors of this InterfaceNeighborProperties.  # noqa: E501
        :rtype: list[NeighborProperties]
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this InterfaceNeighborProperties.

        Neighbor properties  # noqa: E501

        :param neighbors: The neighbors of this InterfaceNeighborProperties.  # noqa: E501
        :type: list[NeighborProperties]
        """

        self._neighbors = neighbors

    @property
    def mac(self):
        """Gets the mac of this InterfaceNeighborProperties.  # noqa: E501

        Interface MAC address  # noqa: E501

        :return: The mac of this InterfaceNeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this InterfaceNeighborProperties.

        Interface MAC address  # noqa: E501

        :param mac: The mac of this InterfaceNeighborProperties.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def name(self):
        """Gets the name of this InterfaceNeighborProperties.  # noqa: E501

        Interface Name  # noqa: E501

        :return: The name of this InterfaceNeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterfaceNeighborProperties.

        Interface Name  # noqa: E501

        :param name: The name of this InterfaceNeighborProperties.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterfaceNeighborProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterfaceNeighborProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
