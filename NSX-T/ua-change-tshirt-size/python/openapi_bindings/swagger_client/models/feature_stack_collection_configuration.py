# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class FeatureStackCollectionConfiguration(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_stack_name': 'str',
        'client_type_collection_configurations': 'list[ClientTypeCollectionConfiguration]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'feature_stack_name': 'feature_stack_name',
        'client_type_collection_configurations': 'client_type_collection_configurations'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, feature_stack_name=None, client_type_collection_configurations=None, *args, **kwargs):  # noqa: E501
        """FeatureStackCollectionConfiguration - a model defined in Swagger"""  # noqa: E501
        self._feature_stack_name = None
        self._client_type_collection_configurations = None
        self.discriminator = None
        self.feature_stack_name = feature_stack_name
        if client_type_collection_configurations is not None:
            self.client_type_collection_configurations = client_type_collection_configurations
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def feature_stack_name(self):
        """Gets the feature_stack_name of this FeatureStackCollectionConfiguration.  # noqa: E501

        The name of the feature stack  # noqa: E501

        :return: The feature_stack_name of this FeatureStackCollectionConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._feature_stack_name

    @feature_stack_name.setter
    def feature_stack_name(self, feature_stack_name):
        """Sets the feature_stack_name of this FeatureStackCollectionConfiguration.

        The name of the feature stack  # noqa: E501

        :param feature_stack_name: The feature_stack_name of this FeatureStackCollectionConfiguration.  # noqa: E501
        :type: str
        """
        if feature_stack_name is None:
            raise ValueError("Invalid value for `feature_stack_name`, must not be `None`")  # noqa: E501

        self._feature_stack_name = feature_stack_name

    @property
    def client_type_collection_configurations(self):
        """Gets the client_type_collection_configurations of this FeatureStackCollectionConfiguration.  # noqa: E501

        The set of client type data collection configurations  # noqa: E501

        :return: The client_type_collection_configurations of this FeatureStackCollectionConfiguration.  # noqa: E501
        :rtype: list[ClientTypeCollectionConfiguration]
        """
        return self._client_type_collection_configurations

    @client_type_collection_configurations.setter
    def client_type_collection_configurations(self, client_type_collection_configurations):
        """Sets the client_type_collection_configurations of this FeatureStackCollectionConfiguration.

        The set of client type data collection configurations  # noqa: E501

        :param client_type_collection_configurations: The client_type_collection_configurations of this FeatureStackCollectionConfiguration.  # noqa: E501
        :type: list[ClientTypeCollectionConfiguration]
        """

        self._client_type_collection_configurations = client_type_collection_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureStackCollectionConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureStackCollectionConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
