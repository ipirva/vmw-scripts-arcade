# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterGroupMemberStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_ip': 'str',
        'member_fqdn': 'str',
        'member_status': 'str',
        'member_uuid': 'str'
    }

    attribute_map = {
        'member_ip': 'member_ip',
        'member_fqdn': 'member_fqdn',
        'member_status': 'member_status',
        'member_uuid': 'member_uuid'
    }

    def __init__(self, member_ip=None, member_fqdn=None, member_status=None, member_uuid=None):  # noqa: E501
        """ClusterGroupMemberStatus - a model defined in Swagger"""  # noqa: E501
        self._member_ip = None
        self._member_fqdn = None
        self._member_status = None
        self._member_uuid = None
        self.discriminator = None
        if member_ip is not None:
            self.member_ip = member_ip
        if member_fqdn is not None:
            self.member_fqdn = member_fqdn
        if member_status is not None:
            self.member_status = member_status
        if member_uuid is not None:
            self.member_uuid = member_uuid

    @property
    def member_ip(self):
        """Gets the member_ip of this ClusterGroupMemberStatus.  # noqa: E501

        IP of the group member  # noqa: E501

        :return: The member_ip of this ClusterGroupMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._member_ip

    @member_ip.setter
    def member_ip(self, member_ip):
        """Sets the member_ip of this ClusterGroupMemberStatus.

        IP of the group member  # noqa: E501

        :param member_ip: The member_ip of this ClusterGroupMemberStatus.  # noqa: E501
        :type: str
        """

        self._member_ip = member_ip

    @property
    def member_fqdn(self):
        """Gets the member_fqdn of this ClusterGroupMemberStatus.  # noqa: E501

        FQDN of the group member  # noqa: E501

        :return: The member_fqdn of this ClusterGroupMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._member_fqdn

    @member_fqdn.setter
    def member_fqdn(self, member_fqdn):
        """Sets the member_fqdn of this ClusterGroupMemberStatus.

        FQDN of the group member  # noqa: E501

        :param member_fqdn: The member_fqdn of this ClusterGroupMemberStatus.  # noqa: E501
        :type: str
        """

        self._member_fqdn = member_fqdn

    @property
    def member_status(self):
        """Gets the member_status of this ClusterGroupMemberStatus.  # noqa: E501

        Status of the group member  # noqa: E501

        :return: The member_status of this ClusterGroupMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._member_status

    @member_status.setter
    def member_status(self, member_status):
        """Sets the member_status of this ClusterGroupMemberStatus.

        Status of the group member  # noqa: E501

        :param member_status: The member_status of this ClusterGroupMemberStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "UNKNOWN"]  # noqa: E501
        if member_status not in allowed_values:
            raise ValueError(
                "Invalid value for `member_status` ({0}), must be one of {1}"  # noqa: E501
                .format(member_status, allowed_values)
            )

        self._member_status = member_status

    @property
    def member_uuid(self):
        """Gets the member_uuid of this ClusterGroupMemberStatus.  # noqa: E501

        UUID of the group member  # noqa: E501

        :return: The member_uuid of this ClusterGroupMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._member_uuid

    @member_uuid.setter
    def member_uuid(self, member_uuid):
        """Sets the member_uuid of this ClusterGroupMemberStatus.

        UUID of the group member  # noqa: E501

        :param member_uuid: The member_uuid of this ClusterGroupMemberStatus.  # noqa: E501
        :type: str
        """

        self._member_uuid = member_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterGroupMemberStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterGroupMemberStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
