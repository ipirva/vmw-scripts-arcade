# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DestinationNsxApiEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_nsx_ip': 'str',
        'destination_nsx_password': 'str',
        'destination_nsx_port': 'int',
        'destination_nsx_username': 'str'
    }

    attribute_map = {
        'destination_nsx_ip': 'destination_nsx_ip',
        'destination_nsx_password': 'destination_nsx_password',
        'destination_nsx_port': 'destination_nsx_port',
        'destination_nsx_username': 'destination_nsx_username'
    }

    def __init__(self, destination_nsx_ip=None, destination_nsx_password=None, destination_nsx_port=443, destination_nsx_username=None):  # noqa: E501
        """DestinationNsxApiEndpoint - a model defined in Swagger"""  # noqa: E501
        self._destination_nsx_ip = None
        self._destination_nsx_password = None
        self._destination_nsx_port = None
        self._destination_nsx_username = None
        self.discriminator = None
        self.destination_nsx_ip = destination_nsx_ip
        if destination_nsx_password is not None:
            self.destination_nsx_password = destination_nsx_password
        if destination_nsx_port is not None:
            self.destination_nsx_port = destination_nsx_port
        if destination_nsx_username is not None:
            self.destination_nsx_username = destination_nsx_username

    @property
    def destination_nsx_ip(self):
        """Gets the destination_nsx_ip of this DestinationNsxApiEndpoint.  # noqa: E501

        IP address or host name of the destination NSX manager to which the config will be migrated.  # noqa: E501

        :return: The destination_nsx_ip of this DestinationNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._destination_nsx_ip

    @destination_nsx_ip.setter
    def destination_nsx_ip(self, destination_nsx_ip):
        """Sets the destination_nsx_ip of this DestinationNsxApiEndpoint.

        IP address or host name of the destination NSX manager to which the config will be migrated.  # noqa: E501

        :param destination_nsx_ip: The destination_nsx_ip of this DestinationNsxApiEndpoint.  # noqa: E501
        :type: str
        """
        if destination_nsx_ip is None:
            raise ValueError("Invalid value for `destination_nsx_ip`, must not be `None`")  # noqa: E501

        self._destination_nsx_ip = destination_nsx_ip

    @property
    def destination_nsx_password(self):
        """Gets the destination_nsx_password of this DestinationNsxApiEndpoint.  # noqa: E501

        Valid password for connecting to the destination NSX manager.  # noqa: E501

        :return: The destination_nsx_password of this DestinationNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._destination_nsx_password

    @destination_nsx_password.setter
    def destination_nsx_password(self, destination_nsx_password):
        """Sets the destination_nsx_password of this DestinationNsxApiEndpoint.

        Valid password for connecting to the destination NSX manager.  # noqa: E501

        :param destination_nsx_password: The destination_nsx_password of this DestinationNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._destination_nsx_password = destination_nsx_password

    @property
    def destination_nsx_port(self):
        """Gets the destination_nsx_port of this DestinationNsxApiEndpoint.  # noqa: E501

        Destination NSX manager port that will be used to apply details.  # noqa: E501

        :return: The destination_nsx_port of this DestinationNsxApiEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._destination_nsx_port

    @destination_nsx_port.setter
    def destination_nsx_port(self, destination_nsx_port):
        """Sets the destination_nsx_port of this DestinationNsxApiEndpoint.

        Destination NSX manager port that will be used to apply details.  # noqa: E501

        :param destination_nsx_port: The destination_nsx_port of this DestinationNsxApiEndpoint.  # noqa: E501
        :type: int
        """

        self._destination_nsx_port = destination_nsx_port

    @property
    def destination_nsx_username(self):
        """Gets the destination_nsx_username of this DestinationNsxApiEndpoint.  # noqa: E501

        Valid username for connecting to the destination NSX manager.  # noqa: E501

        :return: The destination_nsx_username of this DestinationNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._destination_nsx_username

    @destination_nsx_username.setter
    def destination_nsx_username(self, destination_nsx_username):
        """Sets the destination_nsx_username of this DestinationNsxApiEndpoint.

        Valid username for connecting to the destination NSX manager.  # noqa: E501

        :param destination_nsx_username: The destination_nsx_username of this DestinationNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._destination_nsx_username = destination_nsx_username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DestinationNsxApiEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinationNsxApiEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
