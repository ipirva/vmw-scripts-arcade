# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class PacketCaptureSession(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sessionid': 'str',
        'filelocation': 'str',
        'filesize': 'int',
        'sessionname': 'str',
        'errormsg': 'str',
        'endtime': 'int',
        'request': 'PacketCaptureRequest',
        'starttime': 'int',
        'sessionstatus': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'sessionid': 'sessionid',
        'filelocation': 'filelocation',
        'filesize': 'filesize',
        'sessionname': 'sessionname',
        'errormsg': 'errormsg',
        'endtime': 'endtime',
        'request': 'request',
        'starttime': 'starttime',
        'sessionstatus': 'sessionstatus'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, sessionid=None, filelocation=None, filesize=None, sessionname=None, errormsg=None, endtime=None, request=None, starttime=None, sessionstatus=None, *args, **kwargs):  # noqa: E501
        """PacketCaptureSession - a model defined in Swagger"""  # noqa: E501
        self._sessionid = None
        self._filelocation = None
        self._filesize = None
        self._sessionname = None
        self._errormsg = None
        self._endtime = None
        self._request = None
        self._starttime = None
        self._sessionstatus = None
        self.discriminator = None
        self.sessionid = sessionid
        if filelocation is not None:
            self.filelocation = filelocation
        if filesize is not None:
            self.filesize = filesize
        if sessionname is not None:
            self.sessionname = sessionname
        if errormsg is not None:
            self.errormsg = errormsg
        if endtime is not None:
            self.endtime = endtime
        self.request = request
        if starttime is not None:
            self.starttime = starttime
        self.sessionstatus = sessionstatus
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def sessionid(self):
        """Gets the sessionid of this PacketCaptureSession.  # noqa: E501

        Packet capture session id.  # noqa: E501

        :return: The sessionid of this PacketCaptureSession.  # noqa: E501
        :rtype: str
        """
        return self._sessionid

    @sessionid.setter
    def sessionid(self, sessionid):
        """Sets the sessionid of this PacketCaptureSession.

        Packet capture session id.  # noqa: E501

        :param sessionid: The sessionid of this PacketCaptureSession.  # noqa: E501
        :type: str
        """
        if sessionid is None:
            raise ValueError("Invalid value for `sessionid`, must not be `None`")  # noqa: E501

        self._sessionid = sessionid

    @property
    def filelocation(self):
        """Gets the filelocation of this PacketCaptureSession.  # noqa: E501

        Packet capture file location.  # noqa: E501

        :return: The filelocation of this PacketCaptureSession.  # noqa: E501
        :rtype: str
        """
        return self._filelocation

    @filelocation.setter
    def filelocation(self, filelocation):
        """Sets the filelocation of this PacketCaptureSession.

        Packet capture file location.  # noqa: E501

        :param filelocation: The filelocation of this PacketCaptureSession.  # noqa: E501
        :type: str
        """

        self._filelocation = filelocation

    @property
    def filesize(self):
        """Gets the filesize of this PacketCaptureSession.  # noqa: E501

        Packet capture file Size in bytes.  # noqa: E501

        :return: The filesize of this PacketCaptureSession.  # noqa: E501
        :rtype: int
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this PacketCaptureSession.

        Packet capture file Size in bytes.  # noqa: E501

        :param filesize: The filesize of this PacketCaptureSession.  # noqa: E501
        :type: int
        """

        self._filesize = filesize

    @property
    def sessionname(self):
        """Gets the sessionname of this PacketCaptureSession.  # noqa: E501

        Packet capture session name.  # noqa: E501

        :return: The sessionname of this PacketCaptureSession.  # noqa: E501
        :rtype: str
        """
        return self._sessionname

    @sessionname.setter
    def sessionname(self, sessionname):
        """Sets the sessionname of this PacketCaptureSession.

        Packet capture session name.  # noqa: E501

        :param sessionname: The sessionname of this PacketCaptureSession.  # noqa: E501
        :type: str
        """

        self._sessionname = sessionname

    @property
    def errormsg(self):
        """Gets the errormsg of this PacketCaptureSession.  # noqa: E501

        Error messasge in capture.  # noqa: E501

        :return: The errormsg of this PacketCaptureSession.  # noqa: E501
        :rtype: str
        """
        return self._errormsg

    @errormsg.setter
    def errormsg(self, errormsg):
        """Sets the errormsg of this PacketCaptureSession.

        Error messasge in capture.  # noqa: E501

        :param errormsg: The errormsg of this PacketCaptureSession.  # noqa: E501
        :type: str
        """

        self._errormsg = errormsg

    @property
    def endtime(self):
        """Gets the endtime of this PacketCaptureSession.  # noqa: E501

        Timestamp when session was stopped in epoch millisecond.  # noqa: E501

        :return: The endtime of this PacketCaptureSession.  # noqa: E501
        :rtype: int
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this PacketCaptureSession.

        Timestamp when session was stopped in epoch millisecond.  # noqa: E501

        :param endtime: The endtime of this PacketCaptureSession.  # noqa: E501
        :type: int
        """

        self._endtime = endtime

    @property
    def request(self):
        """Gets the request of this PacketCaptureSession.  # noqa: E501


        :return: The request of this PacketCaptureSession.  # noqa: E501
        :rtype: PacketCaptureRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this PacketCaptureSession.


        :param request: The request of this PacketCaptureSession.  # noqa: E501
        :type: PacketCaptureRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")  # noqa: E501

        self._request = request

    @property
    def starttime(self):
        """Gets the starttime of this PacketCaptureSession.  # noqa: E501

        Timestamp when session was created in epoch millisecond.  # noqa: E501

        :return: The starttime of this PacketCaptureSession.  # noqa: E501
        :rtype: int
        """
        return self._starttime

    @starttime.setter
    def starttime(self, starttime):
        """Sets the starttime of this PacketCaptureSession.

        Timestamp when session was created in epoch millisecond.  # noqa: E501

        :param starttime: The starttime of this PacketCaptureSession.  # noqa: E501
        :type: int
        """

        self._starttime = starttime

    @property
    def sessionstatus(self):
        """Gets the sessionstatus of this PacketCaptureSession.  # noqa: E501

        Packet capture session status.  # noqa: E501

        :return: The sessionstatus of this PacketCaptureSession.  # noqa: E501
        :rtype: str
        """
        return self._sessionstatus

    @sessionstatus.setter
    def sessionstatus(self, sessionstatus):
        """Sets the sessionstatus of this PacketCaptureSession.

        Packet capture session status.  # noqa: E501

        :param sessionstatus: The sessionstatus of this PacketCaptureSession.  # noqa: E501
        :type: str
        """
        if sessionstatus is None:
            raise ValueError("Invalid value for `sessionstatus`, must not be `None`")  # noqa: E501
        allowed_values = ["CREATED", "STARTED", "STOPPED", "FINISHED", "ERROR"]  # noqa: E501
        if sessionstatus not in allowed_values:
            raise ValueError(
                "Invalid value for `sessionstatus` ({0}), must be one of {1}"  # noqa: E501
                .format(sessionstatus, allowed_values)
            )

        self._sessionstatus = sessionstatus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketCaptureSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketCaptureSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
