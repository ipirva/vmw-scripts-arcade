# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ServiceManager(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port': 'int',
        'service_ids': 'list[ResourceReference]',
        'authentication_scheme': 'CallbackAuthenticationScheme',
        'thumbprint': 'str',
        'vendor_id': 'str',
        'uri': 'str',
        'server': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'port': 'port',
        'service_ids': 'service_ids',
        'authentication_scheme': 'authentication_scheme',
        'thumbprint': 'thumbprint',
        'vendor_id': 'vendor_id',
        'uri': 'uri',
        'server': 'server'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, port=None, service_ids=None, authentication_scheme=None, thumbprint=None, vendor_id=None, uri=None, server=None, *args, **kwargs):  # noqa: E501
        """ServiceManager - a model defined in Swagger"""  # noqa: E501
        self._port = None
        self._service_ids = None
        self._authentication_scheme = None
        self._thumbprint = None
        self._vendor_id = None
        self._uri = None
        self._server = None
        self.discriminator = None
        self.port = port
        self.service_ids = service_ids
        self.authentication_scheme = authentication_scheme
        if thumbprint is not None:
            self.thumbprint = thumbprint
        if vendor_id is not None:
            self.vendor_id = vendor_id
        self.uri = uri
        self.server = server
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def port(self):
        """Gets the port of this ServiceManager.  # noqa: E501

        Integer port value to specify a standard/non-standard HTTPS port.  # noqa: E501

        :return: The port of this ServiceManager.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServiceManager.

        Integer port value to specify a standard/non-standard HTTPS port.  # noqa: E501

        :param port: The port of this ServiceManager.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def service_ids(self):
        """Gets the service_ids of this ServiceManager.  # noqa: E501

        The IDs of services, provided by partner.  # noqa: E501

        :return: The service_ids of this ServiceManager.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this ServiceManager.

        The IDs of services, provided by partner.  # noqa: E501

        :param service_ids: The service_ids of this ServiceManager.  # noqa: E501
        :type: list[ResourceReference]
        """
        if service_ids is None:
            raise ValueError("Invalid value for `service_ids`, must not be `None`")  # noqa: E501

        self._service_ids = service_ids

    @property
    def authentication_scheme(self):
        """Gets the authentication_scheme of this ServiceManager.  # noqa: E501


        :return: The authentication_scheme of this ServiceManager.  # noqa: E501
        :rtype: CallbackAuthenticationScheme
        """
        return self._authentication_scheme

    @authentication_scheme.setter
    def authentication_scheme(self, authentication_scheme):
        """Sets the authentication_scheme of this ServiceManager.


        :param authentication_scheme: The authentication_scheme of this ServiceManager.  # noqa: E501
        :type: CallbackAuthenticationScheme
        """
        if authentication_scheme is None:
            raise ValueError("Invalid value for `authentication_scheme`, must not be `None`")  # noqa: E501

        self._authentication_scheme = authentication_scheme

    @property
    def thumbprint(self):
        """Gets the thumbprint of this ServiceManager.  # noqa: E501

        Thumbprint (SHA-256 hash represented in lower case hex) for the certificate on the partner console. This will be required to establish secure communication with the console and to avoid man-in-the-middle attacks.  # noqa: E501

        :return: The thumbprint of this ServiceManager.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this ServiceManager.

        Thumbprint (SHA-256 hash represented in lower case hex) for the certificate on the partner console. This will be required to establish secure communication with the console and to avoid man-in-the-middle attacks.  # noqa: E501

        :param thumbprint: The thumbprint of this ServiceManager.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ServiceManager.  # noqa: E501

        Id which is unique to a vendor or partner for which the service is created.  # noqa: E501

        :return: The vendor_id of this ServiceManager.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ServiceManager.

        Id which is unique to a vendor or partner for which the service is created.  # noqa: E501

        :param vendor_id: The vendor_id of this ServiceManager.  # noqa: E501
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def uri(self):
        """Gets the uri of this ServiceManager.  # noqa: E501

        URI on which notification requests should be made on the specified server.  # noqa: E501

        :return: The uri of this ServiceManager.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ServiceManager.

        URI on which notification requests should be made on the specified server.  # noqa: E501

        :param uri: The uri of this ServiceManager.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def server(self):
        """Gets the server of this ServiceManager.  # noqa: E501

        IP address or fully qualified domain name of the partner REST server.  # noqa: E501

        :return: The server of this ServiceManager.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ServiceManager.

        IP address or fully qualified domain name of the partner REST server.  # noqa: E501

        :param server: The server of this ServiceManager.  # noqa: E501
        :type: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceManager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
