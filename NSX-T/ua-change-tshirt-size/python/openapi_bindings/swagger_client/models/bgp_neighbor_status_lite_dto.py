# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BgpNeighborStatusLiteDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_state': 'str',
        'remote_site': 'ResourceReference',
        'source_address': 'str',
        'neighbor_address': 'str'
    }

    attribute_map = {
        'connection_state': 'connection_state',
        'remote_site': 'remote_site',
        'source_address': 'source_address',
        'neighbor_address': 'neighbor_address'
    }

    def __init__(self, connection_state=None, remote_site=None, source_address=None, neighbor_address=None):  # noqa: E501
        """BgpNeighborStatusLiteDto - a model defined in Swagger"""  # noqa: E501
        self._connection_state = None
        self._remote_site = None
        self._source_address = None
        self._neighbor_address = None
        self.discriminator = None
        if connection_state is not None:
            self.connection_state = connection_state
        if remote_site is not None:
            self.remote_site = remote_site
        if source_address is not None:
            self.source_address = source_address
        if neighbor_address is not None:
            self.neighbor_address = neighbor_address

    @property
    def connection_state(self):
        """Gets the connection_state of this BgpNeighborStatusLiteDto.  # noqa: E501

        Current state of the BGP session.  # noqa: E501

        :return: The connection_state of this BgpNeighborStatusLiteDto.  # noqa: E501
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this BgpNeighborStatusLiteDto.

        Current state of the BGP session.  # noqa: E501

        :param connection_state: The connection_state of this BgpNeighborStatusLiteDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "IDLE", "CONNECT", "ACTIVE", "OPEN_SENT", "OPEN_CONFIRM", "ESTABLISHED", "UNKNOWN"]  # noqa: E501
        if connection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_state` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_state, allowed_values)
            )

        self._connection_state = connection_state

    @property
    def remote_site(self):
        """Gets the remote_site of this BgpNeighborStatusLiteDto.  # noqa: E501


        :return: The remote_site of this BgpNeighborStatusLiteDto.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._remote_site

    @remote_site.setter
    def remote_site(self, remote_site):
        """Sets the remote_site of this BgpNeighborStatusLiteDto.


        :param remote_site: The remote_site of this BgpNeighborStatusLiteDto.  # noqa: E501
        :type: ResourceReference
        """

        self._remote_site = remote_site

    @property
    def source_address(self):
        """Gets the source_address of this BgpNeighborStatusLiteDto.  # noqa: E501

        Source Ip address.  # noqa: E501

        :return: The source_address of this BgpNeighborStatusLiteDto.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this BgpNeighborStatusLiteDto.

        Source Ip address.  # noqa: E501

        :param source_address: The source_address of this BgpNeighborStatusLiteDto.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this BgpNeighborStatusLiteDto.  # noqa: E501

        Ip address of BGP neighbor.  # noqa: E501

        :return: The neighbor_address of this BgpNeighborStatusLiteDto.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this BgpNeighborStatusLiteDto.

        Ip address of BGP neighbor.  # noqa: E501

        :param neighbor_address: The neighbor_address of this BgpNeighborStatusLiteDto.  # noqa: E501
        :type: str
        """

        self._neighbor_address = neighbor_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpNeighborStatusLiteDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighborStatusLiteDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
