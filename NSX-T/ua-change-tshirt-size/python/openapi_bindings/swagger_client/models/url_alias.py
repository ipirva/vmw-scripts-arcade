# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UrlAlias(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'alias': 'str',
        'query': 'str'
    }

    attribute_map = {
        'url': 'url',
        'alias': 'alias',
        'query': 'query'
    }

    def __init__(self, url=None, alias=None, query=None):  # noqa: E501
        """UrlAlias - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._alias = None
        self._query = None
        self.discriminator = None
        self.url = url
        if alias is not None:
            self.alias = alias
        if query is not None:
            self.query = query

    @property
    def url(self):
        """Gets the url of this UrlAlias.  # noqa: E501

        Url to fetch data from.  # noqa: E501

        :return: The url of this UrlAlias.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UrlAlias.

        Url to fetch data from.  # noqa: E501

        :param url: The url of this UrlAlias.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def alias(self):
        """Gets the alias of this UrlAlias.  # noqa: E501

        Short name or alias of url, if any. If not specified, the url can be referenced by its index in the array of urls of the datasource instance as $<index> (for example, $0).  # noqa: E501

        :return: The alias of this UrlAlias.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this UrlAlias.

        Short name or alias of url, if any. If not specified, the url can be referenced by its index in the array of urls of the datasource instance as $<index> (for example, $0).  # noqa: E501

        :param alias: The alias of this UrlAlias.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def query(self):
        """Gets the query of this UrlAlias.  # noqa: E501

        Search query to be applied, if any. If query string is not provided, it will be ignored.  # noqa: E501

        :return: The query of this UrlAlias.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this UrlAlias.

        Search query to be applied, if any. If query string is not provided, it will be ignored.  # noqa: E501

        :param query: The query of this UrlAlias.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UrlAlias, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UrlAlias):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
