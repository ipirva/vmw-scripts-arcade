# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.cluster_backup_info_list_result import ClusterBackupInfoListResult  # noqa: F401,E501

class BackupOverview(ClusterBackupInfoListResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_backup_operation_status': 'CurrentBackupOperationStatus',
        'backup_operation_history': 'BackupOperationHistory',
        'backup_config': 'BackupConfiguration',
        'restore_status': 'ClusterRestoreStatus'
    }
    if hasattr(ClusterBackupInfoListResult, "swagger_types"):
        swagger_types.update(ClusterBackupInfoListResult.swagger_types)

    attribute_map = {
        'current_backup_operation_status': 'current_backup_operation_status',
        'backup_operation_history': 'backup_operation_history',
        'backup_config': 'backup_config',
        'restore_status': 'restore_status'
    }
    if hasattr(ClusterBackupInfoListResult, "attribute_map"):
        attribute_map.update(ClusterBackupInfoListResult.attribute_map)

    def __init__(self, current_backup_operation_status=None, backup_operation_history=None, backup_config=None, restore_status=None, *args, **kwargs):  # noqa: E501
        """BackupOverview - a model defined in Swagger"""  # noqa: E501
        self._current_backup_operation_status = None
        self._backup_operation_history = None
        self._backup_config = None
        self._restore_status = None
        self.discriminator = None
        self.current_backup_operation_status = current_backup_operation_status
        self.backup_operation_history = backup_operation_history
        self.backup_config = backup_config
        self.restore_status = restore_status
        ClusterBackupInfoListResult.__init__(self, *args, **kwargs)

    @property
    def current_backup_operation_status(self):
        """Gets the current_backup_operation_status of this BackupOverview.  # noqa: E501


        :return: The current_backup_operation_status of this BackupOverview.  # noqa: E501
        :rtype: CurrentBackupOperationStatus
        """
        return self._current_backup_operation_status

    @current_backup_operation_status.setter
    def current_backup_operation_status(self, current_backup_operation_status):
        """Sets the current_backup_operation_status of this BackupOverview.


        :param current_backup_operation_status: The current_backup_operation_status of this BackupOverview.  # noqa: E501
        :type: CurrentBackupOperationStatus
        """
        if current_backup_operation_status is None:
            raise ValueError("Invalid value for `current_backup_operation_status`, must not be `None`")  # noqa: E501

        self._current_backup_operation_status = current_backup_operation_status

    @property
    def backup_operation_history(self):
        """Gets the backup_operation_history of this BackupOverview.  # noqa: E501


        :return: The backup_operation_history of this BackupOverview.  # noqa: E501
        :rtype: BackupOperationHistory
        """
        return self._backup_operation_history

    @backup_operation_history.setter
    def backup_operation_history(self, backup_operation_history):
        """Sets the backup_operation_history of this BackupOverview.


        :param backup_operation_history: The backup_operation_history of this BackupOverview.  # noqa: E501
        :type: BackupOperationHistory
        """
        if backup_operation_history is None:
            raise ValueError("Invalid value for `backup_operation_history`, must not be `None`")  # noqa: E501

        self._backup_operation_history = backup_operation_history

    @property
    def backup_config(self):
        """Gets the backup_config of this BackupOverview.  # noqa: E501


        :return: The backup_config of this BackupOverview.  # noqa: E501
        :rtype: BackupConfiguration
        """
        return self._backup_config

    @backup_config.setter
    def backup_config(self, backup_config):
        """Sets the backup_config of this BackupOverview.


        :param backup_config: The backup_config of this BackupOverview.  # noqa: E501
        :type: BackupConfiguration
        """
        if backup_config is None:
            raise ValueError("Invalid value for `backup_config`, must not be `None`")  # noqa: E501

        self._backup_config = backup_config

    @property
    def restore_status(self):
        """Gets the restore_status of this BackupOverview.  # noqa: E501


        :return: The restore_status of this BackupOverview.  # noqa: E501
        :rtype: ClusterRestoreStatus
        """
        return self._restore_status

    @restore_status.setter
    def restore_status(self, restore_status):
        """Sets the restore_status of this BackupOverview.


        :param restore_status: The restore_status of this BackupOverview.  # noqa: E501
        :type: ClusterRestoreStatus
        """
        if restore_status is None:
            raise ValueError("Invalid value for `restore_status`, must not be `None`")  # noqa: E501

        self._restore_status = restore_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
