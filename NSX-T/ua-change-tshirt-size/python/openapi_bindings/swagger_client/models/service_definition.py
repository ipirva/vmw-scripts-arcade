# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ServiceDefinition(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_deployment_spec': 'ServiceDeploymentSpec',
        'service_capability': 'ServiceCapability',
        'functionalities': 'list[str]',
        'attachment_point': 'list[str]',
        'service_manager_id': 'str',
        'vendor_id': 'str',
        'on_failure_policy': 'str',
        'transports': 'list[str]',
        'implementations': 'list[str]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'service_deployment_spec': 'service_deployment_spec',
        'service_capability': 'service_capability',
        'functionalities': 'functionalities',
        'attachment_point': 'attachment_point',
        'service_manager_id': 'service_manager_id',
        'vendor_id': 'vendor_id',
        'on_failure_policy': 'on_failure_policy',
        'transports': 'transports',
        'implementations': 'implementations'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, service_deployment_spec=None, service_capability=None, functionalities=None, attachment_point=None, service_manager_id=None, vendor_id=None, on_failure_policy='ALLOW', transports=None, implementations=None, *args, **kwargs):  # noqa: E501
        """ServiceDefinition - a model defined in Swagger"""  # noqa: E501
        self._service_deployment_spec = None
        self._service_capability = None
        self._functionalities = None
        self._attachment_point = None
        self._service_manager_id = None
        self._vendor_id = None
        self._on_failure_policy = None
        self._transports = None
        self._implementations = None
        self.discriminator = None
        if service_deployment_spec is not None:
            self.service_deployment_spec = service_deployment_spec
        if service_capability is not None:
            self.service_capability = service_capability
        self.functionalities = functionalities
        if attachment_point is not None:
            self.attachment_point = attachment_point
        if service_manager_id is not None:
            self.service_manager_id = service_manager_id
        self.vendor_id = vendor_id
        if on_failure_policy is not None:
            self.on_failure_policy = on_failure_policy
        if transports is not None:
            self.transports = transports
        self.implementations = implementations
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def service_deployment_spec(self):
        """Gets the service_deployment_spec of this ServiceDefinition.  # noqa: E501


        :return: The service_deployment_spec of this ServiceDefinition.  # noqa: E501
        :rtype: ServiceDeploymentSpec
        """
        return self._service_deployment_spec

    @service_deployment_spec.setter
    def service_deployment_spec(self, service_deployment_spec):
        """Sets the service_deployment_spec of this ServiceDefinition.


        :param service_deployment_spec: The service_deployment_spec of this ServiceDefinition.  # noqa: E501
        :type: ServiceDeploymentSpec
        """

        self._service_deployment_spec = service_deployment_spec

    @property
    def service_capability(self):
        """Gets the service_capability of this ServiceDefinition.  # noqa: E501


        :return: The service_capability of this ServiceDefinition.  # noqa: E501
        :rtype: ServiceCapability
        """
        return self._service_capability

    @service_capability.setter
    def service_capability(self, service_capability):
        """Sets the service_capability of this ServiceDefinition.


        :param service_capability: The service_capability of this ServiceDefinition.  # noqa: E501
        :type: ServiceCapability
        """

        self._service_capability = service_capability

    @property
    def functionalities(self):
        """Gets the functionalities of this ServiceDefinition.  # noqa: E501

        The capabilities provided by the services. Needs to be one or more of the following | NG_FW - Next Generation Firewall | IDS_IPS - Intrusion Detection System / Intrusion Prevention System | NET_MON - Network Monitoring | HCX - Hybrid Cloud Exchange | BYOD - Bring Your Own Device | TLB -  Transparent Load Balancer | EPP - Endpoint Protection.(Third party AntiVirus partners using NXGI should use this functionality for the service)  # noqa: E501

        :return: The functionalities of this ServiceDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._functionalities

    @functionalities.setter
    def functionalities(self, functionalities):
        """Sets the functionalities of this ServiceDefinition.

        The capabilities provided by the services. Needs to be one or more of the following | NG_FW - Next Generation Firewall | IDS_IPS - Intrusion Detection System / Intrusion Prevention System | NET_MON - Network Monitoring | HCX - Hybrid Cloud Exchange | BYOD - Bring Your Own Device | TLB -  Transparent Load Balancer | EPP - Endpoint Protection.(Third party AntiVirus partners using NXGI should use this functionality for the service)  # noqa: E501

        :param functionalities: The functionalities of this ServiceDefinition.  # noqa: E501
        :type: list[str]
        """
        if functionalities is None:
            raise ValueError("Invalid value for `functionalities`, must not be `None`")  # noqa: E501
        allowed_values = ["NG_FW", "IDS_IPS", "NET_MON", "HCX", "BYOD", "EPP", "TLB"]  # noqa: E501
        if not set(functionalities).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `functionalities` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(functionalities) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._functionalities = functionalities

    @property
    def attachment_point(self):
        """Gets the attachment_point of this ServiceDefinition.  # noqa: E501

        The point at which the service is deployed/attached for redirecting the traffic to the the partner appliance. Attachment Point is required if Service caters to any functionality other than EPP.  # noqa: E501

        :return: The attachment_point of this ServiceDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._attachment_point

    @attachment_point.setter
    def attachment_point(self, attachment_point):
        """Sets the attachment_point of this ServiceDefinition.

        The point at which the service is deployed/attached for redirecting the traffic to the the partner appliance. Attachment Point is required if Service caters to any functionality other than EPP.  # noqa: E501

        :param attachment_point: The attachment_point of this ServiceDefinition.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TIER0_LR", "TIER1_LR", "SERVICE_PLANE"]  # noqa: E501
        if not set(attachment_point).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `attachment_point` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(attachment_point) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._attachment_point = attachment_point

    @property
    def service_manager_id(self):
        """Gets the service_manager_id of this ServiceDefinition.  # noqa: E501

        ID of the service manager to which this service is attached with. This field is not set during creation of service. This field will be set explicitly when Service Manager is created successfully using this service.   # noqa: E501

        :return: The service_manager_id of this ServiceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._service_manager_id

    @service_manager_id.setter
    def service_manager_id(self, service_manager_id):
        """Sets the service_manager_id of this ServiceDefinition.

        ID of the service manager to which this service is attached with. This field is not set during creation of service. This field will be set explicitly when Service Manager is created successfully using this service.   # noqa: E501

        :param service_manager_id: The service_manager_id of this ServiceDefinition.  # noqa: E501
        :type: str
        """

        self._service_manager_id = service_manager_id

    @property
    def vendor_id(self):
        """Gets the vendor_id of this ServiceDefinition.  # noqa: E501

        Id which is unique to a vendor or partner for which the service is created.  # noqa: E501

        :return: The vendor_id of this ServiceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this ServiceDefinition.

        Id which is unique to a vendor or partner for which the service is created.  # noqa: E501

        :param vendor_id: The vendor_id of this ServiceDefinition.  # noqa: E501
        :type: str
        """
        if vendor_id is None:
            raise ValueError("Invalid value for `vendor_id`, must not be `None`")  # noqa: E501

        self._vendor_id = vendor_id

    @property
    def on_failure_policy(self):
        """Gets the on_failure_policy of this ServiceDefinition.  # noqa: E501

        Failure policy for the service tells datapath, the action to take i.e to Allow or Block traffic during failure scenarios. For north-south ServiceInsertion, failure policy in the service instance takes precedence. For east-west ServiceInsertion, failure policy in the service chain takes precedence. BLOCK is not supported for Endpoint protection (EPP) functionality.  # noqa: E501

        :return: The on_failure_policy of this ServiceDefinition.  # noqa: E501
        :rtype: str
        """
        return self._on_failure_policy

    @on_failure_policy.setter
    def on_failure_policy(self, on_failure_policy):
        """Sets the on_failure_policy of this ServiceDefinition.

        Failure policy for the service tells datapath, the action to take i.e to Allow or Block traffic during failure scenarios. For north-south ServiceInsertion, failure policy in the service instance takes precedence. For east-west ServiceInsertion, failure policy in the service chain takes precedence. BLOCK is not supported for Endpoint protection (EPP) functionality.  # noqa: E501

        :param on_failure_policy: The on_failure_policy of this ServiceDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALLOW", "BLOCK"]  # noqa: E501
        if on_failure_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `on_failure_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(on_failure_policy, allowed_values)
            )

        self._on_failure_policy = on_failure_policy

    @property
    def transports(self):
        """Gets the transports of this ServiceDefinition.  # noqa: E501

        Transport Type of the service, which is the mechanism of redirecting the traffic to the the partner appliance. Transport type is required if Service caters to any functionality other than EPP.  # noqa: E501

        :return: The transports of this ServiceDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._transports

    @transports.setter
    def transports(self, transports):
        """Sets the transports of this ServiceDefinition.

        Transport Type of the service, which is the mechanism of redirecting the traffic to the the partner appliance. Transport type is required if Service caters to any functionality other than EPP.  # noqa: E501

        :param transports: The transports of this ServiceDefinition.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["L2_BRIDGE", "L3_ROUTED", "NSH"]  # noqa: E501
        if not set(transports).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `transports` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(transports) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._transports = transports

    @property
    def implementations(self):
        """Gets the implementations of this ServiceDefinition.  # noqa: E501

        This indicates the insertion point of the service i.e whether the service will be used to protect North-South or East-West traffic in the datacenter.  # noqa: E501

        :return: The implementations of this ServiceDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._implementations

    @implementations.setter
    def implementations(self, implementations):
        """Sets the implementations of this ServiceDefinition.

        This indicates the insertion point of the service i.e whether the service will be used to protect North-South or East-West traffic in the datacenter.  # noqa: E501

        :param implementations: The implementations of this ServiceDefinition.  # noqa: E501
        :type: list[str]
        """
        if implementations is None:
            raise ValueError("Invalid value for `implementations`, must not be `None`")  # noqa: E501
        allowed_values = ["NORTH_SOUTH", "EAST_WEST"]  # noqa: E501
        if not set(implementations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `implementations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(implementations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._implementations = implementations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
