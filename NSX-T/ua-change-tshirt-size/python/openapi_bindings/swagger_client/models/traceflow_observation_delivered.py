# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.traceflow_observation import TraceflowObservation  # noqa: F401,E501

class TraceflowObservationDelivered(TraceflowObservation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resolution_type': 'str',
        'lport_name': 'str',
        'target_mac': 'str',
        'vlan_id': 'int',
        'lport_id': 'str'
    }
    if hasattr(TraceflowObservation, "swagger_types"):
        swagger_types.update(TraceflowObservation.swagger_types)

    attribute_map = {
        'resolution_type': 'resolution_type',
        'lport_name': 'lport_name',
        'target_mac': 'target_mac',
        'vlan_id': 'vlan_id',
        'lport_id': 'lport_id'
    }
    if hasattr(TraceflowObservation, "attribute_map"):
        attribute_map.update(TraceflowObservation.attribute_map)

    def __init__(self, resolution_type=None, lport_name=None, target_mac=None, vlan_id=None, lport_id=None, *args, **kwargs):  # noqa: E501
        """TraceflowObservationDelivered - a model defined in Swagger"""  # noqa: E501
        self._resolution_type = None
        self._lport_name = None
        self._target_mac = None
        self._vlan_id = None
        self._lport_id = None
        self.discriminator = None
        if resolution_type is not None:
            self.resolution_type = resolution_type
        if lport_name is not None:
            self.lport_name = lport_name
        if target_mac is not None:
            self.target_mac = target_mac
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if lport_id is not None:
            self.lport_id = lport_id
        TraceflowObservation.__init__(self, *args, **kwargs)

    @property
    def resolution_type(self):
        """Gets the resolution_type of this TraceflowObservationDelivered.  # noqa: E501

        This field specifies the resolution type of ARP ARP_SUPPRESSION_PORT_CACHE - ARP request is suppressed by port DB ARP_SUPPRESSION_TABLE - ARP request is suppressed by ARP table ARP_SUPPRESSION_CP_QUERY - ARP request is suppressed by info derived from CP ARP_VM - No suppression and the ARP request is resolved.  # noqa: E501

        :return: The resolution_type of this TraceflowObservationDelivered.  # noqa: E501
        :rtype: str
        """
        return self._resolution_type

    @resolution_type.setter
    def resolution_type(self, resolution_type):
        """Sets the resolution_type of this TraceflowObservationDelivered.

        This field specifies the resolution type of ARP ARP_SUPPRESSION_PORT_CACHE - ARP request is suppressed by port DB ARP_SUPPRESSION_TABLE - ARP request is suppressed by ARP table ARP_SUPPRESSION_CP_QUERY - ARP request is suppressed by info derived from CP ARP_VM - No suppression and the ARP request is resolved.  # noqa: E501

        :param resolution_type: The resolution_type of this TraceflowObservationDelivered.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "ARP_SUPPRESSION_PORT_CACHE", "ARP_SUPPRESSION_TABLE", "ARP_SUPPRESSION_CP_QUERY", "ARP_VM"]  # noqa: E501
        if resolution_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution_type, allowed_values)
            )

        self._resolution_type = resolution_type

    @property
    def lport_name(self):
        """Gets the lport_name of this TraceflowObservationDelivered.  # noqa: E501

        The name of the logical port into which the traceflow packet was delivered  # noqa: E501

        :return: The lport_name of this TraceflowObservationDelivered.  # noqa: E501
        :rtype: str
        """
        return self._lport_name

    @lport_name.setter
    def lport_name(self, lport_name):
        """Sets the lport_name of this TraceflowObservationDelivered.

        The name of the logical port into which the traceflow packet was delivered  # noqa: E501

        :param lport_name: The lport_name of this TraceflowObservationDelivered.  # noqa: E501
        :type: str
        """

        self._lport_name = lport_name

    @property
    def target_mac(self):
        """Gets the target_mac of this TraceflowObservationDelivered.  # noqa: E501

        The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.   # noqa: E501

        :return: The target_mac of this TraceflowObservationDelivered.  # noqa: E501
        :rtype: str
        """
        return self._target_mac

    @target_mac.setter
    def target_mac(self, target_mac):
        """Sets the target_mac of this TraceflowObservationDelivered.

        The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.   # noqa: E501

        :param target_mac: The target_mac of this TraceflowObservationDelivered.  # noqa: E501
        :type: str
        """

        self._target_mac = target_mac

    @property
    def vlan_id(self):
        """Gets the vlan_id of this TraceflowObservationDelivered.  # noqa: E501

        VLAN on bridged network  # noqa: E501

        :return: The vlan_id of this TraceflowObservationDelivered.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this TraceflowObservationDelivered.

        VLAN on bridged network  # noqa: E501

        :param vlan_id: The vlan_id of this TraceflowObservationDelivered.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def lport_id(self):
        """Gets the lport_id of this TraceflowObservationDelivered.  # noqa: E501

        The id of the logical port into which the traceflow packet was delivered  # noqa: E501

        :return: The lport_id of this TraceflowObservationDelivered.  # noqa: E501
        :rtype: str
        """
        return self._lport_id

    @lport_id.setter
    def lport_id(self, lport_id):
        """Sets the lport_id of this TraceflowObservationDelivered.

        The id of the logical port into which the traceflow packet was delivered  # noqa: E501

        :param lport_id: The lport_id of this TraceflowObservationDelivered.  # noqa: E501
        :type: str
        """

        self._lport_id = lport_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceflowObservationDelivered, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceflowObservationDelivered):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
