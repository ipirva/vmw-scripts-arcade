# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportProtocolHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'udp_header': 'UdpHeader',
        'dhcp_header': 'DhcpHeader',
        'tcp_header': 'TcpHeader',
        'icmp_echo_request_header': 'IcmpEchoRequestHeader',
        'dhcpv6_header': 'Dhcpv6Header',
        'ndp_header': 'NdpHeader',
        'dns_header': 'DnsHeader'
    }

    attribute_map = {
        'udp_header': 'udp_header',
        'dhcp_header': 'dhcp_header',
        'tcp_header': 'tcp_header',
        'icmp_echo_request_header': 'icmp_echo_request_header',
        'dhcpv6_header': 'dhcpv6_header',
        'ndp_header': 'ndp_header',
        'dns_header': 'dns_header'
    }

    def __init__(self, udp_header=None, dhcp_header=None, tcp_header=None, icmp_echo_request_header=None, dhcpv6_header=None, ndp_header=None, dns_header=None):  # noqa: E501
        """TransportProtocolHeader - a model defined in Swagger"""  # noqa: E501
        self._udp_header = None
        self._dhcp_header = None
        self._tcp_header = None
        self._icmp_echo_request_header = None
        self._dhcpv6_header = None
        self._ndp_header = None
        self._dns_header = None
        self.discriminator = None
        if udp_header is not None:
            self.udp_header = udp_header
        if dhcp_header is not None:
            self.dhcp_header = dhcp_header
        if tcp_header is not None:
            self.tcp_header = tcp_header
        if icmp_echo_request_header is not None:
            self.icmp_echo_request_header = icmp_echo_request_header
        if dhcpv6_header is not None:
            self.dhcpv6_header = dhcpv6_header
        if ndp_header is not None:
            self.ndp_header = ndp_header
        if dns_header is not None:
            self.dns_header = dns_header

    @property
    def udp_header(self):
        """Gets the udp_header of this TransportProtocolHeader.  # noqa: E501


        :return: The udp_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: UdpHeader
        """
        return self._udp_header

    @udp_header.setter
    def udp_header(self, udp_header):
        """Sets the udp_header of this TransportProtocolHeader.


        :param udp_header: The udp_header of this TransportProtocolHeader.  # noqa: E501
        :type: UdpHeader
        """

        self._udp_header = udp_header

    @property
    def dhcp_header(self):
        """Gets the dhcp_header of this TransportProtocolHeader.  # noqa: E501


        :return: The dhcp_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: DhcpHeader
        """
        return self._dhcp_header

    @dhcp_header.setter
    def dhcp_header(self, dhcp_header):
        """Sets the dhcp_header of this TransportProtocolHeader.


        :param dhcp_header: The dhcp_header of this TransportProtocolHeader.  # noqa: E501
        :type: DhcpHeader
        """

        self._dhcp_header = dhcp_header

    @property
    def tcp_header(self):
        """Gets the tcp_header of this TransportProtocolHeader.  # noqa: E501


        :return: The tcp_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: TcpHeader
        """
        return self._tcp_header

    @tcp_header.setter
    def tcp_header(self, tcp_header):
        """Sets the tcp_header of this TransportProtocolHeader.


        :param tcp_header: The tcp_header of this TransportProtocolHeader.  # noqa: E501
        :type: TcpHeader
        """

        self._tcp_header = tcp_header

    @property
    def icmp_echo_request_header(self):
        """Gets the icmp_echo_request_header of this TransportProtocolHeader.  # noqa: E501


        :return: The icmp_echo_request_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: IcmpEchoRequestHeader
        """
        return self._icmp_echo_request_header

    @icmp_echo_request_header.setter
    def icmp_echo_request_header(self, icmp_echo_request_header):
        """Sets the icmp_echo_request_header of this TransportProtocolHeader.


        :param icmp_echo_request_header: The icmp_echo_request_header of this TransportProtocolHeader.  # noqa: E501
        :type: IcmpEchoRequestHeader
        """

        self._icmp_echo_request_header = icmp_echo_request_header

    @property
    def dhcpv6_header(self):
        """Gets the dhcpv6_header of this TransportProtocolHeader.  # noqa: E501


        :return: The dhcpv6_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: Dhcpv6Header
        """
        return self._dhcpv6_header

    @dhcpv6_header.setter
    def dhcpv6_header(self, dhcpv6_header):
        """Sets the dhcpv6_header of this TransportProtocolHeader.


        :param dhcpv6_header: The dhcpv6_header of this TransportProtocolHeader.  # noqa: E501
        :type: Dhcpv6Header
        """

        self._dhcpv6_header = dhcpv6_header

    @property
    def ndp_header(self):
        """Gets the ndp_header of this TransportProtocolHeader.  # noqa: E501


        :return: The ndp_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: NdpHeader
        """
        return self._ndp_header

    @ndp_header.setter
    def ndp_header(self, ndp_header):
        """Sets the ndp_header of this TransportProtocolHeader.


        :param ndp_header: The ndp_header of this TransportProtocolHeader.  # noqa: E501
        :type: NdpHeader
        """

        self._ndp_header = ndp_header

    @property
    def dns_header(self):
        """Gets the dns_header of this TransportProtocolHeader.  # noqa: E501


        :return: The dns_header of this TransportProtocolHeader.  # noqa: E501
        :rtype: DnsHeader
        """
        return self._dns_header

    @dns_header.setter
    def dns_header(self, dns_header):
        """Sets the dns_header of this TransportProtocolHeader.


        :param dns_header: The dns_header of this TransportProtocolHeader.  # noqa: E501
        :type: DnsHeader
        """

        self._dns_header = dns_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportProtocolHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportProtocolHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
