# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeAuthProviderVidmProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_secret': 'str',
        'host_name': 'str',
        'client_id': 'str',
        'vidm_enable': 'bool',
        'lb_enable': 'bool',
        'thumbprint': 'str',
        'node_host_name': 'str'
    }

    attribute_map = {
        'client_secret': 'client_secret',
        'host_name': 'host_name',
        'client_id': 'client_id',
        'vidm_enable': 'vidm_enable',
        'lb_enable': 'lb_enable',
        'thumbprint': 'thumbprint',
        'node_host_name': 'node_host_name'
    }

    def __init__(self, client_secret=None, host_name=None, client_id=None, vidm_enable=None, lb_enable=None, thumbprint=None, node_host_name=None):  # noqa: E501
        """NodeAuthProviderVidmProperties - a model defined in Swagger"""  # noqa: E501
        self._client_secret = None
        self._host_name = None
        self._client_id = None
        self._vidm_enable = None
        self._lb_enable = None
        self._thumbprint = None
        self._node_host_name = None
        self.discriminator = None
        if client_secret is not None:
            self.client_secret = client_secret
        self.host_name = host_name
        self.client_id = client_id
        if vidm_enable is not None:
            self.vidm_enable = vidm_enable
        if lb_enable is not None:
            self.lb_enable = lb_enable
        self.thumbprint = thumbprint
        self.node_host_name = node_host_name

    @property
    def client_secret(self):
        """Gets the client_secret of this NodeAuthProviderVidmProperties.  # noqa: E501

        vIDM client secret  # noqa: E501

        :return: The client_secret of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this NodeAuthProviderVidmProperties.

        vIDM client secret  # noqa: E501

        :param client_secret: The client_secret of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def host_name(self):
        """Gets the host_name of this NodeAuthProviderVidmProperties.  # noqa: E501

        Fully Qualified Domain Name(FQDN) of vIDM  # noqa: E501

        :return: The host_name of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this NodeAuthProviderVidmProperties.

        Fully Qualified Domain Name(FQDN) of vIDM  # noqa: E501

        :param host_name: The host_name of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")  # noqa: E501

        self._host_name = host_name

    @property
    def client_id(self):
        """Gets the client_id of this NodeAuthProviderVidmProperties.  # noqa: E501

        vIDM client id  # noqa: E501

        :return: The client_id of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this NodeAuthProviderVidmProperties.

        vIDM client id  # noqa: E501

        :param client_id: The client_id of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def vidm_enable(self):
        """Gets the vidm_enable of this NodeAuthProviderVidmProperties.  # noqa: E501

        vIDM enable flag  # noqa: E501

        :return: The vidm_enable of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: bool
        """
        return self._vidm_enable

    @vidm_enable.setter
    def vidm_enable(self, vidm_enable):
        """Sets the vidm_enable of this NodeAuthProviderVidmProperties.

        vIDM enable flag  # noqa: E501

        :param vidm_enable: The vidm_enable of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: bool
        """

        self._vidm_enable = vidm_enable

    @property
    def lb_enable(self):
        """Gets the lb_enable of this NodeAuthProviderVidmProperties.  # noqa: E501

        Load Balancer enable flag  # noqa: E501

        :return: The lb_enable of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: bool
        """
        return self._lb_enable

    @lb_enable.setter
    def lb_enable(self, lb_enable):
        """Sets the lb_enable of this NodeAuthProviderVidmProperties.

        Load Balancer enable flag  # noqa: E501

        :param lb_enable: The lb_enable of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: bool
        """

        self._lb_enable = lb_enable

    @property
    def thumbprint(self):
        """Gets the thumbprint of this NodeAuthProviderVidmProperties.  # noqa: E501

        Hexadecimal SHA256 hash of the vIDM server's X.509 certificate  # noqa: E501

        :return: The thumbprint of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this NodeAuthProviderVidmProperties.

        Hexadecimal SHA256 hash of the vIDM server's X.509 certificate  # noqa: E501

        :param thumbprint: The thumbprint of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")  # noqa: E501

        self._thumbprint = thumbprint

    @property
    def node_host_name(self):
        """Gets the node_host_name of this NodeAuthProviderVidmProperties.  # noqa: E501

        host name to use when creating the redirect URL for clients to follow after authenticating to vIDM  # noqa: E501

        :return: The node_host_name of this NodeAuthProviderVidmProperties.  # noqa: E501
        :rtype: str
        """
        return self._node_host_name

    @node_host_name.setter
    def node_host_name(self, node_host_name):
        """Sets the node_host_name of this NodeAuthProviderVidmProperties.

        host name to use when creating the redirect URL for clients to follow after authenticating to vIDM  # noqa: E501

        :param node_host_name: The node_host_name of this NodeAuthProviderVidmProperties.  # noqa: E501
        :type: str
        """
        if node_host_name is None:
            raise ValueError("Invalid value for `node_host_name`, must not be `None`")  # noqa: E501

        self._node_host_name = node_host_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeAuthProviderVidmProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeAuthProviderVidmProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
