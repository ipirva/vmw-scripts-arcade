# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdsEventFlowData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_ip': 'str',
        'protocol': 'str',
        'bytes_toserver': 'int',
        'local_vm_ip': 'str',
        'profile_id': 'str',
        'source_ip': 'str',
        'client_ip': 'str',
        'action_type': 'str',
        'source_port': 'int',
        'bytes_toclient': 'int',
        'destination_port': 'int',
        'rule_id': 'int'
    }

    attribute_map = {
        'destination_ip': 'destination_ip',
        'protocol': 'protocol',
        'bytes_toserver': 'bytes_toserver',
        'local_vm_ip': 'local_vm_ip',
        'profile_id': 'profile_id',
        'source_ip': 'source_ip',
        'client_ip': 'client_ip',
        'action_type': 'action_type',
        'source_port': 'source_port',
        'bytes_toclient': 'bytes_toclient',
        'destination_port': 'destination_port',
        'rule_id': 'rule_id'
    }

    def __init__(self, destination_ip=None, protocol=None, bytes_toserver=None, local_vm_ip=None, profile_id=None, source_ip=None, client_ip=None, action_type=None, source_port=None, bytes_toclient=None, destination_port=None, rule_id=None):  # noqa: E501
        """IdsEventFlowData - a model defined in Swagger"""  # noqa: E501
        self._destination_ip = None
        self._protocol = None
        self._bytes_toserver = None
        self._local_vm_ip = None
        self._profile_id = None
        self._source_ip = None
        self._client_ip = None
        self._action_type = None
        self._source_port = None
        self._bytes_toclient = None
        self._destination_port = None
        self._rule_id = None
        self.discriminator = None
        if destination_ip is not None:
            self.destination_ip = destination_ip
        if protocol is not None:
            self.protocol = protocol
        if bytes_toserver is not None:
            self.bytes_toserver = bytes_toserver
        if local_vm_ip is not None:
            self.local_vm_ip = local_vm_ip
        if profile_id is not None:
            self.profile_id = profile_id
        if source_ip is not None:
            self.source_ip = source_ip
        if client_ip is not None:
            self.client_ip = client_ip
        if action_type is not None:
            self.action_type = action_type
        if source_port is not None:
            self.source_port = source_port
        if bytes_toclient is not None:
            self.bytes_toclient = bytes_toclient
        if destination_port is not None:
            self.destination_port = destination_port
        if rule_id is not None:
            self.rule_id = rule_id

    @property
    def destination_ip(self):
        """Gets the destination_ip of this IdsEventFlowData.  # noqa: E501

        IP address of the destination VM on the intrusion flow.  # noqa: E501

        :return: The destination_ip of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._destination_ip

    @destination_ip.setter
    def destination_ip(self, destination_ip):
        """Sets the destination_ip of this IdsEventFlowData.

        IP address of the destination VM on the intrusion flow.  # noqa: E501

        :param destination_ip: The destination_ip of this IdsEventFlowData.  # noqa: E501
        :type: str
        """

        self._destination_ip = destination_ip

    @property
    def protocol(self):
        """Gets the protocol of this IdsEventFlowData.  # noqa: E501

        Traffic protocol pertaining to the detected intrusion, could be TCP/UDP etc.  # noqa: E501

        :return: The protocol of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IdsEventFlowData.

        Traffic protocol pertaining to the detected intrusion, could be TCP/UDP etc.  # noqa: E501

        :param protocol: The protocol of this IdsEventFlowData.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def bytes_toserver(self):
        """Gets the bytes_toserver of this IdsEventFlowData.  # noqa: E501

        Bytes sent to server.  # noqa: E501

        :return: The bytes_toserver of this IdsEventFlowData.  # noqa: E501
        :rtype: int
        """
        return self._bytes_toserver

    @bytes_toserver.setter
    def bytes_toserver(self, bytes_toserver):
        """Sets the bytes_toserver of this IdsEventFlowData.

        Bytes sent to server.  # noqa: E501

        :param bytes_toserver: The bytes_toserver of this IdsEventFlowData.  # noqa: E501
        :type: int
        """

        self._bytes_toserver = bytes_toserver

    @property
    def local_vm_ip(self):
        """Gets the local_vm_ip of this IdsEventFlowData.  # noqa: E501

        IP address of VM on the host where IDS engine is running.  # noqa: E501

        :return: The local_vm_ip of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._local_vm_ip

    @local_vm_ip.setter
    def local_vm_ip(self, local_vm_ip):
        """Sets the local_vm_ip of this IdsEventFlowData.

        IP address of VM on the host where IDS engine is running.  # noqa: E501

        :param local_vm_ip: The local_vm_ip of this IdsEventFlowData.  # noqa: E501
        :type: str
        """

        self._local_vm_ip = local_vm_ip

    @property
    def profile_id(self):
        """Gets the profile_id of this IdsEventFlowData.  # noqa: E501

        The IDS profile id that is associated with the IDS rule pertaining to the intrusion event detected.  # noqa: E501

        :return: The profile_id of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this IdsEventFlowData.

        The IDS profile id that is associated with the IDS rule pertaining to the intrusion event detected.  # noqa: E501

        :param profile_id: The profile_id of this IdsEventFlowData.  # noqa: E501
        :type: str
        """

        self._profile_id = profile_id

    @property
    def source_ip(self):
        """Gets the source_ip of this IdsEventFlowData.  # noqa: E501

        IP address of the source VM on the intrusion flow.  # noqa: E501

        :return: The source_ip of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this IdsEventFlowData.

        IP address of the source VM on the intrusion flow.  # noqa: E501

        :param source_ip: The source_ip of this IdsEventFlowData.  # noqa: E501
        :type: str
        """

        self._source_ip = source_ip

    @property
    def client_ip(self):
        """Gets the client_ip of this IdsEventFlowData.  # noqa: E501

        IP address of the VM that initiated the communication.  # noqa: E501

        :return: The client_ip of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this IdsEventFlowData.

        IP address of the VM that initiated the communication.  # noqa: E501

        :param client_ip: The client_ip of this IdsEventFlowData.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def action_type(self):
        """Gets the action_type of this IdsEventFlowData.  # noqa: E501

        The action pertaining to the detected intrusion. Possible values are ALERT, DROP, REJECT, and INVALID. ALERT - If there is a signature match on the packet, it is allowed to pass but a notification is sent to the user notifying an intrusion was detected. DROP - On a signature match, the packet is silently dropped. An alert is sent to the user that an intrusion was detected. REJECT - On a signature match, the packet is dropped and TCP RST or ICMP error messages (for non-TCP pkts) are sent to the endpoints. An alert is sent to the user that an intrusion was detected. INVALID - If the action doesn't belong to any of the above mentioned categories, it is marked as INVALID.  # noqa: E501

        :return: The action_type of this IdsEventFlowData.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this IdsEventFlowData.

        The action pertaining to the detected intrusion. Possible values are ALERT, DROP, REJECT, and INVALID. ALERT - If there is a signature match on the packet, it is allowed to pass but a notification is sent to the user notifying an intrusion was detected. DROP - On a signature match, the packet is silently dropped. An alert is sent to the user that an intrusion was detected. REJECT - On a signature match, the packet is dropped and TCP RST or ICMP error messages (for non-TCP pkts) are sent to the endpoints. An alert is sent to the user that an intrusion was detected. INVALID - If the action doesn't belong to any of the above mentioned categories, it is marked as INVALID.  # noqa: E501

        :param action_type: The action_type of this IdsEventFlowData.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT", "DROP", "REJECT", "INVALID"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def source_port(self):
        """Gets the source_port of this IdsEventFlowData.  # noqa: E501

        Source port through which traffic was initiated that caused the intrusion to be detected.  # noqa: E501

        :return: The source_port of this IdsEventFlowData.  # noqa: E501
        :rtype: int
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this IdsEventFlowData.

        Source port through which traffic was initiated that caused the intrusion to be detected.  # noqa: E501

        :param source_port: The source_port of this IdsEventFlowData.  # noqa: E501
        :type: int
        """

        self._source_port = source_port

    @property
    def bytes_toclient(self):
        """Gets the bytes_toclient of this IdsEventFlowData.  # noqa: E501

        Bytes sent to client.  # noqa: E501

        :return: The bytes_toclient of this IdsEventFlowData.  # noqa: E501
        :rtype: int
        """
        return self._bytes_toclient

    @bytes_toclient.setter
    def bytes_toclient(self, bytes_toclient):
        """Sets the bytes_toclient of this IdsEventFlowData.

        Bytes sent to client.  # noqa: E501

        :param bytes_toclient: The bytes_toclient of this IdsEventFlowData.  # noqa: E501
        :type: int
        """

        self._bytes_toclient = bytes_toclient

    @property
    def destination_port(self):
        """Gets the destination_port of this IdsEventFlowData.  # noqa: E501

        Port on the destination VM where the traffic was sent to.  # noqa: E501

        :return: The destination_port of this IdsEventFlowData.  # noqa: E501
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this IdsEventFlowData.

        Port on the destination VM where the traffic was sent to.  # noqa: E501

        :param destination_port: The destination_port of this IdsEventFlowData.  # noqa: E501
        :type: int
        """

        self._destination_port = destination_port

    @property
    def rule_id(self):
        """Gets the rule_id of this IdsEventFlowData.  # noqa: E501

        The IDS Rule id pertaining to the detected intrusion.  # noqa: E501

        :return: The rule_id of this IdsEventFlowData.  # noqa: E501
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this IdsEventFlowData.

        The IDS Rule id pertaining to the detected intrusion.  # noqa: E501

        :param rule_id: The rule_id of this IdsEventFlowData.  # noqa: E501
        :type: int
        """

        self._rule_id = rule_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdsEventFlowData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdsEventFlowData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
