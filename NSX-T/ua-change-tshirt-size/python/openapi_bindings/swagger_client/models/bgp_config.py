# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class BgpConfig(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inter_sr_ibgp': 'InterSRRoutingConfig',
        'as_number': 'int',
        'route_aggregation': 'list[BgpRouteAggregation]',
        'logical_router_id': 'str',
        'graceful_restart': 'bool',
        'as_num': 'str',
        'enabled': 'bool',
        'graceful_restart_config': 'GracefulRestartConfig',
        'multipath_relax': 'bool',
        'ecmp': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'inter_sr_ibgp': 'inter_sr_ibgp',
        'as_number': 'as_number',
        'route_aggregation': 'route_aggregation',
        'logical_router_id': 'logical_router_id',
        'graceful_restart': 'graceful_restart',
        'as_num': 'as_num',
        'enabled': 'enabled',
        'graceful_restart_config': 'graceful_restart_config',
        'multipath_relax': 'multipath_relax',
        'ecmp': 'ecmp'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, inter_sr_ibgp=None, as_number=None, route_aggregation=None, logical_router_id=None, graceful_restart=None, as_num=None, enabled=False, graceful_restart_config=None, multipath_relax=None, ecmp=True, *args, **kwargs):  # noqa: E501
        """BgpConfig - a model defined in Swagger"""  # noqa: E501
        self._inter_sr_ibgp = None
        self._as_number = None
        self._route_aggregation = None
        self._logical_router_id = None
        self._graceful_restart = None
        self._as_num = None
        self._enabled = None
        self._graceful_restart_config = None
        self._multipath_relax = None
        self._ecmp = None
        self.discriminator = None
        if inter_sr_ibgp is not None:
            self.inter_sr_ibgp = inter_sr_ibgp
        if as_number is not None:
            self.as_number = as_number
        if route_aggregation is not None:
            self.route_aggregation = route_aggregation
        if logical_router_id is not None:
            self.logical_router_id = logical_router_id
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        if as_num is not None:
            self.as_num = as_num
        if enabled is not None:
            self.enabled = enabled
        if graceful_restart_config is not None:
            self.graceful_restart_config = graceful_restart_config
        if multipath_relax is not None:
            self.multipath_relax = multipath_relax
        if ecmp is not None:
            self.ecmp = ecmp
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def inter_sr_ibgp(self):
        """Gets the inter_sr_ibgp of this BgpConfig.  # noqa: E501


        :return: The inter_sr_ibgp of this BgpConfig.  # noqa: E501
        :rtype: InterSRRoutingConfig
        """
        return self._inter_sr_ibgp

    @inter_sr_ibgp.setter
    def inter_sr_ibgp(self, inter_sr_ibgp):
        """Sets the inter_sr_ibgp of this BgpConfig.


        :param inter_sr_ibgp: The inter_sr_ibgp of this BgpConfig.  # noqa: E501
        :type: InterSRRoutingConfig
        """

        self._inter_sr_ibgp = inter_sr_ibgp

    @property
    def as_number(self):
        """Gets the as_number of this BgpConfig.  # noqa: E501

        This is a deprecated property, Please use 'as_num' instead. For VRF logical router, the as_number from parent logical router will be effective.  # noqa: E501

        :return: The as_number of this BgpConfig.  # noqa: E501
        :rtype: int
        """
        return self._as_number

    @as_number.setter
    def as_number(self, as_number):
        """Sets the as_number of this BgpConfig.

        This is a deprecated property, Please use 'as_num' instead. For VRF logical router, the as_number from parent logical router will be effective.  # noqa: E501

        :param as_number: The as_number of this BgpConfig.  # noqa: E501
        :type: int
        """

        self._as_number = as_number

    @property
    def route_aggregation(self):
        """Gets the route_aggregation of this BgpConfig.  # noqa: E501

        List of routes to be aggregated  # noqa: E501

        :return: The route_aggregation of this BgpConfig.  # noqa: E501
        :rtype: list[BgpRouteAggregation]
        """
        return self._route_aggregation

    @route_aggregation.setter
    def route_aggregation(self, route_aggregation):
        """Sets the route_aggregation of this BgpConfig.

        List of routes to be aggregated  # noqa: E501

        :param route_aggregation: The route_aggregation of this BgpConfig.  # noqa: E501
        :type: list[BgpRouteAggregation]
        """

        self._route_aggregation = route_aggregation

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this BgpConfig.  # noqa: E501

        Logical router id  # noqa: E501

        :return: The logical_router_id of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this BgpConfig.

        Logical router id  # noqa: E501

        :param logical_router_id: The logical_router_id of this BgpConfig.  # noqa: E501
        :type: str
        """

        self._logical_router_id = logical_router_id

    @property
    def graceful_restart(self):
        """Gets the graceful_restart of this BgpConfig.  # noqa: E501

        Flag to enable graceful restart. This field is deprecated, kindly use graceful_restart_config parameter for graceful restart configuration. If both parameters are set and consistent with each other [i.e. graceful_restart=false and graceful_restart_mode=HELPER_ONLY OR graceful_restart=true and graceful_restart_mode=GR_AND_HELPER] then this is allowed, but if inconsistent with each other then this is not allowed and validation error will be thrown. For VRF logical router, the settings from parent logical router will be effective.   # noqa: E501

        :return: The graceful_restart of this BgpConfig.  # noqa: E501
        :rtype: bool
        """
        return self._graceful_restart

    @graceful_restart.setter
    def graceful_restart(self, graceful_restart):
        """Sets the graceful_restart of this BgpConfig.

        Flag to enable graceful restart. This field is deprecated, kindly use graceful_restart_config parameter for graceful restart configuration. If both parameters are set and consistent with each other [i.e. graceful_restart=false and graceful_restart_mode=HELPER_ONLY OR graceful_restart=true and graceful_restart_mode=GR_AND_HELPER] then this is allowed, but if inconsistent with each other then this is not allowed and validation error will be thrown. For VRF logical router, the settings from parent logical router will be effective.   # noqa: E501

        :param graceful_restart: The graceful_restart of this BgpConfig.  # noqa: E501
        :type: bool
        """

        self._graceful_restart = graceful_restart

    @property
    def as_num(self):
        """Gets the as_num of this BgpConfig.  # noqa: E501

        For VRF logical router, the as_num from parent logical router will be effective.  # noqa: E501

        :return: The as_num of this BgpConfig.  # noqa: E501
        :rtype: str
        """
        return self._as_num

    @as_num.setter
    def as_num(self, as_num):
        """Sets the as_num of this BgpConfig.

        For VRF logical router, the as_num from parent logical router will be effective.  # noqa: E501

        :param as_num: The as_num of this BgpConfig.  # noqa: E501
        :type: str
        """

        self._as_num = as_num

    @property
    def enabled(self):
        """Gets the enabled of this BgpConfig.  # noqa: E501

        While creation of BGP config this flag will be set to - true for Tier0 logical router with Active-Active high-availability mode - false for Tier0 logical router with Active-Standby high-availanility mode. User can change this value while updating the config. If this property is not specified in the payload, the default value will be considered as false irrespective of the high-availability mode.   # noqa: E501

        :return: The enabled of this BgpConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BgpConfig.

        While creation of BGP config this flag will be set to - true for Tier0 logical router with Active-Active high-availability mode - false for Tier0 logical router with Active-Standby high-availanility mode. User can change this value while updating the config. If this property is not specified in the payload, the default value will be considered as false irrespective of the high-availability mode.   # noqa: E501

        :param enabled: The enabled of this BgpConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def graceful_restart_config(self):
        """Gets the graceful_restart_config of this BgpConfig.  # noqa: E501


        :return: The graceful_restart_config of this BgpConfig.  # noqa: E501
        :rtype: GracefulRestartConfig
        """
        return self._graceful_restart_config

    @graceful_restart_config.setter
    def graceful_restart_config(self, graceful_restart_config):
        """Sets the graceful_restart_config of this BgpConfig.


        :param graceful_restart_config: The graceful_restart_config of this BgpConfig.  # noqa: E501
        :type: GracefulRestartConfig
        """

        self._graceful_restart_config = graceful_restart_config

    @property
    def multipath_relax(self):
        """Gets the multipath_relax of this BgpConfig.  # noqa: E501

        For TIER0 logical router, default is true. For VRF logical router, the settings from parent logical router will be effective.  # noqa: E501

        :return: The multipath_relax of this BgpConfig.  # noqa: E501
        :rtype: bool
        """
        return self._multipath_relax

    @multipath_relax.setter
    def multipath_relax(self, multipath_relax):
        """Sets the multipath_relax of this BgpConfig.

        For TIER0 logical router, default is true. For VRF logical router, the settings from parent logical router will be effective.  # noqa: E501

        :param multipath_relax: The multipath_relax of this BgpConfig.  # noqa: E501
        :type: bool
        """

        self._multipath_relax = multipath_relax

    @property
    def ecmp(self):
        """Gets the ecmp of this BgpConfig.  # noqa: E501

        While creation of BGP config this flag will be set to true User can change this value while updating BGP config. If this property is not specified in the payload, the default value will be considered as true.   # noqa: E501

        :return: The ecmp of this BgpConfig.  # noqa: E501
        :rtype: bool
        """
        return self._ecmp

    @ecmp.setter
    def ecmp(self, ecmp):
        """Sets the ecmp of this BgpConfig.

        While creation of BGP config this flag will be set to true User can change this value while updating BGP config. If this property is not specified in the payload, the default value will be considered as true.   # noqa: E501

        :param ecmp: The ecmp of this BgpConfig.  # noqa: E501
        :type: bool
        """

        self._ecmp = ecmp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
