# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class LogicalRouter(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edge_cluster_member_indices': 'list[int]',
        'ipv6_profiles': 'IPv6Profiles',
        'allocation_profile': 'EdgeClusterMemberAllocationProfile',
        'firewall_sections': 'list[ResourceReference]',
        'failover_mode': 'str',
        'advanced_config': 'LogicalRouterConfig',
        'router_type': 'str',
        'preferred_edge_cluster_member_index': 'int',
        'high_availability_mode': 'str',
        'edge_cluster_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'edge_cluster_member_indices': 'edge_cluster_member_indices',
        'ipv6_profiles': 'ipv6_profiles',
        'allocation_profile': 'allocation_profile',
        'firewall_sections': 'firewall_sections',
        'failover_mode': 'failover_mode',
        'advanced_config': 'advanced_config',
        'router_type': 'router_type',
        'preferred_edge_cluster_member_index': 'preferred_edge_cluster_member_index',
        'high_availability_mode': 'high_availability_mode',
        'edge_cluster_id': 'edge_cluster_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, edge_cluster_member_indices=None, ipv6_profiles=None, allocation_profile=None, firewall_sections=None, failover_mode=None, advanced_config=None, router_type=None, preferred_edge_cluster_member_index=None, high_availability_mode=None, edge_cluster_id=None, *args, **kwargs):  # noqa: E501
        """LogicalRouter - a model defined in Swagger"""  # noqa: E501
        self._edge_cluster_member_indices = None
        self._ipv6_profiles = None
        self._allocation_profile = None
        self._firewall_sections = None
        self._failover_mode = None
        self._advanced_config = None
        self._router_type = None
        self._preferred_edge_cluster_member_index = None
        self._high_availability_mode = None
        self._edge_cluster_id = None
        self.discriminator = None
        if edge_cluster_member_indices is not None:
            self.edge_cluster_member_indices = edge_cluster_member_indices
        if ipv6_profiles is not None:
            self.ipv6_profiles = ipv6_profiles
        if allocation_profile is not None:
            self.allocation_profile = allocation_profile
        if firewall_sections is not None:
            self.firewall_sections = firewall_sections
        if failover_mode is not None:
            self.failover_mode = failover_mode
        if advanced_config is not None:
            self.advanced_config = advanced_config
        self.router_type = router_type
        if preferred_edge_cluster_member_index is not None:
            self.preferred_edge_cluster_member_index = preferred_edge_cluster_member_index
        if high_availability_mode is not None:
            self.high_availability_mode = high_availability_mode
        if edge_cluster_id is not None:
            self.edge_cluster_id = edge_cluster_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def edge_cluster_member_indices(self):
        """Gets the edge_cluster_member_indices of this LogicalRouter.  # noqa: E501

        For stateful services, the logical router should be associated with edge cluster. For TIER 1 logical router, for manual placement of service router within the cluster, edge cluster member indices needs to be provided else same will be auto-allocated. You can provide maximum two indices for HA ACTIVE_STANDBY. For TIER0 logical router this property is no use and placement is derived from logical router uplink or loopback port.   # noqa: E501

        :return: The edge_cluster_member_indices of this LogicalRouter.  # noqa: E501
        :rtype: list[int]
        """
        return self._edge_cluster_member_indices

    @edge_cluster_member_indices.setter
    def edge_cluster_member_indices(self, edge_cluster_member_indices):
        """Sets the edge_cluster_member_indices of this LogicalRouter.

        For stateful services, the logical router should be associated with edge cluster. For TIER 1 logical router, for manual placement of service router within the cluster, edge cluster member indices needs to be provided else same will be auto-allocated. You can provide maximum two indices for HA ACTIVE_STANDBY. For TIER0 logical router this property is no use and placement is derived from logical router uplink or loopback port.   # noqa: E501

        :param edge_cluster_member_indices: The edge_cluster_member_indices of this LogicalRouter.  # noqa: E501
        :type: list[int]
        """

        self._edge_cluster_member_indices = edge_cluster_member_indices

    @property
    def ipv6_profiles(self):
        """Gets the ipv6_profiles of this LogicalRouter.  # noqa: E501


        :return: The ipv6_profiles of this LogicalRouter.  # noqa: E501
        :rtype: IPv6Profiles
        """
        return self._ipv6_profiles

    @ipv6_profiles.setter
    def ipv6_profiles(self, ipv6_profiles):
        """Sets the ipv6_profiles of this LogicalRouter.


        :param ipv6_profiles: The ipv6_profiles of this LogicalRouter.  # noqa: E501
        :type: IPv6Profiles
        """

        self._ipv6_profiles = ipv6_profiles

    @property
    def allocation_profile(self):
        """Gets the allocation_profile of this LogicalRouter.  # noqa: E501


        :return: The allocation_profile of this LogicalRouter.  # noqa: E501
        :rtype: EdgeClusterMemberAllocationProfile
        """
        return self._allocation_profile

    @allocation_profile.setter
    def allocation_profile(self, allocation_profile):
        """Sets the allocation_profile of this LogicalRouter.


        :param allocation_profile: The allocation_profile of this LogicalRouter.  # noqa: E501
        :type: EdgeClusterMemberAllocationProfile
        """

        self._allocation_profile = allocation_profile

    @property
    def firewall_sections(self):
        """Gets the firewall_sections of this LogicalRouter.  # noqa: E501

        List of Firewall sections related to Logical Router.  # noqa: E501

        :return: The firewall_sections of this LogicalRouter.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._firewall_sections

    @firewall_sections.setter
    def firewall_sections(self, firewall_sections):
        """Sets the firewall_sections of this LogicalRouter.

        List of Firewall sections related to Logical Router.  # noqa: E501

        :param firewall_sections: The firewall_sections of this LogicalRouter.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._firewall_sections = firewall_sections

    @property
    def failover_mode(self):
        """Gets the failover_mode of this LogicalRouter.  # noqa: E501

        Determines the behavior when a logical router instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property must not be populated unless the high_availability_mode property is set to ACTIVE_STANDBY. If high_availability_mode property is set to ACTIVE_STANDBY and this property is not specified then default will be NON_PREEMPTIVE.   # noqa: E501

        :return: The failover_mode of this LogicalRouter.  # noqa: E501
        :rtype: str
        """
        return self._failover_mode

    @failover_mode.setter
    def failover_mode(self, failover_mode):
        """Sets the failover_mode of this LogicalRouter.

        Determines the behavior when a logical router instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property must not be populated unless the high_availability_mode property is set to ACTIVE_STANDBY. If high_availability_mode property is set to ACTIVE_STANDBY and this property is not specified then default will be NON_PREEMPTIVE.   # noqa: E501

        :param failover_mode: The failover_mode of this LogicalRouter.  # noqa: E501
        :type: str
        """
        allowed_values = ["PREEMPTIVE", "NON_PREEMPTIVE"]  # noqa: E501
        if failover_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `failover_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(failover_mode, allowed_values)
            )

        self._failover_mode = failover_mode

    @property
    def advanced_config(self):
        """Gets the advanced_config of this LogicalRouter.  # noqa: E501


        :return: The advanced_config of this LogicalRouter.  # noqa: E501
        :rtype: LogicalRouterConfig
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this LogicalRouter.


        :param advanced_config: The advanced_config of this LogicalRouter.  # noqa: E501
        :type: LogicalRouterConfig
        """

        self._advanced_config = advanced_config

    @property
    def router_type(self):
        """Gets the router_type of this LogicalRouter.  # noqa: E501

        TIER0 for external connectivity. TIER1 for two tier topology with TIER0 on top. VRF for isolation of routing table on TIER0.   # noqa: E501

        :return: The router_type of this LogicalRouter.  # noqa: E501
        :rtype: str
        """
        return self._router_type

    @router_type.setter
    def router_type(self, router_type):
        """Sets the router_type of this LogicalRouter.

        TIER0 for external connectivity. TIER1 for two tier topology with TIER0 on top. VRF for isolation of routing table on TIER0.   # noqa: E501

        :param router_type: The router_type of this LogicalRouter.  # noqa: E501
        :type: str
        """
        if router_type is None:
            raise ValueError("Invalid value for `router_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TIER0", "TIER1", "VRF"]  # noqa: E501
        if router_type not in allowed_values:
            raise ValueError(
                "Invalid value for `router_type` ({0}), must be one of {1}"  # noqa: E501
                .format(router_type, allowed_values)
            )

        self._router_type = router_type

    @property
    def preferred_edge_cluster_member_index(self):
        """Gets the preferred_edge_cluster_member_index of this LogicalRouter.  # noqa: E501

        Preferred edge cluster member index which is required for PREEMPTIVE failover mode. Used for Tier0 routers only.   # noqa: E501

        :return: The preferred_edge_cluster_member_index of this LogicalRouter.  # noqa: E501
        :rtype: int
        """
        return self._preferred_edge_cluster_member_index

    @preferred_edge_cluster_member_index.setter
    def preferred_edge_cluster_member_index(self, preferred_edge_cluster_member_index):
        """Sets the preferred_edge_cluster_member_index of this LogicalRouter.

        Preferred edge cluster member index which is required for PREEMPTIVE failover mode. Used for Tier0 routers only.   # noqa: E501

        :param preferred_edge_cluster_member_index: The preferred_edge_cluster_member_index of this LogicalRouter.  # noqa: E501
        :type: int
        """

        self._preferred_edge_cluster_member_index = preferred_edge_cluster_member_index

    @property
    def high_availability_mode(self):
        """Gets the high_availability_mode of this LogicalRouter.  # noqa: E501

        High availability mode  # noqa: E501

        :return: The high_availability_mode of this LogicalRouter.  # noqa: E501
        :rtype: str
        """
        return self._high_availability_mode

    @high_availability_mode.setter
    def high_availability_mode(self, high_availability_mode):
        """Sets the high_availability_mode of this LogicalRouter.

        High availability mode  # noqa: E501

        :param high_availability_mode: The high_availability_mode of this LogicalRouter.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE_ACTIVE", "ACTIVE_STANDBY"]  # noqa: E501
        if high_availability_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `high_availability_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(high_availability_mode, allowed_values)
            )

        self._high_availability_mode = high_availability_mode

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this LogicalRouter.  # noqa: E501

        Used for tier0 routers  # noqa: E501

        :return: The edge_cluster_id of this LogicalRouter.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this LogicalRouter.

        Used for tier0 routers  # noqa: E501

        :param edge_cluster_id: The edge_cluster_id of this LogicalRouter.  # noqa: E501
        :type: str
        """

        self._edge_cluster_id = edge_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalRouter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalRouter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
