# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComponentUpgradeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'pre_upgrade_status': 'UpgradeChecksExecutionStatus',
        'details': 'str',
        'component_type': 'str',
        'node_count_at_target_version': 'int',
        'target_component_version': 'str',
        'percent_complete': 'float',
        'can_skip': 'bool',
        'current_version_node_summary': 'NodeSummaryList'
    }

    attribute_map = {
        'status': 'status',
        'pre_upgrade_status': 'pre_upgrade_status',
        'details': 'details',
        'component_type': 'component_type',
        'node_count_at_target_version': 'node_count_at_target_version',
        'target_component_version': 'target_component_version',
        'percent_complete': 'percent_complete',
        'can_skip': 'can_skip',
        'current_version_node_summary': 'current_version_node_summary'
    }

    def __init__(self, status=None, pre_upgrade_status=None, details=None, component_type=None, node_count_at_target_version=None, target_component_version=None, percent_complete=None, can_skip=None, current_version_node_summary=None):  # noqa: E501
        """ComponentUpgradeStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._pre_upgrade_status = None
        self._details = None
        self._component_type = None
        self._node_count_at_target_version = None
        self._target_component_version = None
        self._percent_complete = None
        self._can_skip = None
        self._current_version_node_summary = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if pre_upgrade_status is not None:
            self.pre_upgrade_status = pre_upgrade_status
        if details is not None:
            self.details = details
        if component_type is not None:
            self.component_type = component_type
        if node_count_at_target_version is not None:
            self.node_count_at_target_version = node_count_at_target_version
        if target_component_version is not None:
            self.target_component_version = target_component_version
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if can_skip is not None:
            self.can_skip = can_skip
        if current_version_node_summary is not None:
            self.current_version_node_summary = current_version_node_summary

    @property
    def status(self):
        """Gets the status of this ComponentUpgradeStatus.  # noqa: E501

        Upgrade status of component  # noqa: E501

        :return: The status of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComponentUpgradeStatus.

        Upgrade status of component  # noqa: E501

        :param status: The status of this ComponentUpgradeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED", "IN_PROGRESS", "NOT_STARTED", "PAUSING", "PAUSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def pre_upgrade_status(self):
        """Gets the pre_upgrade_status of this ComponentUpgradeStatus.  # noqa: E501


        :return: The pre_upgrade_status of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: UpgradeChecksExecutionStatus
        """
        return self._pre_upgrade_status

    @pre_upgrade_status.setter
    def pre_upgrade_status(self, pre_upgrade_status):
        """Sets the pre_upgrade_status of this ComponentUpgradeStatus.


        :param pre_upgrade_status: The pre_upgrade_status of this ComponentUpgradeStatus.  # noqa: E501
        :type: UpgradeChecksExecutionStatus
        """

        self._pre_upgrade_status = pre_upgrade_status

    @property
    def details(self):
        """Gets the details of this ComponentUpgradeStatus.  # noqa: E501

        Details about the upgrade status  # noqa: E501

        :return: The details of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ComponentUpgradeStatus.

        Details about the upgrade status  # noqa: E501

        :param details: The details of this ComponentUpgradeStatus.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def component_type(self):
        """Gets the component_type of this ComponentUpgradeStatus.  # noqa: E501

        Component type for the upgrade status  # noqa: E501

        :return: The component_type of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this ComponentUpgradeStatus.

        Component type for the upgrade status  # noqa: E501

        :param component_type: The component_type of this ComponentUpgradeStatus.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def node_count_at_target_version(self):
        """Gets the node_count_at_target_version of this ComponentUpgradeStatus.  # noqa: E501

        Number of nodes of the type and at the component version  # noqa: E501

        :return: The node_count_at_target_version of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: int
        """
        return self._node_count_at_target_version

    @node_count_at_target_version.setter
    def node_count_at_target_version(self, node_count_at_target_version):
        """Sets the node_count_at_target_version of this ComponentUpgradeStatus.

        Number of nodes of the type and at the component version  # noqa: E501

        :param node_count_at_target_version: The node_count_at_target_version of this ComponentUpgradeStatus.  # noqa: E501
        :type: int
        """

        self._node_count_at_target_version = node_count_at_target_version

    @property
    def target_component_version(self):
        """Gets the target_component_version of this ComponentUpgradeStatus.  # noqa: E501

        Target component version  # noqa: E501

        :return: The target_component_version of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._target_component_version

    @target_component_version.setter
    def target_component_version(self, target_component_version):
        """Sets the target_component_version of this ComponentUpgradeStatus.

        Target component version  # noqa: E501

        :param target_component_version: The target_component_version of this ComponentUpgradeStatus.  # noqa: E501
        :type: str
        """

        self._target_component_version = target_component_version

    @property
    def percent_complete(self):
        """Gets the percent_complete of this ComponentUpgradeStatus.  # noqa: E501

        Indicator of upgrade progress in percentage  # noqa: E501

        :return: The percent_complete of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this ComponentUpgradeStatus.

        Indicator of upgrade progress in percentage  # noqa: E501

        :param percent_complete: The percent_complete of this ComponentUpgradeStatus.  # noqa: E501
        :type: float
        """

        self._percent_complete = percent_complete

    @property
    def can_skip(self):
        """Gets the can_skip of this ComponentUpgradeStatus.  # noqa: E501

        Can the upgrade of the remaining units in this component be skipped  # noqa: E501

        :return: The can_skip of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: bool
        """
        return self._can_skip

    @can_skip.setter
    def can_skip(self, can_skip):
        """Sets the can_skip of this ComponentUpgradeStatus.

        Can the upgrade of the remaining units in this component be skipped  # noqa: E501

        :param can_skip: The can_skip of this ComponentUpgradeStatus.  # noqa: E501
        :type: bool
        """

        self._can_skip = can_skip

    @property
    def current_version_node_summary(self):
        """Gets the current_version_node_summary of this ComponentUpgradeStatus.  # noqa: E501


        :return: The current_version_node_summary of this ComponentUpgradeStatus.  # noqa: E501
        :rtype: NodeSummaryList
        """
        return self._current_version_node_summary

    @current_version_node_summary.setter
    def current_version_node_summary(self, current_version_node_summary):
        """Sets the current_version_node_summary of this ComponentUpgradeStatus.


        :param current_version_node_summary: The current_version_node_summary of this ComponentUpgradeStatus.  # noqa: E501
        :type: NodeSummaryList
        """

        self._current_version_node_summary = current_version_node_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComponentUpgradeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentUpgradeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
