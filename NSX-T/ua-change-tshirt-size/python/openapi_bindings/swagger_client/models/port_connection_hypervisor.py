# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.port_connection_entity import PortConnectionEntity  # noqa: F401,E501

class PortConnectionHypervisor(PortConnectionEntity):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pnics': 'list[Pnic]',
        'pnics_list': 'list[NodeInterfaceProperties]',
        'neighbors_list': 'list[InterfaceNeighborProperties]',
        'profiles': 'list[BaseHostSwitchProfile]'
    }
    if hasattr(PortConnectionEntity, "swagger_types"):
        swagger_types.update(PortConnectionEntity.swagger_types)

    attribute_map = {
        'pnics': 'pnics',
        'pnics_list': 'pnics_list',
        'neighbors_list': 'neighbors_list',
        'profiles': 'profiles'
    }
    if hasattr(PortConnectionEntity, "attribute_map"):
        attribute_map.update(PortConnectionEntity.attribute_map)

    def __init__(self, pnics=None, pnics_list=None, neighbors_list=None, profiles=None, *args, **kwargs):  # noqa: E501
        """PortConnectionHypervisor - a model defined in Swagger"""  # noqa: E501
        self._pnics = None
        self._pnics_list = None
        self._neighbors_list = None
        self._profiles = None
        self.discriminator = None
        if pnics is not None:
            self.pnics = pnics
        if pnics_list is not None:
            self.pnics_list = pnics_list
        if neighbors_list is not None:
            self.neighbors_list = neighbors_list
        if profiles is not None:
            self.profiles = profiles
        PortConnectionEntity.__init__(self, *args, **kwargs)

    @property
    def pnics(self):
        """Gets the pnics of this PortConnectionHypervisor.  # noqa: E501


        :return: The pnics of this PortConnectionHypervisor.  # noqa: E501
        :rtype: list[Pnic]
        """
        return self._pnics

    @pnics.setter
    def pnics(self, pnics):
        """Sets the pnics of this PortConnectionHypervisor.


        :param pnics: The pnics of this PortConnectionHypervisor.  # noqa: E501
        :type: list[Pnic]
        """

        self._pnics = pnics

    @property
    def pnics_list(self):
        """Gets the pnics_list of this PortConnectionHypervisor.  # noqa: E501


        :return: The pnics_list of this PortConnectionHypervisor.  # noqa: E501
        :rtype: list[NodeInterfaceProperties]
        """
        return self._pnics_list

    @pnics_list.setter
    def pnics_list(self, pnics_list):
        """Sets the pnics_list of this PortConnectionHypervisor.


        :param pnics_list: The pnics_list of this PortConnectionHypervisor.  # noqa: E501
        :type: list[NodeInterfaceProperties]
        """

        self._pnics_list = pnics_list

    @property
    def neighbors_list(self):
        """Gets the neighbors_list of this PortConnectionHypervisor.  # noqa: E501


        :return: The neighbors_list of this PortConnectionHypervisor.  # noqa: E501
        :rtype: list[InterfaceNeighborProperties]
        """
        return self._neighbors_list

    @neighbors_list.setter
    def neighbors_list(self, neighbors_list):
        """Sets the neighbors_list of this PortConnectionHypervisor.


        :param neighbors_list: The neighbors_list of this PortConnectionHypervisor.  # noqa: E501
        :type: list[InterfaceNeighborProperties]
        """

        self._neighbors_list = neighbors_list

    @property
    def profiles(self):
        """Gets the profiles of this PortConnectionHypervisor.  # noqa: E501


        :return: The profiles of this PortConnectionHypervisor.  # noqa: E501
        :rtype: list[BaseHostSwitchProfile]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this PortConnectionHypervisor.


        :param profiles: The profiles of this PortConnectionHypervisor.  # noqa: E501
        :type: list[BaseHostSwitchProfile]
        """

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortConnectionHypervisor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortConnectionHypervisor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
