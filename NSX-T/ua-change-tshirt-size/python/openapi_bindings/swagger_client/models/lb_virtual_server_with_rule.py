# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbVirtualServerWithRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rules': 'list[LbRule]',
        'virtual_server': 'LbVirtualServer'
    }

    attribute_map = {
        'rules': 'rules',
        'virtual_server': 'virtual_server'
    }

    def __init__(self, rules=None, virtual_server=None):  # noqa: E501
        """LbVirtualServerWithRule - a model defined in Swagger"""  # noqa: E501
        self._rules = None
        self._virtual_server = None
        self.discriminator = None
        if rules is not None:
            self.rules = rules
        self.virtual_server = virtual_server

    @property
    def rules(self):
        """Gets the rules of this LbVirtualServerWithRule.  # noqa: E501

        It is used to add rules, update rules and bind rules to the virtual server. To add new rules, make sure that the rules have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in the list, otherwise, the rules are updated. For update_with_rules action, it supports rules delete and update. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer.   # noqa: E501

        :return: The rules of this LbVirtualServerWithRule.  # noqa: E501
        :rtype: list[LbRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this LbVirtualServerWithRule.

        It is used to add rules, update rules and bind rules to the virtual server. To add new rules, make sure that the rules have no identifier specified, the new rules are automatically generated and associated to the virtual server. If the virtual server need to consume some existed rules without change, those rules should not be specified in the list, otherwise, the rules are updated. For update_with_rules action, it supports rules delete and update. To delete old rules, the rules should not be configured in new action, the UUID of deleted rules should be removed from rule_ids. To update rules, the rules should be specified with new change and configured with identifier. If there are some rules which are not modified, those rule should not be specified in the rules list, the UUID list of rules should be specified in rule_ids of LbVirtualServer.   # noqa: E501

        :param rules: The rules of this LbVirtualServerWithRule.  # noqa: E501
        :type: list[LbRule]
        """

        self._rules = rules

    @property
    def virtual_server(self):
        """Gets the virtual_server of this LbVirtualServerWithRule.  # noqa: E501


        :return: The virtual_server of this LbVirtualServerWithRule.  # noqa: E501
        :rtype: LbVirtualServer
        """
        return self._virtual_server

    @virtual_server.setter
    def virtual_server(self, virtual_server):
        """Sets the virtual_server of this LbVirtualServerWithRule.


        :param virtual_server: The virtual_server of this LbVirtualServerWithRule.  # noqa: E501
        :type: LbVirtualServer
        """
        if virtual_server is None:
            raise ValueError("Invalid value for `virtual_server`, must not be `None`")  # noqa: E501

        self._virtual_server = virtual_server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbVirtualServerWithRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbVirtualServerWithRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
