# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IpfixObsPointConfig(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idle_timeout': 'int',
        'observation_domain_id': 'int',
        'collectors': 'list[IpfixCollector]',
        'active_timeout': 'int',
        'packet_sample_probability': 'float',
        'enabled': 'bool',
        'max_flows': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'idle_timeout': 'idle_timeout',
        'observation_domain_id': 'observation_domain_id',
        'collectors': 'collectors',
        'active_timeout': 'active_timeout',
        'packet_sample_probability': 'packet_sample_probability',
        'enabled': 'enabled',
        'max_flows': 'max_flows'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, idle_timeout=300, observation_domain_id=0, collectors=None, active_timeout=300, packet_sample_probability=None, enabled=None, max_flows=16384, *args, **kwargs):  # noqa: E501
        """IpfixObsPointConfig - a model defined in Swagger"""  # noqa: E501
        self._idle_timeout = None
        self._observation_domain_id = None
        self._collectors = None
        self._active_timeout = None
        self._packet_sample_probability = None
        self._enabled = None
        self._max_flows = None
        self.discriminator = None
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if observation_domain_id is not None:
            self.observation_domain_id = observation_domain_id
        if collectors is not None:
            self.collectors = collectors
        if active_timeout is not None:
            self.active_timeout = active_timeout
        if packet_sample_probability is not None:
            self.packet_sample_probability = packet_sample_probability
        self.enabled = enabled
        if max_flows is not None:
            self.max_flows = max_flows
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this IpfixObsPointConfig.  # noqa: E501

        The time in seconds after a Flow is expired if no more packets matching this Flow are received by the cache.   # noqa: E501

        :return: The idle_timeout of this IpfixObsPointConfig.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this IpfixObsPointConfig.

        The time in seconds after a Flow is expired if no more packets matching this Flow are received by the cache.   # noqa: E501

        :param idle_timeout: The idle_timeout of this IpfixObsPointConfig.  # noqa: E501
        :type: int
        """

        self._idle_timeout = idle_timeout

    @property
    def observation_domain_id(self):
        """Gets the observation_domain_id of this IpfixObsPointConfig.  # noqa: E501

        An identifier that is unique to the exporting process and used to meter the Flows.   # noqa: E501

        :return: The observation_domain_id of this IpfixObsPointConfig.  # noqa: E501
        :rtype: int
        """
        return self._observation_domain_id

    @observation_domain_id.setter
    def observation_domain_id(self, observation_domain_id):
        """Sets the observation_domain_id of this IpfixObsPointConfig.

        An identifier that is unique to the exporting process and used to meter the Flows.   # noqa: E501

        :param observation_domain_id: The observation_domain_id of this IpfixObsPointConfig.  # noqa: E501
        :type: int
        """

        self._observation_domain_id = observation_domain_id

    @property
    def collectors(self):
        """Gets the collectors of this IpfixObsPointConfig.  # noqa: E501

        List of IPFIX collectors  # noqa: E501

        :return: The collectors of this IpfixObsPointConfig.  # noqa: E501
        :rtype: list[IpfixCollector]
        """
        return self._collectors

    @collectors.setter
    def collectors(self, collectors):
        """Sets the collectors of this IpfixObsPointConfig.

        List of IPFIX collectors  # noqa: E501

        :param collectors: The collectors of this IpfixObsPointConfig.  # noqa: E501
        :type: list[IpfixCollector]
        """

        self._collectors = collectors

    @property
    def active_timeout(self):
        """Gets the active_timeout of this IpfixObsPointConfig.  # noqa: E501

        The time in seconds after a Flow is expired even if more packets matching this Flow are received by the cache.   # noqa: E501

        :return: The active_timeout of this IpfixObsPointConfig.  # noqa: E501
        :rtype: int
        """
        return self._active_timeout

    @active_timeout.setter
    def active_timeout(self, active_timeout):
        """Sets the active_timeout of this IpfixObsPointConfig.

        The time in seconds after a Flow is expired even if more packets matching this Flow are received by the cache.   # noqa: E501

        :param active_timeout: The active_timeout of this IpfixObsPointConfig.  # noqa: E501
        :type: int
        """

        self._active_timeout = active_timeout

    @property
    def packet_sample_probability(self):
        """Gets the packet_sample_probability of this IpfixObsPointConfig.  # noqa: E501

        The probability in percentage that a packet is sampled. The value should be  in range (0,100] and can only have three decimal places at most. The probability  is equal for every packet.   # noqa: E501

        :return: The packet_sample_probability of this IpfixObsPointConfig.  # noqa: E501
        :rtype: float
        """
        return self._packet_sample_probability

    @packet_sample_probability.setter
    def packet_sample_probability(self, packet_sample_probability):
        """Sets the packet_sample_probability of this IpfixObsPointConfig.

        The probability in percentage that a packet is sampled. The value should be  in range (0,100] and can only have three decimal places at most. The probability  is equal for every packet.   # noqa: E501

        :param packet_sample_probability: The packet_sample_probability of this IpfixObsPointConfig.  # noqa: E501
        :type: float
        """

        self._packet_sample_probability = packet_sample_probability

    @property
    def enabled(self):
        """Gets the enabled of this IpfixObsPointConfig.  # noqa: E501

        Enabled status of IPFIX export  # noqa: E501

        :return: The enabled of this IpfixObsPointConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IpfixObsPointConfig.

        Enabled status of IPFIX export  # noqa: E501

        :param enabled: The enabled of this IpfixObsPointConfig.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def max_flows(self):
        """Gets the max_flows of this IpfixObsPointConfig.  # noqa: E501

        The maximum number of flow entries in each exporter flow cache.   # noqa: E501

        :return: The max_flows of this IpfixObsPointConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_flows

    @max_flows.setter
    def max_flows(self, max_flows):
        """Sets the max_flows of this IpfixObsPointConfig.

        The maximum number of flow entries in each exporter flow cache.   # noqa: E501

        :param max_flows: The max_flows of this IpfixObsPointConfig.  # noqa: E501
        :type: int
        """

        self._max_flows = max_flows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpfixObsPointConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpfixObsPointConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
