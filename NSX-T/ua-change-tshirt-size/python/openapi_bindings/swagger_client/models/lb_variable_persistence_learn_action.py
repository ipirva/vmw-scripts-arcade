# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_rule_action import LbRuleAction  # noqa: F401,E501

class LbVariablePersistenceLearnAction(LbRuleAction):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'variable_hash_enabled': 'bool',
        'variable_name': 'str',
        'persistence_profile_id': 'str'
    }
    if hasattr(LbRuleAction, "swagger_types"):
        swagger_types.update(LbRuleAction.swagger_types)

    attribute_map = {
        'variable_hash_enabled': 'variable_hash_enabled',
        'variable_name': 'variable_name',
        'persistence_profile_id': 'persistence_profile_id'
    }
    if hasattr(LbRuleAction, "attribute_map"):
        attribute_map.update(LbRuleAction.attribute_map)

    def __init__(self, variable_hash_enabled=False, variable_name=None, persistence_profile_id=None, *args, **kwargs):  # noqa: E501
        """LbVariablePersistenceLearnAction - a model defined in Swagger"""  # noqa: E501
        self._variable_hash_enabled = None
        self._variable_name = None
        self._persistence_profile_id = None
        self.discriminator = None
        if variable_hash_enabled is not None:
            self.variable_hash_enabled = variable_hash_enabled
        self.variable_name = variable_name
        if persistence_profile_id is not None:
            self.persistence_profile_id = persistence_profile_id
        LbRuleAction.__init__(self, *args, **kwargs)

    @property
    def variable_hash_enabled(self):
        """Gets the variable_hash_enabled of this LbVariablePersistenceLearnAction.  # noqa: E501

        The property is used to enable a hash operation for variable value when composing the persistence key.   # noqa: E501

        :return: The variable_hash_enabled of this LbVariablePersistenceLearnAction.  # noqa: E501
        :rtype: bool
        """
        return self._variable_hash_enabled

    @variable_hash_enabled.setter
    def variable_hash_enabled(self, variable_hash_enabled):
        """Sets the variable_hash_enabled of this LbVariablePersistenceLearnAction.

        The property is used to enable a hash operation for variable value when composing the persistence key.   # noqa: E501

        :param variable_hash_enabled: The variable_hash_enabled of this LbVariablePersistenceLearnAction.  # noqa: E501
        :type: bool
        """

        self._variable_hash_enabled = variable_hash_enabled

    @property
    def variable_name(self):
        """Gets the variable_name of this LbVariablePersistenceLearnAction.  # noqa: E501

        The property is the name of variable to be learnt. It is used to identify which variable's value is learnt from HTTP response. The variable can be a system embedded variable such as \"_cookie_JSESSIONID\", a customized variable defined in LbVariableAssignmentAction or a captured variable in regular expression such as \"article\".   # noqa: E501

        :return: The variable_name of this LbVariablePersistenceLearnAction.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this LbVariablePersistenceLearnAction.

        The property is the name of variable to be learnt. It is used to identify which variable's value is learnt from HTTP response. The variable can be a system embedded variable such as \"_cookie_JSESSIONID\", a customized variable defined in LbVariableAssignmentAction or a captured variable in regular expression such as \"article\".   # noqa: E501

        :param variable_name: The variable_name of this LbVariablePersistenceLearnAction.  # noqa: E501
        :type: str
        """
        if variable_name is None:
            raise ValueError("Invalid value for `variable_name`, must not be `None`")  # noqa: E501

        self._variable_name = variable_name

    @property
    def persistence_profile_id(self):
        """Gets the persistence_profile_id of this LbVariablePersistenceLearnAction.  # noqa: E501

        If the persistence profile UUID is not specified, a default persistence table is created per virtual server. Currently, only LbGenericPersistenceProfile is supported.   # noqa: E501

        :return: The persistence_profile_id of this LbVariablePersistenceLearnAction.  # noqa: E501
        :rtype: str
        """
        return self._persistence_profile_id

    @persistence_profile_id.setter
    def persistence_profile_id(self, persistence_profile_id):
        """Sets the persistence_profile_id of this LbVariablePersistenceLearnAction.

        If the persistence profile UUID is not specified, a default persistence table is created per virtual server. Currently, only LbGenericPersistenceProfile is supported.   # noqa: E501

        :param persistence_profile_id: The persistence_profile_id of this LbVariablePersistenceLearnAction.  # noqa: E501
        :type: str
        """

        self._persistence_profile_id = persistence_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbVariablePersistenceLearnAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbVariablePersistenceLearnAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
