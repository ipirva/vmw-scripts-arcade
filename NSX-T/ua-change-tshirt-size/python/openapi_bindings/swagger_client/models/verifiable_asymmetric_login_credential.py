# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.login_credential import LoginCredential  # noqa: F401,E501

class VerifiableAsymmetricLoginCredential(LoginCredential):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asymmetric_credential': 'str',
        'credential_verifier': 'str',
        'credential_key': 'str'
    }
    if hasattr(LoginCredential, "swagger_types"):
        swagger_types.update(LoginCredential.swagger_types)

    attribute_map = {
        'asymmetric_credential': 'asymmetric_credential',
        'credential_verifier': 'credential_verifier',
        'credential_key': 'credential_key'
    }
    if hasattr(LoginCredential, "attribute_map"):
        attribute_map.update(LoginCredential.attribute_map)

    def __init__(self, asymmetric_credential=None, credential_verifier=None, credential_key=None, *args, **kwargs):  # noqa: E501
        """VerifiableAsymmetricLoginCredential - a model defined in Swagger"""  # noqa: E501
        self._asymmetric_credential = None
        self._credential_verifier = None
        self._credential_key = None
        self.discriminator = None
        if asymmetric_credential is not None:
            self.asymmetric_credential = asymmetric_credential
        if credential_verifier is not None:
            self.credential_verifier = credential_verifier
        if credential_key is not None:
            self.credential_key = credential_key
        LoginCredential.__init__(self, *args, **kwargs)

    @property
    def asymmetric_credential(self):
        """Gets the asymmetric_credential of this VerifiableAsymmetricLoginCredential.  # noqa: E501

        Asymmetric login credential  # noqa: E501

        :return: The asymmetric_credential of this VerifiableAsymmetricLoginCredential.  # noqa: E501
        :rtype: str
        """
        return self._asymmetric_credential

    @asymmetric_credential.setter
    def asymmetric_credential(self, asymmetric_credential):
        """Sets the asymmetric_credential of this VerifiableAsymmetricLoginCredential.

        Asymmetric login credential  # noqa: E501

        :param asymmetric_credential: The asymmetric_credential of this VerifiableAsymmetricLoginCredential.  # noqa: E501
        :type: str
        """

        self._asymmetric_credential = asymmetric_credential

    @property
    def credential_verifier(self):
        """Gets the credential_verifier of this VerifiableAsymmetricLoginCredential.  # noqa: E501

        Credential verifier  # noqa: E501

        :return: The credential_verifier of this VerifiableAsymmetricLoginCredential.  # noqa: E501
        :rtype: str
        """
        return self._credential_verifier

    @credential_verifier.setter
    def credential_verifier(self, credential_verifier):
        """Sets the credential_verifier of this VerifiableAsymmetricLoginCredential.

        Credential verifier  # noqa: E501

        :param credential_verifier: The credential_verifier of this VerifiableAsymmetricLoginCredential.  # noqa: E501
        :type: str
        """

        self._credential_verifier = credential_verifier

    @property
    def credential_key(self):
        """Gets the credential_key of this VerifiableAsymmetricLoginCredential.  # noqa: E501

        Credential key  # noqa: E501

        :return: The credential_key of this VerifiableAsymmetricLoginCredential.  # noqa: E501
        :rtype: str
        """
        return self._credential_key

    @credential_key.setter
    def credential_key(self, credential_key):
        """Sets the credential_key of this VerifiableAsymmetricLoginCredential.

        Credential key  # noqa: E501

        :param credential_key: The credential_key of this VerifiableAsymmetricLoginCredential.  # noqa: E501
        :type: str
        """

        self._credential_key = credential_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifiableAsymmetricLoginCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifiableAsymmetricLoginCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
