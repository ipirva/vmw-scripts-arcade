# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.csv_record import CsvRecord  # noqa: F401,E501

class UpgradeCheckCsvRecord(CsvRecord):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'check_description': 'str',
        'failure_messages': 'str',
        'check_name': 'str',
        'upgrade_unit_id': 'str',
        'upgrade_unit_metadata': 'str',
        'upgrade_unit_type': 'str'
    }
    if hasattr(CsvRecord, "swagger_types"):
        swagger_types.update(CsvRecord.swagger_types)

    attribute_map = {
        'status': 'status',
        'check_description': 'check_description',
        'failure_messages': 'failure_messages',
        'check_name': 'check_name',
        'upgrade_unit_id': 'upgrade_unit_id',
        'upgrade_unit_metadata': 'upgrade_unit_metadata',
        'upgrade_unit_type': 'upgrade_unit_type'
    }
    if hasattr(CsvRecord, "attribute_map"):
        attribute_map.update(CsvRecord.attribute_map)

    def __init__(self, status=None, check_description=None, failure_messages=None, check_name=None, upgrade_unit_id=None, upgrade_unit_metadata=None, upgrade_unit_type=None, *args, **kwargs):  # noqa: E501
        """UpgradeCheckCsvRecord - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._check_description = None
        self._failure_messages = None
        self._check_name = None
        self._upgrade_unit_id = None
        self._upgrade_unit_metadata = None
        self._upgrade_unit_type = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if check_description is not None:
            self.check_description = check_description
        if failure_messages is not None:
            self.failure_messages = failure_messages
        self.check_name = check_name
        if upgrade_unit_id is not None:
            self.upgrade_unit_id = upgrade_unit_id
        if upgrade_unit_metadata is not None:
            self.upgrade_unit_metadata = upgrade_unit_metadata
        self.upgrade_unit_type = upgrade_unit_type
        CsvRecord.__init__(self, *args, **kwargs)

    @property
    def status(self):
        """Gets the status of this UpgradeCheckCsvRecord.  # noqa: E501

        Status of the pre/post-upgrade check  # noqa: E501

        :return: The status of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpgradeCheckCsvRecord.

        Status of the pre/post-upgrade check  # noqa: E501

        :param status: The status of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILURE", "WARNING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def check_description(self):
        """Gets the check_description of this UpgradeCheckCsvRecord.  # noqa: E501

        Description of the pre/post-upgrade check  # noqa: E501

        :return: The check_description of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._check_description

    @check_description.setter
    def check_description(self, check_description):
        """Sets the check_description of this UpgradeCheckCsvRecord.

        Description of the pre/post-upgrade check  # noqa: E501

        :param check_description: The check_description of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """

        self._check_description = check_description

    @property
    def failure_messages(self):
        """Gets the failure_messages of this UpgradeCheckCsvRecord.  # noqa: E501

        Space-separated list of failure messages  # noqa: E501

        :return: The failure_messages of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._failure_messages

    @failure_messages.setter
    def failure_messages(self, failure_messages):
        """Sets the failure_messages of this UpgradeCheckCsvRecord.

        Space-separated list of failure messages  # noqa: E501

        :param failure_messages: The failure_messages of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """

        self._failure_messages = failure_messages

    @property
    def check_name(self):
        """Gets the check_name of this UpgradeCheckCsvRecord.  # noqa: E501

        Display name of the pre/post-upgrade check  # noqa: E501

        :return: The check_name of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._check_name

    @check_name.setter
    def check_name(self, check_name):
        """Sets the check_name of this UpgradeCheckCsvRecord.

        Display name of the pre/post-upgrade check  # noqa: E501

        :param check_name: The check_name of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """
        if check_name is None:
            raise ValueError("Invalid value for `check_name`, must not be `None`")  # noqa: E501

        self._check_name = check_name

    @property
    def upgrade_unit_id(self):
        """Gets the upgrade_unit_id of this UpgradeCheckCsvRecord.  # noqa: E501

        Identifier of the upgrade unit  # noqa: E501

        :return: The upgrade_unit_id of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_unit_id

    @upgrade_unit_id.setter
    def upgrade_unit_id(self, upgrade_unit_id):
        """Sets the upgrade_unit_id of this UpgradeCheckCsvRecord.

        Identifier of the upgrade unit  # noqa: E501

        :param upgrade_unit_id: The upgrade_unit_id of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """

        self._upgrade_unit_id = upgrade_unit_id

    @property
    def upgrade_unit_metadata(self):
        """Gets the upgrade_unit_metadata of this UpgradeCheckCsvRecord.  # noqa: E501

        Meta-data of the upgrade-unit  # noqa: E501

        :return: The upgrade_unit_metadata of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_unit_metadata

    @upgrade_unit_metadata.setter
    def upgrade_unit_metadata(self, upgrade_unit_metadata):
        """Sets the upgrade_unit_metadata of this UpgradeCheckCsvRecord.

        Meta-data of the upgrade-unit  # noqa: E501

        :param upgrade_unit_metadata: The upgrade_unit_metadata of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """

        self._upgrade_unit_metadata = upgrade_unit_metadata

    @property
    def upgrade_unit_type(self):
        """Gets the upgrade_unit_type of this UpgradeCheckCsvRecord.  # noqa: E501

        Component type of the upgrade unit  # noqa: E501

        :return: The upgrade_unit_type of this UpgradeCheckCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_unit_type

    @upgrade_unit_type.setter
    def upgrade_unit_type(self, upgrade_unit_type):
        """Sets the upgrade_unit_type of this UpgradeCheckCsvRecord.

        Component type of the upgrade unit  # noqa: E501

        :param upgrade_unit_type: The upgrade_unit_type of this UpgradeCheckCsvRecord.  # noqa: E501
        :type: str
        """
        if upgrade_unit_type is None:
            raise ValueError("Invalid value for `upgrade_unit_type`, must not be `None`")  # noqa: E501

        self._upgrade_unit_type = upgrade_unit_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeCheckCsvRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeCheckCsvRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
