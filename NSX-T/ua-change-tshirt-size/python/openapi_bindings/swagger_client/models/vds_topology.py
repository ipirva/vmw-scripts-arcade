# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VdsTopology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vds_status': 'str',
        'vmknic': 'list[str]',
        'transport_node_id': 'list[str]',
        'status_details': 'list[str]',
        'vds_config': 'DVSConfig',
        'vds_name': 'str',
        'data_center_id': 'str'
    }

    attribute_map = {
        'vds_status': 'vds_status',
        'vmknic': 'vmknic',
        'transport_node_id': 'transport_node_id',
        'status_details': 'status_details',
        'vds_config': 'vds_config',
        'vds_name': 'vds_name',
        'data_center_id': 'data_center_id'
    }

    def __init__(self, vds_status=None, vmknic=None, transport_node_id=None, status_details=None, vds_config=None, vds_name=None, data_center_id=None):  # noqa: E501
        """VdsTopology - a model defined in Swagger"""  # noqa: E501
        self._vds_status = None
        self._vmknic = None
        self._transport_node_id = None
        self._status_details = None
        self._vds_config = None
        self._vds_name = None
        self._data_center_id = None
        self.discriminator = None
        if vds_status is not None:
            self.vds_status = vds_status
        if vmknic is not None:
            self.vmknic = vmknic
        self.transport_node_id = transport_node_id
        if status_details is not None:
            self.status_details = status_details
        if vds_config is not None:
            self.vds_config = vds_config
        self.vds_name = vds_name
        self.data_center_id = data_center_id

    @property
    def vds_status(self):
        """Gets the vds_status of this VdsTopology.  # noqa: E501

        Status of the VDS configuration  # noqa: E501

        :return: The vds_status of this VdsTopology.  # noqa: E501
        :rtype: str
        """
        return self._vds_status

    @vds_status.setter
    def vds_status(self, vds_status):
        """Sets the vds_status of this VdsTopology.

        Status of the VDS configuration  # noqa: E501

        :param vds_status: The vds_status of this VdsTopology.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING_TOPOLOGY", "APPLYING_TOPOLOGY", "APPLY_TOPOLOGY_FAILED", "READY"]  # noqa: E501
        if vds_status not in allowed_values:
            raise ValueError(
                "Invalid value for `vds_status` ({0}), must be one of {1}"  # noqa: E501
                .format(vds_status, allowed_values)
            )

        self._vds_status = vds_status

    @property
    def vmknic(self):
        """Gets the vmknic of this VdsTopology.  # noqa: E501

        Virtual network interfaces that will be moved from VLAN Logical switch to Distributed Virtual PortGroup  # noqa: E501

        :return: The vmknic of this VdsTopology.  # noqa: E501
        :rtype: list[str]
        """
        return self._vmknic

    @vmknic.setter
    def vmknic(self, vmknic):
        """Sets the vmknic of this VdsTopology.

        Virtual network interfaces that will be moved from VLAN Logical switch to Distributed Virtual PortGroup  # noqa: E501

        :param vmknic: The vmknic of this VdsTopology.  # noqa: E501
        :type: list[str]
        """

        self._vmknic = vmknic

    @property
    def transport_node_id(self):
        """Gets the transport_node_id of this VdsTopology.  # noqa: E501

        Transport node identifiers on which NVDS(s) being upgraded to VDS  # noqa: E501

        :return: The transport_node_id of this VdsTopology.  # noqa: E501
        :rtype: list[str]
        """
        return self._transport_node_id

    @transport_node_id.setter
    def transport_node_id(self, transport_node_id):
        """Sets the transport_node_id of this VdsTopology.

        Transport node identifiers on which NVDS(s) being upgraded to VDS  # noqa: E501

        :param transport_node_id: The transport_node_id of this VdsTopology.  # noqa: E501
        :type: list[str]
        """
        if transport_node_id is None:
            raise ValueError("Invalid value for `transport_node_id`, must not be `None`")  # noqa: E501

        self._transport_node_id = transport_node_id

    @property
    def status_details(self):
        """Gets the status_details of this VdsTopology.  # noqa: E501

        Details of the VDS configuration status  # noqa: E501

        :return: The status_details of this VdsTopology.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this VdsTopology.

        Details of the VDS configuration status  # noqa: E501

        :param status_details: The status_details of this VdsTopology.  # noqa: E501
        :type: list[str]
        """

        self._status_details = status_details

    @property
    def vds_config(self):
        """Gets the vds_config of this VdsTopology.  # noqa: E501


        :return: The vds_config of this VdsTopology.  # noqa: E501
        :rtype: DVSConfig
        """
        return self._vds_config

    @vds_config.setter
    def vds_config(self, vds_config):
        """Sets the vds_config of this VdsTopology.


        :param vds_config: The vds_config of this VdsTopology.  # noqa: E501
        :type: DVSConfig
        """

        self._vds_config = vds_config

    @property
    def vds_name(self):
        """Gets the vds_name of this VdsTopology.  # noqa: E501

        VDS name that will be created under above datacenter  # noqa: E501

        :return: The vds_name of this VdsTopology.  # noqa: E501
        :rtype: str
        """
        return self._vds_name

    @vds_name.setter
    def vds_name(self, vds_name):
        """Sets the vds_name of this VdsTopology.

        VDS name that will be created under above datacenter  # noqa: E501

        :param vds_name: The vds_name of this VdsTopology.  # noqa: E501
        :type: str
        """
        if vds_name is None:
            raise ValueError("Invalid value for `vds_name`, must not be `None`")  # noqa: E501

        self._vds_name = vds_name

    @property
    def data_center_id(self):
        """Gets the data_center_id of this VdsTopology.  # noqa: E501

        Identifier of datacenter where VDS will be created  # noqa: E501

        :return: The data_center_id of this VdsTopology.  # noqa: E501
        :rtype: str
        """
        return self._data_center_id

    @data_center_id.setter
    def data_center_id(self, data_center_id):
        """Sets the data_center_id of this VdsTopology.

        Identifier of datacenter where VDS will be created  # noqa: E501

        :param data_center_id: The data_center_id of this VdsTopology.  # noqa: E501
        :type: str
        """
        if data_center_id is None:
            raise ValueError("Invalid value for `data_center_id`, must not be `None`")  # noqa: E501

        self._data_center_id = data_center_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdsTopology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdsTopology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
