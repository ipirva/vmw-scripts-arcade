# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_service_profile import BaseServiceProfile  # noqa: F401,E501

class ServiceInsertionServiceProfile(BaseServiceProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attributes': 'list[Attribute]',
        'service_id': 'str',
        'redirection_action': 'str',
        'vendor_template_id': 'str'
    }
    if hasattr(BaseServiceProfile, "swagger_types"):
        swagger_types.update(BaseServiceProfile.swagger_types)

    attribute_map = {
        'attributes': 'attributes',
        'service_id': 'service_id',
        'redirection_action': 'redirection_action',
        'vendor_template_id': 'vendor_template_id'
    }
    if hasattr(BaseServiceProfile, "attribute_map"):
        attribute_map.update(BaseServiceProfile.attribute_map)

    def __init__(self, attributes=None, service_id=None, redirection_action='PUNT', vendor_template_id=None, *args, **kwargs):  # noqa: E501
        """ServiceInsertionServiceProfile - a model defined in Swagger"""  # noqa: E501
        self._attributes = None
        self._service_id = None
        self._redirection_action = None
        self._vendor_template_id = None
        self.discriminator = None
        if attributes is not None:
            self.attributes = attributes
        if service_id is not None:
            self.service_id = service_id
        if redirection_action is not None:
            self.redirection_action = redirection_action
        self.vendor_template_id = vendor_template_id
        BaseServiceProfile.__init__(self, *args, **kwargs)

    @property
    def attributes(self):
        """Gets the attributes of this ServiceInsertionServiceProfile.  # noqa: E501

        List of attributes specific to a partner for which the service is created. These attributes are passed on to the partner appliance and are opaque to the NSX Manager. If a vendor template exposes configurables, then the values are specified here.  # noqa: E501

        :return: The attributes of this ServiceInsertionServiceProfile.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ServiceInsertionServiceProfile.

        List of attributes specific to a partner for which the service is created. These attributes are passed on to the partner appliance and are opaque to the NSX Manager. If a vendor template exposes configurables, then the values are specified here.  # noqa: E501

        :param attributes: The attributes of this ServiceInsertionServiceProfile.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def service_id(self):
        """Gets the service_id of this ServiceInsertionServiceProfile.  # noqa: E501

        The service to which the service profile belongs.  # noqa: E501

        :return: The service_id of this ServiceInsertionServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceInsertionServiceProfile.

        The service to which the service profile belongs.  # noqa: E501

        :param service_id: The service_id of this ServiceInsertionServiceProfile.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def redirection_action(self):
        """Gets the redirection_action of this ServiceInsertionServiceProfile.  # noqa: E501

        The redirection action represents if the packet is exclusively redirected to the service, or if a copy is forwarded to the service. The service insertion profile inherits the redirection action if already specified at the vendor template. However the service profile cannot overide the action specified at the vendor template.  # noqa: E501

        :return: The redirection_action of this ServiceInsertionServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._redirection_action

    @redirection_action.setter
    def redirection_action(self, redirection_action):
        """Sets the redirection_action of this ServiceInsertionServiceProfile.

        The redirection action represents if the packet is exclusively redirected to the service, or if a copy is forwarded to the service. The service insertion profile inherits the redirection action if already specified at the vendor template. However the service profile cannot overide the action specified at the vendor template.  # noqa: E501

        :param redirection_action: The redirection_action of this ServiceInsertionServiceProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUNT", "COPY"]  # noqa: E501
        if redirection_action not in allowed_values:
            raise ValueError(
                "Invalid value for `redirection_action` ({0}), must be one of {1}"  # noqa: E501
                .format(redirection_action, allowed_values)
            )

        self._redirection_action = redirection_action

    @property
    def vendor_template_id(self):
        """Gets the vendor_template_id of this ServiceInsertionServiceProfile.  # noqa: E501

        Id of the vendor template to be used by the servive profile.  # noqa: E501

        :return: The vendor_template_id of this ServiceInsertionServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._vendor_template_id

    @vendor_template_id.setter
    def vendor_template_id(self, vendor_template_id):
        """Sets the vendor_template_id of this ServiceInsertionServiceProfile.

        Id of the vendor template to be used by the servive profile.  # noqa: E501

        :param vendor_template_id: The vendor_template_id of this ServiceInsertionServiceProfile.  # noqa: E501
        :type: str
        """
        if vendor_template_id is None:
            raise ValueError("Invalid value for `vendor_template_id`, must not be `None`")  # noqa: E501

        self._vendor_template_id = vendor_template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceInsertionServiceProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInsertionServiceProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
