# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PktcapActionArgument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pktcap_type': 'str',
        'dest_lport': 'str',
        'reverse_filter': 'LiveTraceFilterData'
    }

    attribute_map = {
        'pktcap_type': 'pktcap_type',
        'dest_lport': 'dest_lport',
        'reverse_filter': 'reverse_filter'
    }

    def __init__(self, pktcap_type=None, dest_lport=None, reverse_filter=None):  # noqa: E501
        """PktcapActionArgument - a model defined in Swagger"""  # noqa: E501
        self._pktcap_type = None
        self._dest_lport = None
        self._reverse_filter = None
        self.discriminator = None
        if pktcap_type is not None:
            self.pktcap_type = pktcap_type
        if dest_lport is not None:
            self.dest_lport = dest_lport
        if reverse_filter is not None:
            self.reverse_filter = reverse_filter

    @property
    def pktcap_type(self):
        """Gets the pktcap_type of this PktcapActionArgument.  # noqa: E501

        Type of packet capture  # noqa: E501

        :return: The pktcap_type of this PktcapActionArgument.  # noqa: E501
        :rtype: str
        """
        return self._pktcap_type

    @pktcap_type.setter
    def pktcap_type(self, pktcap_type):
        """Sets the pktcap_type of this PktcapActionArgument.

        Type of packet capture  # noqa: E501

        :param pktcap_type: The pktcap_type of this PktcapActionArgument.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNI_DIRECTIONAL", "BI_DIRECTIONAL"]  # noqa: E501
        if pktcap_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pktcap_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pktcap_type, allowed_values)
            )

        self._pktcap_type = pktcap_type

    @property
    def dest_lport(self):
        """Gets the dest_lport of this PktcapActionArgument.  # noqa: E501

        Please keep this aligned with trace_config, if you specify dest_lport at trace_config.   # noqa: E501

        :return: The dest_lport of this PktcapActionArgument.  # noqa: E501
        :rtype: str
        """
        return self._dest_lport

    @dest_lport.setter
    def dest_lport(self, dest_lport):
        """Sets the dest_lport of this PktcapActionArgument.

        Please keep this aligned with trace_config, if you specify dest_lport at trace_config.   # noqa: E501

        :param dest_lport: The dest_lport of this PktcapActionArgument.  # noqa: E501
        :type: str
        """

        self._dest_lport = dest_lport

    @property
    def reverse_filter(self):
        """Gets the reverse_filter of this PktcapActionArgument.  # noqa: E501


        :return: The reverse_filter of this PktcapActionArgument.  # noqa: E501
        :rtype: LiveTraceFilterData
        """
        return self._reverse_filter

    @reverse_filter.setter
    def reverse_filter(self, reverse_filter):
        """Sets the reverse_filter of this PktcapActionArgument.


        :param reverse_filter: The reverse_filter of this PktcapActionArgument.  # noqa: E501
        :type: LiveTraceFilterData
        """

        self._reverse_filter = reverse_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PktcapActionArgument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PktcapActionArgument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
