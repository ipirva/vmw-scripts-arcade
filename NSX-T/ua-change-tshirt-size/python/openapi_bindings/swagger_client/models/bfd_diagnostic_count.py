# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BFDDiagnosticCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'concatenated_path_down_count': 'int',
        'administratively_down_count': 'int',
        'no_diagnostic_count': 'int',
        'path_down_count': 'int',
        'reverse_concatenated_path_down_count': 'int',
        'neighbor_signaled_session_down_count': 'int',
        'control_detection_time_expired_count': 'int',
        'echo_function_failed_count': 'int',
        'forwarding_plane_reset_count': 'int'
    }

    attribute_map = {
        'concatenated_path_down_count': 'concatenated_path_down_count',
        'administratively_down_count': 'administratively_down_count',
        'no_diagnostic_count': 'no_diagnostic_count',
        'path_down_count': 'path_down_count',
        'reverse_concatenated_path_down_count': 'reverse_concatenated_path_down_count',
        'neighbor_signaled_session_down_count': 'neighbor_signaled_session_down_count',
        'control_detection_time_expired_count': 'control_detection_time_expired_count',
        'echo_function_failed_count': 'echo_function_failed_count',
        'forwarding_plane_reset_count': 'forwarding_plane_reset_count'
    }

    def __init__(self, concatenated_path_down_count=None, administratively_down_count=None, no_diagnostic_count=None, path_down_count=None, reverse_concatenated_path_down_count=None, neighbor_signaled_session_down_count=None, control_detection_time_expired_count=None, echo_function_failed_count=None, forwarding_plane_reset_count=None):  # noqa: E501
        """BFDDiagnosticCount - a model defined in Swagger"""  # noqa: E501
        self._concatenated_path_down_count = None
        self._administratively_down_count = None
        self._no_diagnostic_count = None
        self._path_down_count = None
        self._reverse_concatenated_path_down_count = None
        self._neighbor_signaled_session_down_count = None
        self._control_detection_time_expired_count = None
        self._echo_function_failed_count = None
        self._forwarding_plane_reset_count = None
        self.discriminator = None
        if concatenated_path_down_count is not None:
            self.concatenated_path_down_count = concatenated_path_down_count
        if administratively_down_count is not None:
            self.administratively_down_count = administratively_down_count
        if no_diagnostic_count is not None:
            self.no_diagnostic_count = no_diagnostic_count
        if path_down_count is not None:
            self.path_down_count = path_down_count
        if reverse_concatenated_path_down_count is not None:
            self.reverse_concatenated_path_down_count = reverse_concatenated_path_down_count
        if neighbor_signaled_session_down_count is not None:
            self.neighbor_signaled_session_down_count = neighbor_signaled_session_down_count
        if control_detection_time_expired_count is not None:
            self.control_detection_time_expired_count = control_detection_time_expired_count
        if echo_function_failed_count is not None:
            self.echo_function_failed_count = echo_function_failed_count
        if forwarding_plane_reset_count is not None:
            self.forwarding_plane_reset_count = forwarding_plane_reset_count

    @property
    def concatenated_path_down_count(self):
        """Gets the concatenated_path_down_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with concatenated path down diagnostic message  # noqa: E501

        :return: The concatenated_path_down_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._concatenated_path_down_count

    @concatenated_path_down_count.setter
    def concatenated_path_down_count(self, concatenated_path_down_count):
        """Sets the concatenated_path_down_count of this BFDDiagnosticCount.

        Number of tunnels with concatenated path down diagnostic message  # noqa: E501

        :param concatenated_path_down_count: The concatenated_path_down_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._concatenated_path_down_count = concatenated_path_down_count

    @property
    def administratively_down_count(self):
        """Gets the administratively_down_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with administratively down diagnostic message  # noqa: E501

        :return: The administratively_down_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._administratively_down_count

    @administratively_down_count.setter
    def administratively_down_count(self, administratively_down_count):
        """Sets the administratively_down_count of this BFDDiagnosticCount.

        Number of tunnels with administratively down diagnostic message  # noqa: E501

        :param administratively_down_count: The administratively_down_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._administratively_down_count = administratively_down_count

    @property
    def no_diagnostic_count(self):
        """Gets the no_diagnostic_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with no diagnostic  # noqa: E501

        :return: The no_diagnostic_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._no_diagnostic_count

    @no_diagnostic_count.setter
    def no_diagnostic_count(self, no_diagnostic_count):
        """Sets the no_diagnostic_count of this BFDDiagnosticCount.

        Number of tunnels with no diagnostic  # noqa: E501

        :param no_diagnostic_count: The no_diagnostic_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._no_diagnostic_count = no_diagnostic_count

    @property
    def path_down_count(self):
        """Gets the path_down_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with path down diagnostic message  # noqa: E501

        :return: The path_down_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._path_down_count

    @path_down_count.setter
    def path_down_count(self, path_down_count):
        """Sets the path_down_count of this BFDDiagnosticCount.

        Number of tunnels with path down diagnostic message  # noqa: E501

        :param path_down_count: The path_down_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._path_down_count = path_down_count

    @property
    def reverse_concatenated_path_down_count(self):
        """Gets the reverse_concatenated_path_down_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with reverse concatenated path down diagnostic message  # noqa: E501

        :return: The reverse_concatenated_path_down_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._reverse_concatenated_path_down_count

    @reverse_concatenated_path_down_count.setter
    def reverse_concatenated_path_down_count(self, reverse_concatenated_path_down_count):
        """Sets the reverse_concatenated_path_down_count of this BFDDiagnosticCount.

        Number of tunnels with reverse concatenated path down diagnostic message  # noqa: E501

        :param reverse_concatenated_path_down_count: The reverse_concatenated_path_down_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._reverse_concatenated_path_down_count = reverse_concatenated_path_down_count

    @property
    def neighbor_signaled_session_down_count(self):
        """Gets the neighbor_signaled_session_down_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels neighbor signaled session down  # noqa: E501

        :return: The neighbor_signaled_session_down_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._neighbor_signaled_session_down_count

    @neighbor_signaled_session_down_count.setter
    def neighbor_signaled_session_down_count(self, neighbor_signaled_session_down_count):
        """Sets the neighbor_signaled_session_down_count of this BFDDiagnosticCount.

        Number of tunnels neighbor signaled session down  # noqa: E501

        :param neighbor_signaled_session_down_count: The neighbor_signaled_session_down_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._neighbor_signaled_session_down_count = neighbor_signaled_session_down_count

    @property
    def control_detection_time_expired_count(self):
        """Gets the control_detection_time_expired_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with control detection time expired diagnostic message  # noqa: E501

        :return: The control_detection_time_expired_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._control_detection_time_expired_count

    @control_detection_time_expired_count.setter
    def control_detection_time_expired_count(self, control_detection_time_expired_count):
        """Sets the control_detection_time_expired_count of this BFDDiagnosticCount.

        Number of tunnels with control detection time expired diagnostic message  # noqa: E501

        :param control_detection_time_expired_count: The control_detection_time_expired_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._control_detection_time_expired_count = control_detection_time_expired_count

    @property
    def echo_function_failed_count(self):
        """Gets the echo_function_failed_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with echo function failed diagnostic message  # noqa: E501

        :return: The echo_function_failed_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._echo_function_failed_count

    @echo_function_failed_count.setter
    def echo_function_failed_count(self, echo_function_failed_count):
        """Sets the echo_function_failed_count of this BFDDiagnosticCount.

        Number of tunnels with echo function failed diagnostic message  # noqa: E501

        :param echo_function_failed_count: The echo_function_failed_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._echo_function_failed_count = echo_function_failed_count

    @property
    def forwarding_plane_reset_count(self):
        """Gets the forwarding_plane_reset_count of this BFDDiagnosticCount.  # noqa: E501

        Number of tunnels with forwarding plane reset diagnostic message  # noqa: E501

        :return: The forwarding_plane_reset_count of this BFDDiagnosticCount.  # noqa: E501
        :rtype: int
        """
        return self._forwarding_plane_reset_count

    @forwarding_plane_reset_count.setter
    def forwarding_plane_reset_count(self, forwarding_plane_reset_count):
        """Sets the forwarding_plane_reset_count of this BFDDiagnosticCount.

        Number of tunnels with forwarding plane reset diagnostic message  # noqa: E501

        :param forwarding_plane_reset_count: The forwarding_plane_reset_count of this BFDDiagnosticCount.  # noqa: E501
        :type: int
        """

        self._forwarding_plane_reset_count = forwarding_plane_reset_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BFDDiagnosticCount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BFDDiagnosticCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
