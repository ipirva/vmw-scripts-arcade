# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ClusterNodeConfig(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manager_role': 'ManagementClusterRoleConfig',
        'controller_role': 'ControllerClusterRoleConfig',
        'external_id': 'str',
        'appliance_mgmt_listen_addr': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'manager_role': 'manager_role',
        'controller_role': 'controller_role',
        'external_id': 'external_id',
        'appliance_mgmt_listen_addr': 'appliance_mgmt_listen_addr'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, manager_role=None, controller_role=None, external_id=None, appliance_mgmt_listen_addr=None, *args, **kwargs):  # noqa: E501
        """ClusterNodeConfig - a model defined in Swagger"""  # noqa: E501
        self._manager_role = None
        self._controller_role = None
        self._external_id = None
        self._appliance_mgmt_listen_addr = None
        self.discriminator = None
        if manager_role is not None:
            self.manager_role = manager_role
        if controller_role is not None:
            self.controller_role = controller_role
        if external_id is not None:
            self.external_id = external_id
        if appliance_mgmt_listen_addr is not None:
            self.appliance_mgmt_listen_addr = appliance_mgmt_listen_addr
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def manager_role(self):
        """Gets the manager_role of this ClusterNodeConfig.  # noqa: E501


        :return: The manager_role of this ClusterNodeConfig.  # noqa: E501
        :rtype: ManagementClusterRoleConfig
        """
        return self._manager_role

    @manager_role.setter
    def manager_role(self, manager_role):
        """Sets the manager_role of this ClusterNodeConfig.


        :param manager_role: The manager_role of this ClusterNodeConfig.  # noqa: E501
        :type: ManagementClusterRoleConfig
        """

        self._manager_role = manager_role

    @property
    def controller_role(self):
        """Gets the controller_role of this ClusterNodeConfig.  # noqa: E501


        :return: The controller_role of this ClusterNodeConfig.  # noqa: E501
        :rtype: ControllerClusterRoleConfig
        """
        return self._controller_role

    @controller_role.setter
    def controller_role(self, controller_role):
        """Sets the controller_role of this ClusterNodeConfig.


        :param controller_role: The controller_role of this ClusterNodeConfig.  # noqa: E501
        :type: ControllerClusterRoleConfig
        """

        self._controller_role = controller_role

    @property
    def external_id(self):
        """Gets the external_id of this ClusterNodeConfig.  # noqa: E501

        Internal identifier provided by the node  # noqa: E501

        :return: The external_id of this ClusterNodeConfig.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ClusterNodeConfig.

        Internal identifier provided by the node  # noqa: E501

        :param external_id: The external_id of this ClusterNodeConfig.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def appliance_mgmt_listen_addr(self):
        """Gets the appliance_mgmt_listen_addr of this ClusterNodeConfig.  # noqa: E501

        The IP and port for the appliance management API service on this node  # noqa: E501

        :return: The appliance_mgmt_listen_addr of this ClusterNodeConfig.  # noqa: E501
        :rtype: str
        """
        return self._appliance_mgmt_listen_addr

    @appliance_mgmt_listen_addr.setter
    def appliance_mgmt_listen_addr(self, appliance_mgmt_listen_addr):
        """Sets the appliance_mgmt_listen_addr of this ClusterNodeConfig.

        The IP and port for the appliance management API service on this node  # noqa: E501

        :param appliance_mgmt_listen_addr: The appliance_mgmt_listen_addr of this ClusterNodeConfig.  # noqa: E501
        :type: str
        """

        self._appliance_mgmt_listen_addr = appliance_mgmt_listen_addr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterNodeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNodeConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
