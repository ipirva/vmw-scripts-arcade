# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterNodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'msg_clients': 'list[NodeMessagingClientInfo]',
        'node_uuid': 'str',
        'display_name': 'str',
        'entities': 'list[NodeEntityInfo]',
        'certificates': 'list[NodeCertificateInfo]',
        'fqdn': 'str'
    }

    attribute_map = {
        'status': 'status',
        'msg_clients': 'msg_clients',
        'node_uuid': 'node_uuid',
        'display_name': 'display_name',
        'entities': 'entities',
        'certificates': 'certificates',
        'fqdn': 'fqdn'
    }

    def __init__(self, status=None, msg_clients=None, node_uuid=None, display_name=None, entities=None, certificates=None, fqdn=None):  # noqa: E501
        """ClusterNodeInfo - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._msg_clients = None
        self._node_uuid = None
        self._display_name = None
        self._entities = None
        self._certificates = None
        self._fqdn = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if msg_clients is not None:
            self.msg_clients = msg_clients
        if node_uuid is not None:
            self.node_uuid = node_uuid
        if display_name is not None:
            self.display_name = display_name
        if entities is not None:
            self.entities = entities
        if certificates is not None:
            self.certificates = certificates
        if fqdn is not None:
            self.fqdn = fqdn

    @property
    def status(self):
        """Gets the status of this ClusterNodeInfo.  # noqa: E501

        Node clustering status  # noqa: E501

        :return: The status of this ClusterNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterNodeInfo.

        Node clustering status  # noqa: E501

        :param status: The status of this ClusterNodeInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["JOINING", "JOINED", "REMOVING", "REMOVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def msg_clients(self):
        """Gets the msg_clients of this ClusterNodeInfo.  # noqa: E501

        Messaging client of all entities  # noqa: E501

        :return: The msg_clients of this ClusterNodeInfo.  # noqa: E501
        :rtype: list[NodeMessagingClientInfo]
        """
        return self._msg_clients

    @msg_clients.setter
    def msg_clients(self, msg_clients):
        """Sets the msg_clients of this ClusterNodeInfo.

        Messaging client of all entities  # noqa: E501

        :param msg_clients: The msg_clients of this ClusterNodeInfo.  # noqa: E501
        :type: list[NodeMessagingClientInfo]
        """

        self._msg_clients = msg_clients

    @property
    def node_uuid(self):
        """Gets the node_uuid of this ClusterNodeInfo.  # noqa: E501

        Unique identifier of this node  # noqa: E501

        :return: The node_uuid of this ClusterNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        """Sets the node_uuid of this ClusterNodeInfo.

        Unique identifier of this node  # noqa: E501

        :param node_uuid: The node_uuid of this ClusterNodeInfo.  # noqa: E501
        :type: str
        """

        self._node_uuid = node_uuid

    @property
    def display_name(self):
        """Gets the display_name of this ClusterNodeInfo.  # noqa: E501

        The display name of this node  # noqa: E501

        :return: The display_name of this ClusterNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ClusterNodeInfo.

        The display name of this node  # noqa: E501

        :param display_name: The display_name of this ClusterNodeInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def entities(self):
        """Gets the entities of this ClusterNodeInfo.  # noqa: E501

        Service endpoint of all entities  # noqa: E501

        :return: The entities of this ClusterNodeInfo.  # noqa: E501
        :rtype: list[NodeEntityInfo]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this ClusterNodeInfo.

        Service endpoint of all entities  # noqa: E501

        :param entities: The entities of this ClusterNodeInfo.  # noqa: E501
        :type: list[NodeEntityInfo]
        """

        self._entities = entities

    @property
    def certificates(self):
        """Gets the certificates of this ClusterNodeInfo.  # noqa: E501

        Certificate and thumbprint of all entities  # noqa: E501

        :return: The certificates of this ClusterNodeInfo.  # noqa: E501
        :rtype: list[NodeCertificateInfo]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this ClusterNodeInfo.

        Certificate and thumbprint of all entities  # noqa: E501

        :param certificates: The certificates of this ClusterNodeInfo.  # noqa: E501
        :type: list[NodeCertificateInfo]
        """

        self._certificates = certificates

    @property
    def fqdn(self):
        """Gets the fqdn of this ClusterNodeInfo.  # noqa: E501

        The fqdn of this node  # noqa: E501

        :return: The fqdn of this ClusterNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ClusterNodeInfo.

        The fqdn of this node  # noqa: E501

        :param fqdn: The fqdn of this ClusterNodeInfo.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterNodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
