# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IpPool(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnets': 'list[IpPoolSubnet]',
        'pool_usage': 'PoolUsage',
        'ip_release_delay': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'subnets': 'subnets',
        'pool_usage': 'pool_usage',
        'ip_release_delay': 'ip_release_delay'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, subnets=None, pool_usage=None, ip_release_delay=None, *args, **kwargs):  # noqa: E501
        """IpPool - a model defined in Swagger"""  # noqa: E501
        self._subnets = None
        self._pool_usage = None
        self._ip_release_delay = None
        self.discriminator = None
        if subnets is not None:
            self.subnets = subnets
        if pool_usage is not None:
            self.pool_usage = pool_usage
        if ip_release_delay is not None:
            self.ip_release_delay = ip_release_delay
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def subnets(self):
        """Gets the subnets of this IpPool.  # noqa: E501

        Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets.  # noqa: E501

        :return: The subnets of this IpPool.  # noqa: E501
        :rtype: list[IpPoolSubnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this IpPool.

        Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets.  # noqa: E501

        :param subnets: The subnets of this IpPool.  # noqa: E501
        :type: list[IpPoolSubnet]
        """

        self._subnets = subnets

    @property
    def pool_usage(self):
        """Gets the pool_usage of this IpPool.  # noqa: E501


        :return: The pool_usage of this IpPool.  # noqa: E501
        :rtype: PoolUsage
        """
        return self._pool_usage

    @pool_usage.setter
    def pool_usage(self, pool_usage):
        """Sets the pool_usage of this IpPool.


        :param pool_usage: The pool_usage of this IpPool.  # noqa: E501
        :type: PoolUsage
        """

        self._pool_usage = pool_usage

    @property
    def ip_release_delay(self):
        """Gets the ip_release_delay of this IpPool.  # noqa: E501

        Delay in milliseconds, while releasing allocated IP address from IP pool (Default is 2 mins).  # noqa: E501

        :return: The ip_release_delay of this IpPool.  # noqa: E501
        :rtype: int
        """
        return self._ip_release_delay

    @ip_release_delay.setter
    def ip_release_delay(self, ip_release_delay):
        """Sets the ip_release_delay of this IpPool.

        Delay in milliseconds, while releasing allocated IP address from IP pool (Default is 2 mins).  # noqa: E501

        :param ip_release_delay: The ip_release_delay of this IpPool.  # noqa: E501
        :type: int
        """

        self._ip_release_delay = ip_release_delay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
