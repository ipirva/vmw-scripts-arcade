# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class LiveTraceRequest(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'LiveTraceFilterData',
        'timeout': 'int',
        'actions': 'LiveTraceActionConfig',
        'source_lport': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'filter': 'filter',
        'timeout': 'timeout',
        'actions': 'actions',
        'source_lport': 'source_lport'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, filter=None, timeout=10, actions=None, source_lport=None, *args, **kwargs):  # noqa: E501
        """LiveTraceRequest - a model defined in Swagger"""  # noqa: E501
        self._filter = None
        self._timeout = None
        self._actions = None
        self._source_lport = None
        self.discriminator = None
        if filter is not None:
            self.filter = filter
        if timeout is not None:
            self.timeout = timeout
        if actions is not None:
            self.actions = actions
        if source_lport is not None:
            self.source_lport = source_lport
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def filter(self):
        """Gets the filter of this LiveTraceRequest.  # noqa: E501


        :return: The filter of this LiveTraceRequest.  # noqa: E501
        :rtype: LiveTraceFilterData
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this LiveTraceRequest.


        :param filter: The filter of this LiveTraceRequest.  # noqa: E501
        :type: LiveTraceFilterData
        """

        self._filter = filter

    @property
    def timeout(self):
        """Gets the timeout of this LiveTraceRequest.  # noqa: E501

        Timeout in seconds for livetrace session  # noqa: E501

        :return: The timeout of this LiveTraceRequest.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this LiveTraceRequest.

        Timeout in seconds for livetrace session  # noqa: E501

        :param timeout: The timeout of this LiveTraceRequest.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def actions(self):
        """Gets the actions of this LiveTraceRequest.  # noqa: E501


        :return: The actions of this LiveTraceRequest.  # noqa: E501
        :rtype: LiveTraceActionConfig
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this LiveTraceRequest.


        :param actions: The actions of this LiveTraceRequest.  # noqa: E501
        :type: LiveTraceActionConfig
        """

        self._actions = actions

    @property
    def source_lport(self):
        """Gets the source_lport of this LiveTraceRequest.  # noqa: E501

        Source logical port  # noqa: E501

        :return: The source_lport of this LiveTraceRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_lport

    @source_lport.setter
    def source_lport(self, source_lport):
        """Sets the source_lport of this LiveTraceRequest.

        Source logical port  # noqa: E501

        :param source_lport: The source_lport of this LiveTraceRequest.  # noqa: E501
        :type: str
        """

        self._source_lport = source_lport

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveTraceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveTraceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
