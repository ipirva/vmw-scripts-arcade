# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Lag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uplinks': 'list[Uplink]',
        'name': 'str',
        'number_of_uplinks': 'int',
        'timeout_type': 'str',
        'load_balance_algorithm': 'str',
        'id': 'str',
        'mode': 'str'
    }

    attribute_map = {
        'uplinks': 'uplinks',
        'name': 'name',
        'number_of_uplinks': 'number_of_uplinks',
        'timeout_type': 'timeout_type',
        'load_balance_algorithm': 'load_balance_algorithm',
        'id': 'id',
        'mode': 'mode'
    }

    def __init__(self, uplinks=None, name=None, number_of_uplinks=None, timeout_type='SLOW', load_balance_algorithm=None, id=None, mode=None):  # noqa: E501
        """Lag - a model defined in Swagger"""  # noqa: E501
        self._uplinks = None
        self._name = None
        self._number_of_uplinks = None
        self._timeout_type = None
        self._load_balance_algorithm = None
        self._id = None
        self._mode = None
        self.discriminator = None
        if uplinks is not None:
            self.uplinks = uplinks
        self.name = name
        self.number_of_uplinks = number_of_uplinks
        if timeout_type is not None:
            self.timeout_type = timeout_type
        self.load_balance_algorithm = load_balance_algorithm
        if id is not None:
            self.id = id
        self.mode = mode

    @property
    def uplinks(self):
        """Gets the uplinks of this Lag.  # noqa: E501

        uplink names  # noqa: E501

        :return: The uplinks of this Lag.  # noqa: E501
        :rtype: list[Uplink]
        """
        return self._uplinks

    @uplinks.setter
    def uplinks(self, uplinks):
        """Sets the uplinks of this Lag.

        uplink names  # noqa: E501

        :param uplinks: The uplinks of this Lag.  # noqa: E501
        :type: list[Uplink]
        """

        self._uplinks = uplinks

    @property
    def name(self):
        """Gets the name of this Lag.  # noqa: E501

        Lag name  # noqa: E501

        :return: The name of this Lag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lag.

        Lag name  # noqa: E501

        :param name: The name of this Lag.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number_of_uplinks(self):
        """Gets the number_of_uplinks of this Lag.  # noqa: E501

        number of uplinks  # noqa: E501

        :return: The number_of_uplinks of this Lag.  # noqa: E501
        :rtype: int
        """
        return self._number_of_uplinks

    @number_of_uplinks.setter
    def number_of_uplinks(self, number_of_uplinks):
        """Sets the number_of_uplinks of this Lag.

        number of uplinks  # noqa: E501

        :param number_of_uplinks: The number_of_uplinks of this Lag.  # noqa: E501
        :type: int
        """
        if number_of_uplinks is None:
            raise ValueError("Invalid value for `number_of_uplinks`, must not be `None`")  # noqa: E501

        self._number_of_uplinks = number_of_uplinks

    @property
    def timeout_type(self):
        """Gets the timeout_type of this Lag.  # noqa: E501

        LACP timeout type  # noqa: E501

        :return: The timeout_type of this Lag.  # noqa: E501
        :rtype: str
        """
        return self._timeout_type

    @timeout_type.setter
    def timeout_type(self, timeout_type):
        """Sets the timeout_type of this Lag.

        LACP timeout type  # noqa: E501

        :param timeout_type: The timeout_type of this Lag.  # noqa: E501
        :type: str
        """
        allowed_values = ["SLOW", "FAST"]  # noqa: E501
        if timeout_type not in allowed_values:
            raise ValueError(
                "Invalid value for `timeout_type` ({0}), must be one of {1}"  # noqa: E501
                .format(timeout_type, allowed_values)
            )

        self._timeout_type = timeout_type

    @property
    def load_balance_algorithm(self):
        """Gets the load_balance_algorithm of this Lag.  # noqa: E501

        LACP load balance Algorithm  # noqa: E501

        :return: The load_balance_algorithm of this Lag.  # noqa: E501
        :rtype: str
        """
        return self._load_balance_algorithm

    @load_balance_algorithm.setter
    def load_balance_algorithm(self, load_balance_algorithm):
        """Sets the load_balance_algorithm of this Lag.

        LACP load balance Algorithm  # noqa: E501

        :param load_balance_algorithm: The load_balance_algorithm of this Lag.  # noqa: E501
        :type: str
        """
        if load_balance_algorithm is None:
            raise ValueError("Invalid value for `load_balance_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["SRCMAC", "DESTMAC", "SRCDESTMAC", "SRCDESTIPVLAN", "SRCDESTMACIPPORT"]  # noqa: E501
        if load_balance_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `load_balance_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(load_balance_algorithm, allowed_values)
            )

        self._load_balance_algorithm = load_balance_algorithm

    @property
    def id(self):
        """Gets the id of this Lag.  # noqa: E501

        unique id  # noqa: E501

        :return: The id of this Lag.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lag.

        unique id  # noqa: E501

        :param id: The id of this Lag.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this Lag.  # noqa: E501

        LACP group mode  # noqa: E501

        :return: The mode of this Lag.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Lag.

        LACP group mode  # noqa: E501

        :param mode: The mode of this Lag.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "PASSIVE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
