# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbServiceStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pools': 'list[LbPoolStatistics]',
        'service_id': 'str',
        'virtual_servers': 'list[LbVirtualServerStatistics]',
        'last_update_timestamp': 'int',
        'statistics': 'LbServiceStatisticsCounter'
    }

    attribute_map = {
        'pools': 'pools',
        'service_id': 'service_id',
        'virtual_servers': 'virtual_servers',
        'last_update_timestamp': 'last_update_timestamp',
        'statistics': 'statistics'
    }

    def __init__(self, pools=None, service_id=None, virtual_servers=None, last_update_timestamp=None, statistics=None):  # noqa: E501
        """LbServiceStatistics - a model defined in Swagger"""  # noqa: E501
        self._pools = None
        self._service_id = None
        self._virtual_servers = None
        self._last_update_timestamp = None
        self._statistics = None
        self.discriminator = None
        if pools is not None:
            self.pools = pools
        self.service_id = service_id
        if virtual_servers is not None:
            self.virtual_servers = virtual_servers
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if statistics is not None:
            self.statistics = statistics

    @property
    def pools(self):
        """Gets the pools of this LbServiceStatistics.  # noqa: E501

        Statistics of load balancer pools  # noqa: E501

        :return: The pools of this LbServiceStatistics.  # noqa: E501
        :rtype: list[LbPoolStatistics]
        """
        return self._pools

    @pools.setter
    def pools(self, pools):
        """Sets the pools of this LbServiceStatistics.

        Statistics of load balancer pools  # noqa: E501

        :param pools: The pools of this LbServiceStatistics.  # noqa: E501
        :type: list[LbPoolStatistics]
        """

        self._pools = pools

    @property
    def service_id(self):
        """Gets the service_id of this LbServiceStatistics.  # noqa: E501

        load balancer service identifier  # noqa: E501

        :return: The service_id of this LbServiceStatistics.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this LbServiceStatistics.

        load balancer service identifier  # noqa: E501

        :param service_id: The service_id of this LbServiceStatistics.  # noqa: E501
        :type: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def virtual_servers(self):
        """Gets the virtual_servers of this LbServiceStatistics.  # noqa: E501

        Statistics of load balancer virtual servers  # noqa: E501

        :return: The virtual_servers of this LbServiceStatistics.  # noqa: E501
        :rtype: list[LbVirtualServerStatistics]
        """
        return self._virtual_servers

    @virtual_servers.setter
    def virtual_servers(self, virtual_servers):
        """Sets the virtual_servers of this LbServiceStatistics.

        Statistics of load balancer virtual servers  # noqa: E501

        :param virtual_servers: The virtual_servers of this LbServiceStatistics.  # noqa: E501
        :type: list[LbVirtualServerStatistics]
        """

        self._virtual_servers = virtual_servers

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this LbServiceStatistics.  # noqa: E501

        Timestamp when the data was last updated  # noqa: E501

        :return: The last_update_timestamp of this LbServiceStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this LbServiceStatistics.

        Timestamp when the data was last updated  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this LbServiceStatistics.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def statistics(self):
        """Gets the statistics of this LbServiceStatistics.  # noqa: E501


        :return: The statistics of this LbServiceStatistics.  # noqa: E501
        :rtype: LbServiceStatisticsCounter
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this LbServiceStatistics.


        :param statistics: The statistics of this LbServiceStatistics.  # noqa: E501
        :type: LbServiceStatisticsCounter
        """

        self._statistics = statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbServiceStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbServiceStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
