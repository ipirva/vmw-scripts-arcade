# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.widget_configuration import WidgetConfiguration  # noqa: F401,E501

class LabelValueConfiguration(WidgetConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'layout': 'Layout',
        'navigation': 'str',
        'sub_type': 'str',
        'properties': 'list[PropertyItem]'
    }
    if hasattr(WidgetConfiguration, "swagger_types"):
        swagger_types.update(WidgetConfiguration.swagger_types)

    attribute_map = {
        'layout': 'layout',
        'navigation': 'navigation',
        'sub_type': 'sub_type',
        'properties': 'properties'
    }
    if hasattr(WidgetConfiguration, "attribute_map"):
        attribute_map.update(WidgetConfiguration.attribute_map)

    def __init__(self, layout=None, navigation=None, sub_type=None, properties=None, *args, **kwargs):  # noqa: E501
        """LabelValueConfiguration - a model defined in Swagger"""  # noqa: E501
        self._layout = None
        self._navigation = None
        self._sub_type = None
        self._properties = None
        self.discriminator = None
        if layout is not None:
            self.layout = layout
        if navigation is not None:
            self.navigation = navigation
        if sub_type is not None:
            self.sub_type = sub_type
        self.properties = properties
        WidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def layout(self):
        """Gets the layout of this LabelValueConfiguration.  # noqa: E501


        :return: The layout of this LabelValueConfiguration.  # noqa: E501
        :rtype: Layout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this LabelValueConfiguration.


        :param layout: The layout of this LabelValueConfiguration.  # noqa: E501
        :type: Layout
        """

        self._layout = layout

    @property
    def navigation(self):
        """Gets the navigation of this LabelValueConfiguration.  # noqa: E501

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :return: The navigation of this LabelValueConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this LabelValueConfiguration.

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :param navigation: The navigation of this LabelValueConfiguration.  # noqa: E501
        :type: str
        """

        self._navigation = navigation

    @property
    def sub_type(self):
        """Gets the sub_type of this LabelValueConfiguration.  # noqa: E501

        A sub-type of LabelValueConfiguration. If sub-type is not specified the parent type is rendered. For VERTICALLY_ALIGNED sub_type, the value is placed below the label.  # noqa: E501

        :return: The sub_type of this LabelValueConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this LabelValueConfiguration.

        A sub-type of LabelValueConfiguration. If sub-type is not specified the parent type is rendered. For VERTICALLY_ALIGNED sub_type, the value is placed below the label.  # noqa: E501

        :param sub_type: The sub_type of this LabelValueConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["VERTICALLY_ALIGNED"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def properties(self):
        """Gets the properties of this LabelValueConfiguration.  # noqa: E501

        An array of label-value properties.  # noqa: E501

        :return: The properties of this LabelValueConfiguration.  # noqa: E501
        :rtype: list[PropertyItem]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this LabelValueConfiguration.

        An array of label-value properties.  # noqa: E501

        :param properties: The properties of this LabelValueConfiguration.  # noqa: E501
        :type: list[PropertyItem]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LabelValueConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelValueConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
