# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpLeasePerIP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnet': 'str',
        'lease_time': 'str',
        'mac_address': 'str',
        'expire_time': 'str',
        'start_time': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'subnet': 'subnet',
        'lease_time': 'lease_time',
        'mac_address': 'mac_address',
        'expire_time': 'expire_time',
        'start_time': 'start_time',
        'ip_address': 'ip_address'
    }

    def __init__(self, subnet=None, lease_time=None, mac_address=None, expire_time=None, start_time=None, ip_address=None):  # noqa: E501
        """DhcpLeasePerIP - a model defined in Swagger"""  # noqa: E501
        self._subnet = None
        self._lease_time = None
        self._mac_address = None
        self._expire_time = None
        self._start_time = None
        self._ip_address = None
        self.discriminator = None
        if subnet is not None:
            self.subnet = subnet
        if lease_time is not None:
            self.lease_time = lease_time
        self.mac_address = mac_address
        if expire_time is not None:
            self.expire_time = expire_time
        self.start_time = start_time
        self.ip_address = ip_address

    @property
    def subnet(self):
        """Gets the subnet of this DhcpLeasePerIP.  # noqa: E501

        subnet of client network  # noqa: E501

        :return: The subnet of this DhcpLeasePerIP.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this DhcpLeasePerIP.

        subnet of client network  # noqa: E501

        :param subnet: The subnet of this DhcpLeasePerIP.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    @property
    def lease_time(self):
        """Gets the lease_time of this DhcpLeasePerIP.  # noqa: E501

        lease time of the ip address, in seconds  # noqa: E501

        :return: The lease_time of this DhcpLeasePerIP.  # noqa: E501
        :rtype: str
        """
        return self._lease_time

    @lease_time.setter
    def lease_time(self, lease_time):
        """Sets the lease_time of this DhcpLeasePerIP.

        lease time of the ip address, in seconds  # noqa: E501

        :param lease_time: The lease_time of this DhcpLeasePerIP.  # noqa: E501
        :type: str
        """

        self._lease_time = lease_time

    @property
    def mac_address(self):
        """Gets the mac_address of this DhcpLeasePerIP.  # noqa: E501

        mac address of client  # noqa: E501

        :return: The mac_address of this DhcpLeasePerIP.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DhcpLeasePerIP.

        mac address of client  # noqa: E501

        :param mac_address: The mac_address of this DhcpLeasePerIP.  # noqa: E501
        :type: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")  # noqa: E501

        self._mac_address = mac_address

    @property
    def expire_time(self):
        """Gets the expire_time of this DhcpLeasePerIP.  # noqa: E501

        expire time of the lease  # noqa: E501

        :return: The expire_time of this DhcpLeasePerIP.  # noqa: E501
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this DhcpLeasePerIP.

        expire time of the lease  # noqa: E501

        :param expire_time: The expire_time of this DhcpLeasePerIP.  # noqa: E501
        :type: str
        """

        self._expire_time = expire_time

    @property
    def start_time(self):
        """Gets the start_time of this DhcpLeasePerIP.  # noqa: E501

        start time of lease  # noqa: E501

        :return: The start_time of this DhcpLeasePerIP.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this DhcpLeasePerIP.

        start time of lease  # noqa: E501

        :param start_time: The start_time of this DhcpLeasePerIP.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def ip_address(self):
        """Gets the ip_address of this DhcpLeasePerIP.  # noqa: E501

        ip address of client  # noqa: E501

        :return: The ip_address of this DhcpLeasePerIP.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DhcpLeasePerIP.

        ip address of client  # noqa: E501

        :param ip_address: The ip_address of this DhcpLeasePerIP.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpLeasePerIP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpLeasePerIP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
