# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupUiFramesInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_endpoint': 'str',
        'frame_type': 'str',
        'site_version': 'str',
        'site_id': 'str'
    }

    attribute_map = {
        'api_endpoint': 'api_endpoint',
        'frame_type': 'frame_type',
        'site_version': 'site_version',
        'site_id': 'site_id'
    }

    def __init__(self, api_endpoint=None, frame_type=None, site_version=None, site_id=None):  # noqa: E501
        """BackupUiFramesInfo - a model defined in Swagger"""  # noqa: E501
        self._api_endpoint = None
        self._frame_type = None
        self._site_version = None
        self._site_id = None
        self.discriminator = None
        if api_endpoint is not None:
            self.api_endpoint = api_endpoint
        if frame_type is not None:
            self.frame_type = frame_type
        if site_version is not None:
            self.site_version = site_version
        if site_id is not None:
            self.site_id = site_id

    @property
    def api_endpoint(self):
        """Gets the api_endpoint of this BackupUiFramesInfo.  # noqa: E501

        prefix to be used for api call  # noqa: E501

        :return: The api_endpoint of this BackupUiFramesInfo.  # noqa: E501
        :rtype: str
        """
        return self._api_endpoint

    @api_endpoint.setter
    def api_endpoint(self, api_endpoint):
        """Sets the api_endpoint of this BackupUiFramesInfo.

        prefix to be used for api call  # noqa: E501

        :param api_endpoint: The api_endpoint of this BackupUiFramesInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["global-manager", "nsxapi", "ica"]  # noqa: E501
        if api_endpoint not in allowed_values:
            raise ValueError(
                "Invalid value for `api_endpoint` ({0}), must be one of {1}"  # noqa: E501
                .format(api_endpoint, allowed_values)
            )

        self._api_endpoint = api_endpoint

    @property
    def frame_type(self):
        """Gets the frame_type of this BackupUiFramesInfo.  # noqa: E501

        Type of service, for which backup is handled  # noqa: E501

        :return: The frame_type of this BackupUiFramesInfo.  # noqa: E501
        :rtype: str
        """
        return self._frame_type

    @frame_type.setter
    def frame_type(self, frame_type):
        """Sets the frame_type of this BackupUiFramesInfo.

        Type of service, for which backup is handled  # noqa: E501

        :param frame_type: The frame_type of this BackupUiFramesInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["GLOBAL_MANAGER", "LOCAL_MANAGER", "LOCAL_LOCAL_MANAGER", "NSX_INTELLIGENCE"]  # noqa: E501
        if frame_type not in allowed_values:
            raise ValueError(
                "Invalid value for `frame_type` ({0}), must be one of {1}"  # noqa: E501
                .format(frame_type, allowed_values)
            )

        self._frame_type = frame_type

    @property
    def site_version(self):
        """Gets the site_version of this BackupUiFramesInfo.  # noqa: E501

        Version of the site  # noqa: E501

        :return: The site_version of this BackupUiFramesInfo.  # noqa: E501
        :rtype: str
        """
        return self._site_version

    @site_version.setter
    def site_version(self, site_version):
        """Sets the site_version of this BackupUiFramesInfo.

        Version of the site  # noqa: E501

        :param site_version: The site_version of this BackupUiFramesInfo.  # noqa: E501
        :type: str
        """

        self._site_version = site_version

    @property
    def site_id(self):
        """Gets the site_id of this BackupUiFramesInfo.  # noqa: E501

        Id of the site  # noqa: E501

        :return: The site_id of this BackupUiFramesInfo.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this BackupUiFramesInfo.

        Id of the site  # noqa: E501

        :param site_id: The site_id of this BackupUiFramesInfo.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupUiFramesInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupUiFramesInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
