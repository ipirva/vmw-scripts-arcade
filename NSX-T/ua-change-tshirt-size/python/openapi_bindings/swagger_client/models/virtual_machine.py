# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.discovered_resource import DiscoveredResource  # noqa: F401,E501

class VirtualMachine(DiscoveredResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'ResourceReference',
        'local_id_on_host': 'str',
        'type': 'str',
        'guest_info': 'GuestInfo',
        'power_state': 'str',
        'compute_ids': 'list[str]',
        'host_id': 'str',
        'external_id': 'str'
    }
    if hasattr(DiscoveredResource, "swagger_types"):
        swagger_types.update(DiscoveredResource.swagger_types)

    attribute_map = {
        'source': 'source',
        'local_id_on_host': 'local_id_on_host',
        'type': 'type',
        'guest_info': 'guest_info',
        'power_state': 'power_state',
        'compute_ids': 'compute_ids',
        'host_id': 'host_id',
        'external_id': 'external_id'
    }
    if hasattr(DiscoveredResource, "attribute_map"):
        attribute_map.update(DiscoveredResource.attribute_map)

    def __init__(self, source=None, local_id_on_host=None, type=None, guest_info=None, power_state=None, compute_ids=None, host_id=None, external_id=None, *args, **kwargs):  # noqa: E501
        """VirtualMachine - a model defined in Swagger"""  # noqa: E501
        self._source = None
        self._local_id_on_host = None
        self._type = None
        self._guest_info = None
        self._power_state = None
        self._compute_ids = None
        self._host_id = None
        self._external_id = None
        self.discriminator = None
        if source is not None:
            self.source = source
        self.local_id_on_host = local_id_on_host
        if type is not None:
            self.type = type
        if guest_info is not None:
            self.guest_info = guest_info
        self.power_state = power_state
        self.compute_ids = compute_ids
        if host_id is not None:
            self.host_id = host_id
        self.external_id = external_id
        DiscoveredResource.__init__(self, *args, **kwargs)

    @property
    def source(self):
        """Gets the source of this VirtualMachine.  # noqa: E501


        :return: The source of this VirtualMachine.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this VirtualMachine.


        :param source: The source of this VirtualMachine.  # noqa: E501
        :type: ResourceReference
        """

        self._source = source

    @property
    def local_id_on_host(self):
        """Gets the local_id_on_host of this VirtualMachine.  # noqa: E501

        Id of the vm unique within the host.  # noqa: E501

        :return: The local_id_on_host of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._local_id_on_host

    @local_id_on_host.setter
    def local_id_on_host(self, local_id_on_host):
        """Sets the local_id_on_host of this VirtualMachine.

        Id of the vm unique within the host.  # noqa: E501

        :param local_id_on_host: The local_id_on_host of this VirtualMachine.  # noqa: E501
        :type: str
        """
        if local_id_on_host is None:
            raise ValueError("Invalid value for `local_id_on_host`, must not be `None`")  # noqa: E501

        self._local_id_on_host = local_id_on_host

    @property
    def type(self):
        """Gets the type of this VirtualMachine.  # noqa: E501

        Virtual Machine type; Edge, Service VM or other.  # noqa: E501

        :return: The type of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualMachine.

        Virtual Machine type; Edge, Service VM or other.  # noqa: E501

        :param type: The type of this VirtualMachine.  # noqa: E501
        :type: str
        """
        allowed_values = ["EDGE", "SERVICE", "REGULAR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def guest_info(self):
        """Gets the guest_info of this VirtualMachine.  # noqa: E501


        :return: The guest_info of this VirtualMachine.  # noqa: E501
        :rtype: GuestInfo
        """
        return self._guest_info

    @guest_info.setter
    def guest_info(self, guest_info):
        """Sets the guest_info of this VirtualMachine.


        :param guest_info: The guest_info of this VirtualMachine.  # noqa: E501
        :type: GuestInfo
        """

        self._guest_info = guest_info

    @property
    def power_state(self):
        """Gets the power_state of this VirtualMachine.  # noqa: E501

        Current power state of this virtual machine in the system.  # noqa: E501

        :return: The power_state of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this VirtualMachine.

        Current power state of this virtual machine in the system.  # noqa: E501

        :param power_state: The power_state of this VirtualMachine.  # noqa: E501
        :type: str
        """
        if power_state is None:
            raise ValueError("Invalid value for `power_state`, must not be `None`")  # noqa: E501
        allowed_values = ["VM_RUNNING", "VM_STOPPED", "VM_SUSPENDED", "UNKNOWN"]  # noqa: E501
        if power_state not in allowed_values:
            raise ValueError(
                "Invalid value for `power_state` ({0}), must be one of {1}"  # noqa: E501
                .format(power_state, allowed_values)
            )

        self._power_state = power_state

    @property
    def compute_ids(self):
        """Gets the compute_ids of this VirtualMachine.  # noqa: E501

        List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']  # noqa: E501

        :return: The compute_ids of this VirtualMachine.  # noqa: E501
        :rtype: list[str]
        """
        return self._compute_ids

    @compute_ids.setter
    def compute_ids(self, compute_ids):
        """Sets the compute_ids of this VirtualMachine.

        List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']  # noqa: E501

        :param compute_ids: The compute_ids of this VirtualMachine.  # noqa: E501
        :type: list[str]
        """
        if compute_ids is None:
            raise ValueError("Invalid value for `compute_ids`, must not be `None`")  # noqa: E501

        self._compute_ids = compute_ids

    @property
    def host_id(self):
        """Gets the host_id of this VirtualMachine.  # noqa: E501

        Id of the host in which this virtual machine exists.  # noqa: E501

        :return: The host_id of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VirtualMachine.

        Id of the host in which this virtual machine exists.  # noqa: E501

        :param host_id: The host_id of this VirtualMachine.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def external_id(self):
        """Gets the external_id of this VirtualMachine.  # noqa: E501

        Current external id of this virtual machine in the system.  # noqa: E501

        :return: The external_id of this VirtualMachine.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VirtualMachine.

        Current external id of this virtual machine in the system.  # noqa: E501

        :param external_id: The external_id of this VirtualMachine.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualMachine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualMachine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
