# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostInfraTrafficType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dynamic_res_pool_name': 'str',
        'traffic_name': 'str'
    }

    attribute_map = {
        'dynamic_res_pool_name': 'dynamic_res_pool_name',
        'traffic_name': 'traffic_name'
    }

    def __init__(self, dynamic_res_pool_name=None, traffic_name=None):  # noqa: E501
        """HostInfraTrafficType - a model defined in Swagger"""  # noqa: E501
        self._dynamic_res_pool_name = None
        self._traffic_name = None
        self.discriminator = None
        if dynamic_res_pool_name is not None:
            self.dynamic_res_pool_name = dynamic_res_pool_name
        if traffic_name is not None:
            self.traffic_name = traffic_name

    @property
    def dynamic_res_pool_name(self):
        """Gets the dynamic_res_pool_name of this HostInfraTrafficType.  # noqa: E501

        Dynamic resource pool traffic name  # noqa: E501

        :return: The dynamic_res_pool_name of this HostInfraTrafficType.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_res_pool_name

    @dynamic_res_pool_name.setter
    def dynamic_res_pool_name(self, dynamic_res_pool_name):
        """Sets the dynamic_res_pool_name of this HostInfraTrafficType.

        Dynamic resource pool traffic name  # noqa: E501

        :param dynamic_res_pool_name: The dynamic_res_pool_name of this HostInfraTrafficType.  # noqa: E501
        :type: str
        """

        self._dynamic_res_pool_name = dynamic_res_pool_name

    @property
    def traffic_name(self):
        """Gets the traffic_name of this HostInfraTrafficType.  # noqa: E501

        Traffic types  # noqa: E501

        :return: The traffic_name of this HostInfraTrafficType.  # noqa: E501
        :rtype: str
        """
        return self._traffic_name

    @traffic_name.setter
    def traffic_name(self, traffic_name):
        """Sets the traffic_name of this HostInfraTrafficType.

        Traffic types  # noqa: E501

        :param traffic_name: The traffic_name of this HostInfraTrafficType.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAULT_TOLERANCE", "HBR", "ISCSI", "MANAGEMENT", "NFS", "VDP", "VIRTUAL_MACHINE", "VMOTION", "VSAN"]  # noqa: E501
        if traffic_name not in allowed_values:
            raise ValueError(
                "Invalid value for `traffic_name` ({0}), must be one of {1}"  # noqa: E501
                .format(traffic_name, allowed_values)
            )

        self._traffic_name = traffic_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostInfraTrafficType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostInfraTrafficType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
