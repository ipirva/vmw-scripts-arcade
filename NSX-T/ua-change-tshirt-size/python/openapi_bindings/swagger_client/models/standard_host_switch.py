# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StandardHostSwitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pnics_uninstall_migration': 'list[Pnic]',
        'uplinks': 'list[VdsUplink]',
        'host_switch_id': 'str',
        'vmk_uninstall_migration': 'list[VmknicNetwork]',
        'transport_zone_endpoints': 'list[TransportZoneEndPoint]',
        'host_switch_type': 'str',
        'vmk_install_migration': 'list[VmknicNetwork]',
        'ip_assignment_spec': 'IpAssignmentSpec',
        'cpu_config': 'list[CpuCoreConfigForEnhancedNetworkingStackSwitch]',
        'is_migrate_pnics': 'bool',
        'host_switch_name': 'str',
        'pnics': 'list[Pnic]',
        'host_switch_mode': 'str',
        'host_switch_profile_ids': 'list[HostSwitchProfileTypeIdEntry]'
    }

    attribute_map = {
        'pnics_uninstall_migration': 'pnics_uninstall_migration',
        'uplinks': 'uplinks',
        'host_switch_id': 'host_switch_id',
        'vmk_uninstall_migration': 'vmk_uninstall_migration',
        'transport_zone_endpoints': 'transport_zone_endpoints',
        'host_switch_type': 'host_switch_type',
        'vmk_install_migration': 'vmk_install_migration',
        'ip_assignment_spec': 'ip_assignment_spec',
        'cpu_config': 'cpu_config',
        'is_migrate_pnics': 'is_migrate_pnics',
        'host_switch_name': 'host_switch_name',
        'pnics': 'pnics',
        'host_switch_mode': 'host_switch_mode',
        'host_switch_profile_ids': 'host_switch_profile_ids'
    }

    def __init__(self, pnics_uninstall_migration=None, uplinks=None, host_switch_id=None, vmk_uninstall_migration=None, transport_zone_endpoints=None, host_switch_type='NVDS', vmk_install_migration=None, ip_assignment_spec=None, cpu_config=None, is_migrate_pnics=False, host_switch_name='nsxDefaultHostSwitch', pnics=None, host_switch_mode=None, host_switch_profile_ids=None):  # noqa: E501
        """StandardHostSwitch - a model defined in Swagger"""  # noqa: E501
        self._pnics_uninstall_migration = None
        self._uplinks = None
        self._host_switch_id = None
        self._vmk_uninstall_migration = None
        self._transport_zone_endpoints = None
        self._host_switch_type = None
        self._vmk_install_migration = None
        self._ip_assignment_spec = None
        self._cpu_config = None
        self._is_migrate_pnics = None
        self._host_switch_name = None
        self._pnics = None
        self._host_switch_mode = None
        self._host_switch_profile_ids = None
        self.discriminator = None
        if pnics_uninstall_migration is not None:
            self.pnics_uninstall_migration = pnics_uninstall_migration
        if uplinks is not None:
            self.uplinks = uplinks
        if host_switch_id is not None:
            self.host_switch_id = host_switch_id
        if vmk_uninstall_migration is not None:
            self.vmk_uninstall_migration = vmk_uninstall_migration
        if transport_zone_endpoints is not None:
            self.transport_zone_endpoints = transport_zone_endpoints
        if host_switch_type is not None:
            self.host_switch_type = host_switch_type
        if vmk_install_migration is not None:
            self.vmk_install_migration = vmk_install_migration
        if ip_assignment_spec is not None:
            self.ip_assignment_spec = ip_assignment_spec
        if cpu_config is not None:
            self.cpu_config = cpu_config
        if is_migrate_pnics is not None:
            self.is_migrate_pnics = is_migrate_pnics
        if host_switch_name is not None:
            self.host_switch_name = host_switch_name
        if pnics is not None:
            self.pnics = pnics
        if host_switch_mode is not None:
            self.host_switch_mode = host_switch_mode
        if host_switch_profile_ids is not None:
            self.host_switch_profile_ids = host_switch_profile_ids

    @property
    def pnics_uninstall_migration(self):
        """Gets the pnics_uninstall_migration of this StandardHostSwitch.  # noqa: E501

        This is only supported for NVDS type of host switch. If this is specified for VDS type of host switch, an error will be returned to user. The pnics to be migrated out to a non N-VDS switch during transport node deletion.  # noqa: E501

        :return: The pnics_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :rtype: list[Pnic]
        """
        return self._pnics_uninstall_migration

    @pnics_uninstall_migration.setter
    def pnics_uninstall_migration(self, pnics_uninstall_migration):
        """Sets the pnics_uninstall_migration of this StandardHostSwitch.

        This is only supported for NVDS type of host switch. If this is specified for VDS type of host switch, an error will be returned to user. The pnics to be migrated out to a non N-VDS switch during transport node deletion.  # noqa: E501

        :param pnics_uninstall_migration: The pnics_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :type: list[Pnic]
        """

        self._pnics_uninstall_migration = pnics_uninstall_migration

    @property
    def uplinks(self):
        """Gets the uplinks of this StandardHostSwitch.  # noqa: E501

        If VDS is used as a HostSwitch this attribute must be specified. You can associate uplinks from UplinkHostSwitchProfile to either VDS uplink or LAG. VDS uplink or LAG will inherit the global VDS level teaming policy from vSphere. NSX managed uplink or LAG will have NSX teaming policy configured through UplinkHostSwitchProfile.  # noqa: E501

        :return: The uplinks of this StandardHostSwitch.  # noqa: E501
        :rtype: list[VdsUplink]
        """
        return self._uplinks

    @uplinks.setter
    def uplinks(self, uplinks):
        """Sets the uplinks of this StandardHostSwitch.

        If VDS is used as a HostSwitch this attribute must be specified. You can associate uplinks from UplinkHostSwitchProfile to either VDS uplink or LAG. VDS uplink or LAG will inherit the global VDS level teaming policy from vSphere. NSX managed uplink or LAG will have NSX teaming policy configured through UplinkHostSwitchProfile.  # noqa: E501

        :param uplinks: The uplinks of this StandardHostSwitch.  # noqa: E501
        :type: list[VdsUplink]
        """

        self._uplinks = uplinks

    @property
    def host_switch_id(self):
        """Gets the host_switch_id of this StandardHostSwitch.  # noqa: E501

        This field is writable only in case of VDS type HostSwitch and system generated for NVDS type. For VDS type host switch, This field is used to lookup a VDS from corresponding Compute Manager and then can be configured for logical networking. For NVDS type host switch, This field is system generated and if provided will be overwritten.  # noqa: E501

        :return: The host_switch_id of this StandardHostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_id

    @host_switch_id.setter
    def host_switch_id(self, host_switch_id):
        """Sets the host_switch_id of this StandardHostSwitch.

        This field is writable only in case of VDS type HostSwitch and system generated for NVDS type. For VDS type host switch, This field is used to lookup a VDS from corresponding Compute Manager and then can be configured for logical networking. For NVDS type host switch, This field is system generated and if provided will be overwritten.  # noqa: E501

        :param host_switch_id: The host_switch_id of this StandardHostSwitch.  # noqa: E501
        :type: str
        """

        self._host_switch_id = host_switch_id

    @property
    def vmk_uninstall_migration(self):
        """Gets the vmk_uninstall_migration of this StandardHostSwitch.  # noqa: E501

        This is only supported for NVDS type of host switch. If this is specified for VDS type of host switch, an error will be returned to user. The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.  # noqa: E501

        :return: The vmk_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :rtype: list[VmknicNetwork]
        """
        return self._vmk_uninstall_migration

    @vmk_uninstall_migration.setter
    def vmk_uninstall_migration(self, vmk_uninstall_migration):
        """Sets the vmk_uninstall_migration of this StandardHostSwitch.

        This is only supported for NVDS type of host switch. If this is specified for VDS type of host switch, an error will be returned to user. The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.  # noqa: E501

        :param vmk_uninstall_migration: The vmk_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :type: list[VmknicNetwork]
        """

        self._vmk_uninstall_migration = vmk_uninstall_migration

    @property
    def transport_zone_endpoints(self):
        """Gets the transport_zone_endpoints of this StandardHostSwitch.  # noqa: E501

        List of TransportZones that are to be associated with specified host switch. If this property is specified, host_switch_mode at StandardHostSwitch level must be specified.  # noqa: E501

        :return: The transport_zone_endpoints of this StandardHostSwitch.  # noqa: E501
        :rtype: list[TransportZoneEndPoint]
        """
        return self._transport_zone_endpoints

    @transport_zone_endpoints.setter
    def transport_zone_endpoints(self, transport_zone_endpoints):
        """Sets the transport_zone_endpoints of this StandardHostSwitch.

        List of TransportZones that are to be associated with specified host switch. If this property is specified, host_switch_mode at StandardHostSwitch level must be specified.  # noqa: E501

        :param transport_zone_endpoints: The transport_zone_endpoints of this StandardHostSwitch.  # noqa: E501
        :type: list[TransportZoneEndPoint]
        """

        self._transport_zone_endpoints = transport_zone_endpoints

    @property
    def host_switch_type(self):
        """Gets the host_switch_type of this StandardHostSwitch.  # noqa: E501

        VDS represents VMware vSphere Distributed Switch from vSphere that is used as HostSwitch through TransportNode or TransportNodeProfile configuration. When VDS is used as a HostSwitch, Hosts have to be added to VDS from vSphere and VDS instance is created on Hosts. To configure NSX on such hosts, you can use this VDS as a HostSwitch from NSX manager. vCenter has the ownership of MTU, LAG, NIOC and LLDP configuration of such VDS backed HostSwitch. Remaining configuration (e.g. UplinkHostswitchProfile) will be managed by NSX. NVDS represents NSX Virtual Switch which is NSX native HostSwitch. All configurations of NVDS will be managed by NSX.  # noqa: E501

        :return: The host_switch_type of this StandardHostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_type

    @host_switch_type.setter
    def host_switch_type(self, host_switch_type):
        """Sets the host_switch_type of this StandardHostSwitch.

        VDS represents VMware vSphere Distributed Switch from vSphere that is used as HostSwitch through TransportNode or TransportNodeProfile configuration. When VDS is used as a HostSwitch, Hosts have to be added to VDS from vSphere and VDS instance is created on Hosts. To configure NSX on such hosts, you can use this VDS as a HostSwitch from NSX manager. vCenter has the ownership of MTU, LAG, NIOC and LLDP configuration of such VDS backed HostSwitch. Remaining configuration (e.g. UplinkHostswitchProfile) will be managed by NSX. NVDS represents NSX Virtual Switch which is NSX native HostSwitch. All configurations of NVDS will be managed by NSX.  # noqa: E501

        :param host_switch_type: The host_switch_type of this StandardHostSwitch.  # noqa: E501
        :type: str
        """
        allowed_values = ["NVDS", "VDS"]  # noqa: E501
        if host_switch_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_switch_type` ({0}), must be one of {1}"  # noqa: E501
                .format(host_switch_type, allowed_values)
            )

        self._host_switch_type = host_switch_type

    @property
    def vmk_install_migration(self):
        """Gets the vmk_install_migration of this StandardHostSwitch.  # noqa: E501

        This is only supported for NVDS type of host switch. If this is specified for VDS type of host switch, an error will be returned to user. The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.  # noqa: E501

        :return: The vmk_install_migration of this StandardHostSwitch.  # noqa: E501
        :rtype: list[VmknicNetwork]
        """
        return self._vmk_install_migration

    @vmk_install_migration.setter
    def vmk_install_migration(self, vmk_install_migration):
        """Sets the vmk_install_migration of this StandardHostSwitch.

        This is only supported for NVDS type of host switch. If this is specified for VDS type of host switch, an error will be returned to user. The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.  # noqa: E501

        :param vmk_install_migration: The vmk_install_migration of this StandardHostSwitch.  # noqa: E501
        :type: list[VmknicNetwork]
        """

        self._vmk_install_migration = vmk_install_migration

    @property
    def ip_assignment_spec(self):
        """Gets the ip_assignment_spec of this StandardHostSwitch.  # noqa: E501


        :return: The ip_assignment_spec of this StandardHostSwitch.  # noqa: E501
        :rtype: IpAssignmentSpec
        """
        return self._ip_assignment_spec

    @ip_assignment_spec.setter
    def ip_assignment_spec(self, ip_assignment_spec):
        """Sets the ip_assignment_spec of this StandardHostSwitch.


        :param ip_assignment_spec: The ip_assignment_spec of this StandardHostSwitch.  # noqa: E501
        :type: IpAssignmentSpec
        """

        self._ip_assignment_spec = ip_assignment_spec

    @property
    def cpu_config(self):
        """Gets the cpu_config of this StandardHostSwitch.  # noqa: E501

        CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.  # noqa: E501

        :return: The cpu_config of this StandardHostSwitch.  # noqa: E501
        :rtype: list[CpuCoreConfigForEnhancedNetworkingStackSwitch]
        """
        return self._cpu_config

    @cpu_config.setter
    def cpu_config(self, cpu_config):
        """Sets the cpu_config of this StandardHostSwitch.

        CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.  # noqa: E501

        :param cpu_config: The cpu_config of this StandardHostSwitch.  # noqa: E501
        :type: list[CpuCoreConfigForEnhancedNetworkingStackSwitch]
        """

        self._cpu_config = cpu_config

    @property
    def is_migrate_pnics(self):
        """Gets the is_migrate_pnics of this StandardHostSwitch.  # noqa: E501

        If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.  # noqa: E501

        :return: The is_migrate_pnics of this StandardHostSwitch.  # noqa: E501
        :rtype: bool
        """
        return self._is_migrate_pnics

    @is_migrate_pnics.setter
    def is_migrate_pnics(self, is_migrate_pnics):
        """Sets the is_migrate_pnics of this StandardHostSwitch.

        If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.  # noqa: E501

        :param is_migrate_pnics: The is_migrate_pnics of this StandardHostSwitch.  # noqa: E501
        :type: bool
        """

        self._is_migrate_pnics = is_migrate_pnics

    @property
    def host_switch_name(self):
        """Gets the host_switch_name of this StandardHostSwitch.  # noqa: E501

        This field is writable only in case of NVDS type HostSwitch and system generated for VDS type. For NVDS type host switch, If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness. For VDS type host switch, Manager fetches VDS name from corresponding Compute Manager and populates this field. If VDS name is given (correct or incorrect) it is ignored and overwritten with correct one.  # noqa: E501

        :return: The host_switch_name of this StandardHostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_name

    @host_switch_name.setter
    def host_switch_name(self, host_switch_name):
        """Sets the host_switch_name of this StandardHostSwitch.

        This field is writable only in case of NVDS type HostSwitch and system generated for VDS type. For NVDS type host switch, If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness. For VDS type host switch, Manager fetches VDS name from corresponding Compute Manager and populates this field. If VDS name is given (correct or incorrect) it is ignored and overwritten with correct one.  # noqa: E501

        :param host_switch_name: The host_switch_name of this StandardHostSwitch.  # noqa: E501
        :type: str
        """

        self._host_switch_name = host_switch_name

    @property
    def pnics(self):
        """Gets the pnics of this StandardHostSwitch.  # noqa: E501

        Pnics are specified when HostSwitch is of type NVDS. When using the Quick Start workflow on 7.0 clusters, pnic information will be populated by the recommendation when providing a VDS HostSwitch based on a VSS HostSwitch.  # noqa: E501

        :return: The pnics of this StandardHostSwitch.  # noqa: E501
        :rtype: list[Pnic]
        """
        return self._pnics

    @pnics.setter
    def pnics(self, pnics):
        """Sets the pnics of this StandardHostSwitch.

        Pnics are specified when HostSwitch is of type NVDS. When using the Quick Start workflow on 7.0 clusters, pnic information will be populated by the recommendation when providing a VDS HostSwitch based on a VSS HostSwitch.  # noqa: E501

        :param pnics: The pnics of this StandardHostSwitch.  # noqa: E501
        :type: list[Pnic]
        """

        self._pnics = pnics

    @property
    def host_switch_mode(self):
        """Gets the host_switch_mode of this StandardHostSwitch.  # noqa: E501

        STANDARD - This mode applies to all the hypervisors. ENS - This is the Enhanced Data Path switch mode. This mode provides accelerated networking performances but also introduces additional prerequisites. In order to benefit from this mode, workloads will be need to be compiled with DPDK and will use VMXNET3 for their vNIC. This mode is only available on ESX hypervisor (6.7 and above, recommended 6.7 U2 and above) and unavailable on KVM, EDGE and Public Cloud Gateway. Not all NSX features are available in this mode, please consult the documentation. ENS_INTERRUPT - This is an interrupt driven variant of the Enhanced Data Path mode. Please, consult your account representative for applicability. This mode is available only on ESX hypervisor (7.0 and above). If this property is specified, transport_zone_endpoints must be specified at StandardHostSwitch level.  # noqa: E501

        :return: The host_switch_mode of this StandardHostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_mode

    @host_switch_mode.setter
    def host_switch_mode(self, host_switch_mode):
        """Sets the host_switch_mode of this StandardHostSwitch.

        STANDARD - This mode applies to all the hypervisors. ENS - This is the Enhanced Data Path switch mode. This mode provides accelerated networking performances but also introduces additional prerequisites. In order to benefit from this mode, workloads will be need to be compiled with DPDK and will use VMXNET3 for their vNIC. This mode is only available on ESX hypervisor (6.7 and above, recommended 6.7 U2 and above) and unavailable on KVM, EDGE and Public Cloud Gateway. Not all NSX features are available in this mode, please consult the documentation. ENS_INTERRUPT - This is an interrupt driven variant of the Enhanced Data Path mode. Please, consult your account representative for applicability. This mode is available only on ESX hypervisor (7.0 and above). If this property is specified, transport_zone_endpoints must be specified at StandardHostSwitch level.  # noqa: E501

        :param host_switch_mode: The host_switch_mode of this StandardHostSwitch.  # noqa: E501
        :type: str
        """
        allowed_values = ["STANDARD", "ENS", "ENS_INTERRUPT"]  # noqa: E501
        if host_switch_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `host_switch_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(host_switch_mode, allowed_values)
            )

        self._host_switch_mode = host_switch_mode

    @property
    def host_switch_profile_ids(self):
        """Gets the host_switch_profile_ids of this StandardHostSwitch.  # noqa: E501

        Host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.  # noqa: E501

        :return: The host_switch_profile_ids of this StandardHostSwitch.  # noqa: E501
        :rtype: list[HostSwitchProfileTypeIdEntry]
        """
        return self._host_switch_profile_ids

    @host_switch_profile_ids.setter
    def host_switch_profile_ids(self, host_switch_profile_ids):
        """Sets the host_switch_profile_ids of this StandardHostSwitch.

        Host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.  # noqa: E501

        :param host_switch_profile_ids: The host_switch_profile_ids of this StandardHostSwitch.  # noqa: E501
        :type: list[HostSwitchProfileTypeIdEntry]
        """

        self._host_switch_profile_ids = host_switch_profile_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardHostSwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardHostSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
