# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class IpPoolSubnet(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dns_nameservers': 'list[str]',
        'cidr': 'str',
        'gateway_ip': 'str',
        'allocation_ranges': 'list[IpPoolRange]',
        'dns_suffix': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'dns_nameservers': 'dns_nameservers',
        'cidr': 'cidr',
        'gateway_ip': 'gateway_ip',
        'allocation_ranges': 'allocation_ranges',
        'dns_suffix': 'dns_suffix'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, dns_nameservers=None, cidr=None, gateway_ip=None, allocation_ranges=None, dns_suffix=None, *args, **kwargs):  # noqa: E501
        """IpPoolSubnet - a model defined in Swagger"""  # noqa: E501
        self._dns_nameservers = None
        self._cidr = None
        self._gateway_ip = None
        self._allocation_ranges = None
        self._dns_suffix = None
        self.discriminator = None
        if dns_nameservers is not None:
            self.dns_nameservers = dns_nameservers
        self.cidr = cidr
        if gateway_ip is not None:
            self.gateway_ip = gateway_ip
        self.allocation_ranges = allocation_ranges
        if dns_suffix is not None:
            self.dns_suffix = dns_suffix
        Resource.__init__(self, *args, **kwargs)

    @property
    def dns_nameservers(self):
        """Gets the dns_nameservers of this IpPoolSubnet.  # noqa: E501

        The collection of upto 3 DNS servers for the subnet.  # noqa: E501

        :return: The dns_nameservers of this IpPoolSubnet.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_nameservers

    @dns_nameservers.setter
    def dns_nameservers(self, dns_nameservers):
        """Sets the dns_nameservers of this IpPoolSubnet.

        The collection of upto 3 DNS servers for the subnet.  # noqa: E501

        :param dns_nameservers: The dns_nameservers of this IpPoolSubnet.  # noqa: E501
        :type: list[str]
        """

        self._dns_nameservers = dns_nameservers

    @property
    def cidr(self):
        """Gets the cidr of this IpPoolSubnet.  # noqa: E501

        Represents network address and the prefix length which will be associated with a layer-2 broadcast domain  # noqa: E501

        :return: The cidr of this IpPoolSubnet.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IpPoolSubnet.

        Represents network address and the prefix length which will be associated with a layer-2 broadcast domain  # noqa: E501

        :param cidr: The cidr of this IpPoolSubnet.  # noqa: E501
        :type: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")  # noqa: E501

        self._cidr = cidr

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this IpPoolSubnet.  # noqa: E501

        The default gateway address on a layer-3 router.  # noqa: E501

        :return: The gateway_ip of this IpPoolSubnet.  # noqa: E501
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this IpPoolSubnet.

        The default gateway address on a layer-3 router.  # noqa: E501

        :param gateway_ip: The gateway_ip of this IpPoolSubnet.  # noqa: E501
        :type: str
        """

        self._gateway_ip = gateway_ip

    @property
    def allocation_ranges(self):
        """Gets the allocation_ranges of this IpPoolSubnet.  # noqa: E501

        A collection of IPv4 or IPv6 IP Pool Ranges.  # noqa: E501

        :return: The allocation_ranges of this IpPoolSubnet.  # noqa: E501
        :rtype: list[IpPoolRange]
        """
        return self._allocation_ranges

    @allocation_ranges.setter
    def allocation_ranges(self, allocation_ranges):
        """Sets the allocation_ranges of this IpPoolSubnet.

        A collection of IPv4 or IPv6 IP Pool Ranges.  # noqa: E501

        :param allocation_ranges: The allocation_ranges of this IpPoolSubnet.  # noqa: E501
        :type: list[IpPoolRange]
        """
        if allocation_ranges is None:
            raise ValueError("Invalid value for `allocation_ranges`, must not be `None`")  # noqa: E501

        self._allocation_ranges = allocation_ranges

    @property
    def dns_suffix(self):
        """Gets the dns_suffix of this IpPoolSubnet.  # noqa: E501

        The DNS suffix for the DNS server.  # noqa: E501

        :return: The dns_suffix of this IpPoolSubnet.  # noqa: E501
        :rtype: str
        """
        return self._dns_suffix

    @dns_suffix.setter
    def dns_suffix(self, dns_suffix):
        """Sets the dns_suffix of this IpPoolSubnet.

        The DNS suffix for the DNS server.  # noqa: E501

        :param dns_suffix: The dns_suffix of this IpPoolSubnet.  # noqa: E501
        :type: str
        """

        self._dns_suffix = dns_suffix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpPoolSubnet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpPoolSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
