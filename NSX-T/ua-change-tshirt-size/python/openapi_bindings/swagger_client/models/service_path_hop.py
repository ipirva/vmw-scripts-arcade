# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServicePathHop(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_active_from_dp': 'bool',
        'is_active_from_mp': 'bool',
        'vif': 'str',
        'mac_address': 'str',
        'action': 'str',
        'is_active_from_ccp': 'bool',
        'in_maintenance_mode': 'bool',
        'nsh_liveness_support': 'bool',
        'can_decrement_si': 'bool'
    }

    attribute_map = {
        'is_active_from_dp': 'is_active_from_dp',
        'is_active_from_mp': 'is_active_from_mp',
        'vif': 'vif',
        'mac_address': 'mac_address',
        'action': 'action',
        'is_active_from_ccp': 'is_active_from_ccp',
        'in_maintenance_mode': 'in_maintenance_mode',
        'nsh_liveness_support': 'nsh_liveness_support',
        'can_decrement_si': 'can_decrement_si'
    }

    def __init__(self, is_active_from_dp=None, is_active_from_mp=None, vif=None, mac_address=None, action=None, is_active_from_ccp=None, in_maintenance_mode=None, nsh_liveness_support=None, can_decrement_si=None):  # noqa: E501
        """ServicePathHop - a model defined in Swagger"""  # noqa: E501
        self._is_active_from_dp = None
        self._is_active_from_mp = None
        self._vif = None
        self._mac_address = None
        self._action = None
        self._is_active_from_ccp = None
        self._in_maintenance_mode = None
        self._nsh_liveness_support = None
        self._can_decrement_si = None
        self.discriminator = None
        if is_active_from_dp is not None:
            self.is_active_from_dp = is_active_from_dp
        if is_active_from_mp is not None:
            self.is_active_from_mp = is_active_from_mp
        if vif is not None:
            self.vif = vif
        if mac_address is not None:
            self.mac_address = mac_address
        if action is not None:
            self.action = action
        if is_active_from_ccp is not None:
            self.is_active_from_ccp = is_active_from_ccp
        if in_maintenance_mode is not None:
            self.in_maintenance_mode = in_maintenance_mode
        if nsh_liveness_support is not None:
            self.nsh_liveness_support = nsh_liveness_support
        if can_decrement_si is not None:
            self.can_decrement_si = can_decrement_si

    @property
    def is_active_from_dp(self):
        """Gets the is_active_from_dp of this ServicePathHop.  # noqa: E501

        Indicating whether the corresponding service VM is active or not per DP.  # noqa: E501

        :return: The is_active_from_dp of this ServicePathHop.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_from_dp

    @is_active_from_dp.setter
    def is_active_from_dp(self, is_active_from_dp):
        """Sets the is_active_from_dp of this ServicePathHop.

        Indicating whether the corresponding service VM is active or not per DP.  # noqa: E501

        :param is_active_from_dp: The is_active_from_dp of this ServicePathHop.  # noqa: E501
        :type: bool
        """

        self._is_active_from_dp = is_active_from_dp

    @property
    def is_active_from_mp(self):
        """Gets the is_active_from_mp of this ServicePathHop.  # noqa: E501

        Indicating whether the corresponding service VM is active or not per MP.  # noqa: E501

        :return: The is_active_from_mp of this ServicePathHop.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_from_mp

    @is_active_from_mp.setter
    def is_active_from_mp(self, is_active_from_mp):
        """Sets the is_active_from_mp of this ServicePathHop.

        Indicating whether the corresponding service VM is active or not per MP.  # noqa: E501

        :param is_active_from_mp: The is_active_from_mp of this ServicePathHop.  # noqa: E501
        :type: bool
        """

        self._is_active_from_mp = is_active_from_mp

    @property
    def vif(self):
        """Gets the vif of this ServicePathHop.  # noqa: E501

        ID of the virtual network interface.  # noqa: E501

        :return: The vif of this ServicePathHop.  # noqa: E501
        :rtype: str
        """
        return self._vif

    @vif.setter
    def vif(self, vif):
        """Sets the vif of this ServicePathHop.

        ID of the virtual network interface.  # noqa: E501

        :param vif: The vif of this ServicePathHop.  # noqa: E501
        :type: str
        """

        self._vif = vif

    @property
    def mac_address(self):
        """Gets the mac_address of this ServicePathHop.  # noqa: E501

        MAC address of the virtual network interface.  # noqa: E501

        :return: The mac_address of this ServicePathHop.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ServicePathHop.

        MAC address of the virtual network interface.  # noqa: E501

        :param mac_address: The mac_address of this ServicePathHop.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def action(self):
        """Gets the action of this ServicePathHop.  # noqa: E501

        Action that will be taken by the corresponding service VM of the hop.  # noqa: E501

        :return: The action of this ServicePathHop.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ServicePathHop.

        Action that will be taken by the corresponding service VM of the hop.  # noqa: E501

        :param action: The action of this ServicePathHop.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVICE_ACTION_INVALID", "COPY", "REDIRECT"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def is_active_from_ccp(self):
        """Gets the is_active_from_ccp of this ServicePathHop.  # noqa: E501

        Indicating whether the corresponding service VM is active or not per CCP.  # noqa: E501

        :return: The is_active_from_ccp of this ServicePathHop.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_from_ccp

    @is_active_from_ccp.setter
    def is_active_from_ccp(self, is_active_from_ccp):
        """Sets the is_active_from_ccp of this ServicePathHop.

        Indicating whether the corresponding service VM is active or not per CCP.  # noqa: E501

        :param is_active_from_ccp: The is_active_from_ccp of this ServicePathHop.  # noqa: E501
        :type: bool
        """

        self._is_active_from_ccp = is_active_from_ccp

    @property
    def in_maintenance_mode(self):
        """Gets the in_maintenance_mode of this ServicePathHop.  # noqa: E501

        Indicating the maintenance mode of the corresponding service VM.  # noqa: E501

        :return: The in_maintenance_mode of this ServicePathHop.  # noqa: E501
        :rtype: bool
        """
        return self._in_maintenance_mode

    @in_maintenance_mode.setter
    def in_maintenance_mode(self, in_maintenance_mode):
        """Sets the in_maintenance_mode of this ServicePathHop.

        Indicating the maintenance mode of the corresponding service VM.  # noqa: E501

        :param in_maintenance_mode: The in_maintenance_mode of this ServicePathHop.  # noqa: E501
        :type: bool
        """

        self._in_maintenance_mode = in_maintenance_mode

    @property
    def nsh_liveness_support(self):
        """Gets the nsh_liveness_support of this ServicePathHop.  # noqa: E501

        Indicating whether NSH liveness is supported or not by the corresponding service VM.  # noqa: E501

        :return: The nsh_liveness_support of this ServicePathHop.  # noqa: E501
        :rtype: bool
        """
        return self._nsh_liveness_support

    @nsh_liveness_support.setter
    def nsh_liveness_support(self, nsh_liveness_support):
        """Sets the nsh_liveness_support of this ServicePathHop.

        Indicating whether NSH liveness is supported or not by the corresponding service VM.  # noqa: E501

        :param nsh_liveness_support: The nsh_liveness_support of this ServicePathHop.  # noqa: E501
        :type: bool
        """

        self._nsh_liveness_support = nsh_liveness_support

    @property
    def can_decrement_si(self):
        """Gets the can_decrement_si of this ServicePathHop.  # noqa: E501

        Indicating whether service is configured to decrement SI field in NSH metadata.  # noqa: E501

        :return: The can_decrement_si of this ServicePathHop.  # noqa: E501
        :rtype: bool
        """
        return self._can_decrement_si

    @can_decrement_si.setter
    def can_decrement_si(self, can_decrement_si):
        """Sets the can_decrement_si of this ServicePathHop.

        Indicating whether service is configured to decrement SI field in NSH metadata.  # noqa: E501

        :param can_decrement_si: The can_decrement_si of this ServicePathHop.  # noqa: E501
        :type: bool
        """

        self._can_decrement_si = can_decrement_si

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePathHop, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePathHop):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
