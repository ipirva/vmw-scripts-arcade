# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.widget_configuration import WidgetConfiguration  # noqa: F401,E501

class StatsConfiguration(WidgetConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'navigation': 'str',
        'stat': 'StatItem',
        'sections': 'list[DonutSection]',
        'sub_type': 'str',
        'label': 'Label'
    }
    if hasattr(WidgetConfiguration, "swagger_types"):
        swagger_types.update(WidgetConfiguration.swagger_types)

    attribute_map = {
        'navigation': 'navigation',
        'stat': 'stat',
        'sections': 'sections',
        'sub_type': 'sub_type',
        'label': 'label'
    }
    if hasattr(WidgetConfiguration, "attribute_map"):
        attribute_map.update(WidgetConfiguration.attribute_map)

    def __init__(self, navigation=None, stat=None, sections=None, sub_type=None, label=None, *args, **kwargs):  # noqa: E501
        """StatsConfiguration - a model defined in Swagger"""  # noqa: E501
        self._navigation = None
        self._stat = None
        self._sections = None
        self._sub_type = None
        self._label = None
        self.discriminator = None
        if navigation is not None:
            self.navigation = navigation
        if stat is not None:
            self.stat = stat
        if sections is not None:
            self.sections = sections
        if sub_type is not None:
            self.sub_type = sub_type
        if label is not None:
            self.label = label
        WidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def navigation(self):
        """Gets the navigation of this StatsConfiguration.  # noqa: E501

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :return: The navigation of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this StatsConfiguration.

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :param navigation: The navigation of this StatsConfiguration.  # noqa: E501
        :type: str
        """

        self._navigation = navigation

    @property
    def stat(self):
        """Gets the stat of this StatsConfiguration.  # noqa: E501


        :return: The stat of this StatsConfiguration.  # noqa: E501
        :rtype: StatItem
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this StatsConfiguration.


        :param stat: The stat of this StatsConfiguration.  # noqa: E501
        :type: StatItem
        """

        self._stat = stat

    @property
    def sections(self):
        """Gets the sections of this StatsConfiguration.  # noqa: E501

        Sections  # noqa: E501

        :return: The sections of this StatsConfiguration.  # noqa: E501
        :rtype: list[DonutSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this StatsConfiguration.

        Sections  # noqa: E501

        :param sections: The sections of this StatsConfiguration.  # noqa: E501
        :type: list[DonutSection]
        """

        self._sections = sections

    @property
    def sub_type(self):
        """Gets the sub_type of this StatsConfiguration.  # noqa: E501

        A sub-type of StatsConfiguration. If sub-type is not specified the parent type is rendered. The COMPACT sub_type, conserves the space for the widget. The statistic is placed on the right side on top of the status bar and the title of the widget is placed on the left side on the top of the status bar. The COMPACT style aligns itself horizontally as per the width of the container. If multiple widgets are placed insided the container then the widgets are placed one below the other to conserve the space.  # noqa: E501

        :return: The sub_type of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this StatsConfiguration.

        A sub-type of StatsConfiguration. If sub-type is not specified the parent type is rendered. The COMPACT sub_type, conserves the space for the widget. The statistic is placed on the right side on top of the status bar and the title of the widget is placed on the left side on the top of the status bar. The COMPACT style aligns itself horizontally as per the width of the container. If multiple widgets are placed insided the container then the widgets are placed one below the other to conserve the space.  # noqa: E501

        :param sub_type: The sub_type of this StatsConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPACT"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def label(self):
        """Gets the label of this StatsConfiguration.  # noqa: E501


        :return: The label of this StatsConfiguration.  # noqa: E501
        :rtype: Label
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this StatsConfiguration.


        :param label: The label of this StatsConfiguration.  # noqa: E501
        :type: Label
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
