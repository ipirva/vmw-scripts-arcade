# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogicalConstructMigrationStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_type': 'str',
        'source_count': 'str',
        'target_type': 'str',
        'vertical': 'str',
        'target_count': 'str'
    }

    attribute_map = {
        'source_type': 'source_type',
        'source_count': 'source_count',
        'target_type': 'target_type',
        'vertical': 'vertical',
        'target_count': 'target_count'
    }

    def __init__(self, source_type=None, source_count=None, target_type=None, vertical=None, target_count=None):  # noqa: E501
        """LogicalConstructMigrationStats - a model defined in Swagger"""  # noqa: E501
        self._source_type = None
        self._source_count = None
        self._target_type = None
        self._vertical = None
        self._target_count = None
        self.discriminator = None
        if source_type is not None:
            self.source_type = source_type
        if source_count is not None:
            self.source_count = source_count
        if target_type is not None:
            self.target_type = target_type
        if vertical is not None:
            self.vertical = vertical
        if target_count is not None:
            self.target_count = target_count

    @property
    def source_type(self):
        """Gets the source_type of this LogicalConstructMigrationStats.  # noqa: E501

        Type of the vSphere object (e.g. dvportgroup).  # noqa: E501

        :return: The source_type of this LogicalConstructMigrationStats.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this LogicalConstructMigrationStats.

        Type of the vSphere object (e.g. dvportgroup).  # noqa: E501

        :param source_type: The source_type of this LogicalConstructMigrationStats.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_count(self):
        """Gets the source_count of this LogicalConstructMigrationStats.  # noqa: E501

        Number of objects of source type.  # noqa: E501

        :return: The source_count of this LogicalConstructMigrationStats.  # noqa: E501
        :rtype: str
        """
        return self._source_count

    @source_count.setter
    def source_count(self, source_count):
        """Sets the source_count of this LogicalConstructMigrationStats.

        Number of objects of source type.  # noqa: E501

        :param source_count: The source_count of this LogicalConstructMigrationStats.  # noqa: E501
        :type: str
        """

        self._source_count = source_count

    @property
    def target_type(self):
        """Gets the target_type of this LogicalConstructMigrationStats.  # noqa: E501

        Type of the Policy object corresponding to the source type (e.g. Segment).  # noqa: E501

        :return: The target_type of this LogicalConstructMigrationStats.  # noqa: E501
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this LogicalConstructMigrationStats.

        Type of the Policy object corresponding to the source type (e.g. Segment).  # noqa: E501

        :param target_type: The target_type of this LogicalConstructMigrationStats.  # noqa: E501
        :type: str
        """

        self._target_type = target_type

    @property
    def vertical(self):
        """Gets the vertical of this LogicalConstructMigrationStats.  # noqa: E501

        Functional area that this vSphere object falls into  # noqa: E501

        :return: The vertical of this LogicalConstructMigrationStats.  # noqa: E501
        :rtype: str
        """
        return self._vertical

    @vertical.setter
    def vertical(self, vertical):
        """Sets the vertical of this LogicalConstructMigrationStats.

        Functional area that this vSphere object falls into  # noqa: E501

        :param vertical: The vertical of this LogicalConstructMigrationStats.  # noqa: E501
        :type: str
        """

        self._vertical = vertical

    @property
    def target_count(self):
        """Gets the target_count of this LogicalConstructMigrationStats.  # noqa: E501

        Number of objects of target type.  # noqa: E501

        :return: The target_count of this LogicalConstructMigrationStats.  # noqa: E501
        :rtype: str
        """
        return self._target_count

    @target_count.setter
    def target_count(self, target_count):
        """Sets the target_count of this LogicalConstructMigrationStats.

        Number of objects of target type.  # noqa: E501

        :param target_count: The target_count of this LogicalConstructMigrationStats.  # noqa: E501
        :type: str
        """

        self._target_count = target_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalConstructMigrationStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalConstructMigrationStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
