# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LiveTraceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pktcap_results': 'list[PktCapResult]',
        'count_results': 'list[CountResult]',
        'id': 'str',
        'trace_results': 'list[TraceResult]'
    }

    attribute_map = {
        'pktcap_results': 'pktcap_results',
        'count_results': 'count_results',
        'id': 'id',
        'trace_results': 'trace_results'
    }

    def __init__(self, pktcap_results=None, count_results=None, id=None, trace_results=None):  # noqa: E501
        """LiveTraceResult - a model defined in Swagger"""  # noqa: E501
        self._pktcap_results = None
        self._count_results = None
        self._id = None
        self._trace_results = None
        self.discriminator = None
        if pktcap_results is not None:
            self.pktcap_results = pktcap_results
        if count_results is not None:
            self.count_results = count_results
        if id is not None:
            self.id = id
        if trace_results is not None:
            self.trace_results = trace_results

    @property
    def pktcap_results(self):
        """Gets the pktcap_results of this LiveTraceResult.  # noqa: E501

        PktCap action results  # noqa: E501

        :return: The pktcap_results of this LiveTraceResult.  # noqa: E501
        :rtype: list[PktCapResult]
        """
        return self._pktcap_results

    @pktcap_results.setter
    def pktcap_results(self, pktcap_results):
        """Sets the pktcap_results of this LiveTraceResult.

        PktCap action results  # noqa: E501

        :param pktcap_results: The pktcap_results of this LiveTraceResult.  # noqa: E501
        :type: list[PktCapResult]
        """

        self._pktcap_results = pktcap_results

    @property
    def count_results(self):
        """Gets the count_results of this LiveTraceResult.  # noqa: E501

        Count action list results  # noqa: E501

        :return: The count_results of this LiveTraceResult.  # noqa: E501
        :rtype: list[CountResult]
        """
        return self._count_results

    @count_results.setter
    def count_results(self, count_results):
        """Sets the count_results of this LiveTraceResult.

        Count action list results  # noqa: E501

        :param count_results: The count_results of this LiveTraceResult.  # noqa: E501
        :type: list[CountResult]
        """

        self._count_results = count_results

    @property
    def id(self):
        """Gets the id of this LiveTraceResult.  # noqa: E501

        The id is assigned by live trace and cannot be specified by user.   # noqa: E501

        :return: The id of this LiveTraceResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiveTraceResult.

        The id is assigned by live trace and cannot be specified by user.   # noqa: E501

        :param id: The id of this LiveTraceResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def trace_results(self):
        """Gets the trace_results of this LiveTraceResult.  # noqa: E501

        Trace action observation list results  # noqa: E501

        :return: The trace_results of this LiveTraceResult.  # noqa: E501
        :rtype: list[TraceResult]
        """
        return self._trace_results

    @trace_results.setter
    def trace_results(self, trace_results):
        """Sets the trace_results of this LiveTraceResult.

        Trace action observation list results  # noqa: E501

        :param trace_results: The trace_results of this LiveTraceResult.  # noqa: E501
        :type: list[TraceResult]
        """

        self._trace_results = trace_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiveTraceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiveTraceResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
