# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostSwitchState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_switch_type': 'str',
        'host_switch_id': 'str',
        'endpoints': 'list[Endpoint]',
        'transport_zone_ids': 'list[str]',
        'host_switch_name': 'str'
    }

    attribute_map = {
        'host_switch_type': 'host_switch_type',
        'host_switch_id': 'host_switch_id',
        'endpoints': 'endpoints',
        'transport_zone_ids': 'transport_zone_ids',
        'host_switch_name': 'host_switch_name'
    }

    def __init__(self, host_switch_type='NVDS', host_switch_id=None, endpoints=None, transport_zone_ids=None, host_switch_name=None):  # noqa: E501
        """HostSwitchState - a model defined in Swagger"""  # noqa: E501
        self._host_switch_type = None
        self._host_switch_id = None
        self._endpoints = None
        self._transport_zone_ids = None
        self._host_switch_name = None
        self.discriminator = None
        if host_switch_type is not None:
            self.host_switch_type = host_switch_type
        if host_switch_id is not None:
            self.host_switch_id = host_switch_id
        if endpoints is not None:
            self.endpoints = endpoints
        if transport_zone_ids is not None:
            self.transport_zone_ids = transport_zone_ids
        if host_switch_name is not None:
            self.host_switch_name = host_switch_name

    @property
    def host_switch_type(self):
        """Gets the host_switch_type of this HostSwitchState.  # noqa: E501

        VDS represents VMware vSphere Distributed Switch from vSphere that is used as HostSwitch through TransportNode or TransportNodeProfile configuration. When VDS is used as a HostSwitch, Hosts have to be added to VDS from vSphere and VDS instance is created on Hosts. To configure NSX on such hosts, you can use this VDS as a HostSwitch from NSX manager. vCenter has the ownership of MTU, LAG, NIOC and LLDP configuration of such VDS backed HostSwitch. Remaining configuration (e.g. UplinkHostswitchProfile) will be managed by NSX. NVDS represents NSX Virtual Switch which is NSX native HostSwitch. All configurations of NVDS will be managed by NSX.  # noqa: E501

        :return: The host_switch_type of this HostSwitchState.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_type

    @host_switch_type.setter
    def host_switch_type(self, host_switch_type):
        """Sets the host_switch_type of this HostSwitchState.

        VDS represents VMware vSphere Distributed Switch from vSphere that is used as HostSwitch through TransportNode or TransportNodeProfile configuration. When VDS is used as a HostSwitch, Hosts have to be added to VDS from vSphere and VDS instance is created on Hosts. To configure NSX on such hosts, you can use this VDS as a HostSwitch from NSX manager. vCenter has the ownership of MTU, LAG, NIOC and LLDP configuration of such VDS backed HostSwitch. Remaining configuration (e.g. UplinkHostswitchProfile) will be managed by NSX. NVDS represents NSX Virtual Switch which is NSX native HostSwitch. All configurations of NVDS will be managed by NSX.  # noqa: E501

        :param host_switch_type: The host_switch_type of this HostSwitchState.  # noqa: E501
        :type: str
        """
        allowed_values = ["NVDS", "VDS"]  # noqa: E501
        if host_switch_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_switch_type` ({0}), must be one of {1}"  # noqa: E501
                .format(host_switch_type, allowed_values)
            )

        self._host_switch_type = host_switch_type

    @property
    def host_switch_id(self):
        """Gets the host_switch_id of this HostSwitchState.  # noqa: E501

        External ID of the HostSwitch  # noqa: E501

        :return: The host_switch_id of this HostSwitchState.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_id

    @host_switch_id.setter
    def host_switch_id(self, host_switch_id):
        """Sets the host_switch_id of this HostSwitchState.

        External ID of the HostSwitch  # noqa: E501

        :param host_switch_id: The host_switch_id of this HostSwitchState.  # noqa: E501
        :type: str
        """

        self._host_switch_id = host_switch_id

    @property
    def endpoints(self):
        """Gets the endpoints of this HostSwitchState.  # noqa: E501

        List of virtual tunnel endpoints which are configured on this switch  # noqa: E501

        :return: The endpoints of this HostSwitchState.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this HostSwitchState.

        List of virtual tunnel endpoints which are configured on this switch  # noqa: E501

        :param endpoints: The endpoints of this HostSwitchState.  # noqa: E501
        :type: list[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def transport_zone_ids(self):
        """Gets the transport_zone_ids of this HostSwitchState.  # noqa: E501

        List of Ids of TransportZones this HostSwitch belongs to  # noqa: E501

        :return: The transport_zone_ids of this HostSwitchState.  # noqa: E501
        :rtype: list[str]
        """
        return self._transport_zone_ids

    @transport_zone_ids.setter
    def transport_zone_ids(self, transport_zone_ids):
        """Sets the transport_zone_ids of this HostSwitchState.

        List of Ids of TransportZones this HostSwitch belongs to  # noqa: E501

        :param transport_zone_ids: The transport_zone_ids of this HostSwitchState.  # noqa: E501
        :type: list[str]
        """

        self._transport_zone_ids = transport_zone_ids

    @property
    def host_switch_name(self):
        """Gets the host_switch_name of this HostSwitchState.  # noqa: E501

        The name must be unique among all host switches specified in a given Transport Node.  # noqa: E501

        :return: The host_switch_name of this HostSwitchState.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_name

    @host_switch_name.setter
    def host_switch_name(self, host_switch_name):
        """Sets the host_switch_name of this HostSwitchState.

        The name must be unique among all host switches specified in a given Transport Node.  # noqa: E501

        :param host_switch_name: The host_switch_name of this HostSwitchState.  # noqa: E501
        :type: str
        """

        self._host_switch_name = host_switch_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostSwitchState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostSwitchState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
