# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DnsForwarderStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'timestamp': 'int',
        'standby_node': 'str',
        'extra_message': 'str',
        'active_node': 'str'
    }

    attribute_map = {
        'status': 'status',
        'timestamp': 'timestamp',
        'standby_node': 'standby_node',
        'extra_message': 'extra_message',
        'active_node': 'active_node'
    }

    def __init__(self, status=None, timestamp=None, standby_node=None, extra_message=None, active_node=None):  # noqa: E501
        """DnsForwarderStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._timestamp = None
        self._standby_node = None
        self._extra_message = None
        self._active_node = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp
        if standby_node is not None:
            self.standby_node = standby_node
        if extra_message is not None:
            self.extra_message = extra_message
        if active_node is not None:
            self.active_node = active_node

    @property
    def status(self):
        """Gets the status of this DnsForwarderStatus.  # noqa: E501

        UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The dns forwarder may be working (or not working). NO_BACKUP means dns forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down.   # noqa: E501

        :return: The status of this DnsForwarderStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DnsForwarderStatus.

        UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The dns forwarder may be working (or not working). NO_BACKUP means dns forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down.   # noqa: E501

        :param status: The status of this DnsForwarderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "ERROR", "NO_BACKUP"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this DnsForwarderStatus.  # noqa: E501

        Time stamp of the current status, in ms  # noqa: E501

        :return: The timestamp of this DnsForwarderStatus.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DnsForwarderStatus.

        Time stamp of the current status, in ms  # noqa: E501

        :param timestamp: The timestamp of this DnsForwarderStatus.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def standby_node(self):
        """Gets the standby_node of this DnsForwarderStatus.  # noqa: E501

        Uuid of stand_by transport node. null if non-HA mode  # noqa: E501

        :return: The standby_node of this DnsForwarderStatus.  # noqa: E501
        :rtype: str
        """
        return self._standby_node

    @standby_node.setter
    def standby_node(self, standby_node):
        """Sets the standby_node of this DnsForwarderStatus.

        Uuid of stand_by transport node. null if non-HA mode  # noqa: E501

        :param standby_node: The standby_node of this DnsForwarderStatus.  # noqa: E501
        :type: str
        """

        self._standby_node = standby_node

    @property
    def extra_message(self):
        """Gets the extra_message of this DnsForwarderStatus.  # noqa: E501

        Extra message, if available  # noqa: E501

        :return: The extra_message of this DnsForwarderStatus.  # noqa: E501
        :rtype: str
        """
        return self._extra_message

    @extra_message.setter
    def extra_message(self, extra_message):
        """Sets the extra_message of this DnsForwarderStatus.

        Extra message, if available  # noqa: E501

        :param extra_message: The extra_message of this DnsForwarderStatus.  # noqa: E501
        :type: str
        """

        self._extra_message = extra_message

    @property
    def active_node(self):
        """Gets the active_node of this DnsForwarderStatus.  # noqa: E501

        Uuid of active transport node  # noqa: E501

        :return: The active_node of this DnsForwarderStatus.  # noqa: E501
        :rtype: str
        """
        return self._active_node

    @active_node.setter
    def active_node(self, active_node):
        """Sets the active_node of this DnsForwarderStatus.

        Uuid of active transport node  # noqa: E501

        :param active_node: The active_node of this DnsForwarderStatus.  # noqa: E501
        :type: str
        """

        self._active_node = active_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsForwarderStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsForwarderStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
