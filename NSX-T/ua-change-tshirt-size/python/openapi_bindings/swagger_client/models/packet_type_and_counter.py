# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PacketTypeAndCounter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counter': 'int',
        'packet_type': 'str'
    }

    attribute_map = {
        'counter': 'counter',
        'packet_type': 'packet_type'
    }

    def __init__(self, counter=None, packet_type=None):  # noqa: E501
        """PacketTypeAndCounter - a model defined in Swagger"""  # noqa: E501
        self._counter = None
        self._packet_type = None
        self.discriminator = None
        self.counter = counter
        self.packet_type = packet_type

    @property
    def counter(self):
        """Gets the counter of this PacketTypeAndCounter.  # noqa: E501

        The number of packets.  # noqa: E501

        :return: The counter of this PacketTypeAndCounter.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this PacketTypeAndCounter.

        The number of packets.  # noqa: E501

        :param counter: The counter of this PacketTypeAndCounter.  # noqa: E501
        :type: int
        """
        if counter is None:
            raise ValueError("Invalid value for `counter`, must not be `None`")  # noqa: E501

        self._counter = counter

    @property
    def packet_type(self):
        """Gets the packet_type of this PacketTypeAndCounter.  # noqa: E501

        The type of the packets  # noqa: E501

        :return: The packet_type of this PacketTypeAndCounter.  # noqa: E501
        :rtype: str
        """
        return self._packet_type

    @packet_type.setter
    def packet_type(self, packet_type):
        """Sets the packet_type of this PacketTypeAndCounter.

        The type of the packets  # noqa: E501

        :param packet_type: The packet_type of this PacketTypeAndCounter.  # noqa: E501
        :type: str
        """
        if packet_type is None:
            raise ValueError("Invalid value for `packet_type`, must not be `None`")  # noqa: E501

        self._packet_type = packet_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketTypeAndCounter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketTypeAndCounter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
