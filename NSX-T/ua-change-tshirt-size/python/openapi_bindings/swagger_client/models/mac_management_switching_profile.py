# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_switching_profile import BaseSwitchingProfile  # noqa: F401,E501

class MacManagementSwitchingProfile(BaseSwitchingProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mac_learning': 'MacLearningSpec',
        'mac_change_allowed': 'bool'
    }
    if hasattr(BaseSwitchingProfile, "swagger_types"):
        swagger_types.update(BaseSwitchingProfile.swagger_types)

    attribute_map = {
        'mac_learning': 'mac_learning',
        'mac_change_allowed': 'mac_change_allowed'
    }
    if hasattr(BaseSwitchingProfile, "attribute_map"):
        attribute_map.update(BaseSwitchingProfile.attribute_map)

    def __init__(self, mac_learning=None, mac_change_allowed=False, *args, **kwargs):  # noqa: E501
        """MacManagementSwitchingProfile - a model defined in Swagger"""  # noqa: E501
        self._mac_learning = None
        self._mac_change_allowed = None
        self.discriminator = None
        if mac_learning is not None:
            self.mac_learning = mac_learning
        if mac_change_allowed is not None:
            self.mac_change_allowed = mac_change_allowed
        BaseSwitchingProfile.__init__(self, *args, **kwargs)

    @property
    def mac_learning(self):
        """Gets the mac_learning of this MacManagementSwitchingProfile.  # noqa: E501


        :return: The mac_learning of this MacManagementSwitchingProfile.  # noqa: E501
        :rtype: MacLearningSpec
        """
        return self._mac_learning

    @mac_learning.setter
    def mac_learning(self, mac_learning):
        """Sets the mac_learning of this MacManagementSwitchingProfile.


        :param mac_learning: The mac_learning of this MacManagementSwitchingProfile.  # noqa: E501
        :type: MacLearningSpec
        """

        self._mac_learning = mac_learning

    @property
    def mac_change_allowed(self):
        """Gets the mac_change_allowed of this MacManagementSwitchingProfile.  # noqa: E501

        Allowing source MAC address change  # noqa: E501

        :return: The mac_change_allowed of this MacManagementSwitchingProfile.  # noqa: E501
        :rtype: bool
        """
        return self._mac_change_allowed

    @mac_change_allowed.setter
    def mac_change_allowed(self, mac_change_allowed):
        """Sets the mac_change_allowed of this MacManagementSwitchingProfile.

        Allowing source MAC address change  # noqa: E501

        :param mac_change_allowed: The mac_change_allowed of this MacManagementSwitchingProfile.  # noqa: E501
        :type: bool
        """

        self._mac_change_allowed = mac_change_allowed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MacManagementSwitchingProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MacManagementSwitchingProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
