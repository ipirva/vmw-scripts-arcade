# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class NDRAProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ra_mode': 'str',
        'ra_config': 'RAConfig',
        'retransmit_interval': 'int',
        'dns_config': 'RaDNSConfig',
        'reachable_timer': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'ra_mode': 'ra_mode',
        'ra_config': 'ra_config',
        'retransmit_interval': 'retransmit_interval',
        'dns_config': 'dns_config',
        'reachable_timer': 'reachable_timer'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, ra_mode='SLAAC_DNS_THROUGH_RA', ra_config=None, retransmit_interval=1000, dns_config=None, reachable_timer=0, *args, **kwargs):  # noqa: E501
        """NDRAProfile - a model defined in Swagger"""  # noqa: E501
        self._ra_mode = None
        self._ra_config = None
        self._retransmit_interval = None
        self._dns_config = None
        self._reachable_timer = None
        self.discriminator = None
        self.ra_mode = ra_mode
        self.ra_config = ra_config
        if retransmit_interval is not None:
            self.retransmit_interval = retransmit_interval
        if dns_config is not None:
            self.dns_config = dns_config
        if reachable_timer is not None:
            self.reachable_timer = reachable_timer
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def ra_mode(self):
        """Gets the ra_mode of this NDRAProfile.  # noqa: E501

        RA Mode  # noqa: E501

        :return: The ra_mode of this NDRAProfile.  # noqa: E501
        :rtype: str
        """
        return self._ra_mode

    @ra_mode.setter
    def ra_mode(self, ra_mode):
        """Sets the ra_mode of this NDRAProfile.

        RA Mode  # noqa: E501

        :param ra_mode: The ra_mode of this NDRAProfile.  # noqa: E501
        :type: str
        """
        if ra_mode is None:
            raise ValueError("Invalid value for `ra_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["DISABLED", "SLAAC_DNS_THROUGH_RA", "SLAAC_DNS_THROUGH_DHCP", "DHCP_ADDRESS_AND_DNS_THROUGH_DHCP", "SLAAC_AND_ADDRESS_DNS_THROUGH_DHCP"]  # noqa: E501
        if ra_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ra_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(ra_mode, allowed_values)
            )

        self._ra_mode = ra_mode

    @property
    def ra_config(self):
        """Gets the ra_config of this NDRAProfile.  # noqa: E501


        :return: The ra_config of this NDRAProfile.  # noqa: E501
        :rtype: RAConfig
        """
        return self._ra_config

    @ra_config.setter
    def ra_config(self, ra_config):
        """Sets the ra_config of this NDRAProfile.


        :param ra_config: The ra_config of this NDRAProfile.  # noqa: E501
        :type: RAConfig
        """
        if ra_config is None:
            raise ValueError("Invalid value for `ra_config`, must not be `None`")  # noqa: E501

        self._ra_config = ra_config

    @property
    def retransmit_interval(self):
        """Gets the retransmit_interval of this NDRAProfile.  # noqa: E501

        The time, in milliseconds, between retransmitted neighbour solicitation messages.   # noqa: E501

        :return: The retransmit_interval of this NDRAProfile.  # noqa: E501
        :rtype: int
        """
        return self._retransmit_interval

    @retransmit_interval.setter
    def retransmit_interval(self, retransmit_interval):
        """Sets the retransmit_interval of this NDRAProfile.

        The time, in milliseconds, between retransmitted neighbour solicitation messages.   # noqa: E501

        :param retransmit_interval: The retransmit_interval of this NDRAProfile.  # noqa: E501
        :type: int
        """

        self._retransmit_interval = retransmit_interval

    @property
    def dns_config(self):
        """Gets the dns_config of this NDRAProfile.  # noqa: E501


        :return: The dns_config of this NDRAProfile.  # noqa: E501
        :rtype: RaDNSConfig
        """
        return self._dns_config

    @dns_config.setter
    def dns_config(self, dns_config):
        """Sets the dns_config of this NDRAProfile.


        :param dns_config: The dns_config of this NDRAProfile.  # noqa: E501
        :type: RaDNSConfig
        """

        self._dns_config = dns_config

    @property
    def reachable_timer(self):
        """Gets the reachable_timer of this NDRAProfile.  # noqa: E501

        Neighbour reachable time duration in milliseconds. A value of 0 means unspecified.   # noqa: E501

        :return: The reachable_timer of this NDRAProfile.  # noqa: E501
        :rtype: int
        """
        return self._reachable_timer

    @reachable_timer.setter
    def reachable_timer(self, reachable_timer):
        """Sets the reachable_timer of this NDRAProfile.

        Neighbour reachable time duration in milliseconds. A value of 0 means unspecified.   # noqa: E501

        :param reachable_timer: The reachable_timer of this NDRAProfile.  # noqa: E501
        :type: int
        """

        self._reachable_timer = reachable_timer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NDRAProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NDRAProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
