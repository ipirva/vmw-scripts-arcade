# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class FirewallStatus(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'global_status': 'str',
        'context': 'str',
        'target_statuses': 'list[TargetResourceStatus]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'global_status': 'global_status',
        'context': 'context',
        'target_statuses': 'target_statuses'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, global_status=None, context=None, target_statuses=None, *args, **kwargs):  # noqa: E501
        """FirewallStatus - a model defined in Swagger"""  # noqa: E501
        self._global_status = None
        self._context = None
        self._target_statuses = None
        self.discriminator = None
        self.global_status = global_status
        self.context = context
        if target_statuses is not None:
            self.target_statuses = target_statuses
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def global_status(self):
        """Gets the global_status of this FirewallStatus.  # noqa: E501

        Firewall status for a fabric entity or in global context where firewall is supported.  # noqa: E501

        :return: The global_status of this FirewallStatus.  # noqa: E501
        :rtype: str
        """
        return self._global_status

    @global_status.setter
    def global_status(self, global_status):
        """Sets the global_status of this FirewallStatus.

        Firewall status for a fabric entity or in global context where firewall is supported.  # noqa: E501

        :param global_status: The global_status of this FirewallStatus.  # noqa: E501
        :type: str
        """
        if global_status is None:
            raise ValueError("Invalid value for `global_status`, must not be `None`")  # noqa: E501
        allowed_values = ["DISABLED", "ENABLED"]  # noqa: E501
        if global_status not in allowed_values:
            raise ValueError(
                "Invalid value for `global_status` ({0}), must be one of {1}"  # noqa: E501
                .format(global_status, allowed_values)
            )

        self._global_status = global_status

    @property
    def context(self):
        """Gets the context of this FirewallStatus.  # noqa: E501

        Types of firewall contexts.  # noqa: E501

        :return: The context of this FirewallStatus.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this FirewallStatus.

        Types of firewall contexts.  # noqa: E501

        :param context: The context of this FirewallStatus.  # noqa: E501
        :type: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501
        allowed_values = ["transport_nodes", "logical_routers", "bridge_ports"]  # noqa: E501
        if context not in allowed_values:
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"  # noqa: E501
                .format(context, allowed_values)
            )

        self._context = context

    @property
    def target_statuses(self):
        """Gets the target_statuses of this FirewallStatus.  # noqa: E501

        List of firewall status on various target logical resources. This will override the global status of corresponding firewall context (e.g it will override the gloabal status of logical_routers).  # noqa: E501

        :return: The target_statuses of this FirewallStatus.  # noqa: E501
        :rtype: list[TargetResourceStatus]
        """
        return self._target_statuses

    @target_statuses.setter
    def target_statuses(self, target_statuses):
        """Sets the target_statuses of this FirewallStatus.

        List of firewall status on various target logical resources. This will override the global status of corresponding firewall context (e.g it will override the gloabal status of logical_routers).  # noqa: E501

        :param target_statuses: The target_statuses of this FirewallStatus.  # noqa: E501
        :type: list[TargetResourceStatus]
        """

        self._target_statuses = target_statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
