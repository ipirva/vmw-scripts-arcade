# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddControllerNodeSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mpa_msg_client_info': 'MsgClientInfo',
        'host_msg_client_info': 'MsgClientInfo',
        'clustering_params': 'ClusteringInfo',
        'node_id': 'str',
        'control_plane_server_certificate': 'str',
        'type': 'str'
    }

    attribute_map = {
        'mpa_msg_client_info': 'mpa_msg_client_info',
        'host_msg_client_info': 'host_msg_client_info',
        'clustering_params': 'clustering_params',
        'node_id': 'node_id',
        'control_plane_server_certificate': 'control_plane_server_certificate',
        'type': 'type'
    }

    def __init__(self, mpa_msg_client_info=None, host_msg_client_info=None, clustering_params=None, node_id=None, control_plane_server_certificate=None, type=None):  # noqa: E501
        """AddControllerNodeSpec - a model defined in Swagger"""  # noqa: E501
        self._mpa_msg_client_info = None
        self._host_msg_client_info = None
        self._clustering_params = None
        self._node_id = None
        self._control_plane_server_certificate = None
        self._type = None
        self.discriminator = None
        self.mpa_msg_client_info = mpa_msg_client_info
        self.host_msg_client_info = host_msg_client_info
        if clustering_params is not None:
            self.clustering_params = clustering_params
        if node_id is not None:
            self.node_id = node_id
        if control_plane_server_certificate is not None:
            self.control_plane_server_certificate = control_plane_server_certificate
        self.type = type

    @property
    def mpa_msg_client_info(self):
        """Gets the mpa_msg_client_info of this AddControllerNodeSpec.  # noqa: E501


        :return: The mpa_msg_client_info of this AddControllerNodeSpec.  # noqa: E501
        :rtype: MsgClientInfo
        """
        return self._mpa_msg_client_info

    @mpa_msg_client_info.setter
    def mpa_msg_client_info(self, mpa_msg_client_info):
        """Sets the mpa_msg_client_info of this AddControllerNodeSpec.


        :param mpa_msg_client_info: The mpa_msg_client_info of this AddControllerNodeSpec.  # noqa: E501
        :type: MsgClientInfo
        """
        if mpa_msg_client_info is None:
            raise ValueError("Invalid value for `mpa_msg_client_info`, must not be `None`")  # noqa: E501

        self._mpa_msg_client_info = mpa_msg_client_info

    @property
    def host_msg_client_info(self):
        """Gets the host_msg_client_info of this AddControllerNodeSpec.  # noqa: E501


        :return: The host_msg_client_info of this AddControllerNodeSpec.  # noqa: E501
        :rtype: MsgClientInfo
        """
        return self._host_msg_client_info

    @host_msg_client_info.setter
    def host_msg_client_info(self, host_msg_client_info):
        """Sets the host_msg_client_info of this AddControllerNodeSpec.


        :param host_msg_client_info: The host_msg_client_info of this AddControllerNodeSpec.  # noqa: E501
        :type: MsgClientInfo
        """
        if host_msg_client_info is None:
            raise ValueError("Invalid value for `host_msg_client_info`, must not be `None`")  # noqa: E501

        self._host_msg_client_info = host_msg_client_info

    @property
    def clustering_params(self):
        """Gets the clustering_params of this AddControllerNodeSpec.  # noqa: E501


        :return: The clustering_params of this AddControllerNodeSpec.  # noqa: E501
        :rtype: ClusteringInfo
        """
        return self._clustering_params

    @clustering_params.setter
    def clustering_params(self, clustering_params):
        """Sets the clustering_params of this AddControllerNodeSpec.


        :param clustering_params: The clustering_params of this AddControllerNodeSpec.  # noqa: E501
        :type: ClusteringInfo
        """

        self._clustering_params = clustering_params

    @property
    def node_id(self):
        """Gets the node_id of this AddControllerNodeSpec.  # noqa: E501

        Only use this if an id for the node already exists with MP. If not specified, then the node_id will be set to a random id.  # noqa: E501

        :return: The node_id of this AddControllerNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AddControllerNodeSpec.

        Only use this if an id for the node already exists with MP. If not specified, then the node_id will be set to a random id.  # noqa: E501

        :param node_id: The node_id of this AddControllerNodeSpec.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def control_plane_server_certificate(self):
        """Gets the control_plane_server_certificate of this AddControllerNodeSpec.  # noqa: E501

        Deprecated. Do not supply a value for this property.  # noqa: E501

        :return: The control_plane_server_certificate of this AddControllerNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._control_plane_server_certificate

    @control_plane_server_certificate.setter
    def control_plane_server_certificate(self, control_plane_server_certificate):
        """Sets the control_plane_server_certificate of this AddControllerNodeSpec.

        Deprecated. Do not supply a value for this property.  # noqa: E501

        :param control_plane_server_certificate: The control_plane_server_certificate of this AddControllerNodeSpec.  # noqa: E501
        :type: str
        """

        self._control_plane_server_certificate = control_plane_server_certificate

    @property
    def type(self):
        """Gets the type of this AddControllerNodeSpec.  # noqa: E501

        must be set to AddControllerNodeSpec  # noqa: E501

        :return: The type of this AddControllerNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddControllerNodeSpec.

        must be set to AddControllerNodeSpec  # noqa: E501

        :param type: The type of this AddControllerNodeSpec.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["AddControllerNodeSpec"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddControllerNodeSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddControllerNodeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
