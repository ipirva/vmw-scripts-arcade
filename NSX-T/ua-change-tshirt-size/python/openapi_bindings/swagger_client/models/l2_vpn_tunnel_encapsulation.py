# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2VpnTunnelEncapsulation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_endpoint_ip': 'str',
        'protocol': 'str',
        'peer_endpoint_ip': 'str'
    }

    attribute_map = {
        'local_endpoint_ip': 'local_endpoint_ip',
        'protocol': 'protocol',
        'peer_endpoint_ip': 'peer_endpoint_ip'
    }

    def __init__(self, local_endpoint_ip=None, protocol='GRE', peer_endpoint_ip=None):  # noqa: E501
        """L2VpnTunnelEncapsulation - a model defined in Swagger"""  # noqa: E501
        self._local_endpoint_ip = None
        self._protocol = None
        self._peer_endpoint_ip = None
        self.discriminator = None
        if local_endpoint_ip is not None:
            self.local_endpoint_ip = local_endpoint_ip
        if protocol is not None:
            self.protocol = protocol
        if peer_endpoint_ip is not None:
            self.peer_endpoint_ip = peer_endpoint_ip

    @property
    def local_endpoint_ip(self):
        """Gets the local_endpoint_ip of this L2VpnTunnelEncapsulation.  # noqa: E501

        IP Address of the tunnel port. For hub, the IP is allocated from L2VpnService logical_tap_ip_pool. All sessions on same L2VpnService get the same local_endpoint_ip. For spoke, the IP must be provided.  # noqa: E501

        :return: The local_endpoint_ip of this L2VpnTunnelEncapsulation.  # noqa: E501
        :rtype: str
        """
        return self._local_endpoint_ip

    @local_endpoint_ip.setter
    def local_endpoint_ip(self, local_endpoint_ip):
        """Sets the local_endpoint_ip of this L2VpnTunnelEncapsulation.

        IP Address of the tunnel port. For hub, the IP is allocated from L2VpnService logical_tap_ip_pool. All sessions on same L2VpnService get the same local_endpoint_ip. For spoke, the IP must be provided.  # noqa: E501

        :param local_endpoint_ip: The local_endpoint_ip of this L2VpnTunnelEncapsulation.  # noqa: E501
        :type: str
        """

        self._local_endpoint_ip = local_endpoint_ip

    @property
    def protocol(self):
        """Gets the protocol of this L2VpnTunnelEncapsulation.  # noqa: E501

        Encapsulation protocol used by the tunnel  # noqa: E501

        :return: The protocol of this L2VpnTunnelEncapsulation.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this L2VpnTunnelEncapsulation.

        Encapsulation protocol used by the tunnel  # noqa: E501

        :param protocol: The protocol of this L2VpnTunnelEncapsulation.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRE"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def peer_endpoint_ip(self):
        """Gets the peer_endpoint_ip of this L2VpnTunnelEncapsulation.  # noqa: E501

        IP Address of the peer tunnel port. For hub, the IP is allocated from L2VpnService logical_tap_ip_pool. For spoke, the IP must be provided.  # noqa: E501

        :return: The peer_endpoint_ip of this L2VpnTunnelEncapsulation.  # noqa: E501
        :rtype: str
        """
        return self._peer_endpoint_ip

    @peer_endpoint_ip.setter
    def peer_endpoint_ip(self, peer_endpoint_ip):
        """Sets the peer_endpoint_ip of this L2VpnTunnelEncapsulation.

        IP Address of the peer tunnel port. For hub, the IP is allocated from L2VpnService logical_tap_ip_pool. For spoke, the IP must be provided.  # noqa: E501

        :param peer_endpoint_ip: The peer_endpoint_ip of this L2VpnTunnelEncapsulation.  # noqa: E501
        :type: str
        """

        self._peer_endpoint_ip = peer_endpoint_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VpnTunnelEncapsulation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VpnTunnelEncapsulation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
