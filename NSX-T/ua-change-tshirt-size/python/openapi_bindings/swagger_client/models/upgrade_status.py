# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_status': 'HostUpgradeStatus',
        'ccp_status': 'CCPUpgradeStatus',
        'edge_status': 'EdgeUpgradeStatus',
        'overall_upgrade_status': 'str',
        'component_status': 'list[ComponentUpgradeStatus]'
    }

    attribute_map = {
        'host_status': 'host_status',
        'ccp_status': 'ccp_status',
        'edge_status': 'edge_status',
        'overall_upgrade_status': 'overall_upgrade_status',
        'component_status': 'component_status'
    }

    def __init__(self, host_status=None, ccp_status=None, edge_status=None, overall_upgrade_status=None, component_status=None):  # noqa: E501
        """UpgradeStatus - a model defined in Swagger"""  # noqa: E501
        self._host_status = None
        self._ccp_status = None
        self._edge_status = None
        self._overall_upgrade_status = None
        self._component_status = None
        self.discriminator = None
        if host_status is not None:
            self.host_status = host_status
        if ccp_status is not None:
            self.ccp_status = ccp_status
        if edge_status is not None:
            self.edge_status = edge_status
        if overall_upgrade_status is not None:
            self.overall_upgrade_status = overall_upgrade_status
        if component_status is not None:
            self.component_status = component_status

    @property
    def host_status(self):
        """Gets the host_status of this UpgradeStatus.  # noqa: E501


        :return: The host_status of this UpgradeStatus.  # noqa: E501
        :rtype: HostUpgradeStatus
        """
        return self._host_status

    @host_status.setter
    def host_status(self, host_status):
        """Sets the host_status of this UpgradeStatus.


        :param host_status: The host_status of this UpgradeStatus.  # noqa: E501
        :type: HostUpgradeStatus
        """

        self._host_status = host_status

    @property
    def ccp_status(self):
        """Gets the ccp_status of this UpgradeStatus.  # noqa: E501


        :return: The ccp_status of this UpgradeStatus.  # noqa: E501
        :rtype: CCPUpgradeStatus
        """
        return self._ccp_status

    @ccp_status.setter
    def ccp_status(self, ccp_status):
        """Sets the ccp_status of this UpgradeStatus.


        :param ccp_status: The ccp_status of this UpgradeStatus.  # noqa: E501
        :type: CCPUpgradeStatus
        """

        self._ccp_status = ccp_status

    @property
    def edge_status(self):
        """Gets the edge_status of this UpgradeStatus.  # noqa: E501


        :return: The edge_status of this UpgradeStatus.  # noqa: E501
        :rtype: EdgeUpgradeStatus
        """
        return self._edge_status

    @edge_status.setter
    def edge_status(self, edge_status):
        """Sets the edge_status of this UpgradeStatus.


        :param edge_status: The edge_status of this UpgradeStatus.  # noqa: E501
        :type: EdgeUpgradeStatus
        """

        self._edge_status = edge_status

    @property
    def overall_upgrade_status(self):
        """Gets the overall_upgrade_status of this UpgradeStatus.  # noqa: E501

        Status of upgrade  # noqa: E501

        :return: The overall_upgrade_status of this UpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._overall_upgrade_status

    @overall_upgrade_status.setter
    def overall_upgrade_status(self, overall_upgrade_status):
        """Sets the overall_upgrade_status of this UpgradeStatus.

        Status of upgrade  # noqa: E501

        :param overall_upgrade_status: The overall_upgrade_status of this UpgradeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED", "IN_PROGRESS", "NOT_STARTED", "PAUSING", "PAUSED"]  # noqa: E501
        if overall_upgrade_status not in allowed_values:
            raise ValueError(
                "Invalid value for `overall_upgrade_status` ({0}), must be one of {1}"  # noqa: E501
                .format(overall_upgrade_status, allowed_values)
            )

        self._overall_upgrade_status = overall_upgrade_status

    @property
    def component_status(self):
        """Gets the component_status of this UpgradeStatus.  # noqa: E501

        List of component statuses  # noqa: E501

        :return: The component_status of this UpgradeStatus.  # noqa: E501
        :rtype: list[ComponentUpgradeStatus]
        """
        return self._component_status

    @component_status.setter
    def component_status(self, component_status):
        """Sets the component_status of this UpgradeStatus.

        List of component statuses  # noqa: E501

        :param component_status: The component_status of this UpgradeStatus.  # noqa: E501
        :type: list[ComponentUpgradeStatus]
        """

        self._component_status = component_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
