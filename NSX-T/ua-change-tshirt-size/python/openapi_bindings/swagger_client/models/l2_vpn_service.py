# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class L2VpnService(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_full_mesh': 'bool',
        'enable_hub': 'bool',
        'logical_router_id': 'str',
        'mode': 'str',
        'logical_tap_ip_pool': 'list[str]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'enable_full_mesh': 'enable_full_mesh',
        'enable_hub': 'enable_hub',
        'logical_router_id': 'logical_router_id',
        'mode': 'mode',
        'logical_tap_ip_pool': 'logical_tap_ip_pool'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, enable_full_mesh=False, enable_hub=False, logical_router_id=None, mode='SERVER', logical_tap_ip_pool=None, *args, **kwargs):  # noqa: E501
        """L2VpnService - a model defined in Swagger"""  # noqa: E501
        self._enable_full_mesh = None
        self._enable_hub = None
        self._logical_router_id = None
        self._mode = None
        self._logical_tap_ip_pool = None
        self.discriminator = None
        if enable_full_mesh is not None:
            self.enable_full_mesh = enable_full_mesh
        if enable_hub is not None:
            self.enable_hub = enable_hub
        self.logical_router_id = logical_router_id
        if mode is not None:
            self.mode = mode
        if logical_tap_ip_pool is not None:
            self.logical_tap_ip_pool = logical_tap_ip_pool
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def enable_full_mesh(self):
        """Gets the enable_full_mesh of this L2VpnService.  # noqa: E501

        Full mesh topology auto disables traffic replication between connected peers. However, this property is deprecated. Please refer enable_hub property instead to control client to client forwarding via the server. The value of enable_full_mesh will not be used anymore. If enable_hub is not provided explicitly, the default value of it will be used.   # noqa: E501

        :return: The enable_full_mesh of this L2VpnService.  # noqa: E501
        :rtype: bool
        """
        return self._enable_full_mesh

    @enable_full_mesh.setter
    def enable_full_mesh(self, enable_full_mesh):
        """Sets the enable_full_mesh of this L2VpnService.

        Full mesh topology auto disables traffic replication between connected peers. However, this property is deprecated. Please refer enable_hub property instead to control client to client forwarding via the server. The value of enable_full_mesh will not be used anymore. If enable_hub is not provided explicitly, the default value of it will be used.   # noqa: E501

        :param enable_full_mesh: The enable_full_mesh of this L2VpnService.  # noqa: E501
        :type: bool
        """

        self._enable_full_mesh = enable_full_mesh

    @property
    def enable_hub(self):
        """Gets the enable_hub of this L2VpnService.  # noqa: E501

        This property only applies in SERVER mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint.   # noqa: E501

        :return: The enable_hub of this L2VpnService.  # noqa: E501
        :rtype: bool
        """
        return self._enable_hub

    @enable_hub.setter
    def enable_hub(self, enable_hub):
        """Sets the enable_hub of this L2VpnService.

        This property only applies in SERVER mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint.   # noqa: E501

        :param enable_hub: The enable_hub of this L2VpnService.  # noqa: E501
        :type: bool
        """

        self._enable_hub = enable_hub

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this L2VpnService.  # noqa: E501

        Logical router id  # noqa: E501

        :return: The logical_router_id of this L2VpnService.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this L2VpnService.

        Logical router id  # noqa: E501

        :param logical_router_id: The logical_router_id of this L2VpnService.  # noqa: E501
        :type: str
        """
        if logical_router_id is None:
            raise ValueError("Invalid value for `logical_router_id`, must not be `None`")  # noqa: E501

        self._logical_router_id = logical_router_id

    @property
    def mode(self):
        """Gets the mode of this L2VpnService.  # noqa: E501

        Specify an L2VPN service mode as SERVER or CLIENT. L2VPN service in SERVER mode requires user to configure L2VPN session explicitly. L2VPN service in CLIENT mode can use peercode generated from SERVER to configure L2VPN session.   # noqa: E501

        :return: The mode of this L2VpnService.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this L2VpnService.

        Specify an L2VPN service mode as SERVER or CLIENT. L2VPN service in SERVER mode requires user to configure L2VPN session explicitly. L2VPN service in CLIENT mode can use peercode generated from SERVER to configure L2VPN session.   # noqa: E501

        :param mode: The mode of this L2VpnService.  # noqa: E501
        :type: str
        """
        allowed_values = ["SERVER", "CLIENT"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def logical_tap_ip_pool(self):
        """Gets the logical_tap_ip_pool of this L2VpnService.  # noqa: E501

        IP Pool to allocate local and peer endpoint IPs for L2VpnSession logical Tap.  # noqa: E501

        :return: The logical_tap_ip_pool of this L2VpnService.  # noqa: E501
        :rtype: list[str]
        """
        return self._logical_tap_ip_pool

    @logical_tap_ip_pool.setter
    def logical_tap_ip_pool(self, logical_tap_ip_pool):
        """Sets the logical_tap_ip_pool of this L2VpnService.

        IP Pool to allocate local and peer endpoint IPs for L2VpnSession logical Tap.  # noqa: E501

        :param logical_tap_ip_pool: The logical_tap_ip_pool of this L2VpnService.  # noqa: E501
        :type: list[str]
        """

        self._logical_tap_ip_pool = logical_tap_ip_pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VpnService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VpnService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
