# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoutingPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_hop_prefix_lists_mappings': 'list[NextHopPrefixListsMapping]',
        'routing_policy_type': 'str'
    }

    attribute_map = {
        'next_hop_prefix_lists_mappings': 'next_hop_prefix_lists_mappings',
        'routing_policy_type': 'routing_policy_type'
    }

    def __init__(self, next_hop_prefix_lists_mappings=None, routing_policy_type='PROXIMITY_ROUTING'):  # noqa: E501
        """RoutingPolicy - a model defined in Swagger"""  # noqa: E501
        self._next_hop_prefix_lists_mappings = None
        self._routing_policy_type = None
        self.discriminator = None
        self.next_hop_prefix_lists_mappings = next_hop_prefix_lists_mappings
        if routing_policy_type is not None:
            self.routing_policy_type = routing_policy_type

    @property
    def next_hop_prefix_lists_mappings(self):
        """Gets the next_hop_prefix_lists_mappings of this RoutingPolicy.  # noqa: E501

        Array of next hop to prefix lists mapping.  # noqa: E501

        :return: The next_hop_prefix_lists_mappings of this RoutingPolicy.  # noqa: E501
        :rtype: list[NextHopPrefixListsMapping]
        """
        return self._next_hop_prefix_lists_mappings

    @next_hop_prefix_lists_mappings.setter
    def next_hop_prefix_lists_mappings(self, next_hop_prefix_lists_mappings):
        """Sets the next_hop_prefix_lists_mappings of this RoutingPolicy.

        Array of next hop to prefix lists mapping.  # noqa: E501

        :param next_hop_prefix_lists_mappings: The next_hop_prefix_lists_mappings of this RoutingPolicy.  # noqa: E501
        :type: list[NextHopPrefixListsMapping]
        """
        if next_hop_prefix_lists_mappings is None:
            raise ValueError("Invalid value for `next_hop_prefix_lists_mappings`, must not be `None`")  # noqa: E501

        self._next_hop_prefix_lists_mappings = next_hop_prefix_lists_mappings

    @property
    def routing_policy_type(self):
        """Gets the routing_policy_type of this RoutingPolicy.  # noqa: E501

        Routing policy type.  # noqa: E501

        :return: The routing_policy_type of this RoutingPolicy.  # noqa: E501
        :rtype: str
        """
        return self._routing_policy_type

    @routing_policy_type.setter
    def routing_policy_type(self, routing_policy_type):
        """Sets the routing_policy_type of this RoutingPolicy.

        Routing policy type.  # noqa: E501

        :param routing_policy_type: The routing_policy_type of this RoutingPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROXIMITY_ROUTING"]  # noqa: E501
        if routing_policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_policy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(routing_policy_type, allowed_values)
            )

        self._routing_policy_type = routing_policy_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
