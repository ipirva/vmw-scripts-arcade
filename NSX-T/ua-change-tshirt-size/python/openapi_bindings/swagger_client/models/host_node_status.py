# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostNodeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config_status': 'str',
        'node_id': 'str',
        'deployment_status': 'str'
    }

    attribute_map = {
        'config_status': 'config_status',
        'node_id': 'node_id',
        'deployment_status': 'deployment_status'
    }

    def __init__(self, config_status=None, node_id=None, deployment_status=None):  # noqa: E501
        """HostNodeStatus - a model defined in Swagger"""  # noqa: E501
        self._config_status = None
        self._node_id = None
        self._deployment_status = None
        self.discriminator = None
        if config_status is not None:
            self.config_status = config_status
        if node_id is not None:
            self.node_id = node_id
        if deployment_status is not None:
            self.deployment_status = deployment_status

    @property
    def config_status(self):
        """Gets the config_status of this HostNodeStatus.  # noqa: E501

        Gives details of state of desired configuration. This property is available only if Tranport Node exists for the host. Following are the supported values pending  - Transport Node configuration status is pending in_progress - Transport Node configuration status is in progress success - Transport Node configuration status is successful failed - Transport Node configuration status is failed partial_success - Transport Node configuration status is partial success orphaned - Transport Node configuration status is orphaned unknown - Transport Node configuration status is unknown error - Error occured during Transport Node configuration  # noqa: E501

        :return: The config_status of this HostNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._config_status

    @config_status.setter
    def config_status(self, config_status):
        """Sets the config_status of this HostNodeStatus.

        Gives details of state of desired configuration. This property is available only if Tranport Node exists for the host. Following are the supported values pending  - Transport Node configuration status is pending in_progress - Transport Node configuration status is in progress success - Transport Node configuration status is successful failed - Transport Node configuration status is failed partial_success - Transport Node configuration status is partial success orphaned - Transport Node configuration status is orphaned unknown - Transport Node configuration status is unknown error - Error occured during Transport Node configuration  # noqa: E501

        :param config_status: The config_status of this HostNodeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "in_progress", "success", "failed", "partial_success", "orphaned", "unknown", "error"]  # noqa: E501
        if config_status not in allowed_values:
            raise ValueError(
                "Invalid value for `config_status` ({0}), must be one of {1}"  # noqa: E501
                .format(config_status, allowed_values)
            )

        self._config_status = config_status

    @property
    def node_id(self):
        """Gets the node_id of this HostNodeStatus.  # noqa: E501

        Unique Id of the host node  # noqa: E501

        :return: The node_id of this HostNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this HostNodeStatus.

        Unique Id of the host node  # noqa: E501

        :param node_id: The node_id of this HostNodeStatus.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def deployment_status(self):
        """Gets the deployment_status of this HostNodeStatus.  # noqa: E501

        This specifies the current nsx install status for host node. Following are the supported values INSTALL_IN_PROGRESS - NSX installation is in progress on the host INSTALL_FAILED - NSX installation failed on the host INSTALL_SUCCESSFUL - NSX installation successful on the host UNINSTALL_IN_PROGRESS - NSX uninstallation in progress on the host UNINSTALL_FAILED - NSX uninstallation failed on the host UNINSTALL_SUCCESSFUL - NSX uninstallation successful on the host UNINSTALL_SCHEDULED - NSX uninstallation is scheduled on the host UPGRADE_IN_PROGRESS - NSX upgrade is in progress on the host UPGRADE_FAILED - NSX upgrade failed on the host DEPLOYMENT_QUEUED - Deployment is queued on the DEPLOYMENT_IN_PROGRESS - Deployment is in progress DEPLOYMENT_FAILED - Deployment is failed DEPLOYMENT_SUCCESSFUL - Deployment is successful UNDEPLOYMENT_QUEUED - Undeployment is queued UNDEPLOYMENT_IN_PROGRESS - Undeployment is in progress UNDEPLOYMENT_FAILED - Undeployment failed UNDEPLOYMENT_SUCCESSFUL - Undeployment is successful UPGRADE_QUEUED - Upgrade is queued HOST_DISCONNECTED - Host is disconnected POWERED_OFF - Host is powered off  # noqa: E501

        :return: The deployment_status of this HostNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this HostNodeStatus.

        This specifies the current nsx install status for host node. Following are the supported values INSTALL_IN_PROGRESS - NSX installation is in progress on the host INSTALL_FAILED - NSX installation failed on the host INSTALL_SUCCESSFUL - NSX installation successful on the host UNINSTALL_IN_PROGRESS - NSX uninstallation in progress on the host UNINSTALL_FAILED - NSX uninstallation failed on the host UNINSTALL_SUCCESSFUL - NSX uninstallation successful on the host UNINSTALL_SCHEDULED - NSX uninstallation is scheduled on the host UPGRADE_IN_PROGRESS - NSX upgrade is in progress on the host UPGRADE_FAILED - NSX upgrade failed on the host DEPLOYMENT_QUEUED - Deployment is queued on the DEPLOYMENT_IN_PROGRESS - Deployment is in progress DEPLOYMENT_FAILED - Deployment is failed DEPLOYMENT_SUCCESSFUL - Deployment is successful UNDEPLOYMENT_QUEUED - Undeployment is queued UNDEPLOYMENT_IN_PROGRESS - Undeployment is in progress UNDEPLOYMENT_FAILED - Undeployment failed UNDEPLOYMENT_SUCCESSFUL - Undeployment is successful UPGRADE_QUEUED - Upgrade is queued HOST_DISCONNECTED - Host is disconnected POWERED_OFF - Host is powered off  # noqa: E501

        :param deployment_status: The deployment_status of this HostNodeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSTALL_IN_PROGRESS", "INSTALL_FAILED", "INSTALL_SUCCESSFUL", "UNINSTALL_IN_PROGRESS", "UNINSTALL_FAILED", "UNINSTALL_SUCCESSFUL", "UNINSTALL_SCHEDULED", "UPGRADE_IN_PROGRESS", "UPGRADE_FAILED", "DEPLOYMENT_QUEUED", "DEPLOYMENT_IN_PROGRESS", "DEPLOYMENT_FAILED", "DEPLOYMENT_SUCCESSFUL", "UNDEPLOYMENT_QUEUED", "UNDEPLOYMENT_IN_PROGRESS", "UNDEPLOYMENT_FAILED", "UNDEPLOYMENT_SUCCESSFUL", "UPGRADE_QUEUED", "HOST_DISCONNECTED", "POWERED_OFF"]  # noqa: E501
        if deployment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_status, allowed_values)
            )

        self._deployment_status = deployment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostNodeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostNodeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
