# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppliedTos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_ports': 'list[ResourceReference]',
        'logical_switches': 'list[ResourceReference]',
        'nsgroups': 'list[ResourceReference]'
    }

    attribute_map = {
        'logical_ports': 'logical_ports',
        'logical_switches': 'logical_switches',
        'nsgroups': 'nsgroups'
    }

    def __init__(self, logical_ports=None, logical_switches=None, nsgroups=None):  # noqa: E501
        """AppliedTos - a model defined in Swagger"""  # noqa: E501
        self._logical_ports = None
        self._logical_switches = None
        self._nsgroups = None
        self.discriminator = None
        if logical_ports is not None:
            self.logical_ports = logical_ports
        if logical_switches is not None:
            self.logical_switches = logical_switches
        if nsgroups is not None:
            self.nsgroups = nsgroups

    @property
    def logical_ports(self):
        """Gets the logical_ports of this AppliedTos.  # noqa: E501

        Logical Port List  # noqa: E501

        :return: The logical_ports of this AppliedTos.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._logical_ports

    @logical_ports.setter
    def logical_ports(self, logical_ports):
        """Sets the logical_ports of this AppliedTos.

        Logical Port List  # noqa: E501

        :param logical_ports: The logical_ports of this AppliedTos.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._logical_ports = logical_ports

    @property
    def logical_switches(self):
        """Gets the logical_switches of this AppliedTos.  # noqa: E501

        Logical Switch List  # noqa: E501

        :return: The logical_switches of this AppliedTos.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._logical_switches

    @logical_switches.setter
    def logical_switches(self, logical_switches):
        """Sets the logical_switches of this AppliedTos.

        Logical Switch List  # noqa: E501

        :param logical_switches: The logical_switches of this AppliedTos.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._logical_switches = logical_switches

    @property
    def nsgroups(self):
        """Gets the nsgroups of this AppliedTos.  # noqa: E501

        NSGroup List  # noqa: E501

        :return: The nsgroups of this AppliedTos.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._nsgroups

    @nsgroups.setter
    def nsgroups(self, nsgroups):
        """Sets the nsgroups of this AppliedTos.

        NSGroup List  # noqa: E501

        :param nsgroups: The nsgroups of this AppliedTos.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._nsgroups = nsgroups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppliedTos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppliedTos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
