# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class InstanceEndpoint(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_attachments': 'list[ResourceReference]',
        'target_ips': 'list[IPInfo]',
        'endpoint_type': 'str',
        'service_instance_id': 'str',
        'link_ids': 'list[ResourceReference]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'service_attachments': 'service_attachments',
        'target_ips': 'target_ips',
        'endpoint_type': 'endpoint_type',
        'service_instance_id': 'service_instance_id',
        'link_ids': 'link_ids'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, service_attachments=None, target_ips=None, endpoint_type='LOGICAL', service_instance_id=None, link_ids=None, *args, **kwargs):  # noqa: E501
        """InstanceEndpoint - a model defined in Swagger"""  # noqa: E501
        self._service_attachments = None
        self._target_ips = None
        self._endpoint_type = None
        self._service_instance_id = None
        self._link_ids = None
        self.discriminator = None
        if service_attachments is not None:
            self.service_attachments = service_attachments
        self.target_ips = target_ips
        if endpoint_type is not None:
            self.endpoint_type = endpoint_type
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if link_ids is not None:
            self.link_ids = link_ids
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def service_attachments(self):
        """Gets the service_attachments of this InstanceEndpoint.  # noqa: E501

        Id(s) of the Service Attachment where this enndpoint is connected to. Service Attachment is mandatory for LOGICAL Instance Endpoint.  # noqa: E501

        :return: The service_attachments of this InstanceEndpoint.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._service_attachments

    @service_attachments.setter
    def service_attachments(self, service_attachments):
        """Sets the service_attachments of this InstanceEndpoint.

        Id(s) of the Service Attachment where this enndpoint is connected to. Service Attachment is mandatory for LOGICAL Instance Endpoint.  # noqa: E501

        :param service_attachments: The service_attachments of this InstanceEndpoint.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._service_attachments = service_attachments

    @property
    def target_ips(self):
        """Gets the target_ips of this InstanceEndpoint.  # noqa: E501

        Target IPs on an interface of the Service Instance.  # noqa: E501

        :return: The target_ips of this InstanceEndpoint.  # noqa: E501
        :rtype: list[IPInfo]
        """
        return self._target_ips

    @target_ips.setter
    def target_ips(self, target_ips):
        """Sets the target_ips of this InstanceEndpoint.

        Target IPs on an interface of the Service Instance.  # noqa: E501

        :param target_ips: The target_ips of this InstanceEndpoint.  # noqa: E501
        :type: list[IPInfo]
        """
        if target_ips is None:
            raise ValueError("Invalid value for `target_ips`, must not be `None`")  # noqa: E501

        self._target_ips = target_ips

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this InstanceEndpoint.  # noqa: E501

        LOGICAL - It must be created with a ServiceAttachment and identifies a destination connected to the Service Port of the ServiceAttachment, through the ServiceAttachment's Logical Switch. VIRTUAL - It represents a L3 destination the router can route to but does not provide any further information about its location in the network. Virtual InstanceEndpoints are used for redirection targets that are not connected to Service Ports, such as the next-hop routers on the Edge uplinks.  # noqa: E501

        :return: The endpoint_type of this InstanceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this InstanceEndpoint.

        LOGICAL - It must be created with a ServiceAttachment and identifies a destination connected to the Service Port of the ServiceAttachment, through the ServiceAttachment's Logical Switch. VIRTUAL - It represents a L3 destination the router can route to but does not provide any further information about its location in the network. Virtual InstanceEndpoints are used for redirection targets that are not connected to Service Ports, such as the next-hop routers on the Edge uplinks.  # noqa: E501

        :param endpoint_type: The endpoint_type of this InstanceEndpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOGICAL", "VIRTUAL"]  # noqa: E501
        if endpoint_type not in allowed_values:
            raise ValueError(
                "Invalid value for `endpoint_type` ({0}), must be one of {1}"  # noqa: E501
                .format(endpoint_type, allowed_values)
            )

        self._endpoint_type = endpoint_type

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this InstanceEndpoint.  # noqa: E501

        The Service instancee with which the instance endpoint is associated.  # noqa: E501

        :return: The service_instance_id of this InstanceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this InstanceEndpoint.

        The Service instancee with which the instance endpoint is associated.  # noqa: E501

        :param service_instance_id: The service_instance_id of this InstanceEndpoint.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def link_ids(self):
        """Gets the link_ids of this InstanceEndpoint.  # noqa: E501

        Link Ids are mandatory for VIRTUAL Instance Endpoint. Even though VIRTUAL, the Instance Endpoint should be connected/accessible through an NSX object. The link id is this NSX object id. Example - For North-South Service Insertion, this is the LogicalRouter Id through which the targetIp/L3 destination accessible.  # noqa: E501

        :return: The link_ids of this InstanceEndpoint.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._link_ids

    @link_ids.setter
    def link_ids(self, link_ids):
        """Sets the link_ids of this InstanceEndpoint.

        Link Ids are mandatory for VIRTUAL Instance Endpoint. Even though VIRTUAL, the Instance Endpoint should be connected/accessible through an NSX object. The link id is this NSX object id. Example - For North-South Service Insertion, this is the LogicalRouter Id through which the targetIp/L3 destination accessible.  # noqa: E501

        :param link_ids: The link_ids of this InstanceEndpoint.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._link_ids = link_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
