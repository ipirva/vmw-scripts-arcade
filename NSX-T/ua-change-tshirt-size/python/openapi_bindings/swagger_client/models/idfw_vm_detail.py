# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdfwVmDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vm_ext_id': 'str',
        'vm_ip_addresses': 'list[str]',
        'last_login_user_session': 'ResourceReference',
        'user_sessions': 'list[IdfwUserSessionData]'
    }

    attribute_map = {
        'vm_ext_id': 'vm_ext_id',
        'vm_ip_addresses': 'vm_ip_addresses',
        'last_login_user_session': 'last_login_user_session',
        'user_sessions': 'user_sessions'
    }

    def __init__(self, vm_ext_id=None, vm_ip_addresses=None, last_login_user_session=None, user_sessions=None):  # noqa: E501
        """IdfwVmDetail - a model defined in Swagger"""  # noqa: E501
        self._vm_ext_id = None
        self._vm_ip_addresses = None
        self._last_login_user_session = None
        self._user_sessions = None
        self.discriminator = None
        self.vm_ext_id = vm_ext_id
        if vm_ip_addresses is not None:
            self.vm_ip_addresses = vm_ip_addresses
        if last_login_user_session is not None:
            self.last_login_user_session = last_login_user_session
        self.user_sessions = user_sessions

    @property
    def vm_ext_id(self):
        """Gets the vm_ext_id of this IdfwVmDetail.  # noqa: E501

        Virtual machine (external ID or BIOS UUID) where login/logout event occurred.  # noqa: E501

        :return: The vm_ext_id of this IdfwVmDetail.  # noqa: E501
        :rtype: str
        """
        return self._vm_ext_id

    @vm_ext_id.setter
    def vm_ext_id(self, vm_ext_id):
        """Sets the vm_ext_id of this IdfwVmDetail.

        Virtual machine (external ID or BIOS UUID) where login/logout event occurred.  # noqa: E501

        :param vm_ext_id: The vm_ext_id of this IdfwVmDetail.  # noqa: E501
        :type: str
        """
        if vm_ext_id is None:
            raise ValueError("Invalid value for `vm_ext_id`, must not be `None`")  # noqa: E501

        self._vm_ext_id = vm_ext_id

    @property
    def vm_ip_addresses(self):
        """Gets the vm_ip_addresses of this IdfwVmDetail.  # noqa: E501

        List of client machine IP addresses.  # noqa: E501

        :return: The vm_ip_addresses of this IdfwVmDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._vm_ip_addresses

    @vm_ip_addresses.setter
    def vm_ip_addresses(self, vm_ip_addresses):
        """Sets the vm_ip_addresses of this IdfwVmDetail.

        List of client machine IP addresses.  # noqa: E501

        :param vm_ip_addresses: The vm_ip_addresses of this IdfwVmDetail.  # noqa: E501
        :type: list[str]
        """

        self._vm_ip_addresses = vm_ip_addresses

    @property
    def last_login_user_session(self):
        """Gets the last_login_user_session of this IdfwVmDetail.  # noqa: E501


        :return: The last_login_user_session of this IdfwVmDetail.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._last_login_user_session

    @last_login_user_session.setter
    def last_login_user_session(self, last_login_user_session):
        """Sets the last_login_user_session of this IdfwVmDetail.


        :param last_login_user_session: The last_login_user_session of this IdfwVmDetail.  # noqa: E501
        :type: ResourceReference
        """

        self._last_login_user_session = last_login_user_session

    @property
    def user_sessions(self):
        """Gets the user_sessions of this IdfwVmDetail.  # noqa: E501

        List of user session data.  # noqa: E501

        :return: The user_sessions of this IdfwVmDetail.  # noqa: E501
        :rtype: list[IdfwUserSessionData]
        """
        return self._user_sessions

    @user_sessions.setter
    def user_sessions(self, user_sessions):
        """Sets the user_sessions of this IdfwVmDetail.

        List of user session data.  # noqa: E501

        :param user_sessions: The user_sessions of this IdfwVmDetail.  # noqa: E501
        :type: list[IdfwUserSessionData]
        """
        if user_sessions is None:
            raise ValueError("Invalid value for `user_sessions`, must not be `None`")  # noqa: E501

        self._user_sessions = user_sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdfwVmDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdfwVmDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
