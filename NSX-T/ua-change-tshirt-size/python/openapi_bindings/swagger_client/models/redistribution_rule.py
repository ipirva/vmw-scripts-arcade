# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RedistributionRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sources': 'list[str]',
        'route_map_id': 'str',
        'address_family': 'str',
        'display_name': 'str',
        'destination': 'str',
        'description': 'str'
    }

    attribute_map = {
        'sources': 'sources',
        'route_map_id': 'route_map_id',
        'address_family': 'address_family',
        'display_name': 'display_name',
        'destination': 'destination',
        'description': 'description'
    }

    def __init__(self, sources=None, route_map_id=None, address_family='IPV4_AND_IPV6', display_name=None, destination=None, description=None):  # noqa: E501
        """RedistributionRule - a model defined in Swagger"""  # noqa: E501
        self._sources = None
        self._route_map_id = None
        self._address_family = None
        self._display_name = None
        self._destination = None
        self._description = None
        self.discriminator = None
        self.sources = sources
        if route_map_id is not None:
            self.route_map_id = route_map_id
        if address_family is not None:
            self.address_family = address_family
        if display_name is not None:
            self.display_name = display_name
        if destination is not None:
            self.destination = destination
        if description is not None:
            self.description = description

    @property
    def sources(self):
        """Gets the sources of this RedistributionRule.  # noqa: E501

        Array of redistribution protocols  # noqa: E501

        :return: The sources of this RedistributionRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this RedistributionRule.

        Array of redistribution protocols  # noqa: E501

        :param sources: The sources of this RedistributionRule.  # noqa: E501
        :type: list[str]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")  # noqa: E501
        allowed_values = ["STATIC", "T0_STATIC", "NSX_CONNECTED", "T0_CONNECTED", "NSX_STATIC", "T1_STATIC", "T0_UPLINK", "T0_DOWNLINK", "T0_ROUTER_LINK", "T0_CSP", "T0_LOOPBACK", "T0_DNS_FORWARDER_IP", "T0_IPSEC_LOCAL_IP", "TIER0_NAT", "T0_NAT", "TIER1_NAT", "T1_NAT", "TIER1_LB_VIP", "T1_LB_VIP", "TIER1_LB_SNAT", "T1_LB_SNAT", "T1_DNS_FORWARDER_IP", "T1_CONNECTED", "T1_DOWNLINK", "T1_CSP", "BGP", "T1_IPSEC_LOCAL_IP", "T0_EVPN_TEP_IP"]  # noqa: E501
        if not set(sources).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sources` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sources) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sources = sources

    @property
    def route_map_id(self):
        """Gets the route_map_id of this RedistributionRule.  # noqa: E501

        RouteMap Id for the filter  # noqa: E501

        :return: The route_map_id of this RedistributionRule.  # noqa: E501
        :rtype: str
        """
        return self._route_map_id

    @route_map_id.setter
    def route_map_id(self, route_map_id):
        """Sets the route_map_id of this RedistributionRule.

        RouteMap Id for the filter  # noqa: E501

        :param route_map_id: The route_map_id of this RedistributionRule.  # noqa: E501
        :type: str
        """

        self._route_map_id = route_map_id

    @property
    def address_family(self):
        """Gets the address_family of this RedistributionRule.  # noqa: E501

        Address family for Route Redistribution  # noqa: E501

        :return: The address_family of this RedistributionRule.  # noqa: E501
        :rtype: str
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this RedistributionRule.

        Address family for Route Redistribution  # noqa: E501

        :param address_family: The address_family of this RedistributionRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6", "IPV4_AND_IPV6"]  # noqa: E501
        if address_family not in allowed_values:
            raise ValueError(
                "Invalid value for `address_family` ({0}), must be one of {1}"  # noqa: E501
                .format(address_family, allowed_values)
            )

        self._address_family = address_family

    @property
    def display_name(self):
        """Gets the display_name of this RedistributionRule.  # noqa: E501

        Display name  # noqa: E501

        :return: The display_name of this RedistributionRule.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RedistributionRule.

        Display name  # noqa: E501

        :param display_name: The display_name of this RedistributionRule.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def destination(self):
        """Gets the destination of this RedistributionRule.  # noqa: E501

        Destination redistribution protocol  # noqa: E501

        :return: The destination of this RedistributionRule.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this RedistributionRule.

        Destination redistribution protocol  # noqa: E501

        :param destination: The destination of this RedistributionRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["STATIC", "T0_STATIC", "NSX_CONNECTED", "T0_CONNECTED", "NSX_STATIC", "T1_STATIC", "T0_UPLINK", "T0_DOWNLINK", "T0_ROUTER_LINK", "T0_CSP", "T0_LOOPBACK", "T0_DNS_FORWARDER_IP", "T0_IPSEC_LOCAL_IP", "TIER0_NAT", "T0_NAT", "TIER1_NAT", "T1_NAT", "TIER1_LB_VIP", "T1_LB_VIP", "TIER1_LB_SNAT", "T1_LB_SNAT", "T1_DNS_FORWARDER_IP", "T1_CONNECTED", "T1_DOWNLINK", "T1_CSP", "BGP", "T1_IPSEC_LOCAL_IP", "T0_EVPN_TEP_IP"]  # noqa: E501
        if destination not in allowed_values:
            raise ValueError(
                "Invalid value for `destination` ({0}), must be one of {1}"  # noqa: E501
                .format(destination, allowed_values)
            )

        self._destination = destination

    @property
    def description(self):
        """Gets the description of this RedistributionRule.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this RedistributionRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RedistributionRule.

        Description  # noqa: E501

        :param description: The description of this RedistributionRule.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedistributionRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedistributionRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
