# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportZoneEndPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transport_zone_id': 'str',
        'transport_zone_profile_ids': 'list[TransportZoneProfileTypeIdEntry]'
    }

    attribute_map = {
        'transport_zone_id': 'transport_zone_id',
        'transport_zone_profile_ids': 'transport_zone_profile_ids'
    }

    def __init__(self, transport_zone_id=None, transport_zone_profile_ids=None):  # noqa: E501
        """TransportZoneEndPoint - a model defined in Swagger"""  # noqa: E501
        self._transport_zone_id = None
        self._transport_zone_profile_ids = None
        self.discriminator = None
        self.transport_zone_id = transport_zone_id
        if transport_zone_profile_ids is not None:
            self.transport_zone_profile_ids = transport_zone_profile_ids

    @property
    def transport_zone_id(self):
        """Gets the transport_zone_id of this TransportZoneEndPoint.  # noqa: E501

        Unique ID identifying the transport zone for this endpoint  # noqa: E501

        :return: The transport_zone_id of this TransportZoneEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._transport_zone_id

    @transport_zone_id.setter
    def transport_zone_id(self, transport_zone_id):
        """Sets the transport_zone_id of this TransportZoneEndPoint.

        Unique ID identifying the transport zone for this endpoint  # noqa: E501

        :param transport_zone_id: The transport_zone_id of this TransportZoneEndPoint.  # noqa: E501
        :type: str
        """
        if transport_zone_id is None:
            raise ValueError("Invalid value for `transport_zone_id`, must not be `None`")  # noqa: E501

        self._transport_zone_id = transport_zone_id

    @property
    def transport_zone_profile_ids(self):
        """Gets the transport_zone_profile_ids of this TransportZoneEndPoint.  # noqa: E501

        Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.  # noqa: E501

        :return: The transport_zone_profile_ids of this TransportZoneEndPoint.  # noqa: E501
        :rtype: list[TransportZoneProfileTypeIdEntry]
        """
        return self._transport_zone_profile_ids

    @transport_zone_profile_ids.setter
    def transport_zone_profile_ids(self, transport_zone_profile_ids):
        """Sets the transport_zone_profile_ids of this TransportZoneEndPoint.

        Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.  # noqa: E501

        :param transport_zone_profile_ids: The transport_zone_profile_ids of this TransportZoneEndPoint.  # noqa: E501
        :type: list[TransportZoneProfileTypeIdEntry]
        """

        self._transport_zone_profile_ids = transport_zone_profile_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportZoneEndPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportZoneEndPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
