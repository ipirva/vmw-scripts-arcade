# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.global_configs import GlobalConfigs  # noqa: F401,E501

class SecurityGlobalConfig(GlobalConfigs):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eku_checking_enabled': 'bool',
        'ca_signed_only': 'bool',
        'crl_checking_enabled': 'bool'
    }
    if hasattr(GlobalConfigs, "swagger_types"):
        swagger_types.update(GlobalConfigs.swagger_types)

    attribute_map = {
        'eku_checking_enabled': 'eku_checking_enabled',
        'ca_signed_only': 'ca_signed_only',
        'crl_checking_enabled': 'crl_checking_enabled'
    }
    if hasattr(GlobalConfigs, "attribute_map"):
        attribute_map.update(GlobalConfigs.attribute_map)

    def __init__(self, eku_checking_enabled=True, ca_signed_only=False, crl_checking_enabled=True, *args, **kwargs):  # noqa: E501
        """SecurityGlobalConfig - a model defined in Swagger"""  # noqa: E501
        self._eku_checking_enabled = None
        self._ca_signed_only = None
        self._crl_checking_enabled = None
        self.discriminator = None
        if eku_checking_enabled is not None:
            self.eku_checking_enabled = eku_checking_enabled
        if ca_signed_only is not None:
            self.ca_signed_only = ca_signed_only
        if crl_checking_enabled is not None:
            self.crl_checking_enabled = crl_checking_enabled
        GlobalConfigs.__init__(self, *args, **kwargs)

    @property
    def eku_checking_enabled(self):
        """Gets the eku_checking_enabled of this SecurityGlobalConfig.  # noqa: E501

        When this flag is set to true, during certificate checking the Extended Key Usage extension is expected to be present, indicating whether the certificate is to be used a client certificate or server certificate. Setting this value to false is not recommended as it leads to lower security and operational risk.  # noqa: E501

        :return: The eku_checking_enabled of this SecurityGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._eku_checking_enabled

    @eku_checking_enabled.setter
    def eku_checking_enabled(self, eku_checking_enabled):
        """Sets the eku_checking_enabled of this SecurityGlobalConfig.

        When this flag is set to true, during certificate checking the Extended Key Usage extension is expected to be present, indicating whether the certificate is to be used a client certificate or server certificate. Setting this value to false is not recommended as it leads to lower security and operational risk.  # noqa: E501

        :param eku_checking_enabled: The eku_checking_enabled of this SecurityGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._eku_checking_enabled = eku_checking_enabled

    @property
    def ca_signed_only(self):
        """Gets the ca_signed_only of this SecurityGlobalConfig.  # noqa: E501

        When this flag is set to true (for NDcPP compliance) only ca-signed certificates will be allowed to be applied as server certificates.  # noqa: E501

        :return: The ca_signed_only of this SecurityGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._ca_signed_only

    @ca_signed_only.setter
    def ca_signed_only(self, ca_signed_only):
        """Sets the ca_signed_only of this SecurityGlobalConfig.

        When this flag is set to true (for NDcPP compliance) only ca-signed certificates will be allowed to be applied as server certificates.  # noqa: E501

        :param ca_signed_only: The ca_signed_only of this SecurityGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._ca_signed_only = ca_signed_only

    @property
    def crl_checking_enabled(self):
        """Gets the crl_checking_enabled of this SecurityGlobalConfig.  # noqa: E501

        When this flag is set to true, during certificate checking the CRL is fetched and checked whether the certificate is revoked or not.  # noqa: E501

        :return: The crl_checking_enabled of this SecurityGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._crl_checking_enabled

    @crl_checking_enabled.setter
    def crl_checking_enabled(self, crl_checking_enabled):
        """Sets the crl_checking_enabled of this SecurityGlobalConfig.

        When this flag is set to true, during certificate checking the CRL is fetched and checked whether the certificate is revoked or not.  # noqa: E501

        :param crl_checking_enabled: The crl_checking_enabled of this SecurityGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._crl_checking_enabled = crl_checking_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityGlobalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityGlobalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
