# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_host_switch_profile import BaseHostSwitchProfile  # noqa: F401,E501

class NiocProfile(BaseHostSwitchProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_infra_traffic_res': 'list[ResourceAllocation]',
        'enabled': 'bool'
    }
    if hasattr(BaseHostSwitchProfile, "swagger_types"):
        swagger_types.update(BaseHostSwitchProfile.swagger_types)

    attribute_map = {
        'host_infra_traffic_res': 'host_infra_traffic_res',
        'enabled': 'enabled'
    }
    if hasattr(BaseHostSwitchProfile, "attribute_map"):
        attribute_map.update(BaseHostSwitchProfile.attribute_map)

    def __init__(self, host_infra_traffic_res=None, enabled=True, *args, **kwargs):  # noqa: E501
        """NiocProfile - a model defined in Swagger"""  # noqa: E501
        self._host_infra_traffic_res = None
        self._enabled = None
        self.discriminator = None
        if host_infra_traffic_res is not None:
            self.host_infra_traffic_res = host_infra_traffic_res
        if enabled is not None:
            self.enabled = enabled
        BaseHostSwitchProfile.__init__(self, *args, **kwargs)

    @property
    def host_infra_traffic_res(self):
        """Gets the host_infra_traffic_res of this NiocProfile.  # noqa: E501

        host_infra_traffic_res specifies bandwidth allocation for various traffic resources.   # noqa: E501

        :return: The host_infra_traffic_res of this NiocProfile.  # noqa: E501
        :rtype: list[ResourceAllocation]
        """
        return self._host_infra_traffic_res

    @host_infra_traffic_res.setter
    def host_infra_traffic_res(self, host_infra_traffic_res):
        """Sets the host_infra_traffic_res of this NiocProfile.

        host_infra_traffic_res specifies bandwidth allocation for various traffic resources.   # noqa: E501

        :param host_infra_traffic_res: The host_infra_traffic_res of this NiocProfile.  # noqa: E501
        :type: list[ResourceAllocation]
        """

        self._host_infra_traffic_res = host_infra_traffic_res

    @property
    def enabled(self):
        """Gets the enabled of this NiocProfile.  # noqa: E501

        The enabled property specifies the status of NIOC feature. When enabled is set to true, NIOC feature is turned on and the bandwidth allocations specified for the traffic resources are enforced. When enabled is set to false, NIOC feature is turned off and no bandwidth allocation is guaranteed. By default, enabled will be set to true.   # noqa: E501

        :return: The enabled of this NiocProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NiocProfile.

        The enabled property specifies the status of NIOC feature. When enabled is set to true, NIOC feature is turned on and the bandwidth allocations specified for the traffic resources are enforced. When enabled is set to false, NIOC feature is turned off and no bandwidth allocation is guaranteed. By default, enabled will be set to true.   # noqa: E501

        :param enabled: The enabled of this NiocProfile.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NiocProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NiocProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
