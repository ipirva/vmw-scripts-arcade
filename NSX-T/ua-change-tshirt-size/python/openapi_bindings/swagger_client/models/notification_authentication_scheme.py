# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationAuthenticationScheme(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'certificate_id': 'str',
        'scheme_name': 'str',
        'password': 'str'
    }

    attribute_map = {
        'username': 'username',
        'certificate_id': 'certificate_id',
        'scheme_name': 'scheme_name',
        'password': 'password'
    }

    def __init__(self, username=None, certificate_id=None, scheme_name=None, password=None):  # noqa: E501
        """NotificationAuthenticationScheme - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._certificate_id = None
        self._scheme_name = None
        self._password = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if certificate_id is not None:
            self.certificate_id = certificate_id
        self.scheme_name = scheme_name
        if password is not None:
            self.password = password

    @property
    def username(self):
        """Gets the username of this NotificationAuthenticationScheme.  # noqa: E501

        Username to use if scheme_name is BASIC_AUTH.  # noqa: E501

        :return: The username of this NotificationAuthenticationScheme.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NotificationAuthenticationScheme.

        Username to use if scheme_name is BASIC_AUTH.  # noqa: E501

        :param username: The username of this NotificationAuthenticationScheme.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def certificate_id(self):
        """Gets the certificate_id of this NotificationAuthenticationScheme.  # noqa: E501

        Certificate ID with a valid certificate and private key, procured from trust-management API.  # noqa: E501

        :return: The certificate_id of this NotificationAuthenticationScheme.  # noqa: E501
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this NotificationAuthenticationScheme.

        Certificate ID with a valid certificate and private key, procured from trust-management API.  # noqa: E501

        :param certificate_id: The certificate_id of this NotificationAuthenticationScheme.  # noqa: E501
        :type: str
        """

        self._certificate_id = certificate_id

    @property
    def scheme_name(self):
        """Gets the scheme_name of this NotificationAuthenticationScheme.  # noqa: E501

        Authentication scheme to use when making notification requests to the partner/customer specified watcher. Specify one of BASIC_AUTH or CERTIFICATE.  # noqa: E501

        :return: The scheme_name of this NotificationAuthenticationScheme.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this NotificationAuthenticationScheme.

        Authentication scheme to use when making notification requests to the partner/customer specified watcher. Specify one of BASIC_AUTH or CERTIFICATE.  # noqa: E501

        :param scheme_name: The scheme_name of this NotificationAuthenticationScheme.  # noqa: E501
        :type: str
        """
        if scheme_name is None:
            raise ValueError("Invalid value for `scheme_name`, must not be `None`")  # noqa: E501
        allowed_values = ["BASIC_AUTH", "CERTIFICATE"]  # noqa: E501
        if scheme_name not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_name` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme_name, allowed_values)
            )

        self._scheme_name = scheme_name

    @property
    def password(self):
        """Gets the password of this NotificationAuthenticationScheme.  # noqa: E501

        Password to use if scheme_name is BASIC_AUTH.  # noqa: E501

        :return: The password of this NotificationAuthenticationScheme.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NotificationAuthenticationScheme.

        Password to use if scheme_name is BASIC_AUTH.  # noqa: E501

        :param password: The password of this NotificationAuthenticationScheme.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationAuthenticationScheme, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationAuthenticationScheme):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
