# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IPSecVPNPeerEndpoint(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'psk': 'str',
        'peer_id': 'str',
        'ipsec_tunnel_profile_id': 'str',
        'authentication_mode': 'str',
        'peer_address': 'str',
        'connection_initiation_mode': 'str',
        'dpd_profile_id': 'str',
        'ike_profile_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'psk': 'psk',
        'peer_id': 'peer_id',
        'ipsec_tunnel_profile_id': 'ipsec_tunnel_profile_id',
        'authentication_mode': 'authentication_mode',
        'peer_address': 'peer_address',
        'connection_initiation_mode': 'connection_initiation_mode',
        'dpd_profile_id': 'dpd_profile_id',
        'ike_profile_id': 'ike_profile_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, psk=None, peer_id=None, ipsec_tunnel_profile_id=None, authentication_mode='PSK', peer_address=None, connection_initiation_mode='INITIATOR', dpd_profile_id=None, ike_profile_id=None, *args, **kwargs):  # noqa: E501
        """IPSecVPNPeerEndpoint - a model defined in Swagger"""  # noqa: E501
        self._psk = None
        self._peer_id = None
        self._ipsec_tunnel_profile_id = None
        self._authentication_mode = None
        self._peer_address = None
        self._connection_initiation_mode = None
        self._dpd_profile_id = None
        self._ike_profile_id = None
        self.discriminator = None
        if psk is not None:
            self.psk = psk
        self.peer_id = peer_id
        if ipsec_tunnel_profile_id is not None:
            self.ipsec_tunnel_profile_id = ipsec_tunnel_profile_id
        if authentication_mode is not None:
            self.authentication_mode = authentication_mode
        self.peer_address = peer_address
        if connection_initiation_mode is not None:
            self.connection_initiation_mode = connection_initiation_mode
        if dpd_profile_id is not None:
            self.dpd_profile_id = dpd_profile_id
        if ike_profile_id is not None:
            self.ike_profile_id = ike_profile_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def psk(self):
        """Gets the psk of this IPSecVPNPeerEndpoint.  # noqa: E501

        IPSec Pre-shared key. Maximum length of this field is 128 characters.  # noqa: E501

        :return: The psk of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this IPSecVPNPeerEndpoint.

        IPSec Pre-shared key. Maximum length of this field is 128 characters.  # noqa: E501

        :param psk: The psk of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """

        self._psk = psk

    @property
    def peer_id(self):
        """Gets the peer_id of this IPSecVPNPeerEndpoint.  # noqa: E501

        Peer identifier.  # noqa: E501

        :return: The peer_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._peer_id

    @peer_id.setter
    def peer_id(self, peer_id):
        """Sets the peer_id of this IPSecVPNPeerEndpoint.

        Peer identifier.  # noqa: E501

        :param peer_id: The peer_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """
        if peer_id is None:
            raise ValueError("Invalid value for `peer_id`, must not be `None`")  # noqa: E501

        self._peer_id = peer_id

    @property
    def ipsec_tunnel_profile_id(self):
        """Gets the ipsec_tunnel_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501

        Tunnel profile id to be used. By default it will point to system default profile.  # noqa: E501

        :return: The ipsec_tunnel_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_tunnel_profile_id

    @ipsec_tunnel_profile_id.setter
    def ipsec_tunnel_profile_id(self, ipsec_tunnel_profile_id):
        """Sets the ipsec_tunnel_profile_id of this IPSecVPNPeerEndpoint.

        Tunnel profile id to be used. By default it will point to system default profile.  # noqa: E501

        :param ipsec_tunnel_profile_id: The ipsec_tunnel_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """

        self._ipsec_tunnel_profile_id = ipsec_tunnel_profile_id

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this IPSecVPNPeerEndpoint.  # noqa: E501

        Authentication mode used for the peer authentication. For PSK (Pre Shared Key) authentication mode, 'psk' property is mandatory and for the CERTIFICATE authentication mode, 'peer_id' property is mandatory.  # noqa: E501

        :return: The authentication_mode of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this IPSecVPNPeerEndpoint.

        Authentication mode used for the peer authentication. For PSK (Pre Shared Key) authentication mode, 'psk' property is mandatory and for the CERTIFICATE authentication mode, 'peer_id' property is mandatory.  # noqa: E501

        :param authentication_mode: The authentication_mode of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["PSK", "CERTIFICATE"]  # noqa: E501
        if authentication_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(authentication_mode, allowed_values)
            )

        self._authentication_mode = authentication_mode

    @property
    def peer_address(self):
        """Gets the peer_address of this IPSecVPNPeerEndpoint.  # noqa: E501

        IPV4 address of peer endpoint on remote site.  # noqa: E501

        :return: The peer_address of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._peer_address

    @peer_address.setter
    def peer_address(self, peer_address):
        """Sets the peer_address of this IPSecVPNPeerEndpoint.

        IPV4 address of peer endpoint on remote site.  # noqa: E501

        :param peer_address: The peer_address of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """
        if peer_address is None:
            raise ValueError("Invalid value for `peer_address`, must not be `None`")  # noqa: E501

        self._peer_address = peer_address

    @property
    def connection_initiation_mode(self):
        """Gets the connection_initiation_mode of this IPSecVPNPeerEndpoint.  # noqa: E501

        Connection initiation mode used by local endpoint to establish ike connection with peer endpoint. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.   # noqa: E501

        :return: The connection_initiation_mode of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._connection_initiation_mode

    @connection_initiation_mode.setter
    def connection_initiation_mode(self, connection_initiation_mode):
        """Sets the connection_initiation_mode of this IPSecVPNPeerEndpoint.

        Connection initiation mode used by local endpoint to establish ike connection with peer endpoint. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.   # noqa: E501

        :param connection_initiation_mode: The connection_initiation_mode of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITIATOR", "RESPOND_ONLY", "ON_DEMAND"]  # noqa: E501
        if connection_initiation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_initiation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_initiation_mode, allowed_values)
            )

        self._connection_initiation_mode = connection_initiation_mode

    @property
    def dpd_profile_id(self):
        """Gets the dpd_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501

        Dead peer detection (DPD) profile id. Default will be set according to system default policy.  # noqa: E501

        :return: The dpd_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._dpd_profile_id

    @dpd_profile_id.setter
    def dpd_profile_id(self, dpd_profile_id):
        """Sets the dpd_profile_id of this IPSecVPNPeerEndpoint.

        Dead peer detection (DPD) profile id. Default will be set according to system default policy.  # noqa: E501

        :param dpd_profile_id: The dpd_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """

        self._dpd_profile_id = dpd_profile_id

    @property
    def ike_profile_id(self):
        """Gets the ike_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501

        IKE profile id to be used. Default will be set according to system default policy.  # noqa: E501

        :return: The ike_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ike_profile_id

    @ike_profile_id.setter
    def ike_profile_id(self, ike_profile_id):
        """Sets the ike_profile_id of this IPSecVPNPeerEndpoint.

        IKE profile id to be used. Default will be set according to system default policy.  # noqa: E501

        :param ike_profile_id: The ike_profile_id of this IPSecVPNPeerEndpoint.  # noqa: E501
        :type: str
        """

        self._ike_profile_id = ike_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNPeerEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNPeerEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
