# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationSetupInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_nsx': 'DestinationNsxApiEndpoint',
        'source_nsx': 'list[SourceNsxApiEndpoint]',
        'migration_mode': 'str'
    }

    attribute_map = {
        'destination_nsx': 'destination_nsx',
        'source_nsx': 'source_nsx',
        'migration_mode': 'migration_mode'
    }

    def __init__(self, destination_nsx=None, source_nsx=None, migration_mode='ONPREMISE_V2T'):  # noqa: E501
        """MigrationSetupInfo - a model defined in Swagger"""  # noqa: E501
        self._destination_nsx = None
        self._source_nsx = None
        self._migration_mode = None
        self.discriminator = None
        if destination_nsx is not None:
            self.destination_nsx = destination_nsx
        if source_nsx is not None:
            self.source_nsx = source_nsx
        if migration_mode is not None:
            self.migration_mode = migration_mode

    @property
    def destination_nsx(self):
        """Gets the destination_nsx of this MigrationSetupInfo.  # noqa: E501


        :return: The destination_nsx of this MigrationSetupInfo.  # noqa: E501
        :rtype: DestinationNsxApiEndpoint
        """
        return self._destination_nsx

    @destination_nsx.setter
    def destination_nsx(self, destination_nsx):
        """Sets the destination_nsx of this MigrationSetupInfo.


        :param destination_nsx: The destination_nsx of this MigrationSetupInfo.  # noqa: E501
        :type: DestinationNsxApiEndpoint
        """

        self._destination_nsx = destination_nsx

    @property
    def source_nsx(self):
        """Gets the source_nsx of this MigrationSetupInfo.  # noqa: E501

        List of source NSX manager endpoints.  # noqa: E501

        :return: The source_nsx of this MigrationSetupInfo.  # noqa: E501
        :rtype: list[SourceNsxApiEndpoint]
        """
        return self._source_nsx

    @source_nsx.setter
    def source_nsx(self, source_nsx):
        """Sets the source_nsx of this MigrationSetupInfo.

        List of source NSX manager endpoints.  # noqa: E501

        :param source_nsx: The source_nsx of this MigrationSetupInfo.  # noqa: E501
        :type: list[SourceNsxApiEndpoint]
        """

        self._source_nsx = source_nsx

    @property
    def migration_mode(self):
        """Gets the migration_mode of this MigrationSetupInfo.  # noqa: E501

        Migration mode can be VMC_V2T, ONPREMISE_V2T, ONPREMISE_VSPHERE2T, DFW_ONLY, DFW_WITH_BRIDGED_SEG, CMP_VRA, DFW_AND_HOST_AND_WORKLOAD, DFW_AND_HOST_AND_WORKLOAD_WITH_BRIDGED_SEG, NS_CUTOVER  # noqa: E501

        :return: The migration_mode of this MigrationSetupInfo.  # noqa: E501
        :rtype: str
        """
        return self._migration_mode

    @migration_mode.setter
    def migration_mode(self, migration_mode):
        """Sets the migration_mode of this MigrationSetupInfo.

        Migration mode can be VMC_V2T, ONPREMISE_V2T, ONPREMISE_VSPHERE2T, DFW_ONLY, DFW_WITH_BRIDGED_SEG, CMP_VRA, DFW_AND_HOST_AND_WORKLOAD, DFW_AND_HOST_AND_WORKLOAD_WITH_BRIDGED_SEG, NS_CUTOVER  # noqa: E501

        :param migration_mode: The migration_mode of this MigrationSetupInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["VMC_V2T", "ONPREMISE_V2T", "ONPREMISE_VSPHERE2T", "DFW_ONLY", "DFW_WITH_BRIDGED_SEG", "CMP_VRA", "DFW_AND_HOST_AND_WORKLOAD", "DFW_AND_HOST_AND_WORKLOAD_WITH_BRIDGED_SEG", "NS_CUTOVER"]  # noqa: E501
        if migration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `migration_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(migration_mode, allowed_values)
            )

        self._migration_mode = migration_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationSetupInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationSetupInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
