# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_firewall_profile import BaseFirewallProfile  # noqa: F401,E501

class FirewallSessionTimerProfile(BaseFirewallProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tcp_closed': 'int',
        'tcp_opening': 'int',
        'udp_single': 'int',
        'tcp_finwait': 'int',
        'tcp_first_packet': 'int',
        'tcp_closing': 'int',
        'tcp_established': 'int',
        'udp_multiple': 'int',
        'icmp_error_reply': 'int',
        'udp_first_packet': 'int',
        'icmp_first_packet': 'int'
    }
    if hasattr(BaseFirewallProfile, "swagger_types"):
        swagger_types.update(BaseFirewallProfile.swagger_types)

    attribute_map = {
        'tcp_closed': 'tcp_closed',
        'tcp_opening': 'tcp_opening',
        'udp_single': 'udp_single',
        'tcp_finwait': 'tcp_finwait',
        'tcp_first_packet': 'tcp_first_packet',
        'tcp_closing': 'tcp_closing',
        'tcp_established': 'tcp_established',
        'udp_multiple': 'udp_multiple',
        'icmp_error_reply': 'icmp_error_reply',
        'udp_first_packet': 'udp_first_packet',
        'icmp_first_packet': 'icmp_first_packet'
    }
    if hasattr(BaseFirewallProfile, "attribute_map"):
        attribute_map.update(BaseFirewallProfile.attribute_map)

    def __init__(self, tcp_closed=20, tcp_opening=30, udp_single=30, tcp_finwait=45, tcp_first_packet=120, tcp_closing=120, tcp_established=43200, udp_multiple=60, icmp_error_reply=10, udp_first_packet=60, icmp_first_packet=20, *args, **kwargs):  # noqa: E501
        """FirewallSessionTimerProfile - a model defined in Swagger"""  # noqa: E501
        self._tcp_closed = None
        self._tcp_opening = None
        self._udp_single = None
        self._tcp_finwait = None
        self._tcp_first_packet = None
        self._tcp_closing = None
        self._tcp_established = None
        self._udp_multiple = None
        self._icmp_error_reply = None
        self._udp_first_packet = None
        self._icmp_first_packet = None
        self.discriminator = None
        self.tcp_closed = tcp_closed
        self.tcp_opening = tcp_opening
        self.udp_single = udp_single
        self.tcp_finwait = tcp_finwait
        self.tcp_first_packet = tcp_first_packet
        self.tcp_closing = tcp_closing
        self.tcp_established = tcp_established
        self.udp_multiple = udp_multiple
        self.icmp_error_reply = icmp_error_reply
        self.udp_first_packet = udp_first_packet
        self.icmp_first_packet = icmp_first_packet
        BaseFirewallProfile.__init__(self, *args, **kwargs)

    @property
    def tcp_closed(self):
        """Gets the tcp_closed of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after one endpoint sends an RST. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The tcp_closed of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._tcp_closed

    @tcp_closed.setter
    def tcp_closed(self, tcp_closed):
        """Sets the tcp_closed of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after one endpoint sends an RST. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param tcp_closed: The tcp_closed of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if tcp_closed is None:
            raise ValueError("Invalid value for `tcp_closed`, must not be `None`")  # noqa: E501

        self._tcp_closed = tcp_closed

    @property
    def tcp_opening(self):
        """Gets the tcp_opening of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after a second packet has been transferred. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The tcp_opening of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._tcp_opening

    @tcp_opening.setter
    def tcp_opening(self, tcp_opening):
        """Sets the tcp_opening of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after a second packet has been transferred. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param tcp_opening: The tcp_opening of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if tcp_opening is None:
            raise ValueError("Invalid value for `tcp_opening`, must not be `None`")  # noqa: E501

        self._tcp_opening = tcp_opening

    @property
    def udp_single(self):
        """Gets the udp_single of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds if the source host sends more than one packet but the destination host has never sent one back. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The udp_single of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._udp_single

    @udp_single.setter
    def udp_single(self, udp_single):
        """Sets the udp_single of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds if the source host sends more than one packet but the destination host has never sent one back. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param udp_single: The udp_single of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if udp_single is None:
            raise ValueError("Invalid value for `udp_single`, must not be `None`")  # noqa: E501

        self._udp_single = udp_single

    @property
    def tcp_finwait(self):
        """Gets the tcp_finwait of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after both FINs have been exchanged and connection is closed. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The tcp_finwait of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._tcp_finwait

    @tcp_finwait.setter
    def tcp_finwait(self, tcp_finwait):
        """Sets the tcp_finwait of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after both FINs have been exchanged and connection is closed. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param tcp_finwait: The tcp_finwait of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if tcp_finwait is None:
            raise ValueError("Invalid value for `tcp_finwait`, must not be `None`")  # noqa: E501

        self._tcp_finwait = tcp_finwait

    @property
    def tcp_first_packet(self):
        """Gets the tcp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after the first packet has been sent. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The tcp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._tcp_first_packet

    @tcp_first_packet.setter
    def tcp_first_packet(self, tcp_first_packet):
        """Sets the tcp_first_packet of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after the first packet has been sent. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param tcp_first_packet: The tcp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if tcp_first_packet is None:
            raise ValueError("Invalid value for `tcp_first_packet`, must not be `None`")  # noqa: E501

        self._tcp_first_packet = tcp_first_packet

    @property
    def tcp_closing(self):
        """Gets the tcp_closing of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after the first FIN has been sent. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The tcp_closing of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._tcp_closing

    @tcp_closing.setter
    def tcp_closing(self, tcp_closing):
        """Sets the tcp_closing of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after the first FIN has been sent. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param tcp_closing: The tcp_closing of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if tcp_closing is None:
            raise ValueError("Invalid value for `tcp_closing`, must not be `None`")  # noqa: E501

        self._tcp_closing = tcp_closing

    @property
    def tcp_established(self):
        """Gets the tcp_established of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds once the connection has become fully established. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The tcp_established of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._tcp_established

    @tcp_established.setter
    def tcp_established(self, tcp_established):
        """Sets the tcp_established of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds once the connection has become fully established. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param tcp_established: The tcp_established of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if tcp_established is None:
            raise ValueError("Invalid value for `tcp_established`, must not be `None`")  # noqa: E501

        self._tcp_established = tcp_established

    @property
    def udp_multiple(self):
        """Gets the udp_multiple of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds if both hosts have sent packets. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The udp_multiple of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._udp_multiple

    @udp_multiple.setter
    def udp_multiple(self, udp_multiple):
        """Sets the udp_multiple of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds if both hosts have sent packets. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param udp_multiple: The udp_multiple of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if udp_multiple is None:
            raise ValueError("Invalid value for `udp_multiple`, must not be `None`")  # noqa: E501

        self._udp_multiple = udp_multiple

    @property
    def icmp_error_reply(self):
        """Gets the icmp_error_reply of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value for the connection after an ICMP error came back in response to an ICMP packet. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The icmp_error_reply of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._icmp_error_reply

    @icmp_error_reply.setter
    def icmp_error_reply(self, icmp_error_reply):
        """Sets the icmp_error_reply of this FirewallSessionTimerProfile.

        The timeout value for the connection after an ICMP error came back in response to an ICMP packet. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param icmp_error_reply: The icmp_error_reply of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if icmp_error_reply is None:
            raise ValueError("Invalid value for `icmp_error_reply`, must not be `None`")  # noqa: E501

        self._icmp_error_reply = icmp_error_reply

    @property
    def udp_first_packet(self):
        """Gets the udp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new UDP flow. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The udp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._udp_first_packet

    @udp_first_packet.setter
    def udp_first_packet(self, udp_first_packet):
        """Sets the udp_first_packet of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new UDP flow. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param udp_first_packet: The udp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if udp_first_packet is None:
            raise ValueError("Invalid value for `udp_first_packet`, must not be `None`")  # noqa: E501

        self._udp_first_packet = udp_first_packet

    @property
    def icmp_first_packet(self):
        """Gets the icmp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501

        The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new ICMP flow. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :return: The icmp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501
        :rtype: int
        """
        return self._icmp_first_packet

    @icmp_first_packet.setter
    def icmp_first_packet(self, icmp_first_packet):
        """Sets the icmp_first_packet of this FirewallSessionTimerProfile.

        The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new ICMP flow. The default value for Edges (i.e, Gateway, or Logical Router) may be different than Distributed Firewall hosts.  # noqa: E501

        :param icmp_first_packet: The icmp_first_packet of this FirewallSessionTimerProfile.  # noqa: E501
        :type: int
        """
        if icmp_first_packet is None:
            raise ValueError("Invalid value for `icmp_first_packet`, must not be `None`")  # noqa: E501

        self._icmp_first_packet = icmp_first_packet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallSessionTimerProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallSessionTimerProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
