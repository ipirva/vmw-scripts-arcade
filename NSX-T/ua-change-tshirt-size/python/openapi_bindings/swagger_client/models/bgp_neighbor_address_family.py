# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BgpNeighborAddressFamily(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_filter_ipprefixlist_id': 'str',
        'out_filter_routemap_id': 'str',
        'type': 'str',
        'in_filter_routemap_id': 'str',
        'enabled': 'bool',
        'out_filter_ipprefixlist_id': 'str',
        'maximum_routes': 'int'
    }

    attribute_map = {
        'in_filter_ipprefixlist_id': 'in_filter_ipprefixlist_id',
        'out_filter_routemap_id': 'out_filter_routemap_id',
        'type': 'type',
        'in_filter_routemap_id': 'in_filter_routemap_id',
        'enabled': 'enabled',
        'out_filter_ipprefixlist_id': 'out_filter_ipprefixlist_id',
        'maximum_routes': 'maximum_routes'
    }

    def __init__(self, in_filter_ipprefixlist_id=None, out_filter_routemap_id=None, type=None, in_filter_routemap_id=None, enabled=True, out_filter_ipprefixlist_id=None, maximum_routes=None):  # noqa: E501
        """BgpNeighborAddressFamily - a model defined in Swagger"""  # noqa: E501
        self._in_filter_ipprefixlist_id = None
        self._out_filter_routemap_id = None
        self._type = None
        self._in_filter_routemap_id = None
        self._enabled = None
        self._out_filter_ipprefixlist_id = None
        self._maximum_routes = None
        self.discriminator = None
        if in_filter_ipprefixlist_id is not None:
            self.in_filter_ipprefixlist_id = in_filter_ipprefixlist_id
        if out_filter_routemap_id is not None:
            self.out_filter_routemap_id = out_filter_routemap_id
        self.type = type
        if in_filter_routemap_id is not None:
            self.in_filter_routemap_id = in_filter_routemap_id
        if enabled is not None:
            self.enabled = enabled
        if out_filter_ipprefixlist_id is not None:
            self.out_filter_ipprefixlist_id = out_filter_ipprefixlist_id
        if maximum_routes is not None:
            self.maximum_routes = maximum_routes

    @property
    def in_filter_ipprefixlist_id(self):
        """Gets the in_filter_ipprefixlist_id of this BgpNeighborAddressFamily.  # noqa: E501

        Id of the IPPrefix List to be used for IN direction filter  # noqa: E501

        :return: The in_filter_ipprefixlist_id of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: str
        """
        return self._in_filter_ipprefixlist_id

    @in_filter_ipprefixlist_id.setter
    def in_filter_ipprefixlist_id(self, in_filter_ipprefixlist_id):
        """Sets the in_filter_ipprefixlist_id of this BgpNeighborAddressFamily.

        Id of the IPPrefix List to be used for IN direction filter  # noqa: E501

        :param in_filter_ipprefixlist_id: The in_filter_ipprefixlist_id of this BgpNeighborAddressFamily.  # noqa: E501
        :type: str
        """

        self._in_filter_ipprefixlist_id = in_filter_ipprefixlist_id

    @property
    def out_filter_routemap_id(self):
        """Gets the out_filter_routemap_id of this BgpNeighborAddressFamily.  # noqa: E501

        Id of the RouteMap to be used for OUT direction filter  # noqa: E501

        :return: The out_filter_routemap_id of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: str
        """
        return self._out_filter_routemap_id

    @out_filter_routemap_id.setter
    def out_filter_routemap_id(self, out_filter_routemap_id):
        """Sets the out_filter_routemap_id of this BgpNeighborAddressFamily.

        Id of the RouteMap to be used for OUT direction filter  # noqa: E501

        :param out_filter_routemap_id: The out_filter_routemap_id of this BgpNeighborAddressFamily.  # noqa: E501
        :type: str
        """

        self._out_filter_routemap_id = out_filter_routemap_id

    @property
    def type(self):
        """Gets the type of this BgpNeighborAddressFamily.  # noqa: E501

        Address family type  # noqa: E501

        :return: The type of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BgpNeighborAddressFamily.

        Address family type  # noqa: E501

        :param type: The type of this BgpNeighborAddressFamily.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["IPV4_UNICAST", "VPNV4_UNICAST", "IPV6_UNICAST", "L2VPN_EVPN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def in_filter_routemap_id(self):
        """Gets the in_filter_routemap_id of this BgpNeighborAddressFamily.  # noqa: E501

        Id of the RouteMap to be used for IN direction filter  # noqa: E501

        :return: The in_filter_routemap_id of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: str
        """
        return self._in_filter_routemap_id

    @in_filter_routemap_id.setter
    def in_filter_routemap_id(self, in_filter_routemap_id):
        """Sets the in_filter_routemap_id of this BgpNeighborAddressFamily.

        Id of the RouteMap to be used for IN direction filter  # noqa: E501

        :param in_filter_routemap_id: The in_filter_routemap_id of this BgpNeighborAddressFamily.  # noqa: E501
        :type: str
        """

        self._in_filter_routemap_id = in_filter_routemap_id

    @property
    def enabled(self):
        """Gets the enabled of this BgpNeighborAddressFamily.  # noqa: E501

        Enable this address family  # noqa: E501

        :return: The enabled of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BgpNeighborAddressFamily.

        Enable this address family  # noqa: E501

        :param enabled: The enabled of this BgpNeighborAddressFamily.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def out_filter_ipprefixlist_id(self):
        """Gets the out_filter_ipprefixlist_id of this BgpNeighborAddressFamily.  # noqa: E501

        Id of the IPPrefixList to be used for OUT direction filter  # noqa: E501

        :return: The out_filter_ipprefixlist_id of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: str
        """
        return self._out_filter_ipprefixlist_id

    @out_filter_ipprefixlist_id.setter
    def out_filter_ipprefixlist_id(self, out_filter_ipprefixlist_id):
        """Sets the out_filter_ipprefixlist_id of this BgpNeighborAddressFamily.

        Id of the IPPrefixList to be used for OUT direction filter  # noqa: E501

        :param out_filter_ipprefixlist_id: The out_filter_ipprefixlist_id of this BgpNeighborAddressFamily.  # noqa: E501
        :type: str
        """

        self._out_filter_ipprefixlist_id = out_filter_ipprefixlist_id

    @property
    def maximum_routes(self):
        """Gets the maximum_routes of this BgpNeighborAddressFamily.  # noqa: E501

        Maximum number of routes supported on the address family  # noqa: E501

        :return: The maximum_routes of this BgpNeighborAddressFamily.  # noqa: E501
        :rtype: int
        """
        return self._maximum_routes

    @maximum_routes.setter
    def maximum_routes(self, maximum_routes):
        """Sets the maximum_routes of this BgpNeighborAddressFamily.

        Maximum number of routes supported on the address family  # noqa: E501

        :param maximum_routes: The maximum_routes of this BgpNeighborAddressFamily.  # noqa: E501
        :type: int
        """

        self._maximum_routes = maximum_routes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpNeighborAddressFamily, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighborAddressFamily):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
