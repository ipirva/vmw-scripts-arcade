# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class Node(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discovered_ip_addresses': 'list[str]',
        'ip_addresses': 'list[str]',
        'external_id': 'str',
        'fqdn': 'str',
        'resource_type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'discovered_ip_addresses': 'discovered_ip_addresses',
        'ip_addresses': 'ip_addresses',
        'external_id': 'external_id',
        'fqdn': 'fqdn',
        'resource_type': 'resource_type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    discriminator_value_class_map = {
          'EdgeNode': 'EdgeNode',
'HostNode': 'HostNode',
'PublicCloudGatewayNode': 'PublicCloudGatewayNode'    }

    def __init__(self, discovered_ip_addresses=None, ip_addresses=None, external_id=None, fqdn=None, resource_type=None, *args, **kwargs):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        self._discovered_ip_addresses = None
        self._ip_addresses = None
        self._external_id = None
        self._fqdn = None
        self._resource_type = None
        self.discriminator = 'resource_type'
        if discovered_ip_addresses is not None:
            self.discovered_ip_addresses = discovered_ip_addresses
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if external_id is not None:
            self.external_id = external_id
        if fqdn is not None:
            self.fqdn = fqdn
        self.resource_type = resource_type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def discovered_ip_addresses(self):
        """Gets the discovered_ip_addresses of this Node.  # noqa: E501

        Discovered IP Addresses of the fabric node, version 4 or 6  # noqa: E501

        :return: The discovered_ip_addresses of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._discovered_ip_addresses

    @discovered_ip_addresses.setter
    def discovered_ip_addresses(self, discovered_ip_addresses):
        """Sets the discovered_ip_addresses of this Node.

        Discovered IP Addresses of the fabric node, version 4 or 6  # noqa: E501

        :param discovered_ip_addresses: The discovered_ip_addresses of this Node.  # noqa: E501
        :type: list[str]
        """

        self._discovered_ip_addresses = discovered_ip_addresses

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this Node.  # noqa: E501

        IP Addresses of the Node, version 4 or 6. This property is mandatory for all nodes except for automatic deployment of edge virtual machine node. For automatic deployment, the ip address from management_port_subnets property will be considered.   # noqa: E501

        :return: The ip_addresses of this Node.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this Node.

        IP Addresses of the Node, version 4 or 6. This property is mandatory for all nodes except for automatic deployment of edge virtual machine node. For automatic deployment, the ip address from management_port_subnets property will be considered.   # noqa: E501

        :param ip_addresses: The ip_addresses of this Node.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def external_id(self):
        """Gets the external_id of this Node.  # noqa: E501

        ID of the Node maintained on the Node and used to recognize the Node  # noqa: E501

        :return: The external_id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Node.

        ID of the Node maintained on the Node and used to recognize the Node  # noqa: E501

        :param external_id: The external_id of this Node.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def fqdn(self):
        """Gets the fqdn of this Node.  # noqa: E501

        Fully qualified domain name of the fabric node  # noqa: E501

        :return: The fqdn of this Node.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this Node.

        Fully qualified domain name of the fabric node  # noqa: E501

        :param fqdn: The fqdn of this Node.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def resource_type(self):
        """Gets the resource_type of this Node.  # noqa: E501

        Fabric node type, for example 'HostNode', 'EdgeNode' or 'PublicCloudGatewayNode'  # noqa: E501

        :return: The resource_type of this Node.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Node.

        Fabric node type, for example 'HostNode', 'EdgeNode' or 'PublicCloudGatewayNode'  # noqa: E501

        :param resource_type: The resource_type of this Node.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
