# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProcessInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'process_id': 'str',
        'shared_memory_size': 'float',
        'command': 'str',
        'memory_usage': 'float',
        'virtual_memory_size': 'float',
        'resident_memory_size': 'float',
        'nice_value': 'str',
        'cpu_usage': 'float',
        'user': 'str'
    }

    attribute_map = {
        'process_id': 'process_id',
        'shared_memory_size': 'shared_memory_size',
        'command': 'command',
        'memory_usage': 'memory_usage',
        'virtual_memory_size': 'virtual_memory_size',
        'resident_memory_size': 'resident_memory_size',
        'nice_value': 'nice_value',
        'cpu_usage': 'cpu_usage',
        'user': 'user'
    }

    def __init__(self, process_id=None, shared_memory_size=None, command=None, memory_usage=None, virtual_memory_size=None, resident_memory_size=None, nice_value=None, cpu_usage=None, user=None):  # noqa: E501
        """ProcessInformation - a model defined in Swagger"""  # noqa: E501
        self._process_id = None
        self._shared_memory_size = None
        self._command = None
        self._memory_usage = None
        self._virtual_memory_size = None
        self._resident_memory_size = None
        self._nice_value = None
        self._cpu_usage = None
        self._user = None
        self.discriminator = None
        if process_id is not None:
            self.process_id = process_id
        if shared_memory_size is not None:
            self.shared_memory_size = shared_memory_size
        if command is not None:
            self.command = command
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if virtual_memory_size is not None:
            self.virtual_memory_size = virtual_memory_size
        if resident_memory_size is not None:
            self.resident_memory_size = resident_memory_size
        if nice_value is not None:
            self.nice_value = nice_value
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if user is not None:
            self.user = user

    @property
    def process_id(self):
        """Gets the process_id of this ProcessInformation.  # noqa: E501

        Display the process id.  # noqa: E501

        :return: The process_id of this ProcessInformation.  # noqa: E501
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this ProcessInformation.

        Display the process id.  # noqa: E501

        :param process_id: The process_id of this ProcessInformation.  # noqa: E501
        :type: str
        """

        self._process_id = process_id

    @property
    def shared_memory_size(self):
        """Gets the shared_memory_size of this ProcessInformation.  # noqa: E501

        The amount of shared memory available to a process, not all of which is typically resident. It simply reflects memory that could be potentially shared with other processes.   # noqa: E501

        :return: The shared_memory_size of this ProcessInformation.  # noqa: E501
        :rtype: float
        """
        return self._shared_memory_size

    @shared_memory_size.setter
    def shared_memory_size(self, shared_memory_size):
        """Sets the shared_memory_size of this ProcessInformation.

        The amount of shared memory available to a process, not all of which is typically resident. It simply reflects memory that could be potentially shared with other processes.   # noqa: E501

        :param shared_memory_size: The shared_memory_size of this ProcessInformation.  # noqa: E501
        :type: float
        """

        self._shared_memory_size = shared_memory_size

    @property
    def command(self):
        """Gets the command of this ProcessInformation.  # noqa: E501

        Display the command line used to start the process.  # noqa: E501

        :return: The command of this ProcessInformation.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ProcessInformation.

        Display the command line used to start the process.  # noqa: E501

        :param command: The command of this ProcessInformation.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def memory_usage(self):
        """Gets the memory_usage of this ProcessInformation.  # noqa: E501

        A process's currently used share of available physical memory.   # noqa: E501

        :return: The memory_usage of this ProcessInformation.  # noqa: E501
        :rtype: float
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this ProcessInformation.

        A process's currently used share of available physical memory.   # noqa: E501

        :param memory_usage: The memory_usage of this ProcessInformation.  # noqa: E501
        :type: float
        """

        self._memory_usage = memory_usage

    @property
    def virtual_memory_size(self):
        """Gets the virtual_memory_size of this ProcessInformation.  # noqa: E501

        The total amount of virtual memory used by the process. It includes all code, data and shared libraries plus pages that have been swapped out and pages that have been mapped but not used.   # noqa: E501

        :return: The virtual_memory_size of this ProcessInformation.  # noqa: E501
        :rtype: float
        """
        return self._virtual_memory_size

    @virtual_memory_size.setter
    def virtual_memory_size(self, virtual_memory_size):
        """Sets the virtual_memory_size of this ProcessInformation.

        The total amount of virtual memory used by the process. It includes all code, data and shared libraries plus pages that have been swapped out and pages that have been mapped but not used.   # noqa: E501

        :param virtual_memory_size: The virtual_memory_size of this ProcessInformation.  # noqa: E501
        :type: float
        """

        self._virtual_memory_size = virtual_memory_size

    @property
    def resident_memory_size(self):
        """Gets the resident_memory_size of this ProcessInformation.  # noqa: E501

        The non-swapped physical memoery a task is using.  # noqa: E501

        :return: The resident_memory_size of this ProcessInformation.  # noqa: E501
        :rtype: float
        """
        return self._resident_memory_size

    @resident_memory_size.setter
    def resident_memory_size(self, resident_memory_size):
        """Sets the resident_memory_size of this ProcessInformation.

        The non-swapped physical memoery a task is using.  # noqa: E501

        :param resident_memory_size: The resident_memory_size of this ProcessInformation.  # noqa: E501
        :type: float
        """

        self._resident_memory_size = resident_memory_size

    @property
    def nice_value(self):
        """Gets the nice_value of this ProcessInformation.  # noqa: E501

        A negative nice value means higher priority, whereas a positive nice value means lower priority. Zero in this field simply means priority will not be adjusted in determining a process's dispatch-ability.   # noqa: E501

        :return: The nice_value of this ProcessInformation.  # noqa: E501
        :rtype: str
        """
        return self._nice_value

    @nice_value.setter
    def nice_value(self, nice_value):
        """Sets the nice_value of this ProcessInformation.

        A negative nice value means higher priority, whereas a positive nice value means lower priority. Zero in this field simply means priority will not be adjusted in determining a process's dispatch-ability.   # noqa: E501

        :param nice_value: The nice_value of this ProcessInformation.  # noqa: E501
        :type: str
        """

        self._nice_value = nice_value

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this ProcessInformation.  # noqa: E501

        The process's share of the elapsed CPU time since the last screen update, expressed as a percentage of total CPU time.   # noqa: E501

        :return: The cpu_usage of this ProcessInformation.  # noqa: E501
        :rtype: float
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this ProcessInformation.

        The process's share of the elapsed CPU time since the last screen update, expressed as a percentage of total CPU time.   # noqa: E501

        :param cpu_usage: The cpu_usage of this ProcessInformation.  # noqa: E501
        :type: float
        """

        self._cpu_usage = cpu_usage

    @property
    def user(self):
        """Gets the user of this ProcessInformation.  # noqa: E501

        Display the process user.  # noqa: E501

        :return: The user of this ProcessInformation.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ProcessInformation.

        Display the process user.  # noqa: E501

        :param user: The user of this ProcessInformation.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
