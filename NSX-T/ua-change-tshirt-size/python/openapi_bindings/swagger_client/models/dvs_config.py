# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DVSConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'lacp_group_configs': 'list[LacpGroupConfigInfo]',
        'host_infra_traffic_res': 'list[ResourceAllocation]',
        'uplink_port_names': 'list[str]',
        'uuid': 'str',
        'lldp_send_enabled': 'bool',
        'mtu': 'int'
    }

    attribute_map = {
        'name': 'name',
        'lacp_group_configs': 'lacp_group_configs',
        'host_infra_traffic_res': 'host_infra_traffic_res',
        'uplink_port_names': 'uplink_port_names',
        'uuid': 'uuid',
        'lldp_send_enabled': 'lldp_send_enabled',
        'mtu': 'mtu'
    }

    def __init__(self, name=None, lacp_group_configs=None, host_infra_traffic_res=None, uplink_port_names=None, uuid=None, lldp_send_enabled=False, mtu=None):  # noqa: E501
        """DVSConfig - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._lacp_group_configs = None
        self._host_infra_traffic_res = None
        self._uplink_port_names = None
        self._uuid = None
        self._lldp_send_enabled = None
        self._mtu = None
        self.discriminator = None
        self.name = name
        if lacp_group_configs is not None:
            self.lacp_group_configs = lacp_group_configs
        if host_infra_traffic_res is not None:
            self.host_infra_traffic_res = host_infra_traffic_res
        self.uplink_port_names = uplink_port_names
        if uuid is not None:
            self.uuid = uuid
        if lldp_send_enabled is not None:
            self.lldp_send_enabled = lldp_send_enabled
        if mtu is not None:
            self.mtu = mtu

    @property
    def name(self):
        """Gets the name of this DVSConfig.  # noqa: E501

        The DVS name  # noqa: E501

        :return: The name of this DVSConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DVSConfig.

        The DVS name  # noqa: E501

        :param name: The name of this DVSConfig.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lacp_group_configs(self):
        """Gets the lacp_group_configs of this DVSConfig.  # noqa: E501

        It contains information about VMware specific multiple dynamic LACP groups.   # noqa: E501

        :return: The lacp_group_configs of this DVSConfig.  # noqa: E501
        :rtype: list[LacpGroupConfigInfo]
        """
        return self._lacp_group_configs

    @lacp_group_configs.setter
    def lacp_group_configs(self, lacp_group_configs):
        """Sets the lacp_group_configs of this DVSConfig.

        It contains information about VMware specific multiple dynamic LACP groups.   # noqa: E501

        :param lacp_group_configs: The lacp_group_configs of this DVSConfig.  # noqa: E501
        :type: list[LacpGroupConfigInfo]
        """

        self._lacp_group_configs = lacp_group_configs

    @property
    def host_infra_traffic_res(self):
        """Gets the host_infra_traffic_res of this DVSConfig.  # noqa: E501

        host_infra_traffic_res specifies bandwidth allocation for various traffic resources.   # noqa: E501

        :return: The host_infra_traffic_res of this DVSConfig.  # noqa: E501
        :rtype: list[ResourceAllocation]
        """
        return self._host_infra_traffic_res

    @host_infra_traffic_res.setter
    def host_infra_traffic_res(self, host_infra_traffic_res):
        """Sets the host_infra_traffic_res of this DVSConfig.

        host_infra_traffic_res specifies bandwidth allocation for various traffic resources.   # noqa: E501

        :param host_infra_traffic_res: The host_infra_traffic_res of this DVSConfig.  # noqa: E501
        :type: list[ResourceAllocation]
        """

        self._host_infra_traffic_res = host_infra_traffic_res

    @property
    def uplink_port_names(self):
        """Gets the uplink_port_names of this DVSConfig.  # noqa: E501

        Names of uplink ports for this DVS.  # noqa: E501

        :return: The uplink_port_names of this DVSConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._uplink_port_names

    @uplink_port_names.setter
    def uplink_port_names(self, uplink_port_names):
        """Sets the uplink_port_names of this DVSConfig.

        Names of uplink ports for this DVS.  # noqa: E501

        :param uplink_port_names: The uplink_port_names of this DVSConfig.  # noqa: E501
        :type: list[str]
        """
        if uplink_port_names is None:
            raise ValueError("Invalid value for `uplink_port_names`, must not be `None`")  # noqa: E501

        self._uplink_port_names = uplink_port_names

    @property
    def uuid(self):
        """Gets the uuid of this DVSConfig.  # noqa: E501

        The DVS uuid  # noqa: E501

        :return: The uuid of this DVSConfig.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DVSConfig.

        The DVS uuid  # noqa: E501

        :param uuid: The uuid of this DVSConfig.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def lldp_send_enabled(self):
        """Gets the lldp_send_enabled of this DVSConfig.  # noqa: E501

        Enabled or disabled sending LLDP packets  # noqa: E501

        :return: The lldp_send_enabled of this DVSConfig.  # noqa: E501
        :rtype: bool
        """
        return self._lldp_send_enabled

    @lldp_send_enabled.setter
    def lldp_send_enabled(self, lldp_send_enabled):
        """Sets the lldp_send_enabled of this DVSConfig.

        Enabled or disabled sending LLDP packets  # noqa: E501

        :param lldp_send_enabled: The lldp_send_enabled of this DVSConfig.  # noqa: E501
        :type: bool
        """

        self._lldp_send_enabled = lldp_send_enabled

    @property
    def mtu(self):
        """Gets the mtu of this DVSConfig.  # noqa: E501

        Maximum Transmission Unit used for uplinks  # noqa: E501

        :return: The mtu of this DVSConfig.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this DVSConfig.

        Maximum Transmission Unit used for uplinks  # noqa: E501

        :param mtu: The mtu of this DVSConfig.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DVSConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DVSConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
