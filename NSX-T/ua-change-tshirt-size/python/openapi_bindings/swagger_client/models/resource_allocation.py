# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceAllocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reservation': 'float',
        'traffic_type': 'HostInfraTrafficType',
        'limit': 'float',
        'shares': 'int'
    }

    attribute_map = {
        'reservation': 'reservation',
        'traffic_type': 'traffic_type',
        'limit': 'limit',
        'shares': 'shares'
    }

    def __init__(self, reservation=None, traffic_type=None, limit=None, shares=50):  # noqa: E501
        """ResourceAllocation - a model defined in Swagger"""  # noqa: E501
        self._reservation = None
        self._traffic_type = None
        self._limit = None
        self._shares = None
        self.discriminator = None
        self.reservation = reservation
        self.traffic_type = traffic_type
        self.limit = limit
        self.shares = shares

    @property
    def reservation(self):
        """Gets the reservation of this ResourceAllocation.  # noqa: E501

        Minimum guaranteed bandwidth percentage  # noqa: E501

        :return: The reservation of this ResourceAllocation.  # noqa: E501
        :rtype: float
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """Sets the reservation of this ResourceAllocation.

        Minimum guaranteed bandwidth percentage  # noqa: E501

        :param reservation: The reservation of this ResourceAllocation.  # noqa: E501
        :type: float
        """
        if reservation is None:
            raise ValueError("Invalid value for `reservation`, must not be `None`")  # noqa: E501

        self._reservation = reservation

    @property
    def traffic_type(self):
        """Gets the traffic_type of this ResourceAllocation.  # noqa: E501


        :return: The traffic_type of this ResourceAllocation.  # noqa: E501
        :rtype: HostInfraTrafficType
        """
        return self._traffic_type

    @traffic_type.setter
    def traffic_type(self, traffic_type):
        """Sets the traffic_type of this ResourceAllocation.


        :param traffic_type: The traffic_type of this ResourceAllocation.  # noqa: E501
        :type: HostInfraTrafficType
        """
        if traffic_type is None:
            raise ValueError("Invalid value for `traffic_type`, must not be `None`")  # noqa: E501

        self._traffic_type = traffic_type

    @property
    def limit(self):
        """Gets the limit of this ResourceAllocation.  # noqa: E501

        The limit property specifies the maximum bandwidth allocation for a given traffic type and is expressed in percentage. The default value for this field is set to -1 which means the traffic is unbounded for the traffic type. All other negative values for this property is not supported and will be rejected by the API.   # noqa: E501

        :return: The limit of this ResourceAllocation.  # noqa: E501
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ResourceAllocation.

        The limit property specifies the maximum bandwidth allocation for a given traffic type and is expressed in percentage. The default value for this field is set to -1 which means the traffic is unbounded for the traffic type. All other negative values for this property is not supported and will be rejected by the API.   # noqa: E501

        :param limit: The limit of this ResourceAllocation.  # noqa: E501
        :type: float
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def shares(self):
        """Gets the shares of this ResourceAllocation.  # noqa: E501

        Shares  # noqa: E501

        :return: The shares of this ResourceAllocation.  # noqa: E501
        :rtype: int
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this ResourceAllocation.

        Shares  # noqa: E501

        :param shares: The shares of this ResourceAllocation.  # noqa: E501
        :type: int
        """
        if shares is None:
            raise ValueError("Invalid value for `shares`, must not be `None`")  # noqa: E501

        self._shares = shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceAllocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceAllocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
