# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2VPNTapTrafficStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packets_out': 'int',
        'bytes_in': 'int',
        'packets_sent_error': 'int',
        'packets_receive_error': 'int',
        'packets_in': 'int',
        'bytes_out': 'int'
    }

    attribute_map = {
        'packets_out': 'packets_out',
        'bytes_in': 'bytes_in',
        'packets_sent_error': 'packets_sent_error',
        'packets_receive_error': 'packets_receive_error',
        'packets_in': 'packets_in',
        'bytes_out': 'bytes_out'
    }

    def __init__(self, packets_out=None, bytes_in=None, packets_sent_error=None, packets_receive_error=None, packets_in=None, bytes_out=None):  # noqa: E501
        """L2VPNTapTrafficStatistics - a model defined in Swagger"""  # noqa: E501
        self._packets_out = None
        self._bytes_in = None
        self._packets_sent_error = None
        self._packets_receive_error = None
        self._packets_in = None
        self._bytes_out = None
        self.discriminator = None
        if packets_out is not None:
            self.packets_out = packets_out
        if bytes_in is not None:
            self.bytes_in = bytes_in
        if packets_sent_error is not None:
            self.packets_sent_error = packets_sent_error
        if packets_receive_error is not None:
            self.packets_receive_error = packets_receive_error
        if packets_in is not None:
            self.packets_in = packets_in
        if bytes_out is not None:
            self.bytes_out = bytes_out

    @property
    def packets_out(self):
        """Gets the packets_out of this L2VPNTapTrafficStatistics.  # noqa: E501

        Total number of outgoing packets.  # noqa: E501

        :return: The packets_out of this L2VPNTapTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_out

    @packets_out.setter
    def packets_out(self, packets_out):
        """Sets the packets_out of this L2VPNTapTrafficStatistics.

        Total number of outgoing packets.  # noqa: E501

        :param packets_out: The packets_out of this L2VPNTapTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_out = packets_out

    @property
    def bytes_in(self):
        """Gets the bytes_in of this L2VPNTapTrafficStatistics.  # noqa: E501

        Total number of incoming bytes.  # noqa: E501

        :return: The bytes_in of this L2VPNTapTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this L2VPNTapTrafficStatistics.

        Total number of incoming bytes.  # noqa: E501

        :param bytes_in: The bytes_in of this L2VPNTapTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._bytes_in = bytes_in

    @property
    def packets_sent_error(self):
        """Gets the packets_sent_error of this L2VPNTapTrafficStatistics.  # noqa: E501

        Total number of packets dropped while sending for any reason.  # noqa: E501

        :return: The packets_sent_error of this L2VPNTapTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_sent_error

    @packets_sent_error.setter
    def packets_sent_error(self, packets_sent_error):
        """Sets the packets_sent_error of this L2VPNTapTrafficStatistics.

        Total number of packets dropped while sending for any reason.  # noqa: E501

        :param packets_sent_error: The packets_sent_error of this L2VPNTapTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_sent_error = packets_sent_error

    @property
    def packets_receive_error(self):
        """Gets the packets_receive_error of this L2VPNTapTrafficStatistics.  # noqa: E501

        Total number of incoming packets dropped.  # noqa: E501

        :return: The packets_receive_error of this L2VPNTapTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_receive_error

    @packets_receive_error.setter
    def packets_receive_error(self, packets_receive_error):
        """Sets the packets_receive_error of this L2VPNTapTrafficStatistics.

        Total number of incoming packets dropped.  # noqa: E501

        :param packets_receive_error: The packets_receive_error of this L2VPNTapTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_receive_error = packets_receive_error

    @property
    def packets_in(self):
        """Gets the packets_in of this L2VPNTapTrafficStatistics.  # noqa: E501

        Total number of incoming packets.  # noqa: E501

        :return: The packets_in of this L2VPNTapTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_in

    @packets_in.setter
    def packets_in(self, packets_in):
        """Sets the packets_in of this L2VPNTapTrafficStatistics.

        Total number of incoming packets.  # noqa: E501

        :param packets_in: The packets_in of this L2VPNTapTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_in = packets_in

    @property
    def bytes_out(self):
        """Gets the bytes_out of this L2VPNTapTrafficStatistics.  # noqa: E501

        Total number of outgoing bytes.  # noqa: E501

        :return: The bytes_out of this L2VPNTapTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this L2VPNTapTrafficStatistics.

        Total number of outgoing bytes.  # noqa: E501

        :param bytes_out: The bytes_out of this L2VPNTapTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._bytes_out = bytes_out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VPNTapTrafficStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VPNTapTrafficStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
