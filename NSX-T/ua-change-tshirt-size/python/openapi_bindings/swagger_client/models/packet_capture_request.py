# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PacketCaptureRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node': 'str',
        'direction': 'str',
        'capduration': 'int',
        'capamount': 'int',
        'capsource': 'str',
        'node_ip': 'str',
        'capvalue': 'str',
        'filtertype': 'str',
        'cappoint': 'str',
        'capfilesize': 'int',
        'options': 'PacketCaptureOptionList',
        'streamport': 'int',
        'caprate': 'int',
        'capcore': 'int',
        'capsnaplen': 'int',
        'streamaddress': 'str',
        'capmode': 'str'
    }

    attribute_map = {
        'node': 'node',
        'direction': 'direction',
        'capduration': 'capduration',
        'capamount': 'capamount',
        'capsource': 'capsource',
        'node_ip': 'node_ip',
        'capvalue': 'capvalue',
        'filtertype': 'filtertype',
        'cappoint': 'cappoint',
        'capfilesize': 'capfilesize',
        'options': 'options',
        'streamport': 'streamport',
        'caprate': 'caprate',
        'capcore': 'capcore',
        'capsnaplen': 'capsnaplen',
        'streamaddress': 'streamaddress',
        'capmode': 'capmode'
    }

    def __init__(self, node=None, direction=None, capduration=None, capamount=None, capsource=None, node_ip=None, capvalue=None, filtertype=None, cappoint=None, capfilesize=None, options=None, streamport=None, caprate=None, capcore=None, capsnaplen=None, streamaddress=None, capmode=None):  # noqa: E501
        """PacketCaptureRequest - a model defined in Swagger"""  # noqa: E501
        self._node = None
        self._direction = None
        self._capduration = None
        self._capamount = None
        self._capsource = None
        self._node_ip = None
        self._capvalue = None
        self._filtertype = None
        self._cappoint = None
        self._capfilesize = None
        self._options = None
        self._streamport = None
        self._caprate = None
        self._capcore = None
        self._capsnaplen = None
        self._streamaddress = None
        self._capmode = None
        self.discriminator = None
        if node is not None:
            self.node = node
        if direction is not None:
            self.direction = direction
        if capduration is not None:
            self.capduration = capduration
        if capamount is not None:
            self.capamount = capamount
        self.capsource = capsource
        if node_ip is not None:
            self.node_ip = node_ip
        if capvalue is not None:
            self.capvalue = capvalue
        if filtertype is not None:
            self.filtertype = filtertype
        self.cappoint = cappoint
        if capfilesize is not None:
            self.capfilesize = capfilesize
        if options is not None:
            self.options = options
        if streamport is not None:
            self.streamport = streamport
        if caprate is not None:
            self.caprate = caprate
        if capcore is not None:
            self.capcore = capcore
        if capsnaplen is not None:
            self.capsnaplen = capsnaplen
        if streamaddress is not None:
            self.streamaddress = streamaddress
        if capmode is not None:
            self.capmode = capmode

    @property
    def node(self):
        """Gets the node of this PacketCaptureRequest.  # noqa: E501

        Define the transport node to capture data.  # noqa: E501

        :return: The node of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this PacketCaptureRequest.

        Define the transport node to capture data.  # noqa: E501

        :param node: The node of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def direction(self):
        """Gets the direction of this PacketCaptureRequest.  # noqa: E501

        Define the capture direction. Support three types INPUT/OUTPUT/DUAL.  # noqa: E501

        :return: The direction of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PacketCaptureRequest.

        Define the capture direction. Support three types INPUT/OUTPUT/DUAL.  # noqa: E501

        :param direction: The direction of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["INPUT", "OUTPUT", "DUAL"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def capduration(self):
        """Gets the capduration of this PacketCaptureRequest.  # noqa: E501

        Define the packet capture duration time. After the capture duration time, the capture process will stop working.  # noqa: E501

        :return: The capduration of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._capduration

    @capduration.setter
    def capduration(self, capduration):
        """Sets the capduration of this PacketCaptureRequest.

        Define the packet capture duration time. After the capture duration time, the capture process will stop working.  # noqa: E501

        :param capduration: The capduration of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._capduration = capduration

    @property
    def capamount(self):
        """Gets the capamount of this PacketCaptureRequest.  # noqa: E501

        Define the packet capture amount size.  # noqa: E501

        :return: The capamount of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._capamount

    @capamount.setter
    def capamount(self, capamount):
        """Sets the capamount of this PacketCaptureRequest.

        Define the packet capture amount size.  # noqa: E501

        :param capamount: The capamount of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._capamount = capamount

    @property
    def capsource(self):
        """Gets the capsource of this PacketCaptureRequest.  # noqa: E501

        This type is used to differenite the incoming request from CLI/UI.  # noqa: E501

        :return: The capsource of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._capsource

    @capsource.setter
    def capsource(self, capsource):
        """Sets the capsource of this PacketCaptureRequest.

        This type is used to differenite the incoming request from CLI/UI.  # noqa: E501

        :param capsource: The capsource of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """
        if capsource is None:
            raise ValueError("Invalid value for `capsource`, must not be `None`")  # noqa: E501
        allowed_values = ["CLI", "UI"]  # noqa: E501
        if capsource not in allowed_values:
            raise ValueError(
                "Invalid value for `capsource` ({0}), must be one of {1}"  # noqa: E501
                .format(capsource, allowed_values)
            )

        self._capsource = capsource

    @property
    def node_ip(self):
        """Gets the node_ip of this PacketCaptureRequest.  # noqa: E501

        Define the transport node to capture data.  # noqa: E501

        :return: The node_ip of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._node_ip

    @node_ip.setter
    def node_ip(self, node_ip):
        """Sets the node_ip of this PacketCaptureRequest.

        Define the transport node to capture data.  # noqa: E501

        :param node_ip: The node_ip of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """

        self._node_ip = node_ip

    @property
    def capvalue(self):
        """Gets the capvalue of this PacketCaptureRequest.  # noqa: E501

        Define the capture value of given capture point.  # noqa: E501

        :return: The capvalue of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._capvalue

    @capvalue.setter
    def capvalue(self, capvalue):
        """Sets the capvalue of this PacketCaptureRequest.

        Define the capture value of given capture point.  # noqa: E501

        :param capvalue: The capvalue of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """

        self._capvalue = capvalue

    @property
    def filtertype(self):
        """Gets the filtertype of this PacketCaptureRequest.  # noqa: E501

        Define the capture filter type. Support PRE/POST mode.  # noqa: E501

        :return: The filtertype of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._filtertype

    @filtertype.setter
    def filtertype(self, filtertype):
        """Sets the filtertype of this PacketCaptureRequest.

        Define the capture filter type. Support PRE/POST mode.  # noqa: E501

        :param filtertype: The filtertype of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRE", "POST"]  # noqa: E501
        if filtertype not in allowed_values:
            raise ValueError(
                "Invalid value for `filtertype` ({0}), must be one of {1}"  # noqa: E501
                .format(filtertype, allowed_values)
            )

        self._filtertype = filtertype

    @property
    def cappoint(self):
        """Gets the cappoint of this PacketCaptureRequest.  # noqa: E501

        Define the point to capture data.  # noqa: E501

        :return: The cappoint of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._cappoint

    @cappoint.setter
    def cappoint(self, cappoint):
        """Sets the cappoint of this PacketCaptureRequest.

        Define the point to capture data.  # noqa: E501

        :param cappoint: The cappoint of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """
        if cappoint is None:
            raise ValueError("Invalid value for `cappoint`, must not be `None`")  # noqa: E501
        allowed_values = ["VNIC", "VMKNIC", "VMNIC", "VDRPORT", "DVFILTER", "LOGICALPORT", "FCPORT", "VIF", "PNIC"]  # noqa: E501
        if cappoint not in allowed_values:
            raise ValueError(
                "Invalid value for `cappoint` ({0}), must be one of {1}"  # noqa: E501
                .format(cappoint, allowed_values)
            )

        self._cappoint = cappoint

    @property
    def capfilesize(self):
        """Gets the capfilesize of this PacketCaptureRequest.  # noqa: E501

        Define the packet capture file size limit.  # noqa: E501

        :return: The capfilesize of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._capfilesize

    @capfilesize.setter
    def capfilesize(self, capfilesize):
        """Sets the capfilesize of this PacketCaptureRequest.

        Define the packet capture file size limit.  # noqa: E501

        :param capfilesize: The capfilesize of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._capfilesize = capfilesize

    @property
    def options(self):
        """Gets the options of this PacketCaptureRequest.  # noqa: E501


        :return: The options of this PacketCaptureRequest.  # noqa: E501
        :rtype: PacketCaptureOptionList
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PacketCaptureRequest.


        :param options: The options of this PacketCaptureRequest.  # noqa: E501
        :type: PacketCaptureOptionList
        """

        self._options = options

    @property
    def streamport(self):
        """Gets the streamport of this PacketCaptureRequest.  # noqa: E501

        Set the stream port to receive the capture packet. The STREAM mode is based on GRE-in-UDP Encapsulation(RFC8086). Packets are sent to UDP port 4754.  # noqa: E501

        :return: The streamport of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._streamport

    @streamport.setter
    def streamport(self, streamport):
        """Sets the streamport of this PacketCaptureRequest.

        Set the stream port to receive the capture packet. The STREAM mode is based on GRE-in-UDP Encapsulation(RFC8086). Packets are sent to UDP port 4754.  # noqa: E501

        :param streamport: The streamport of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._streamport = streamport

    @property
    def caprate(self):
        """Gets the caprate of this PacketCaptureRequest.  # noqa: E501

        Define the rate of packet capture process.  # noqa: E501

        :return: The caprate of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._caprate

    @caprate.setter
    def caprate(self, caprate):
        """Sets the caprate of this PacketCaptureRequest.

        Define the rate of packet capture process.  # noqa: E501

        :param caprate: The caprate of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._caprate = caprate

    @property
    def capcore(self):
        """Gets the capcore of this PacketCaptureRequest.  # noqa: E501

        The CPU core id on Edge node.  # noqa: E501

        :return: The capcore of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._capcore

    @capcore.setter
    def capcore(self, capcore):
        """Sets the capcore of this PacketCaptureRequest.

        The CPU core id on Edge node.  # noqa: E501

        :param capcore: The capcore of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._capcore = capcore

    @property
    def capsnaplen(self):
        """Gets the capsnaplen of this PacketCaptureRequest.  # noqa: E501

        Limit the number of bytes captured from each packet.  # noqa: E501

        :return: The capsnaplen of this PacketCaptureRequest.  # noqa: E501
        :rtype: int
        """
        return self._capsnaplen

    @capsnaplen.setter
    def capsnaplen(self, capsnaplen):
        """Sets the capsnaplen of this PacketCaptureRequest.

        Limit the number of bytes captured from each packet.  # noqa: E501

        :param capsnaplen: The capsnaplen of this PacketCaptureRequest.  # noqa: E501
        :type: int
        """

        self._capsnaplen = capsnaplen

    @property
    def streamaddress(self):
        """Gets the streamaddress of this PacketCaptureRequest.  # noqa: E501

        Set the stream address to receive the capture packet.  # noqa: E501

        :return: The streamaddress of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._streamaddress

    @streamaddress.setter
    def streamaddress(self, streamaddress):
        """Sets the streamaddress of this PacketCaptureRequest.

        Set the stream address to receive the capture packet.  # noqa: E501

        :param streamaddress: The streamaddress of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """

        self._streamaddress = streamaddress

    @property
    def capmode(self):
        """Gets the capmode of this PacketCaptureRequest.  # noqa: E501

        Define the capture streaming mode. The STREAM mode will send the data to given stream address and port. And the STANDALONE mode will save the capture file in local folder.  # noqa: E501

        :return: The capmode of this PacketCaptureRequest.  # noqa: E501
        :rtype: str
        """
        return self._capmode

    @capmode.setter
    def capmode(self, capmode):
        """Sets the capmode of this PacketCaptureRequest.

        Define the capture streaming mode. The STREAM mode will send the data to given stream address and port. And the STANDALONE mode will save the capture file in local folder.  # noqa: E501

        :param capmode: The capmode of this PacketCaptureRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["STANDALONE", "STREAM"]  # noqa: E501
        if capmode not in allowed_values:
            raise ValueError(
                "Invalid value for `capmode` ({0}), must be one of {1}"  # noqa: E501
                .format(capmode, allowed_values)
            )

        self._capmode = capmode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketCaptureRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketCaptureRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
