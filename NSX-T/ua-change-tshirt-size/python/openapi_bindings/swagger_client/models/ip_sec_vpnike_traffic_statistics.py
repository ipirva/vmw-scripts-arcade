# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPSecVPNIKETrafficStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packets_out': 'int',
        'fail_count': 'int',
        'packets_in': 'int',
        'bytes_out': 'int',
        'bytes_in': 'int'
    }

    attribute_map = {
        'packets_out': 'packets_out',
        'fail_count': 'fail_count',
        'packets_in': 'packets_in',
        'bytes_out': 'bytes_out',
        'bytes_in': 'bytes_in'
    }

    def __init__(self, packets_out=None, fail_count=None, packets_in=None, bytes_out=None, bytes_in=None):  # noqa: E501
        """IPSecVPNIKETrafficStatistics - a model defined in Swagger"""  # noqa: E501
        self._packets_out = None
        self._fail_count = None
        self._packets_in = None
        self._bytes_out = None
        self._bytes_in = None
        self.discriminator = None
        if packets_out is not None:
            self.packets_out = packets_out
        if fail_count is not None:
            self.fail_count = fail_count
        if packets_in is not None:
            self.packets_in = packets_in
        if bytes_out is not None:
            self.bytes_out = bytes_out
        if bytes_in is not None:
            self.bytes_in = bytes_in

    @property
    def packets_out(self):
        """Gets the packets_out of this IPSecVPNIKETrafficStatistics.  # noqa: E501

        Number of packets out.  # noqa: E501

        :return: The packets_out of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_out

    @packets_out.setter
    def packets_out(self, packets_out):
        """Sets the packets_out of this IPSecVPNIKETrafficStatistics.

        Number of packets out.  # noqa: E501

        :param packets_out: The packets_out of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_out = packets_out

    @property
    def fail_count(self):
        """Gets the fail_count of this IPSecVPNIKETrafficStatistics.  # noqa: E501

        Fail count.  # noqa: E501

        :return: The fail_count of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._fail_count

    @fail_count.setter
    def fail_count(self, fail_count):
        """Sets the fail_count of this IPSecVPNIKETrafficStatistics.

        Fail count.  # noqa: E501

        :param fail_count: The fail_count of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :type: int
        """

        self._fail_count = fail_count

    @property
    def packets_in(self):
        """Gets the packets_in of this IPSecVPNIKETrafficStatistics.  # noqa: E501

        Number of packets in.  # noqa: E501

        :return: The packets_in of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_in

    @packets_in.setter
    def packets_in(self, packets_in):
        """Sets the packets_in of this IPSecVPNIKETrafficStatistics.

        Number of packets in.  # noqa: E501

        :param packets_in: The packets_in of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_in = packets_in

    @property
    def bytes_out(self):
        """Gets the bytes_out of this IPSecVPNIKETrafficStatistics.  # noqa: E501

        Number of bytes out.  # noqa: E501

        :return: The bytes_out of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this IPSecVPNIKETrafficStatistics.

        Number of bytes out.  # noqa: E501

        :param bytes_out: The bytes_out of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :type: int
        """

        self._bytes_out = bytes_out

    @property
    def bytes_in(self):
        """Gets the bytes_in of this IPSecVPNIKETrafficStatistics.  # noqa: E501

        Number of bytes in.  # noqa: E501

        :return: The bytes_in of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this IPSecVPNIKETrafficStatistics.

        Number of bytes in.  # noqa: E501

        :param bytes_in: The bytes_in of this IPSecVPNIKETrafficStatistics.  # noqa: E501
        :type: int
        """

        self._bytes_in = bytes_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNIKETrafficStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNIKETrafficStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
