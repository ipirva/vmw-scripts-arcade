# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'failures': 'list[UpgradeCheckFailureMessage]',
        'display_name': 'str',
        'failure_messages': 'list[str]',
        'component_type': 'str'
    }

    attribute_map = {
        'status': 'status',
        'failures': 'failures',
        'display_name': 'display_name',
        'failure_messages': 'failure_messages',
        'component_type': 'component_type'
    }

    def __init__(self, status=None, failures=None, display_name=None, failure_messages=None, component_type=None):  # noqa: E501
        """UpgradeCheck - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._failures = None
        self._display_name = None
        self._failure_messages = None
        self._component_type = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if failures is not None:
            self.failures = failures
        if display_name is not None:
            self.display_name = display_name
        if failure_messages is not None:
            self.failure_messages = failure_messages
        self.component_type = component_type

    @property
    def status(self):
        """Gets the status of this UpgradeCheck.  # noqa: E501

        Status of pre/post-upgrade check  # noqa: E501

        :return: The status of this UpgradeCheck.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpgradeCheck.

        Status of pre/post-upgrade check  # noqa: E501

        :param status: The status of this UpgradeCheck.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILURE", "WARNING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failures(self):
        """Gets the failures of this UpgradeCheck.  # noqa: E501

        List of failures  # noqa: E501

        :return: The failures of this UpgradeCheck.  # noqa: E501
        :rtype: list[UpgradeCheckFailureMessage]
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this UpgradeCheck.

        List of failures  # noqa: E501

        :param failures: The failures of this UpgradeCheck.  # noqa: E501
        :type: list[UpgradeCheckFailureMessage]
        """

        self._failures = failures

    @property
    def display_name(self):
        """Gets the display_name of this UpgradeCheck.  # noqa: E501

        Name of the pre/post-upgrade check  # noqa: E501

        :return: The display_name of this UpgradeCheck.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpgradeCheck.

        Name of the pre/post-upgrade check  # noqa: E501

        :param display_name: The display_name of this UpgradeCheck.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def failure_messages(self):
        """Gets the failure_messages of this UpgradeCheck.  # noqa: E501

        List of failure messages. This field is deprecated now. Please use failures instead.  # noqa: E501

        :return: The failure_messages of this UpgradeCheck.  # noqa: E501
        :rtype: list[str]
        """
        return self._failure_messages

    @failure_messages.setter
    def failure_messages(self, failure_messages):
        """Sets the failure_messages of this UpgradeCheck.

        List of failure messages. This field is deprecated now. Please use failures instead.  # noqa: E501

        :param failure_messages: The failure_messages of this UpgradeCheck.  # noqa: E501
        :type: list[str]
        """

        self._failure_messages = failure_messages

    @property
    def component_type(self):
        """Gets the component_type of this UpgradeCheck.  # noqa: E501

        Component type  # noqa: E501

        :return: The component_type of this UpgradeCheck.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this UpgradeCheck.

        Component type  # noqa: E501

        :param component_type: The component_type of this UpgradeCheck.  # noqa: E501
        :type: str
        """
        if component_type is None:
            raise ValueError("Invalid value for `component_type`, must not be `None`")  # noqa: E501

        self._component_type = component_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
