# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientTypeCollectionConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_type': 'str',
        'data_type_configurations': 'list[DataTypeCollectionConfiguration]'
    }

    attribute_map = {
        'client_type': 'client_type',
        'data_type_configurations': 'data_type_configurations'
    }

    def __init__(self, client_type=None, data_type_configurations=None):  # noqa: E501
        """ClientTypeCollectionConfiguration - a model defined in Swagger"""  # noqa: E501
        self._client_type = None
        self._data_type_configurations = None
        self.discriminator = None
        self.client_type = client_type
        self.data_type_configurations = data_type_configurations

    @property
    def client_type(self):
        """Gets the client_type of this ClientTypeCollectionConfiguration.  # noqa: E501

        The client type for which this data collection frequency setting applies  # noqa: E501

        :return: The client_type of this ClientTypeCollectionConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this ClientTypeCollectionConfiguration.

        The client type for which this data collection frequency setting applies  # noqa: E501

        :param client_type: The client_type of this ClientTypeCollectionConfiguration.  # noqa: E501
        :type: str
        """
        if client_type is None:
            raise ValueError("Invalid value for `client_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HYPERVISOR", "EDGE", "CONTROL_PLANE", "CONTROL_PLANE_PLATFORM", "MANAGEMENT_PLANE", "MANAGEMENT_PLANE_PLATFORM"]  # noqa: E501
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"  # noqa: E501
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def data_type_configurations(self):
        """Gets the data_type_configurations of this ClientTypeCollectionConfiguration.  # noqa: E501

        The set of data collection type configurations, one for each data collection type  # noqa: E501

        :return: The data_type_configurations of this ClientTypeCollectionConfiguration.  # noqa: E501
        :rtype: list[DataTypeCollectionConfiguration]
        """
        return self._data_type_configurations

    @data_type_configurations.setter
    def data_type_configurations(self, data_type_configurations):
        """Sets the data_type_configurations of this ClientTypeCollectionConfiguration.

        The set of data collection type configurations, one for each data collection type  # noqa: E501

        :param data_type_configurations: The data_type_configurations of this ClientTypeCollectionConfiguration.  # noqa: E501
        :type: list[DataTypeCollectionConfiguration]
        """
        if data_type_configurations is None:
            raise ValueError("Invalid value for `data_type_configurations`, must not be `None`")  # noqa: E501

        self._data_type_configurations = data_type_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientTypeCollectionConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientTypeCollectionConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
