# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeChecksExecutionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'node_with_issues_count': 'int',
        'details': 'str',
        'failure_count': 'int',
        'start_time': 'int',
        'end_time': 'int'
    }

    attribute_map = {
        'status': 'status',
        'node_with_issues_count': 'node_with_issues_count',
        'details': 'details',
        'failure_count': 'failure_count',
        'start_time': 'start_time',
        'end_time': 'end_time'
    }

    def __init__(self, status=None, node_with_issues_count=None, details=None, failure_count=None, start_time=None, end_time=None):  # noqa: E501
        """UpgradeChecksExecutionStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._node_with_issues_count = None
        self._details = None
        self._failure_count = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if node_with_issues_count is not None:
            self.node_with_issues_count = node_with_issues_count
        if details is not None:
            self.details = details
        if failure_count is not None:
            self.failure_count = failure_count
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def status(self):
        """Gets the status of this UpgradeChecksExecutionStatus.  # noqa: E501

        Status of execution of pre/post-upgrade checks  # noqa: E501

        :return: The status of this UpgradeChecksExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpgradeChecksExecutionStatus.

        Status of execution of pre/post-upgrade checks  # noqa: E501

        :param status: The status of this UpgradeChecksExecutionStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_STARTED", "IN_PROGRESS", "ABORTING", "ABORTED", "COMPLETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def node_with_issues_count(self):
        """Gets the node_with_issues_count of this UpgradeChecksExecutionStatus.  # noqa: E501

        Number of nodes which generated failures or warnings in last execution of pre/post-upgrade checks   # noqa: E501

        :return: The node_with_issues_count of this UpgradeChecksExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._node_with_issues_count

    @node_with_issues_count.setter
    def node_with_issues_count(self, node_with_issues_count):
        """Sets the node_with_issues_count of this UpgradeChecksExecutionStatus.

        Number of nodes which generated failures or warnings in last execution of pre/post-upgrade checks   # noqa: E501

        :param node_with_issues_count: The node_with_issues_count of this UpgradeChecksExecutionStatus.  # noqa: E501
        :type: int
        """

        self._node_with_issues_count = node_with_issues_count

    @property
    def details(self):
        """Gets the details of this UpgradeChecksExecutionStatus.  # noqa: E501

        Details about current execution of pre/post-upgrade checks  # noqa: E501

        :return: The details of this UpgradeChecksExecutionStatus.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this UpgradeChecksExecutionStatus.

        Details about current execution of pre/post-upgrade checks  # noqa: E501

        :param details: The details of this UpgradeChecksExecutionStatus.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def failure_count(self):
        """Gets the failure_count of this UpgradeChecksExecutionStatus.  # noqa: E501

        Total count of generated failures or warnings in last execution of pre/post-upgrade checks   # noqa: E501

        :return: The failure_count of this UpgradeChecksExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._failure_count

    @failure_count.setter
    def failure_count(self, failure_count):
        """Sets the failure_count of this UpgradeChecksExecutionStatus.

        Total count of generated failures or warnings in last execution of pre/post-upgrade checks   # noqa: E501

        :param failure_count: The failure_count of this UpgradeChecksExecutionStatus.  # noqa: E501
        :type: int
        """

        self._failure_count = failure_count

    @property
    def start_time(self):
        """Gets the start_time of this UpgradeChecksExecutionStatus.  # noqa: E501

        Time (in milliseconds since epoch) when the execution of pre/post-upgrade checks started   # noqa: E501

        :return: The start_time of this UpgradeChecksExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this UpgradeChecksExecutionStatus.

        Time (in milliseconds since epoch) when the execution of pre/post-upgrade checks started   # noqa: E501

        :param start_time: The start_time of this UpgradeChecksExecutionStatus.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this UpgradeChecksExecutionStatus.  # noqa: E501

        Time (in milliseconds since epoch) when the execution of pre/post-upgrade checks completed   # noqa: E501

        :return: The end_time of this UpgradeChecksExecutionStatus.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this UpgradeChecksExecutionStatus.

        Time (in milliseconds since epoch) when the execution of pre/post-upgrade checks completed   # noqa: E501

        :param end_time: The end_time of this UpgradeChecksExecutionStatus.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeChecksExecutionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeChecksExecutionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
