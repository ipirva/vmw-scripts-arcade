# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostNodeLoginCredential(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'thumbprint': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'thumbprint': 'thumbprint'
    }

    def __init__(self, username=None, password=None, thumbprint=None):  # noqa: E501
        """HostNodeLoginCredential - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._password = None
        self._thumbprint = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if thumbprint is not None:
            self.thumbprint = thumbprint

    @property
    def username(self):
        """Gets the username of this HostNodeLoginCredential.  # noqa: E501

        The username of the account on the host node  # noqa: E501

        :return: The username of this HostNodeLoginCredential.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this HostNodeLoginCredential.

        The username of the account on the host node  # noqa: E501

        :param username: The username of this HostNodeLoginCredential.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this HostNodeLoginCredential.  # noqa: E501

        The authentication password of the host node  # noqa: E501

        :return: The password of this HostNodeLoginCredential.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this HostNodeLoginCredential.

        The authentication password of the host node  # noqa: E501

        :param password: The password of this HostNodeLoginCredential.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def thumbprint(self):
        """Gets the thumbprint of this HostNodeLoginCredential.  # noqa: E501

        For ESXi hosts, the thumbprint of the ESXi management service. For KVM hosts, the SSH key fingerprint. If thumbprint is not provided then connection to host may not be established and API call will fail.   # noqa: E501

        :return: The thumbprint of this HostNodeLoginCredential.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this HostNodeLoginCredential.

        For ESXi hosts, the thumbprint of the ESXi management service. For KVM hosts, the SSH key fingerprint. If thumbprint is not provided then connection to host may not be established and API call will fail.   # noqa: E501

        :param thumbprint: The thumbprint of this HostNodeLoginCredential.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostNodeLoginCredential, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostNodeLoginCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
