# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachedInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'routing_table': 'list[str]',
        'migrate_intf': 'str',
        'app_intf_name': 'str',
        'default_gateway': 'str'
    }

    attribute_map = {
        'routing_table': 'routing_table',
        'migrate_intf': 'migrate_intf',
        'app_intf_name': 'app_intf_name',
        'default_gateway': 'default_gateway'
    }

    def __init__(self, routing_table=None, migrate_intf=None, app_intf_name=None, default_gateway=None):  # noqa: E501
        """AttachedInterface - a model defined in Swagger"""  # noqa: E501
        self._routing_table = None
        self._migrate_intf = None
        self._app_intf_name = None
        self._default_gateway = None
        self.discriminator = None
        if routing_table is not None:
            self.routing_table = routing_table
        if migrate_intf is not None:
            self.migrate_intf = migrate_intf
        self.app_intf_name = app_intf_name
        if default_gateway is not None:
            self.default_gateway = default_gateway

    @property
    def routing_table(self):
        """Gets the routing_table of this AttachedInterface.  # noqa: E501

        Routing rules  # noqa: E501

        :return: The routing_table of this AttachedInterface.  # noqa: E501
        :rtype: list[str]
        """
        return self._routing_table

    @routing_table.setter
    def routing_table(self, routing_table):
        """Sets the routing_table of this AttachedInterface.

        Routing rules  # noqa: E501

        :param routing_table: The routing_table of this AttachedInterface.  # noqa: E501
        :type: list[str]
        """

        self._routing_table = routing_table

    @property
    def migrate_intf(self):
        """Gets the migrate_intf of this AttachedInterface.  # noqa: E501

        IP configuration on migrate_intf will migrate to app_intf_name. It is used for Management and Application sharing the same IP.  # noqa: E501

        :return: The migrate_intf of this AttachedInterface.  # noqa: E501
        :rtype: str
        """
        return self._migrate_intf

    @migrate_intf.setter
    def migrate_intf(self, migrate_intf):
        """Sets the migrate_intf of this AttachedInterface.

        IP configuration on migrate_intf will migrate to app_intf_name. It is used for Management and Application sharing the same IP.  # noqa: E501

        :param migrate_intf: The migrate_intf of this AttachedInterface.  # noqa: E501
        :type: str
        """

        self._migrate_intf = migrate_intf

    @property
    def app_intf_name(self):
        """Gets the app_intf_name of this AttachedInterface.  # noqa: E501

        The name of application interface  # noqa: E501

        :return: The app_intf_name of this AttachedInterface.  # noqa: E501
        :rtype: str
        """
        return self._app_intf_name

    @app_intf_name.setter
    def app_intf_name(self, app_intf_name):
        """Sets the app_intf_name of this AttachedInterface.

        The name of application interface  # noqa: E501

        :param app_intf_name: The app_intf_name of this AttachedInterface.  # noqa: E501
        :type: str
        """
        if app_intf_name is None:
            raise ValueError("Invalid value for `app_intf_name`, must not be `None`")  # noqa: E501

        self._app_intf_name = app_intf_name

    @property
    def default_gateway(self):
        """Gets the default_gateway of this AttachedInterface.  # noqa: E501

        Gateway IP  # noqa: E501

        :return: The default_gateway of this AttachedInterface.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this AttachedInterface.

        Gateway IP  # noqa: E501

        :param default_gateway: The default_gateway of this AttachedInterface.  # noqa: E501
        :type: str
        """

        self._default_gateway = default_gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachedInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachedInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
