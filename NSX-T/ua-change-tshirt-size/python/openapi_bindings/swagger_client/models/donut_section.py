# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DonutSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'row_list_field': 'str',
        'parts': 'list[DonutPart]',
        'template': 'bool'
    }

    attribute_map = {
        'row_list_field': 'row_list_field',
        'parts': 'parts',
        'template': 'template'
    }

    def __init__(self, row_list_field=None, parts=None, template=False):  # noqa: E501
        """DonutSection - a model defined in Swagger"""  # noqa: E501
        self._row_list_field = None
        self._parts = None
        self._template = None
        self.discriminator = None
        if row_list_field is not None:
            self.row_list_field = row_list_field
        self.parts = parts
        if template is not None:
            self.template = template

    @property
    def row_list_field(self):
        """Gets the row_list_field of this DonutSection.  # noqa: E501

        Field of the root of the api result set for forming parts.  # noqa: E501

        :return: The row_list_field of this DonutSection.  # noqa: E501
        :rtype: str
        """
        return self._row_list_field

    @row_list_field.setter
    def row_list_field(self, row_list_field):
        """Sets the row_list_field of this DonutSection.

        Field of the root of the api result set for forming parts.  # noqa: E501

        :param row_list_field: The row_list_field of this DonutSection.  # noqa: E501
        :type: str
        """

        self._row_list_field = row_list_field

    @property
    def parts(self):
        """Gets the parts of this DonutSection.  # noqa: E501

        Array of portions or parts of the donut or stats chart.  # noqa: E501

        :return: The parts of this DonutSection.  # noqa: E501
        :rtype: list[DonutPart]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this DonutSection.

        Array of portions or parts of the donut or stats chart.  # noqa: E501

        :param parts: The parts of this DonutSection.  # noqa: E501
        :type: list[DonutPart]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")  # noqa: E501

        self._parts = parts

    @property
    def template(self):
        """Gets the template of this DonutSection.  # noqa: E501

        If true, the section will be appled as template for forming parts. Only one part will be formed from each element of 'row_list_field'.  # noqa: E501

        :return: The template of this DonutSection.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this DonutSection.

        If true, the section will be appled as template for forming parts. Only one part will be formed from each element of 'row_list_field'.  # noqa: E501

        :param template: The template of this DonutSection.  # noqa: E501
        :type: bool
        """

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DonutSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DonutSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
