# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.virtual_portgroup import VirtualPortgroup  # noqa: F401,E501

class DistributedVirtualPortgroup(VirtualPortgroup):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall_status': 'str',
        'backing_type': 'str',
        'key': 'str'
    }
    if hasattr(VirtualPortgroup, "swagger_types"):
        swagger_types.update(VirtualPortgroup.swagger_types)

    attribute_map = {
        'overall_status': 'overall_status',
        'backing_type': 'backing_type',
        'key': 'key'
    }
    if hasattr(VirtualPortgroup, "attribute_map"):
        attribute_map.update(VirtualPortgroup.attribute_map)

    def __init__(self, overall_status=None, backing_type=None, key=None, *args, **kwargs):  # noqa: E501
        """DistributedVirtualPortgroup - a model defined in Swagger"""  # noqa: E501
        self._overall_status = None
        self._backing_type = None
        self._key = None
        self.discriminator = None
        if overall_status is not None:
            self.overall_status = overall_status
        if backing_type is not None:
            self.backing_type = backing_type
        if key is not None:
            self.key = key
        VirtualPortgroup.__init__(self, *args, **kwargs)

    @property
    def overall_status(self):
        """Gets the overall_status of this DistributedVirtualPortgroup.  # noqa: E501

        This parameters reflects the managed entity status of the portgroup as reported by VC.   # noqa: E501

        :return: The overall_status of this DistributedVirtualPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._overall_status

    @overall_status.setter
    def overall_status(self, overall_status):
        """Sets the overall_status of this DistributedVirtualPortgroup.

        This parameters reflects the managed entity status of the portgroup as reported by VC.   # noqa: E501

        :param overall_status: The overall_status of this DistributedVirtualPortgroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["RED", "YELLOW", "GREEN", "GRAY"]  # noqa: E501
        if overall_status not in allowed_values:
            raise ValueError(
                "Invalid value for `overall_status` ({0}), must be one of {1}"  # noqa: E501
                .format(overall_status, allowed_values)
            )

        self._overall_status = overall_status

    @property
    def backing_type(self):
        """Gets the backing_type of this DistributedVirtualPortgroup.  # noqa: E501

        For distributed virtual portgroup, backing type is standard. For logical switch portgroup, the backing type is set to nsx.   # noqa: E501

        :return: The backing_type of this DistributedVirtualPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._backing_type

    @backing_type.setter
    def backing_type(self, backing_type):
        """Sets the backing_type of this DistributedVirtualPortgroup.

        For distributed virtual portgroup, backing type is standard. For logical switch portgroup, the backing type is set to nsx.   # noqa: E501

        :param backing_type: The backing_type of this DistributedVirtualPortgroup.  # noqa: E501
        :type: str
        """

        self._backing_type = backing_type

    @property
    def key(self):
        """Gets the key of this DistributedVirtualPortgroup.  # noqa: E501

        Generated UUID of the portgroup  # noqa: E501

        :return: The key of this DistributedVirtualPortgroup.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DistributedVirtualPortgroup.

        Generated UUID of the portgroup  # noqa: E501

        :param key: The key of this DistributedVirtualPortgroup.  # noqa: E501
        :type: str
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributedVirtualPortgroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributedVirtualPortgroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
