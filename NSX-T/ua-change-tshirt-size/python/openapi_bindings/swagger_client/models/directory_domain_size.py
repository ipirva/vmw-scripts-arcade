# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DirectoryDomainSize(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_count': 'int',
        'user_count': 'int',
        'group_member_count': 'int'
    }

    attribute_map = {
        'group_count': 'group_count',
        'user_count': 'user_count',
        'group_member_count': 'group_member_count'
    }

    def __init__(self, group_count=None, user_count=None, group_member_count=None):  # noqa: E501
        """DirectoryDomainSize - a model defined in Swagger"""  # noqa: E501
        self._group_count = None
        self._user_count = None
        self._group_member_count = None
        self.discriminator = None
        if group_count is not None:
            self.group_count = group_count
        if user_count is not None:
            self.user_count = user_count
        if group_member_count is not None:
            self.group_member_count = group_member_count

    @property
    def group_count(self):
        """Gets the group_count of this DirectoryDomainSize.  # noqa: E501

        Number of groups  # noqa: E501

        :return: The group_count of this DirectoryDomainSize.  # noqa: E501
        :rtype: int
        """
        return self._group_count

    @group_count.setter
    def group_count(self, group_count):
        """Sets the group_count of this DirectoryDomainSize.

        Number of groups  # noqa: E501

        :param group_count: The group_count of this DirectoryDomainSize.  # noqa: E501
        :type: int
        """

        self._group_count = group_count

    @property
    def user_count(self):
        """Gets the user_count of this DirectoryDomainSize.  # noqa: E501

        Number of users  # noqa: E501

        :return: The user_count of this DirectoryDomainSize.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this DirectoryDomainSize.

        Number of users  # noqa: E501

        :param user_count: The user_count of this DirectoryDomainSize.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def group_member_count(self):
        """Gets the group_member_count of this DirectoryDomainSize.  # noqa: E501

        Number of group members  # noqa: E501

        :return: The group_member_count of this DirectoryDomainSize.  # noqa: E501
        :rtype: int
        """
        return self._group_member_count

    @group_member_count.setter
    def group_member_count(self, group_member_count):
        """Sets the group_member_count of this DirectoryDomainSize.

        Number of group members  # noqa: E501

        :param group_member_count: The group_member_count of this DirectoryDomainSize.  # noqa: E501
        :type: int
        """

        self._group_member_count = group_member_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryDomainSize, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryDomainSize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
