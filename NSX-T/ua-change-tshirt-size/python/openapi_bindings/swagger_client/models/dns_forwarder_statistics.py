# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DnsForwarderStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queries_forwarded': 'int',
        'conditional_forwarder_statistics': 'list[PerForwarderStatistics]',
        'default_forwarder_statistics': 'PerForwarderStatistics',
        'queries_answered_locally': 'int',
        'used_cache_statistics': 'list[PerNodeUsedCacheStatistics]',
        'configured_cache_size': 'int',
        'timestamp': 'int',
        'error_message': 'str',
        'total_queries': 'int'
    }

    attribute_map = {
        'queries_forwarded': 'queries_forwarded',
        'conditional_forwarder_statistics': 'conditional_forwarder_statistics',
        'default_forwarder_statistics': 'default_forwarder_statistics',
        'queries_answered_locally': 'queries_answered_locally',
        'used_cache_statistics': 'used_cache_statistics',
        'configured_cache_size': 'configured_cache_size',
        'timestamp': 'timestamp',
        'error_message': 'error_message',
        'total_queries': 'total_queries'
    }

    def __init__(self, queries_forwarded=None, conditional_forwarder_statistics=None, default_forwarder_statistics=None, queries_answered_locally=None, used_cache_statistics=None, configured_cache_size=None, timestamp=None, error_message=None, total_queries=None):  # noqa: E501
        """DnsForwarderStatistics - a model defined in Swagger"""  # noqa: E501
        self._queries_forwarded = None
        self._conditional_forwarder_statistics = None
        self._default_forwarder_statistics = None
        self._queries_answered_locally = None
        self._used_cache_statistics = None
        self._configured_cache_size = None
        self._timestamp = None
        self._error_message = None
        self._total_queries = None
        self.discriminator = None
        if queries_forwarded is not None:
            self.queries_forwarded = queries_forwarded
        if conditional_forwarder_statistics is not None:
            self.conditional_forwarder_statistics = conditional_forwarder_statistics
        if default_forwarder_statistics is not None:
            self.default_forwarder_statistics = default_forwarder_statistics
        if queries_answered_locally is not None:
            self.queries_answered_locally = queries_answered_locally
        if used_cache_statistics is not None:
            self.used_cache_statistics = used_cache_statistics
        if configured_cache_size is not None:
            self.configured_cache_size = configured_cache_size
        if timestamp is not None:
            self.timestamp = timestamp
        if error_message is not None:
            self.error_message = error_message
        if total_queries is not None:
            self.total_queries = total_queries

    @property
    def queries_forwarded(self):
        """Gets the queries_forwarded of this DnsForwarderStatistics.  # noqa: E501

        The total number of forwarded dns queries  # noqa: E501

        :return: The queries_forwarded of this DnsForwarderStatistics.  # noqa: E501
        :rtype: int
        """
        return self._queries_forwarded

    @queries_forwarded.setter
    def queries_forwarded(self, queries_forwarded):
        """Sets the queries_forwarded of this DnsForwarderStatistics.

        The total number of forwarded dns queries  # noqa: E501

        :param queries_forwarded: The queries_forwarded of this DnsForwarderStatistics.  # noqa: E501
        :type: int
        """

        self._queries_forwarded = queries_forwarded

    @property
    def conditional_forwarder_statistics(self):
        """Gets the conditional_forwarder_statistics of this DnsForwarderStatistics.  # noqa: E501

        The statistics of conditional forwarders  # noqa: E501

        :return: The conditional_forwarder_statistics of this DnsForwarderStatistics.  # noqa: E501
        :rtype: list[PerForwarderStatistics]
        """
        return self._conditional_forwarder_statistics

    @conditional_forwarder_statistics.setter
    def conditional_forwarder_statistics(self, conditional_forwarder_statistics):
        """Sets the conditional_forwarder_statistics of this DnsForwarderStatistics.

        The statistics of conditional forwarders  # noqa: E501

        :param conditional_forwarder_statistics: The conditional_forwarder_statistics of this DnsForwarderStatistics.  # noqa: E501
        :type: list[PerForwarderStatistics]
        """

        self._conditional_forwarder_statistics = conditional_forwarder_statistics

    @property
    def default_forwarder_statistics(self):
        """Gets the default_forwarder_statistics of this DnsForwarderStatistics.  # noqa: E501


        :return: The default_forwarder_statistics of this DnsForwarderStatistics.  # noqa: E501
        :rtype: PerForwarderStatistics
        """
        return self._default_forwarder_statistics

    @default_forwarder_statistics.setter
    def default_forwarder_statistics(self, default_forwarder_statistics):
        """Sets the default_forwarder_statistics of this DnsForwarderStatistics.


        :param default_forwarder_statistics: The default_forwarder_statistics of this DnsForwarderStatistics.  # noqa: E501
        :type: PerForwarderStatistics
        """

        self._default_forwarder_statistics = default_forwarder_statistics

    @property
    def queries_answered_locally(self):
        """Gets the queries_answered_locally of this DnsForwarderStatistics.  # noqa: E501

        The totocal number of queries answered from local cache  # noqa: E501

        :return: The queries_answered_locally of this DnsForwarderStatistics.  # noqa: E501
        :rtype: int
        """
        return self._queries_answered_locally

    @queries_answered_locally.setter
    def queries_answered_locally(self, queries_answered_locally):
        """Sets the queries_answered_locally of this DnsForwarderStatistics.

        The totocal number of queries answered from local cache  # noqa: E501

        :param queries_answered_locally: The queries_answered_locally of this DnsForwarderStatistics.  # noqa: E501
        :type: int
        """

        self._queries_answered_locally = queries_answered_locally

    @property
    def used_cache_statistics(self):
        """Gets the used_cache_statistics of this DnsForwarderStatistics.  # noqa: E501

        The statistics of used cache  # noqa: E501

        :return: The used_cache_statistics of this DnsForwarderStatistics.  # noqa: E501
        :rtype: list[PerNodeUsedCacheStatistics]
        """
        return self._used_cache_statistics

    @used_cache_statistics.setter
    def used_cache_statistics(self, used_cache_statistics):
        """Sets the used_cache_statistics of this DnsForwarderStatistics.

        The statistics of used cache  # noqa: E501

        :param used_cache_statistics: The used_cache_statistics of this DnsForwarderStatistics.  # noqa: E501
        :type: list[PerNodeUsedCacheStatistics]
        """

        self._used_cache_statistics = used_cache_statistics

    @property
    def configured_cache_size(self):
        """Gets the configured_cache_size of this DnsForwarderStatistics.  # noqa: E501

        The configured cache size, in kb  # noqa: E501

        :return: The configured_cache_size of this DnsForwarderStatistics.  # noqa: E501
        :rtype: int
        """
        return self._configured_cache_size

    @configured_cache_size.setter
    def configured_cache_size(self, configured_cache_size):
        """Sets the configured_cache_size of this DnsForwarderStatistics.

        The configured cache size, in kb  # noqa: E501

        :param configured_cache_size: The configured_cache_size of this DnsForwarderStatistics.  # noqa: E501
        :type: int
        """

        self._configured_cache_size = configured_cache_size

    @property
    def timestamp(self):
        """Gets the timestamp of this DnsForwarderStatistics.  # noqa: E501

        Time stamp of the current statistics, in ms  # noqa: E501

        :return: The timestamp of this DnsForwarderStatistics.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DnsForwarderStatistics.

        Time stamp of the current statistics, in ms  # noqa: E501

        :param timestamp: The timestamp of this DnsForwarderStatistics.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def error_message(self):
        """Gets the error_message of this DnsForwarderStatistics.  # noqa: E501

        Error message, if available  # noqa: E501

        :return: The error_message of this DnsForwarderStatistics.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DnsForwarderStatistics.

        Error message, if available  # noqa: E501

        :param error_message: The error_message of this DnsForwarderStatistics.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def total_queries(self):
        """Gets the total_queries of this DnsForwarderStatistics.  # noqa: E501

        The total number of received dns queries  # noqa: E501

        :return: The total_queries of this DnsForwarderStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_queries

    @total_queries.setter
    def total_queries(self, total_queries):
        """Sets the total_queries of this DnsForwarderStatistics.

        The total number of received dns queries  # noqa: E501

        :param total_queries: The total_queries of this DnsForwarderStatistics.  # noqa: E501
        :type: int
        """

        self._total_queries = total_queries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsForwarderStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsForwarderStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
