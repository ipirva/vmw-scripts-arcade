# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportNodeCollectionState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'validation_errors': 'list[ValidationError]',
        'cluster_level_error': 'str',
        'state': 'str',
        'aggregate_progress_percentage': 'int',
        'vlcm_transition_error': 'str'
    }

    attribute_map = {
        'validation_errors': 'validation_errors',
        'cluster_level_error': 'cluster_level_error',
        'state': 'state',
        'aggregate_progress_percentage': 'aggregate_progress_percentage',
        'vlcm_transition_error': 'vlcm_transition_error'
    }

    def __init__(self, validation_errors=None, cluster_level_error=None, state=None, aggregate_progress_percentage=None, vlcm_transition_error=None):  # noqa: E501
        """TransportNodeCollectionState - a model defined in Swagger"""  # noqa: E501
        self._validation_errors = None
        self._cluster_level_error = None
        self._state = None
        self._aggregate_progress_percentage = None
        self._vlcm_transition_error = None
        self.discriminator = None
        if validation_errors is not None:
            self.validation_errors = validation_errors
        if cluster_level_error is not None:
            self.cluster_level_error = cluster_level_error
        if state is not None:
            self.state = state
        if aggregate_progress_percentage is not None:
            self.aggregate_progress_percentage = aggregate_progress_percentage
        if vlcm_transition_error is not None:
            self.vlcm_transition_error = vlcm_transition_error

    @property
    def validation_errors(self):
        """Gets the validation_errors of this TransportNodeCollectionState.  # noqa: E501

        Transport node profile(TNP) will not be applied to a discovered node(DN) if some validations are not passed. In this case transport node is not created or existing transport node is not updated with TNP configurations.  # noqa: E501

        :return: The validation_errors of this TransportNodeCollectionState.  # noqa: E501
        :rtype: list[ValidationError]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """Sets the validation_errors of this TransportNodeCollectionState.

        Transport node profile(TNP) will not be applied to a discovered node(DN) if some validations are not passed. In this case transport node is not created or existing transport node is not updated with TNP configurations.  # noqa: E501

        :param validation_errors: The validation_errors of this TransportNodeCollectionState.  # noqa: E501
        :type: list[ValidationError]
        """

        self._validation_errors = validation_errors

    @property
    def cluster_level_error(self):
        """Gets the cluster_level_error of this TransportNodeCollectionState.  # noqa: E501

        Errors while applying transport node profile which need cluster level action to resolve  # noqa: E501

        :return: The cluster_level_error of this TransportNodeCollectionState.  # noqa: E501
        :rtype: str
        """
        return self._cluster_level_error

    @cluster_level_error.setter
    def cluster_level_error(self, cluster_level_error):
        """Sets the cluster_level_error of this TransportNodeCollectionState.

        Errors while applying transport node profile which need cluster level action to resolve  # noqa: E501

        :param cluster_level_error: The cluster_level_error of this TransportNodeCollectionState.  # noqa: E501
        :type: str
        """

        self._cluster_level_error = cluster_level_error

    @property
    def state(self):
        """Gets the state of this TransportNodeCollectionState.  # noqa: E501

        If the host preparation or transport node creation is going on for any host then state will be \"IN_PROGRESS\".  If setting desired state of the transport node failed for any of the host then state will be \"FAILED_TO_CREATE\"  If realization of transport node failed for any of the host then state will be \"FAILED_TO_REALIZE\"  If Transport node is successfully created for all of the hosts in compute collection then state will be \"SUCCESS\"  You can override the configuration for one or more hosts in the compute collection by update TN(transport node) request on individual TN. If TN is successfully created for all hosts in compute collection and one or more hosts have overridden configuration then transport node collection state will be \"PROFILE_MISMATCH\".   # noqa: E501

        :return: The state of this TransportNodeCollectionState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TransportNodeCollectionState.

        If the host preparation or transport node creation is going on for any host then state will be \"IN_PROGRESS\".  If setting desired state of the transport node failed for any of the host then state will be \"FAILED_TO_CREATE\"  If realization of transport node failed for any of the host then state will be \"FAILED_TO_REALIZE\"  If Transport node is successfully created for all of the hosts in compute collection then state will be \"SUCCESS\"  You can override the configuration for one or more hosts in the compute collection by update TN(transport node) request on individual TN. If TN is successfully created for all hosts in compute collection and one or more hosts have overridden configuration then transport node collection state will be \"PROFILE_MISMATCH\".   # noqa: E501

        :param state: The state of this TransportNodeCollectionState.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAILED_TO_CREATE", "FAILED_TO_REALIZE", "IN_PROGRESS", "PROFILE_MISMATCH", "SUCCESS"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def aggregate_progress_percentage(self):
        """Gets the aggregate_progress_percentage of this TransportNodeCollectionState.  # noqa: E501

        Average of all transport node deployment progress in a cluster. Applicable only if transport node profile is applied on a cluster.  # noqa: E501

        :return: The aggregate_progress_percentage of this TransportNodeCollectionState.  # noqa: E501
        :rtype: int
        """
        return self._aggregate_progress_percentage

    @aggregate_progress_percentage.setter
    def aggregate_progress_percentage(self, aggregate_progress_percentage):
        """Sets the aggregate_progress_percentage of this TransportNodeCollectionState.

        Average of all transport node deployment progress in a cluster. Applicable only if transport node profile is applied on a cluster.  # noqa: E501

        :param aggregate_progress_percentage: The aggregate_progress_percentage of this TransportNodeCollectionState.  # noqa: E501
        :type: int
        """

        self._aggregate_progress_percentage = aggregate_progress_percentage

    @property
    def vlcm_transition_error(self):
        """Gets the vlcm_transition_error of this TransportNodeCollectionState.  # noqa: E501

        When vLCM is enabled on a compute collection in vSphere the transition workflow is triggered. This field indicates error in this special case.  # noqa: E501

        :return: The vlcm_transition_error of this TransportNodeCollectionState.  # noqa: E501
        :rtype: str
        """
        return self._vlcm_transition_error

    @vlcm_transition_error.setter
    def vlcm_transition_error(self, vlcm_transition_error):
        """Sets the vlcm_transition_error of this TransportNodeCollectionState.

        When vLCM is enabled on a compute collection in vSphere the transition workflow is triggered. This field indicates error in this special case.  # noqa: E501

        :param vlcm_transition_error: The vlcm_transition_error of this TransportNodeCollectionState.  # noqa: E501
        :type: str
        """

        self._vlcm_transition_error = vlcm_transition_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportNodeCollectionState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportNodeCollectionState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
