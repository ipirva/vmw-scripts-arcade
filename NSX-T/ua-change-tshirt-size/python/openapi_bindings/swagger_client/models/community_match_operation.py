# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommunityMatchOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_operator': 'str',
        'regular_expression': 'str',
        'community_list_id': 'str'
    }

    attribute_map = {
        'match_operator': 'match_operator',
        'regular_expression': 'regular_expression',
        'community_list_id': 'community_list_id'
    }

    def __init__(self, match_operator='MATCH_ANY', regular_expression=None, community_list_id=None):  # noqa: E501
        """CommunityMatchOperation - a model defined in Swagger"""  # noqa: E501
        self._match_operator = None
        self._regular_expression = None
        self._community_list_id = None
        self.discriminator = None
        if match_operator is not None:
            self.match_operator = match_operator
        if regular_expression is not None:
            self.regular_expression = regular_expression
        if community_list_id is not None:
            self.community_list_id = community_list_id

    @property
    def match_operator(self):
        """Gets the match_operator of this CommunityMatchOperation.  # noqa: E501

        Match operator for communities from provided community list id. MATCH_ANY will match any community MATCH_ALL will match all communities MATCH_EXACT will do exact match on community MATCH_NONE [operator not supported] will not match any community MATCH_REGEX will match normal communities by evaluating regular expression MATCH_LARGE_COMMUNITY_REGEX will match large communities by evaluating regular expression   # noqa: E501

        :return: The match_operator of this CommunityMatchOperation.  # noqa: E501
        :rtype: str
        """
        return self._match_operator

    @match_operator.setter
    def match_operator(self, match_operator):
        """Sets the match_operator of this CommunityMatchOperation.

        Match operator for communities from provided community list id. MATCH_ANY will match any community MATCH_ALL will match all communities MATCH_EXACT will do exact match on community MATCH_NONE [operator not supported] will not match any community MATCH_REGEX will match normal communities by evaluating regular expression MATCH_LARGE_COMMUNITY_REGEX will match large communities by evaluating regular expression   # noqa: E501

        :param match_operator: The match_operator of this CommunityMatchOperation.  # noqa: E501
        :type: str
        """
        allowed_values = ["MATCH_ANY", "MATCH_ALL", "MATCH_EXACT", "MATCH_NONE", "MATCH_REGEX", "MATCH_LARGE_COMMUNITY_REGEX"]  # noqa: E501
        if match_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `match_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(match_operator, allowed_values)
            )

        self._match_operator = match_operator

    @property
    def regular_expression(self):
        """Gets the regular_expression of this CommunityMatchOperation.  # noqa: E501

        Regular expression to match BGP communities. If match_operator is MATCH_REGEX then this value must be specified.   # noqa: E501

        :return: The regular_expression of this CommunityMatchOperation.  # noqa: E501
        :rtype: str
        """
        return self._regular_expression

    @regular_expression.setter
    def regular_expression(self, regular_expression):
        """Sets the regular_expression of this CommunityMatchOperation.

        Regular expression to match BGP communities. If match_operator is MATCH_REGEX then this value must be specified.   # noqa: E501

        :param regular_expression: The regular_expression of this CommunityMatchOperation.  # noqa: E501
        :type: str
        """

        self._regular_expression = regular_expression

    @property
    def community_list_id(self):
        """Gets the community_list_id of this CommunityMatchOperation.  # noqa: E501

        ID of BGP community list. This value is not required when match_operator is MATCH_REGEX otherwise required.   # noqa: E501

        :return: The community_list_id of this CommunityMatchOperation.  # noqa: E501
        :rtype: str
        """
        return self._community_list_id

    @community_list_id.setter
    def community_list_id(self, community_list_id):
        """Sets the community_list_id of this CommunityMatchOperation.

        ID of BGP community list. This value is not required when match_operator is MATCH_REGEX otherwise required.   # noqa: E501

        :param community_list_id: The community_list_id of this CommunityMatchOperation.  # noqa: E501
        :type: str
        """

        self._community_list_id = community_list_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommunityMatchOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunityMatchOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
