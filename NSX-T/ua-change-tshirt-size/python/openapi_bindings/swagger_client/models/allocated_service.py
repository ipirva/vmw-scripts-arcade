# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllocatedService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_reference': 'ResourceReference',
        'high_availability_status': 'str',
        'allocation_details': 'list[KeyValuePair]'
    }

    attribute_map = {
        'service_reference': 'service_reference',
        'high_availability_status': 'high_availability_status',
        'allocation_details': 'allocation_details'
    }

    def __init__(self, service_reference=None, high_availability_status=None, allocation_details=None):  # noqa: E501
        """AllocatedService - a model defined in Swagger"""  # noqa: E501
        self._service_reference = None
        self._high_availability_status = None
        self._allocation_details = None
        self.discriminator = None
        if service_reference is not None:
            self.service_reference = service_reference
        if high_availability_status is not None:
            self.high_availability_status = high_availability_status
        if allocation_details is not None:
            self.allocation_details = allocation_details

    @property
    def service_reference(self):
        """Gets the service_reference of this AllocatedService.  # noqa: E501


        :return: The service_reference of this AllocatedService.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._service_reference

    @service_reference.setter
    def service_reference(self, service_reference):
        """Sets the service_reference of this AllocatedService.


        :param service_reference: The service_reference of this AllocatedService.  # noqa: E501
        :type: ResourceReference
        """

        self._service_reference = service_reference

    @property
    def high_availability_status(self):
        """Gets the high_availability_status of this AllocatedService.  # noqa: E501

        Represents the active or the standby state of the service.  # noqa: E501

        :return: The high_availability_status of this AllocatedService.  # noqa: E501
        :rtype: str
        """
        return self._high_availability_status

    @high_availability_status.setter
    def high_availability_status(self, high_availability_status):
        """Sets the high_availability_status of this AllocatedService.

        Represents the active or the standby state of the service.  # noqa: E501

        :param high_availability_status: The high_availability_status of this AllocatedService.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "STANDBY", "DOWN", "SYNC", "UNKNOWN"]  # noqa: E501
        if high_availability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `high_availability_status` ({0}), must be one of {1}"  # noqa: E501
                .format(high_availability_status, allowed_values)
            )

        self._high_availability_status = high_availability_status

    @property
    def allocation_details(self):
        """Gets the allocation_details of this AllocatedService.  # noqa: E501

        Additional properties of a service, say the sub_pool_size and sub_pool_type for a LoadBalancer.   # noqa: E501

        :return: The allocation_details of this AllocatedService.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._allocation_details

    @allocation_details.setter
    def allocation_details(self, allocation_details):
        """Sets the allocation_details of this AllocatedService.

        Additional properties of a service, say the sub_pool_size and sub_pool_type for a LoadBalancer.   # noqa: E501

        :param allocation_details: The allocation_details of this AllocatedService.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._allocation_details = allocation_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocatedService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocatedService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
