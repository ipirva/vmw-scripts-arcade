# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemoryReservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reservation_percentage': 'int'
    }

    attribute_map = {
        'reservation_percentage': 'reservation_percentage'
    }

    def __init__(self, reservation_percentage=100):  # noqa: E501
        """MemoryReservation - a model defined in Swagger"""  # noqa: E501
        self._reservation_percentage = None
        self.discriminator = None
        if reservation_percentage is not None:
            self.reservation_percentage = reservation_percentage

    @property
    def reservation_percentage(self):
        """Gets the reservation_percentage of this MemoryReservation.  # noqa: E501

        Memory reserved relative to the default reservation of 100 percent. For example, take an edge virtual machine of medium form factor. By default, an edge of medium form factor is configured with 8 GB of memory and with reservation of 100 percent. So, 8 GB of memory is reserved. If you specify reservation_percentage value as 50 percent, then 4 GB of memory will be reserved.   # noqa: E501

        :return: The reservation_percentage of this MemoryReservation.  # noqa: E501
        :rtype: int
        """
        return self._reservation_percentage

    @reservation_percentage.setter
    def reservation_percentage(self, reservation_percentage):
        """Sets the reservation_percentage of this MemoryReservation.

        Memory reserved relative to the default reservation of 100 percent. For example, take an edge virtual machine of medium form factor. By default, an edge of medium form factor is configured with 8 GB of memory and with reservation of 100 percent. So, 8 GB of memory is reserved. If you specify reservation_percentage value as 50 percent, then 4 GB of memory will be reserved.   # noqa: E501

        :param reservation_percentage: The reservation_percentage of this MemoryReservation.  # noqa: E501
        :type: int
        """

        self._reservation_percentage = reservation_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemoryReservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemoryReservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
