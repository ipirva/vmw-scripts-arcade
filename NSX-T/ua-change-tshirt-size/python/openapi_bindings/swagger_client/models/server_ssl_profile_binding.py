# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerSslProfileBinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_auth_crl_ids': 'list[str]',
        'server_auth': 'str',
        'certificate_chain_depth': 'int',
        'client_certificate_id': 'str',
        'server_auth_ca_ids': 'list[str]',
        'ssl_profile_id': 'str'
    }

    attribute_map = {
        'server_auth_crl_ids': 'server_auth_crl_ids',
        'server_auth': 'server_auth',
        'certificate_chain_depth': 'certificate_chain_depth',
        'client_certificate_id': 'client_certificate_id',
        'server_auth_ca_ids': 'server_auth_ca_ids',
        'ssl_profile_id': 'ssl_profile_id'
    }

    def __init__(self, server_auth_crl_ids=None, server_auth='IGNORE', certificate_chain_depth=3, client_certificate_id=None, server_auth_ca_ids=None, ssl_profile_id=None):  # noqa: E501
        """ServerSslProfileBinding - a model defined in Swagger"""  # noqa: E501
        self._server_auth_crl_ids = None
        self._server_auth = None
        self._certificate_chain_depth = None
        self._client_certificate_id = None
        self._server_auth_ca_ids = None
        self._ssl_profile_id = None
        self.discriminator = None
        if server_auth_crl_ids is not None:
            self.server_auth_crl_ids = server_auth_crl_ids
        if server_auth is not None:
            self.server_auth = server_auth
        if certificate_chain_depth is not None:
            self.certificate_chain_depth = certificate_chain_depth
        if client_certificate_id is not None:
            self.client_certificate_id = client_certificate_id
        if server_auth_ca_ids is not None:
            self.server_auth_ca_ids = server_auth_ca_ids
        if ssl_profile_id is not None:
            self.ssl_profile_id = ssl_profile_id

    @property
    def server_auth_crl_ids(self):
        """Gets the server_auth_crl_ids of this ServerSslProfileBinding.  # noqa: E501

        A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.   # noqa: E501

        :return: The server_auth_crl_ids of this ServerSslProfileBinding.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_auth_crl_ids

    @server_auth_crl_ids.setter
    def server_auth_crl_ids(self, server_auth_crl_ids):
        """Sets the server_auth_crl_ids of this ServerSslProfileBinding.

        A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.   # noqa: E501

        :param server_auth_crl_ids: The server_auth_crl_ids of this ServerSslProfileBinding.  # noqa: E501
        :type: list[str]
        """

        self._server_auth_crl_ids = server_auth_crl_ids

    @property
    def server_auth(self):
        """Gets the server_auth of this ServerSslProfileBinding.  # noqa: E501

        server authentication mode  # noqa: E501

        :return: The server_auth of this ServerSslProfileBinding.  # noqa: E501
        :rtype: str
        """
        return self._server_auth

    @server_auth.setter
    def server_auth(self, server_auth):
        """Sets the server_auth of this ServerSslProfileBinding.

        server authentication mode  # noqa: E501

        :param server_auth: The server_auth of this ServerSslProfileBinding.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUIRED", "IGNORE"]  # noqa: E501
        if server_auth not in allowed_values:
            raise ValueError(
                "Invalid value for `server_auth` ({0}), must be one of {1}"  # noqa: E501
                .format(server_auth, allowed_values)
            )

        self._server_auth = server_auth

    @property
    def certificate_chain_depth(self):
        """Gets the certificate_chain_depth of this ServerSslProfileBinding.  # noqa: E501

        authentication depth is used to set the verification depth in the server certificates chain.   # noqa: E501

        :return: The certificate_chain_depth of this ServerSslProfileBinding.  # noqa: E501
        :rtype: int
        """
        return self._certificate_chain_depth

    @certificate_chain_depth.setter
    def certificate_chain_depth(self, certificate_chain_depth):
        """Sets the certificate_chain_depth of this ServerSslProfileBinding.

        authentication depth is used to set the verification depth in the server certificates chain.   # noqa: E501

        :param certificate_chain_depth: The certificate_chain_depth of this ServerSslProfileBinding.  # noqa: E501
        :type: int
        """

        self._certificate_chain_depth = certificate_chain_depth

    @property
    def client_certificate_id(self):
        """Gets the client_certificate_id of this ServerSslProfileBinding.  # noqa: E501

        To support client authentication (load balancer acting as a client authenticating to the backend server), client certificate can be specified in the server-side SSL profile binding   # noqa: E501

        :return: The client_certificate_id of this ServerSslProfileBinding.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate_id

    @client_certificate_id.setter
    def client_certificate_id(self, client_certificate_id):
        """Sets the client_certificate_id of this ServerSslProfileBinding.

        To support client authentication (load balancer acting as a client authenticating to the backend server), client certificate can be specified in the server-side SSL profile binding   # noqa: E501

        :param client_certificate_id: The client_certificate_id of this ServerSslProfileBinding.  # noqa: E501
        :type: str
        """

        self._client_certificate_id = client_certificate_id

    @property
    def server_auth_ca_ids(self):
        """Gets the server_auth_ca_ids of this ServerSslProfileBinding.  # noqa: E501

        If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.   # noqa: E501

        :return: The server_auth_ca_ids of this ServerSslProfileBinding.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_auth_ca_ids

    @server_auth_ca_ids.setter
    def server_auth_ca_ids(self, server_auth_ca_ids):
        """Sets the server_auth_ca_ids of this ServerSslProfileBinding.

        If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.   # noqa: E501

        :param server_auth_ca_ids: The server_auth_ca_ids of this ServerSslProfileBinding.  # noqa: E501
        :type: list[str]
        """

        self._server_auth_ca_ids = server_auth_ca_ids

    @property
    def ssl_profile_id(self):
        """Gets the ssl_profile_id of this ServerSslProfileBinding.  # noqa: E501

        Server SSL profile defines reusable, application-independent server side SSL properties.   # noqa: E501

        :return: The ssl_profile_id of this ServerSslProfileBinding.  # noqa: E501
        :rtype: str
        """
        return self._ssl_profile_id

    @ssl_profile_id.setter
    def ssl_profile_id(self, ssl_profile_id):
        """Sets the ssl_profile_id of this ServerSslProfileBinding.

        Server SSL profile defines reusable, application-independent server side SSL properties.   # noqa: E501

        :param ssl_profile_id: The ssl_profile_id of this ServerSslProfileBinding.  # noqa: E501
        :type: str
        """

        self._ssl_profile_id = ssl_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerSslProfileBinding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerSslProfileBinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
