# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class OidcEndPoint(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userinfo_endpoint': 'str',
        'claims_supported': 'list[str]',
        'name': 'str',
        'oidc_type': 'str',
        'oidc_uri': 'str',
        'token_endpoint': 'str',
        'thumbprint': 'str',
        'jwks_uri': 'str',
        'authorization_endpoint': 'str',
        'override_roles': 'list[str]',
        'issuer': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'userinfo_endpoint': 'userinfo_endpoint',
        'claims_supported': 'claims_supported',
        'name': 'name',
        'oidc_type': 'oidc_type',
        'oidc_uri': 'oidc_uri',
        'token_endpoint': 'token_endpoint',
        'thumbprint': 'thumbprint',
        'jwks_uri': 'jwks_uri',
        'authorization_endpoint': 'authorization_endpoint',
        'override_roles': 'override_roles',
        'issuer': 'issuer'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, userinfo_endpoint=None, claims_supported=None, name=None, oidc_type=None, oidc_uri=None, token_endpoint=None, thumbprint=None, jwks_uri=None, authorization_endpoint=None, override_roles=None, issuer=None, *args, **kwargs):  # noqa: E501
        """OidcEndPoint - a model defined in Swagger"""  # noqa: E501
        self._userinfo_endpoint = None
        self._claims_supported = None
        self._name = None
        self._oidc_type = None
        self._oidc_uri = None
        self._token_endpoint = None
        self._thumbprint = None
        self._jwks_uri = None
        self._authorization_endpoint = None
        self._override_roles = None
        self._issuer = None
        self.discriminator = None
        if userinfo_endpoint is not None:
            self.userinfo_endpoint = userinfo_endpoint
        if claims_supported is not None:
            self.claims_supported = claims_supported
        if name is not None:
            self.name = name
        if oidc_type is not None:
            self.oidc_type = oidc_type
        self.oidc_uri = oidc_uri
        if token_endpoint is not None:
            self.token_endpoint = token_endpoint
        self.thumbprint = thumbprint
        if jwks_uri is not None:
            self.jwks_uri = jwks_uri
        if authorization_endpoint is not None:
            self.authorization_endpoint = authorization_endpoint
        if override_roles is not None:
            self.override_roles = override_roles
        if issuer is not None:
            self.issuer = issuer
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def userinfo_endpoint(self):
        """Gets the userinfo_endpoint of this OidcEndPoint.  # noqa: E501

        The URL of the OpenID provider's userinfo endpoint.  # noqa: E501

        :return: The userinfo_endpoint of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._userinfo_endpoint

    @userinfo_endpoint.setter
    def userinfo_endpoint(self, userinfo_endpoint):
        """Sets the userinfo_endpoint of this OidcEndPoint.

        The URL of the OpenID provider's userinfo endpoint.  # noqa: E501

        :param userinfo_endpoint: The userinfo_endpoint of this OidcEndPoint.  # noqa: E501
        :type: str
        """

        self._userinfo_endpoint = userinfo_endpoint

    @property
    def claims_supported(self):
        """Gets the claims_supported of this OidcEndPoint.  # noqa: E501

        The list of claims that the OpenID provider supports.  # noqa: E501

        :return: The claims_supported of this OidcEndPoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_supported

    @claims_supported.setter
    def claims_supported(self, claims_supported):
        """Sets the claims_supported of this OidcEndPoint.

        The list of claims that the OpenID provider supports.  # noqa: E501

        :param claims_supported: The claims_supported of this OidcEndPoint.  # noqa: E501
        :type: list[str]
        """

        self._claims_supported = claims_supported

    @property
    def name(self):
        """Gets the name of this OidcEndPoint.  # noqa: E501

        A short, unique name for this OpenID Connect end-point. OIDC endpoint names may not contain spaces. If not provided, defaults to the ID of the OidcEndPoint.  # noqa: E501

        :return: The name of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OidcEndPoint.

        A short, unique name for this OpenID Connect end-point. OIDC endpoint names may not contain spaces. If not provided, defaults to the ID of the OidcEndPoint.  # noqa: E501

        :param name: The name of this OidcEndPoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oidc_type(self):
        """Gets the oidc_type of this OidcEndPoint.  # noqa: E501

        Type used to distinguish the OIDC end-points by IDP.  # noqa: E501

        :return: The oidc_type of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._oidc_type

    @oidc_type.setter
    def oidc_type(self, oidc_type):
        """Sets the oidc_type of this OidcEndPoint.

        Type used to distinguish the OIDC end-points by IDP.  # noqa: E501

        :param oidc_type: The oidc_type of this OidcEndPoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["vcenter", "ws_one"]  # noqa: E501
        if oidc_type not in allowed_values:
            raise ValueError(
                "Invalid value for `oidc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(oidc_type, allowed_values)
            )

        self._oidc_type = oidc_type

    @property
    def oidc_uri(self):
        """Gets the oidc_uri of this OidcEndPoint.  # noqa: E501

        URI of the OpenID Connect end-point.  # noqa: E501

        :return: The oidc_uri of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._oidc_uri

    @oidc_uri.setter
    def oidc_uri(self, oidc_uri):
        """Sets the oidc_uri of this OidcEndPoint.

        URI of the OpenID Connect end-point.  # noqa: E501

        :param oidc_uri: The oidc_uri of this OidcEndPoint.  # noqa: E501
        :type: str
        """
        if oidc_uri is None:
            raise ValueError("Invalid value for `oidc_uri`, must not be `None`")  # noqa: E501

        self._oidc_uri = oidc_uri

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this OidcEndPoint.  # noqa: E501

        The URL of the OpenID provider's token endpoint.  # noqa: E501

        :return: The token_endpoint of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this OidcEndPoint.

        The URL of the OpenID provider's token endpoint.  # noqa: E501

        :param token_endpoint: The token_endpoint of this OidcEndPoint.  # noqa: E501
        :type: str
        """

        self._token_endpoint = token_endpoint

    @property
    def thumbprint(self):
        """Gets the thumbprint of this OidcEndPoint.  # noqa: E501

        Thumbprint in SHA-256 format used to verify the server certificate at the URI.   # noqa: E501

        :return: The thumbprint of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this OidcEndPoint.

        Thumbprint in SHA-256 format used to verify the server certificate at the URI.   # noqa: E501

        :param thumbprint: The thumbprint of this OidcEndPoint.  # noqa: E501
        :type: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")  # noqa: E501

        self._thumbprint = thumbprint

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this OidcEndPoint.  # noqa: E501

        The URI where the JWKS document is located that has the key used to validate the JWT signature.   # noqa: E501

        :return: The jwks_uri of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this OidcEndPoint.

        The URI where the JWKS document is located that has the key used to validate the JWT signature.   # noqa: E501

        :param jwks_uri: The jwks_uri of this OidcEndPoint.  # noqa: E501
        :type: str
        """

        self._jwks_uri = jwks_uri

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this OidcEndPoint.  # noqa: E501

        The URL of the OpenID provider's authorization endpoint.  # noqa: E501

        :return: The authorization_endpoint of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this OidcEndPoint.

        The URL of the OpenID provider's authorization endpoint.  # noqa: E501

        :param authorization_endpoint: The authorization_endpoint of this OidcEndPoint.  # noqa: E501
        :type: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def override_roles(self):
        """Gets the override_roles of this OidcEndPoint.  # noqa: E501

        When specified this role or roles are used instead of the nsx-role in the JWT  # noqa: E501

        :return: The override_roles of this OidcEndPoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._override_roles

    @override_roles.setter
    def override_roles(self, override_roles):
        """Sets the override_roles of this OidcEndPoint.

        When specified this role or roles are used instead of the nsx-role in the JWT  # noqa: E501

        :param override_roles: The override_roles of this OidcEndPoint.  # noqa: E501
        :type: list[str]
        """

        self._override_roles = override_roles

    @property
    def issuer(self):
        """Gets the issuer of this OidcEndPoint.  # noqa: E501

        Issuer of the JWT tokens for the given type. This field is fetched from the meta-data located at the oidc_uri.   # noqa: E501

        :return: The issuer of this OidcEndPoint.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OidcEndPoint.

        Issuer of the JWT tokens for the given type. This field is fetched from the meta-data located at the oidc_uri.   # noqa: E501

        :param issuer: The issuer of this OidcEndPoint.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OidcEndPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OidcEndPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
