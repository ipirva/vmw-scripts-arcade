# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class TaskProperties(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'async_response_available': 'bool',
        'description': 'str',
        'start_time': 'int',
        'cancelable': 'bool',
        'request_method': 'str',
        'user': 'str',
        'progress': 'int',
        'message': 'str',
        'request_uri': 'str',
        'id': 'str',
        'end_time': 'int'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'status': 'status',
        'async_response_available': 'async_response_available',
        'description': 'description',
        'start_time': 'start_time',
        'cancelable': 'cancelable',
        'request_method': 'request_method',
        'user': 'user',
        'progress': 'progress',
        'message': 'message',
        'request_uri': 'request_uri',
        'id': 'id',
        'end_time': 'end_time'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, status=None, async_response_available=None, description=None, start_time=None, cancelable=None, request_method=None, user=None, progress=None, message=None, request_uri=None, id=None, end_time=None, *args, **kwargs):  # noqa: E501
        """TaskProperties - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._async_response_available = None
        self._description = None
        self._start_time = None
        self._cancelable = None
        self._request_method = None
        self._user = None
        self._progress = None
        self._message = None
        self._request_uri = None
        self._id = None
        self._end_time = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if async_response_available is not None:
            self.async_response_available = async_response_available
        if description is not None:
            self.description = description
        if start_time is not None:
            self.start_time = start_time
        if cancelable is not None:
            self.cancelable = cancelable
        if request_method is not None:
            self.request_method = request_method
        if user is not None:
            self.user = user
        if progress is not None:
            self.progress = progress
        if message is not None:
            self.message = message
        if request_uri is not None:
            self.request_uri = request_uri
        if id is not None:
            self.id = id
        if end_time is not None:
            self.end_time = end_time
        Resource.__init__(self, *args, **kwargs)

    @property
    def status(self):
        """Gets the status of this TaskProperties.  # noqa: E501

        Current status of the task  # noqa: E501

        :return: The status of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskProperties.

        Current status of the task  # noqa: E501

        :param status: The status of this TaskProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "error", "success", "canceling", "canceled", "killed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def async_response_available(self):
        """Gets the async_response_available of this TaskProperties.  # noqa: E501

        True if response for asynchronous request is available  # noqa: E501

        :return: The async_response_available of this TaskProperties.  # noqa: E501
        :rtype: bool
        """
        return self._async_response_available

    @async_response_available.setter
    def async_response_available(self, async_response_available):
        """Sets the async_response_available of this TaskProperties.

        True if response for asynchronous request is available  # noqa: E501

        :param async_response_available: The async_response_available of this TaskProperties.  # noqa: E501
        :type: bool
        """

        self._async_response_available = async_response_available

    @property
    def description(self):
        """Gets the description of this TaskProperties.  # noqa: E501

        Description of the task  # noqa: E501

        :return: The description of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskProperties.

        Description of the task  # noqa: E501

        :param description: The description of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_time(self):
        """Gets the start_time of this TaskProperties.  # noqa: E501

        The start time of the task in epoch milliseconds  # noqa: E501

        :return: The start_time of this TaskProperties.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskProperties.

        The start time of the task in epoch milliseconds  # noqa: E501

        :param start_time: The start_time of this TaskProperties.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def cancelable(self):
        """Gets the cancelable of this TaskProperties.  # noqa: E501

        True if this task can be canceled  # noqa: E501

        :return: The cancelable of this TaskProperties.  # noqa: E501
        :rtype: bool
        """
        return self._cancelable

    @cancelable.setter
    def cancelable(self, cancelable):
        """Sets the cancelable of this TaskProperties.

        True if this task can be canceled  # noqa: E501

        :param cancelable: The cancelable of this TaskProperties.  # noqa: E501
        :type: bool
        """

        self._cancelable = cancelable

    @property
    def request_method(self):
        """Gets the request_method of this TaskProperties.  # noqa: E501

        HTTP request method  # noqa: E501

        :return: The request_method of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._request_method

    @request_method.setter
    def request_method(self, request_method):
        """Sets the request_method of this TaskProperties.

        HTTP request method  # noqa: E501

        :param request_method: The request_method of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._request_method = request_method

    @property
    def user(self):
        """Gets the user of this TaskProperties.  # noqa: E501

        Name of the user who created this task  # noqa: E501

        :return: The user of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TaskProperties.

        Name of the user who created this task  # noqa: E501

        :param user: The user of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def progress(self):
        """Gets the progress of this TaskProperties.  # noqa: E501

        Task progress if known, from 0 to 100  # noqa: E501

        :return: The progress of this TaskProperties.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TaskProperties.

        Task progress if known, from 0 to 100  # noqa: E501

        :param progress: The progress of this TaskProperties.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def message(self):
        """Gets the message of this TaskProperties.  # noqa: E501

        A message describing the disposition of the task  # noqa: E501

        :return: The message of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TaskProperties.

        A message describing the disposition of the task  # noqa: E501

        :param message: The message of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def request_uri(self):
        """Gets the request_uri of this TaskProperties.  # noqa: E501

        URI of the method invocation that spawned this task  # noqa: E501

        :return: The request_uri of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this TaskProperties.

        URI of the method invocation that spawned this task  # noqa: E501

        :param request_uri: The request_uri of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def id(self):
        """Gets the id of this TaskProperties.  # noqa: E501

        Identifier for this task  # noqa: E501

        :return: The id of this TaskProperties.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskProperties.

        Identifier for this task  # noqa: E501

        :param id: The id of this TaskProperties.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def end_time(self):
        """Gets the end_time of this TaskProperties.  # noqa: E501

        The end time of the task in epoch milliseconds  # noqa: E501

        :return: The end_time of this TaskProperties.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TaskProperties.

        The end time of the task in epoch milliseconds  # noqa: E501

        :param end_time: The end_time of this TaskProperties.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
