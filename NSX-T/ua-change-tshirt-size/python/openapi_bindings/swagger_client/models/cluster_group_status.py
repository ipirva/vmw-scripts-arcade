# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterGroupStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'members': 'list[ClusterGroupMemberStatus]',
        'group_id': 'str',
        'leaders': 'list[ClusterGroupServiceLeader]',
        'group_status': 'str',
        'group_type': 'str'
    }

    attribute_map = {
        'members': 'members',
        'group_id': 'group_id',
        'leaders': 'leaders',
        'group_status': 'group_status',
        'group_type': 'group_type'
    }

    def __init__(self, members=None, group_id=None, leaders=None, group_status=None, group_type=None):  # noqa: E501
        """ClusterGroupStatus - a model defined in Swagger"""  # noqa: E501
        self._members = None
        self._group_id = None
        self._leaders = None
        self._group_status = None
        self._group_type = None
        self.discriminator = None
        if members is not None:
            self.members = members
        if group_id is not None:
            self.group_id = group_id
        if leaders is not None:
            self.leaders = leaders
        if group_status is not None:
            self.group_status = group_status
        if group_type is not None:
            self.group_type = group_type

    @property
    def members(self):
        """Gets the members of this ClusterGroupStatus.  # noqa: E501

        Array of group members and their statuses  # noqa: E501

        :return: The members of this ClusterGroupStatus.  # noqa: E501
        :rtype: list[ClusterGroupMemberStatus]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ClusterGroupStatus.

        Array of group members and their statuses  # noqa: E501

        :param members: The members of this ClusterGroupStatus.  # noqa: E501
        :type: list[ClusterGroupMemberStatus]
        """

        self._members = members

    @property
    def group_id(self):
        """Gets the group_id of this ClusterGroupStatus.  # noqa: E501

        UUID of the group  # noqa: E501

        :return: The group_id of this ClusterGroupStatus.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ClusterGroupStatus.

        UUID of the group  # noqa: E501

        :param group_id: The group_id of this ClusterGroupStatus.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def leaders(self):
        """Gets the leaders of this ClusterGroupStatus.  # noqa: E501

        Array of group leaders and their attributes  # noqa: E501

        :return: The leaders of this ClusterGroupStatus.  # noqa: E501
        :rtype: list[ClusterGroupServiceLeader]
        """
        return self._leaders

    @leaders.setter
    def leaders(self, leaders):
        """Sets the leaders of this ClusterGroupStatus.

        Array of group leaders and their attributes  # noqa: E501

        :param leaders: The leaders of this ClusterGroupStatus.  # noqa: E501
        :type: list[ClusterGroupServiceLeader]
        """

        self._leaders = leaders

    @property
    def group_status(self):
        """Gets the group_status of this ClusterGroupStatus.  # noqa: E501

        Group status  # noqa: E501

        :return: The group_status of this ClusterGroupStatus.  # noqa: E501
        :rtype: str
        """
        return self._group_status

    @group_status.setter
    def group_status(self, group_status):
        """Sets the group_status of this ClusterGroupStatus.

        Group status  # noqa: E501

        :param group_status: The group_status of this ClusterGroupStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["STABLE", "DEGRADED", "UNSTABLE", "UNAVAILABLE"]  # noqa: E501
        if group_status not in allowed_values:
            raise ValueError(
                "Invalid value for `group_status` ({0}), must be one of {1}"  # noqa: E501
                .format(group_status, allowed_values)
            )

        self._group_status = group_status

    @property
    def group_type(self):
        """Gets the group_type of this ClusterGroupStatus.  # noqa: E501

        Type of the group  # noqa: E501

        :return: The group_type of this ClusterGroupStatus.  # noqa: E501
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this ClusterGroupStatus.

        Type of the group  # noqa: E501

        :param group_type: The group_type of this ClusterGroupStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["MANAGER", "CONTROLLER", "POLICY", "HTTPS", "DATASTORE", "CLUSTER_BOOT_MANAGER", "GLOBAL_MANAGER", "ASYNC_REPLICATOR", "MONITORING", "IDPS_REPORTING", "CORFU_NONCONFIG"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"  # noqa: E501
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterGroupStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterGroupStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
