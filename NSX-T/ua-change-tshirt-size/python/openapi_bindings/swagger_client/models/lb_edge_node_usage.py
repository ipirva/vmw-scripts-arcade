# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_node_usage import LbNodeUsage  # noqa: F401,E501

class LbEdgeNodeUsage(LbNodeUsage):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_credit_number': 'int',
        'form_factor': 'str',
        'current_virtual_servers': 'int',
        'current_small_load_balancer_services': 'int',
        'current_pool_members': 'int',
        'severity': 'str',
        'current_pools': 'int',
        'remaining_pool_members': 'int',
        'edge_cluster_id': 'str',
        'remaining_xlarge_load_balancer_services': 'int',
        'remaining_small_load_balancer_services': 'int',
        'current_xlarge_load_balancer_services': 'int',
        'usage_percentage': 'float',
        'current_large_load_balancer_services': 'int',
        'remaining_credit_number': 'int',
        'remaining_large_load_balancer_services': 'int',
        'remaining_medium_load_balancer_services': 'int',
        'current_medium_load_balancer_services': 'int'
    }
    if hasattr(LbNodeUsage, "swagger_types"):
        swagger_types.update(LbNodeUsage.swagger_types)

    attribute_map = {
        'current_credit_number': 'current_credit_number',
        'form_factor': 'form_factor',
        'current_virtual_servers': 'current_virtual_servers',
        'current_small_load_balancer_services': 'current_small_load_balancer_services',
        'current_pool_members': 'current_pool_members',
        'severity': 'severity',
        'current_pools': 'current_pools',
        'remaining_pool_members': 'remaining_pool_members',
        'edge_cluster_id': 'edge_cluster_id',
        'remaining_xlarge_load_balancer_services': 'remaining_xlarge_load_balancer_services',
        'remaining_small_load_balancer_services': 'remaining_small_load_balancer_services',
        'current_xlarge_load_balancer_services': 'current_xlarge_load_balancer_services',
        'usage_percentage': 'usage_percentage',
        'current_large_load_balancer_services': 'current_large_load_balancer_services',
        'remaining_credit_number': 'remaining_credit_number',
        'remaining_large_load_balancer_services': 'remaining_large_load_balancer_services',
        'remaining_medium_load_balancer_services': 'remaining_medium_load_balancer_services',
        'current_medium_load_balancer_services': 'current_medium_load_balancer_services'
    }
    if hasattr(LbNodeUsage, "attribute_map"):
        attribute_map.update(LbNodeUsage.attribute_map)

    def __init__(self, current_credit_number=None, form_factor=None, current_virtual_servers=None, current_small_load_balancer_services=None, current_pool_members=None, severity=None, current_pools=None, remaining_pool_members=None, edge_cluster_id=None, remaining_xlarge_load_balancer_services=None, remaining_small_load_balancer_services=None, current_xlarge_load_balancer_services=None, usage_percentage=None, current_large_load_balancer_services=None, remaining_credit_number=None, remaining_large_load_balancer_services=None, remaining_medium_load_balancer_services=None, current_medium_load_balancer_services=None, *args, **kwargs):  # noqa: E501
        """LbEdgeNodeUsage - a model defined in Swagger"""  # noqa: E501
        self._current_credit_number = None
        self._form_factor = None
        self._current_virtual_servers = None
        self._current_small_load_balancer_services = None
        self._current_pool_members = None
        self._severity = None
        self._current_pools = None
        self._remaining_pool_members = None
        self._edge_cluster_id = None
        self._remaining_xlarge_load_balancer_services = None
        self._remaining_small_load_balancer_services = None
        self._current_xlarge_load_balancer_services = None
        self._usage_percentage = None
        self._current_large_load_balancer_services = None
        self._remaining_credit_number = None
        self._remaining_large_load_balancer_services = None
        self._remaining_medium_load_balancer_services = None
        self._current_medium_load_balancer_services = None
        self.discriminator = None
        if current_credit_number is not None:
            self.current_credit_number = current_credit_number
        if form_factor is not None:
            self.form_factor = form_factor
        if current_virtual_servers is not None:
            self.current_virtual_servers = current_virtual_servers
        if current_small_load_balancer_services is not None:
            self.current_small_load_balancer_services = current_small_load_balancer_services
        if current_pool_members is not None:
            self.current_pool_members = current_pool_members
        if severity is not None:
            self.severity = severity
        if current_pools is not None:
            self.current_pools = current_pools
        if remaining_pool_members is not None:
            self.remaining_pool_members = remaining_pool_members
        if edge_cluster_id is not None:
            self.edge_cluster_id = edge_cluster_id
        if remaining_xlarge_load_balancer_services is not None:
            self.remaining_xlarge_load_balancer_services = remaining_xlarge_load_balancer_services
        if remaining_small_load_balancer_services is not None:
            self.remaining_small_load_balancer_services = remaining_small_load_balancer_services
        if current_xlarge_load_balancer_services is not None:
            self.current_xlarge_load_balancer_services = current_xlarge_load_balancer_services
        if usage_percentage is not None:
            self.usage_percentage = usage_percentage
        if current_large_load_balancer_services is not None:
            self.current_large_load_balancer_services = current_large_load_balancer_services
        if remaining_credit_number is not None:
            self.remaining_credit_number = remaining_credit_number
        if remaining_large_load_balancer_services is not None:
            self.remaining_large_load_balancer_services = remaining_large_load_balancer_services
        if remaining_medium_load_balancer_services is not None:
            self.remaining_medium_load_balancer_services = remaining_medium_load_balancer_services
        if current_medium_load_balancer_services is not None:
            self.current_medium_load_balancer_services = current_medium_load_balancer_services
        LbNodeUsage.__init__(self, *args, **kwargs)

    @property
    def current_credit_number(self):
        """Gets the current_credit_number of this LbEdgeNodeUsage.  # noqa: E501

        The current credit number reflects the current usage on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 = 20.   # noqa: E501

        :return: The current_credit_number of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_credit_number

    @current_credit_number.setter
    def current_credit_number(self, current_credit_number):
        """Sets the current_credit_number of this LbEdgeNodeUsage.

        The current credit number reflects the current usage on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 = 20.   # noqa: E501

        :param current_credit_number: The current_credit_number of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_credit_number = current_credit_number

    @property
    def form_factor(self):
        """Gets the form_factor of this LbEdgeNodeUsage.  # noqa: E501

        The form factor of the given edge node.   # noqa: E501

        :return: The form_factor of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this LbEdgeNodeUsage.

        The form factor of the given edge node.   # noqa: E501

        :param form_factor: The form_factor of this LbEdgeNodeUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL_VIRTUAL_MACHINE", "MEDIUM_VIRTUAL_MACHINE", "LARGE_VIRTUAL_MACHINE", "XLARGE_VIRTUAL_MACHINE", "PHYSICAL_MACHINE"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"  # noqa: E501
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def current_virtual_servers(self):
        """Gets the current_virtual_servers of this LbEdgeNodeUsage.  # noqa: E501

        The number of virtual servers configured on the node.   # noqa: E501

        :return: The current_virtual_servers of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_virtual_servers

    @current_virtual_servers.setter
    def current_virtual_servers(self, current_virtual_servers):
        """Sets the current_virtual_servers of this LbEdgeNodeUsage.

        The number of virtual servers configured on the node.   # noqa: E501

        :param current_virtual_servers: The current_virtual_servers of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_virtual_servers = current_virtual_servers

    @property
    def current_small_load_balancer_services(self):
        """Gets the current_small_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The number of small load balancer services configured on the node.   # noqa: E501

        :return: The current_small_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_small_load_balancer_services

    @current_small_load_balancer_services.setter
    def current_small_load_balancer_services(self, current_small_load_balancer_services):
        """Sets the current_small_load_balancer_services of this LbEdgeNodeUsage.

        The number of small load balancer services configured on the node.   # noqa: E501

        :param current_small_load_balancer_services: The current_small_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_small_load_balancer_services = current_small_load_balancer_services

    @property
    def current_pool_members(self):
        """Gets the current_pool_members of this LbEdgeNodeUsage.  # noqa: E501

        The number of pool members configured on the node.   # noqa: E501

        :return: The current_pool_members of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_pool_members

    @current_pool_members.setter
    def current_pool_members(self, current_pool_members):
        """Sets the current_pool_members of this LbEdgeNodeUsage.

        The number of pool members configured on the node.   # noqa: E501

        :param current_pool_members: The current_pool_members of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_pool_members = current_pool_members

    @property
    def severity(self):
        """Gets the severity of this LbEdgeNodeUsage.  # noqa: E501

        The severity calculation is based on current credit usage percentage of load balancer for one node.   # noqa: E501

        :return: The severity of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LbEdgeNodeUsage.

        The severity calculation is based on current credit usage percentage of load balancer for one node.   # noqa: E501

        :param severity: The severity of this LbEdgeNodeUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["GREEN", "ORANGE", "RED"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def current_pools(self):
        """Gets the current_pools of this LbEdgeNodeUsage.  # noqa: E501

        The number of pools configured on the node.   # noqa: E501

        :return: The current_pools of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_pools

    @current_pools.setter
    def current_pools(self, current_pools):
        """Sets the current_pools of this LbEdgeNodeUsage.

        The number of pools configured on the node.   # noqa: E501

        :param current_pools: The current_pools of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_pools = current_pools

    @property
    def remaining_pool_members(self):
        """Gets the remaining_pool_members of this LbEdgeNodeUsage.  # noqa: E501

        The remaining number of pool members which could be configured on the given edge node.   # noqa: E501

        :return: The remaining_pool_members of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_pool_members

    @remaining_pool_members.setter
    def remaining_pool_members(self, remaining_pool_members):
        """Sets the remaining_pool_members of this LbEdgeNodeUsage.

        The remaining number of pool members which could be configured on the given edge node.   # noqa: E501

        :param remaining_pool_members: The remaining_pool_members of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._remaining_pool_members = remaining_pool_members

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this LbEdgeNodeUsage.  # noqa: E501

        The ID of edge cluster which contains the edge node.   # noqa: E501

        :return: The edge_cluster_id of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this LbEdgeNodeUsage.

        The ID of edge cluster which contains the edge node.   # noqa: E501

        :param edge_cluster_id: The edge_cluster_id of this LbEdgeNodeUsage.  # noqa: E501
        :type: str
        """

        self._edge_cluster_id = edge_cluster_id

    @property
    def remaining_xlarge_load_balancer_services(self):
        """Gets the remaining_xlarge_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The remaining number of xlarge load balancer services which could be configured on the given edge node.   # noqa: E501

        :return: The remaining_xlarge_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_xlarge_load_balancer_services

    @remaining_xlarge_load_balancer_services.setter
    def remaining_xlarge_load_balancer_services(self, remaining_xlarge_load_balancer_services):
        """Sets the remaining_xlarge_load_balancer_services of this LbEdgeNodeUsage.

        The remaining number of xlarge load balancer services which could be configured on the given edge node.   # noqa: E501

        :param remaining_xlarge_load_balancer_services: The remaining_xlarge_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._remaining_xlarge_load_balancer_services = remaining_xlarge_load_balancer_services

    @property
    def remaining_small_load_balancer_services(self):
        """Gets the remaining_small_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The remaining number of small load balancer services which could be configured on the given edge node.   # noqa: E501

        :return: The remaining_small_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_small_load_balancer_services

    @remaining_small_load_balancer_services.setter
    def remaining_small_load_balancer_services(self, remaining_small_load_balancer_services):
        """Sets the remaining_small_load_balancer_services of this LbEdgeNodeUsage.

        The remaining number of small load balancer services which could be configured on the given edge node.   # noqa: E501

        :param remaining_small_load_balancer_services: The remaining_small_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._remaining_small_load_balancer_services = remaining_small_load_balancer_services

    @property
    def current_xlarge_load_balancer_services(self):
        """Gets the current_xlarge_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The number of xlarge load balancer services configured on the node.   # noqa: E501

        :return: The current_xlarge_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_xlarge_load_balancer_services

    @current_xlarge_load_balancer_services.setter
    def current_xlarge_load_balancer_services(self, current_xlarge_load_balancer_services):
        """Sets the current_xlarge_load_balancer_services of this LbEdgeNodeUsage.

        The number of xlarge load balancer services configured on the node.   # noqa: E501

        :param current_xlarge_load_balancer_services: The current_xlarge_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_xlarge_load_balancer_services = current_xlarge_load_balancer_services

    @property
    def usage_percentage(self):
        """Gets the usage_percentage of this LbEdgeNodeUsage.  # noqa: E501

        The usage percentage of the edge node for load balancer. The value is the larger value between load balancer credit usage percentage and pool member usage percentage for the edge node.   # noqa: E501

        :return: The usage_percentage of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: float
        """
        return self._usage_percentage

    @usage_percentage.setter
    def usage_percentage(self, usage_percentage):
        """Sets the usage_percentage of this LbEdgeNodeUsage.

        The usage percentage of the edge node for load balancer. The value is the larger value between load balancer credit usage percentage and pool member usage percentage for the edge node.   # noqa: E501

        :param usage_percentage: The usage_percentage of this LbEdgeNodeUsage.  # noqa: E501
        :type: float
        """

        self._usage_percentage = usage_percentage

    @property
    def current_large_load_balancer_services(self):
        """Gets the current_large_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The number of large load balancer services configured on the node.   # noqa: E501

        :return: The current_large_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_large_load_balancer_services

    @current_large_load_balancer_services.setter
    def current_large_load_balancer_services(self, current_large_load_balancer_services):
        """Sets the current_large_load_balancer_services of this LbEdgeNodeUsage.

        The number of large load balancer services configured on the node.   # noqa: E501

        :param current_large_load_balancer_services: The current_large_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_large_load_balancer_services = current_large_load_balancer_services

    @property
    def remaining_credit_number(self):
        """Gets the remaining_credit_number of this LbEdgeNodeUsage.  # noqa: E501

        The remaining credit number is the remaining credits that can be used for load balancer service configuration. For example, an edge node with form factor LARGE_VIRTUAL_MACHINE has 40 credits, and a medium load balancer instance costs 10 credits. If there are currently 3 medium instances configured, the remaining credit number is 40 - (3 * 10) = 10.   # noqa: E501

        :return: The remaining_credit_number of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_credit_number

    @remaining_credit_number.setter
    def remaining_credit_number(self, remaining_credit_number):
        """Sets the remaining_credit_number of this LbEdgeNodeUsage.

        The remaining credit number is the remaining credits that can be used for load balancer service configuration. For example, an edge node with form factor LARGE_VIRTUAL_MACHINE has 40 credits, and a medium load balancer instance costs 10 credits. If there are currently 3 medium instances configured, the remaining credit number is 40 - (3 * 10) = 10.   # noqa: E501

        :param remaining_credit_number: The remaining_credit_number of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._remaining_credit_number = remaining_credit_number

    @property
    def remaining_large_load_balancer_services(self):
        """Gets the remaining_large_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The remaining number of large load balancer services which could be configured on the given edge node.   # noqa: E501

        :return: The remaining_large_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_large_load_balancer_services

    @remaining_large_load_balancer_services.setter
    def remaining_large_load_balancer_services(self, remaining_large_load_balancer_services):
        """Sets the remaining_large_load_balancer_services of this LbEdgeNodeUsage.

        The remaining number of large load balancer services which could be configured on the given edge node.   # noqa: E501

        :param remaining_large_load_balancer_services: The remaining_large_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._remaining_large_load_balancer_services = remaining_large_load_balancer_services

    @property
    def remaining_medium_load_balancer_services(self):
        """Gets the remaining_medium_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The remaining number of medium load balancer services which could be configured on the given edge node.   # noqa: E501

        :return: The remaining_medium_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_medium_load_balancer_services

    @remaining_medium_load_balancer_services.setter
    def remaining_medium_load_balancer_services(self, remaining_medium_load_balancer_services):
        """Sets the remaining_medium_load_balancer_services of this LbEdgeNodeUsage.

        The remaining number of medium load balancer services which could be configured on the given edge node.   # noqa: E501

        :param remaining_medium_load_balancer_services: The remaining_medium_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._remaining_medium_load_balancer_services = remaining_medium_load_balancer_services

    @property
    def current_medium_load_balancer_services(self):
        """Gets the current_medium_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501

        The number of medium load balancer services configured on the node.   # noqa: E501

        :return: The current_medium_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_medium_load_balancer_services

    @current_medium_load_balancer_services.setter
    def current_medium_load_balancer_services(self, current_medium_load_balancer_services):
        """Sets the current_medium_load_balancer_services of this LbEdgeNodeUsage.

        The number of medium load balancer services configured on the node.   # noqa: E501

        :param current_medium_load_balancer_services: The current_medium_load_balancer_services of this LbEdgeNodeUsage.  # noqa: E501
        :type: int
        """

        self._current_medium_load_balancer_services = current_medium_load_balancer_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbEdgeNodeUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbEdgeNodeUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
