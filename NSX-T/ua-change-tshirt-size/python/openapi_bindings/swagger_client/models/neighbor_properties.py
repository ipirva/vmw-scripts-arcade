# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NeighborProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_name': 'str',
        'system_desc': 'str',
        'system_port_number': 'int',
        'name': 'str',
        'oid': 'str',
        'mgmt_addr': 'str',
        'capabilities': 'str',
        'link_aggregation_status': 'bool',
        'ifindex': 'int',
        'mac': 'str',
        'link_aggregation_capable': 'bool',
        'port_desc': 'str',
        'enabled_capabilities': 'str',
        'link_aggregation_port_id': 'str'
    }

    attribute_map = {
        'system_name': 'system_name',
        'system_desc': 'system_desc',
        'system_port_number': 'system_port_number',
        'name': 'name',
        'oid': 'oid',
        'mgmt_addr': 'mgmt_addr',
        'capabilities': 'capabilities',
        'link_aggregation_status': 'link_aggregation_status',
        'ifindex': 'ifindex',
        'mac': 'mac',
        'link_aggregation_capable': 'link_aggregation_capable',
        'port_desc': 'port_desc',
        'enabled_capabilities': 'enabled_capabilities',
        'link_aggregation_port_id': 'link_aggregation_port_id'
    }

    def __init__(self, system_name=None, system_desc=None, system_port_number=None, name=None, oid=None, mgmt_addr=None, capabilities=None, link_aggregation_status=None, ifindex=None, mac=None, link_aggregation_capable=None, port_desc=None, enabled_capabilities=None, link_aggregation_port_id=None):  # noqa: E501
        """NeighborProperties - a model defined in Swagger"""  # noqa: E501
        self._system_name = None
        self._system_desc = None
        self._system_port_number = None
        self._name = None
        self._oid = None
        self._mgmt_addr = None
        self._capabilities = None
        self._link_aggregation_status = None
        self._ifindex = None
        self._mac = None
        self._link_aggregation_capable = None
        self._port_desc = None
        self._enabled_capabilities = None
        self._link_aggregation_port_id = None
        self.discriminator = None
        if system_name is not None:
            self.system_name = system_name
        if system_desc is not None:
            self.system_desc = system_desc
        if system_port_number is not None:
            self.system_port_number = system_port_number
        if name is not None:
            self.name = name
        if oid is not None:
            self.oid = oid
        if mgmt_addr is not None:
            self.mgmt_addr = mgmt_addr
        if capabilities is not None:
            self.capabilities = capabilities
        if link_aggregation_status is not None:
            self.link_aggregation_status = link_aggregation_status
        if ifindex is not None:
            self.ifindex = ifindex
        if mac is not None:
            self.mac = mac
        if link_aggregation_capable is not None:
            self.link_aggregation_capable = link_aggregation_capable
        if port_desc is not None:
            self.port_desc = port_desc
        if enabled_capabilities is not None:
            self.enabled_capabilities = enabled_capabilities
        if link_aggregation_port_id is not None:
            self.link_aggregation_port_id = link_aggregation_port_id

    @property
    def system_name(self):
        """Gets the system_name of this NeighborProperties.  # noqa: E501

        System name  # noqa: E501

        :return: The system_name of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._system_name

    @system_name.setter
    def system_name(self, system_name):
        """Sets the system_name of this NeighborProperties.

        System name  # noqa: E501

        :param system_name: The system_name of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._system_name = system_name

    @property
    def system_desc(self):
        """Gets the system_desc of this NeighborProperties.  # noqa: E501

        System description  # noqa: E501

        :return: The system_desc of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._system_desc

    @system_desc.setter
    def system_desc(self, system_desc):
        """Sets the system_desc of this NeighborProperties.

        System description  # noqa: E501

        :param system_desc: The system_desc of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._system_desc = system_desc

    @property
    def system_port_number(self):
        """Gets the system_port_number of this NeighborProperties.  # noqa: E501

        System port number  # noqa: E501

        :return: The system_port_number of this NeighborProperties.  # noqa: E501
        :rtype: int
        """
        return self._system_port_number

    @system_port_number.setter
    def system_port_number(self, system_port_number):
        """Sets the system_port_number of this NeighborProperties.

        System port number  # noqa: E501

        :param system_port_number: The system_port_number of this NeighborProperties.  # noqa: E501
        :type: int
        """

        self._system_port_number = system_port_number

    @property
    def name(self):
        """Gets the name of this NeighborProperties.  # noqa: E501

        Interface name  # noqa: E501

        :return: The name of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NeighborProperties.

        Interface name  # noqa: E501

        :param name: The name of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def oid(self):
        """Gets the oid of this NeighborProperties.  # noqa: E501

        Object identifier  # noqa: E501

        :return: The oid of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this NeighborProperties.

        Object identifier  # noqa: E501

        :param oid: The oid of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def mgmt_addr(self):
        """Gets the mgmt_addr of this NeighborProperties.  # noqa: E501

        Management address  # noqa: E501

        :return: The mgmt_addr of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_addr

    @mgmt_addr.setter
    def mgmt_addr(self, mgmt_addr):
        """Sets the mgmt_addr of this NeighborProperties.

        Management address  # noqa: E501

        :param mgmt_addr: The mgmt_addr of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._mgmt_addr = mgmt_addr

    @property
    def capabilities(self):
        """Gets the capabilities of this NeighborProperties.  # noqa: E501

        Capabilities  # noqa: E501

        :return: The capabilities of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this NeighborProperties.

        Capabilities  # noqa: E501

        :param capabilities: The capabilities of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._capabilities = capabilities

    @property
    def link_aggregation_status(self):
        """Gets the link_aggregation_status of this NeighborProperties.  # noqa: E501

        True if currently in aggregation  # noqa: E501

        :return: The link_aggregation_status of this NeighborProperties.  # noqa: E501
        :rtype: bool
        """
        return self._link_aggregation_status

    @link_aggregation_status.setter
    def link_aggregation_status(self, link_aggregation_status):
        """Sets the link_aggregation_status of this NeighborProperties.

        True if currently in aggregation  # noqa: E501

        :param link_aggregation_status: The link_aggregation_status of this NeighborProperties.  # noqa: E501
        :type: bool
        """

        self._link_aggregation_status = link_aggregation_status

    @property
    def ifindex(self):
        """Gets the ifindex of this NeighborProperties.  # noqa: E501

        Interface index  # noqa: E501

        :return: The ifindex of this NeighborProperties.  # noqa: E501
        :rtype: int
        """
        return self._ifindex

    @ifindex.setter
    def ifindex(self, ifindex):
        """Sets the ifindex of this NeighborProperties.

        Interface index  # noqa: E501

        :param ifindex: The ifindex of this NeighborProperties.  # noqa: E501
        :type: int
        """

        self._ifindex = ifindex

    @property
    def mac(self):
        """Gets the mac of this NeighborProperties.  # noqa: E501

        Interface MAC address  # noqa: E501

        :return: The mac of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this NeighborProperties.

        Interface MAC address  # noqa: E501

        :param mac: The mac of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def link_aggregation_capable(self):
        """Gets the link_aggregation_capable of this NeighborProperties.  # noqa: E501

        Aggregation Capability  # noqa: E501

        :return: The link_aggregation_capable of this NeighborProperties.  # noqa: E501
        :rtype: bool
        """
        return self._link_aggregation_capable

    @link_aggregation_capable.setter
    def link_aggregation_capable(self, link_aggregation_capable):
        """Sets the link_aggregation_capable of this NeighborProperties.

        Aggregation Capability  # noqa: E501

        :param link_aggregation_capable: The link_aggregation_capable of this NeighborProperties.  # noqa: E501
        :type: bool
        """

        self._link_aggregation_capable = link_aggregation_capable

    @property
    def port_desc(self):
        """Gets the port_desc of this NeighborProperties.  # noqa: E501

        Port description  # noqa: E501

        :return: The port_desc of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._port_desc

    @port_desc.setter
    def port_desc(self, port_desc):
        """Sets the port_desc of this NeighborProperties.

        Port description  # noqa: E501

        :param port_desc: The port_desc of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._port_desc = port_desc

    @property
    def enabled_capabilities(self):
        """Gets the enabled_capabilities of this NeighborProperties.  # noqa: E501

        Enabled capabilities  # noqa: E501

        :return: The enabled_capabilities of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._enabled_capabilities

    @enabled_capabilities.setter
    def enabled_capabilities(self, enabled_capabilities):
        """Sets the enabled_capabilities of this NeighborProperties.

        Enabled capabilities  # noqa: E501

        :param enabled_capabilities: The enabled_capabilities of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._enabled_capabilities = enabled_capabilities

    @property
    def link_aggregation_port_id(self):
        """Gets the link_aggregation_port_id of this NeighborProperties.  # noqa: E501

        Aggregation port id  # noqa: E501

        :return: The link_aggregation_port_id of this NeighborProperties.  # noqa: E501
        :rtype: str
        """
        return self._link_aggregation_port_id

    @link_aggregation_port_id.setter
    def link_aggregation_port_id(self, link_aggregation_port_id):
        """Sets the link_aggregation_port_id of this NeighborProperties.

        Aggregation port id  # noqa: E501

        :param link_aggregation_port_id: The link_aggregation_port_id of this NeighborProperties.  # noqa: E501
        :type: str
        """

        self._link_aggregation_port_id = link_aggregation_port_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NeighborProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NeighborProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
