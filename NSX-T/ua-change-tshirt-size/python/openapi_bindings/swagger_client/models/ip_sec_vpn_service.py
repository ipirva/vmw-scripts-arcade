# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IPSecVPNService(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ike_log_level': 'str',
        'logical_router_id': 'str',
        'ipsec_ha_sync': 'bool',
        'bypass_rules': 'list[IPSecVPNPolicyRule]',
        'enabled': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'ike_log_level': 'ike_log_level',
        'logical_router_id': 'logical_router_id',
        'ipsec_ha_sync': 'ipsec_ha_sync',
        'bypass_rules': 'bypass_rules',
        'enabled': 'enabled'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, ike_log_level='INFO', logical_router_id=None, ipsec_ha_sync=True, bypass_rules=None, enabled=True, *args, **kwargs):  # noqa: E501
        """IPSecVPNService - a model defined in Swagger"""  # noqa: E501
        self._ike_log_level = None
        self._logical_router_id = None
        self._ipsec_ha_sync = None
        self._bypass_rules = None
        self._enabled = None
        self.discriminator = None
        if ike_log_level is not None:
            self.ike_log_level = ike_log_level
        self.logical_router_id = logical_router_id
        if ipsec_ha_sync is not None:
            self.ipsec_ha_sync = ipsec_ha_sync
        if bypass_rules is not None:
            self.bypass_rules = bypass_rules
        if enabled is not None:
            self.enabled = enabled
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def ike_log_level(self):
        """Gets the ike_log_level of this IPSecVPNService.  # noqa: E501

        Log level for internet key exchange (IKE).  # noqa: E501

        :return: The ike_log_level of this IPSecVPNService.  # noqa: E501
        :rtype: str
        """
        return self._ike_log_level

    @ike_log_level.setter
    def ike_log_level(self, ike_log_level):
        """Sets the ike_log_level of this IPSecVPNService.

        Log level for internet key exchange (IKE).  # noqa: E501

        :param ike_log_level: The ike_log_level of this IPSecVPNService.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBUG", "INFO", "WARN", "ERROR", "EMERGENCY"]  # noqa: E501
        if ike_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `ike_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(ike_log_level, allowed_values)
            )

        self._ike_log_level = ike_log_level

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this IPSecVPNService.  # noqa: E501

        Logical router id.  # noqa: E501

        :return: The logical_router_id of this IPSecVPNService.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this IPSecVPNService.

        Logical router id.  # noqa: E501

        :param logical_router_id: The logical_router_id of this IPSecVPNService.  # noqa: E501
        :type: str
        """
        if logical_router_id is None:
            raise ValueError("Invalid value for `logical_router_id`, must not be `None`")  # noqa: E501

        self._logical_router_id = logical_router_id

    @property
    def ipsec_ha_sync(self):
        """Gets the ipsec_ha_sync of this IPSecVPNService.  # noqa: E501

        Enable/disable IPSec HA state sync. IPSec HA state sync can be disabled in case there are performance issues with the state sync messages. Default is to enable HA Sync.   # noqa: E501

        :return: The ipsec_ha_sync of this IPSecVPNService.  # noqa: E501
        :rtype: bool
        """
        return self._ipsec_ha_sync

    @ipsec_ha_sync.setter
    def ipsec_ha_sync(self, ipsec_ha_sync):
        """Sets the ipsec_ha_sync of this IPSecVPNService.

        Enable/disable IPSec HA state sync. IPSec HA state sync can be disabled in case there are performance issues with the state sync messages. Default is to enable HA Sync.   # noqa: E501

        :param ipsec_ha_sync: The ipsec_ha_sync of this IPSecVPNService.  # noqa: E501
        :type: bool
        """

        self._ipsec_ha_sync = ipsec_ha_sync

    @property
    def bypass_rules(self):
        """Gets the bypass_rules of this IPSecVPNService.  # noqa: E501

        Bypass policy rules are configured using VPN service. Bypass rules always have higher priority over protect rules and they affect all policy based vpn sessions associated with the IPSec VPN service. Protect rules are defined per policy based vpn session.   # noqa: E501

        :return: The bypass_rules of this IPSecVPNService.  # noqa: E501
        :rtype: list[IPSecVPNPolicyRule]
        """
        return self._bypass_rules

    @bypass_rules.setter
    def bypass_rules(self, bypass_rules):
        """Sets the bypass_rules of this IPSecVPNService.

        Bypass policy rules are configured using VPN service. Bypass rules always have higher priority over protect rules and they affect all policy based vpn sessions associated with the IPSec VPN service. Protect rules are defined per policy based vpn session.   # noqa: E501

        :param bypass_rules: The bypass_rules of this IPSecVPNService.  # noqa: E501
        :type: list[IPSecVPNPolicyRule]
        """

        self._bypass_rules = bypass_rules

    @property
    def enabled(self):
        """Gets the enabled of this IPSecVPNService.  # noqa: E501

        If true, enable VPN services for given logical router.  # noqa: E501

        :return: The enabled of this IPSecVPNService.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IPSecVPNService.

        If true, enable VPN services for given logical router.  # noqa: E501

        :param enabled: The enabled of this IPSecVPNService.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
