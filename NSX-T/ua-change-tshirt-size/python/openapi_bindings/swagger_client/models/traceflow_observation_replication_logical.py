# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.traceflow_observation import TraceflowObservation  # noqa: F401,E501

class TraceflowObservationReplicationLogical(TraceflowObservation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vtep_label': 'int',
        'replication_type': 'str',
        'local_ip_address': 'str',
        'uplink_name': 'str'
    }
    if hasattr(TraceflowObservation, "swagger_types"):
        swagger_types.update(TraceflowObservation.swagger_types)

    attribute_map = {
        'vtep_label': 'vtep_label',
        'replication_type': 'replication_type',
        'local_ip_address': 'local_ip_address',
        'uplink_name': 'uplink_name'
    }
    if hasattr(TraceflowObservation, "attribute_map"):
        attribute_map.update(TraceflowObservation.attribute_map)

    def __init__(self, vtep_label=None, replication_type=None, local_ip_address=None, uplink_name=None, *args, **kwargs):  # noqa: E501
        """TraceflowObservationReplicationLogical - a model defined in Swagger"""  # noqa: E501
        self._vtep_label = None
        self._replication_type = None
        self._local_ip_address = None
        self._uplink_name = None
        self.discriminator = None
        if vtep_label is not None:
            self.vtep_label = vtep_label
        if replication_type is not None:
            self.replication_type = replication_type
        if local_ip_address is not None:
            self.local_ip_address = local_ip_address
        if uplink_name is not None:
            self.uplink_name = uplink_name
        TraceflowObservation.__init__(self, *args, **kwargs)

    @property
    def vtep_label(self):
        """Gets the vtep_label of this TraceflowObservationReplicationLogical.  # noqa: E501

        The label of VTEP  # noqa: E501

        :return: The vtep_label of this TraceflowObservationReplicationLogical.  # noqa: E501
        :rtype: int
        """
        return self._vtep_label

    @vtep_label.setter
    def vtep_label(self, vtep_label):
        """Sets the vtep_label of this TraceflowObservationReplicationLogical.

        The label of VTEP  # noqa: E501

        :param vtep_label: The vtep_label of this TraceflowObservationReplicationLogical.  # noqa: E501
        :type: int
        """

        self._vtep_label = vtep_label

    @property
    def replication_type(self):
        """Gets the replication_type of this TraceflowObservationReplicationLogical.  # noqa: E501

        This field specifies the type of replication message TX_VTEP - Transmit replication to all VTEPs TX_MTEP - Transmit replication to all MTEPs RX - Receive replication  # noqa: E501

        :return: The replication_type of this TraceflowObservationReplicationLogical.  # noqa: E501
        :rtype: str
        """
        return self._replication_type

    @replication_type.setter
    def replication_type(self, replication_type):
        """Sets the replication_type of this TraceflowObservationReplicationLogical.

        This field specifies the type of replication message TX_VTEP - Transmit replication to all VTEPs TX_MTEP - Transmit replication to all MTEPs RX - Receive replication  # noqa: E501

        :param replication_type: The replication_type of this TraceflowObservationReplicationLogical.  # noqa: E501
        :type: str
        """
        allowed_values = ["TX_VTEP", "TX_MTEP", "RX"]  # noqa: E501
        if replication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_type` ({0}), must be one of {1}"  # noqa: E501
                .format(replication_type, allowed_values)
            )

        self._replication_type = replication_type

    @property
    def local_ip_address(self):
        """Gets the local_ip_address of this TraceflowObservationReplicationLogical.  # noqa: E501

        Local IP address of the component that replicates the packet.  # noqa: E501

        :return: The local_ip_address of this TraceflowObservationReplicationLogical.  # noqa: E501
        :rtype: str
        """
        return self._local_ip_address

    @local_ip_address.setter
    def local_ip_address(self, local_ip_address):
        """Sets the local_ip_address of this TraceflowObservationReplicationLogical.

        Local IP address of the component that replicates the packet.  # noqa: E501

        :param local_ip_address: The local_ip_address of this TraceflowObservationReplicationLogical.  # noqa: E501
        :type: str
        """

        self._local_ip_address = local_ip_address

    @property
    def uplink_name(self):
        """Gets the uplink_name of this TraceflowObservationReplicationLogical.  # noqa: E501

        The name of uplink  # noqa: E501

        :return: The uplink_name of this TraceflowObservationReplicationLogical.  # noqa: E501
        :rtype: str
        """
        return self._uplink_name

    @uplink_name.setter
    def uplink_name(self, uplink_name):
        """Sets the uplink_name of this TraceflowObservationReplicationLogical.

        The name of uplink  # noqa: E501

        :param uplink_name: The uplink_name of this TraceflowObservationReplicationLogical.  # noqa: E501
        :type: str
        """

        self._uplink_name = uplink_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceflowObservationReplicationLogical, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceflowObservationReplicationLogical):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
