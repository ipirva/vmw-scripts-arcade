# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.ds_rule import DSRule  # noqa: F401,E501

class FirewallRule(DSRule):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'services': 'list[FirewallService]',
        'context_profiles': 'list[ResourceReference]',
        'extended_sources': 'list[ResourceReference]',
        'section_id': 'str'
    }
    if hasattr(DSRule, "swagger_types"):
        swagger_types.update(DSRule.swagger_types)

    attribute_map = {
        'services': 'services',
        'context_profiles': 'context_profiles',
        'extended_sources': 'extended_sources',
        'section_id': 'section_id'
    }
    if hasattr(DSRule, "attribute_map"):
        attribute_map.update(DSRule.attribute_map)

    def __init__(self, services=None, context_profiles=None, extended_sources=None, section_id=None, *args, **kwargs):  # noqa: E501
        """FirewallRule - a model defined in Swagger"""  # noqa: E501
        self._services = None
        self._context_profiles = None
        self._extended_sources = None
        self._section_id = None
        self.discriminator = None
        if services is not None:
            self.services = services
        if context_profiles is not None:
            self.context_profiles = context_profiles
        if extended_sources is not None:
            self.extended_sources = extended_sources
        if section_id is not None:
            self.section_id = section_id
        DSRule.__init__(self, *args, **kwargs)

    @property
    def services(self):
        """Gets the services of this FirewallRule.  # noqa: E501

        List of the services. Null will be treated as any.  # noqa: E501

        :return: The services of this FirewallRule.  # noqa: E501
        :rtype: list[FirewallService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this FirewallRule.

        List of the services. Null will be treated as any.  # noqa: E501

        :param services: The services of this FirewallRule.  # noqa: E501
        :type: list[FirewallService]
        """

        self._services = services

    @property
    def context_profiles(self):
        """Gets the context_profiles of this FirewallRule.  # noqa: E501

        NS Profile object which accepts attributes and sub-attributes of various network services (ex. L7 AppId, domain name, encryption algorithm) as key value pairs.  # noqa: E501

        :return: The context_profiles of this FirewallRule.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._context_profiles

    @context_profiles.setter
    def context_profiles(self, context_profiles):
        """Sets the context_profiles of this FirewallRule.

        NS Profile object which accepts attributes and sub-attributes of various network services (ex. L7 AppId, domain name, encryption algorithm) as key value pairs.  # noqa: E501

        :param context_profiles: The context_profiles of this FirewallRule.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._context_profiles = context_profiles

    @property
    def extended_sources(self):
        """Gets the extended_sources of this FirewallRule.  # noqa: E501

        List of NSGroups that have end point attributes like AD Groups(SID), process name, process hash etc. For Flash release, only NSGroups containing AD Groups are supported.  # noqa: E501

        :return: The extended_sources of this FirewallRule.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._extended_sources

    @extended_sources.setter
    def extended_sources(self, extended_sources):
        """Sets the extended_sources of this FirewallRule.

        List of NSGroups that have end point attributes like AD Groups(SID), process name, process hash etc. For Flash release, only NSGroups containing AD Groups are supported.  # noqa: E501

        :param extended_sources: The extended_sources of this FirewallRule.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._extended_sources = extended_sources

    @property
    def section_id(self):
        """Gets the section_id of this FirewallRule.  # noqa: E501

        Section Id of the section to which this rule belongs to.  # noqa: E501

        :return: The section_id of this FirewallRule.  # noqa: E501
        :rtype: str
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this FirewallRule.

        Section Id of the section to which this rule belongs to.  # noqa: E501

        :param section_id: The section_id of this FirewallRule.  # noqa: E501
        :type: str
        """

        self._section_id = section_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
