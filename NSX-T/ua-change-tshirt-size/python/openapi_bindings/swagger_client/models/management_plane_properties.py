# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class ManagementPlaneProperties(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'object',
        'secret': 'str',
        'brokers': 'list[ManagementPlaneBrokerProperties]'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'account': 'account',
        'secret': 'secret',
        'brokers': 'brokers'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, account=None, secret=None, brokers=None, *args, **kwargs):  # noqa: E501
        """ManagementPlaneProperties - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._secret = None
        self._brokers = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if secret is not None:
            self.secret = secret
        if brokers is not None:
            self.brokers = brokers
        Resource.__init__(self, *args, **kwargs)

    @property
    def account(self):
        """Gets the account of this ManagementPlaneProperties.  # noqa: E501

        The account name to use when authenticating to the management plane's message bus.  # noqa: E501

        :return: The account of this ManagementPlaneProperties.  # noqa: E501
        :rtype: object
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ManagementPlaneProperties.

        The account name to use when authenticating to the management plane's message bus.  # noqa: E501

        :param account: The account of this ManagementPlaneProperties.  # noqa: E501
        :type: object
        """

        self._account = account

    @property
    def secret(self):
        """Gets the secret of this ManagementPlaneProperties.  # noqa: E501

        The shared secret to use when autnenticating to the management plane's message bus. Not returned in REST responses.  # noqa: E501

        :return: The secret of this ManagementPlaneProperties.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this ManagementPlaneProperties.

        The shared secret to use when autnenticating to the management plane's message bus. Not returned in REST responses.  # noqa: E501

        :param secret: The secret of this ManagementPlaneProperties.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def brokers(self):
        """Gets the brokers of this ManagementPlaneProperties.  # noqa: E501

        The list of messaging brokers this controller is configured with.  # noqa: E501

        :return: The brokers of this ManagementPlaneProperties.  # noqa: E501
        :rtype: list[ManagementPlaneBrokerProperties]
        """
        return self._brokers

    @brokers.setter
    def brokers(self, brokers):
        """Sets the brokers of this ManagementPlaneProperties.

        The list of messaging brokers this controller is configured with.  # noqa: E501

        :param brokers: The brokers of this ManagementPlaneProperties.  # noqa: E501
        :type: list[ManagementPlaneBrokerProperties]
        """

        self._brokers = brokers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagementPlaneProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementPlaneProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
