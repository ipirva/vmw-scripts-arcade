# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class ApplianceProcessData(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'top_process_by_cpu_count': 'int',
        'name': 'str',
        'top_process_by_mem_list': 'list[ProcessInformation]',
        'timestamp': 'int',
        'top_process_by_mem_count': 'int',
        'id': 'str',
        'top_process_by_cpu_list': 'list[ProcessInformation]'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'top_process_by_cpu_count': 'top_process_by_cpu_count',
        'name': 'name',
        'top_process_by_mem_list': 'top_process_by_mem_list',
        'timestamp': 'timestamp',
        'top_process_by_mem_count': 'top_process_by_mem_count',
        'id': 'id',
        'top_process_by_cpu_list': 'top_process_by_cpu_list'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, top_process_by_cpu_count=None, name=None, top_process_by_mem_list=None, timestamp=None, top_process_by_mem_count=None, id=None, top_process_by_cpu_list=None, *args, **kwargs):  # noqa: E501
        """ApplianceProcessData - a model defined in Swagger"""  # noqa: E501
        self._top_process_by_cpu_count = None
        self._name = None
        self._top_process_by_mem_list = None
        self._timestamp = None
        self._top_process_by_mem_count = None
        self._id = None
        self._top_process_by_cpu_list = None
        self.discriminator = None
        if top_process_by_cpu_count is not None:
            self.top_process_by_cpu_count = top_process_by_cpu_count
        if name is not None:
            self.name = name
        if top_process_by_mem_list is not None:
            self.top_process_by_mem_list = top_process_by_mem_list
        if timestamp is not None:
            self.timestamp = timestamp
        if top_process_by_mem_count is not None:
            self.top_process_by_mem_count = top_process_by_mem_count
        if id is not None:
            self.id = id
        if top_process_by_cpu_list is not None:
            self.top_process_by_cpu_list = top_process_by_cpu_list
        Resource.__init__(self, *args, **kwargs)

    @property
    def top_process_by_cpu_count(self):
        """Gets the top_process_by_cpu_count of this ApplianceProcessData.  # noqa: E501

        Display the total count of process.  # noqa: E501

        :return: The top_process_by_cpu_count of this ApplianceProcessData.  # noqa: E501
        :rtype: int
        """
        return self._top_process_by_cpu_count

    @top_process_by_cpu_count.setter
    def top_process_by_cpu_count(self, top_process_by_cpu_count):
        """Sets the top_process_by_cpu_count of this ApplianceProcessData.

        Display the total count of process.  # noqa: E501

        :param top_process_by_cpu_count: The top_process_by_cpu_count of this ApplianceProcessData.  # noqa: E501
        :type: int
        """

        self._top_process_by_cpu_count = top_process_by_cpu_count

    @property
    def name(self):
        """Gets the name of this ApplianceProcessData.  # noqa: E501

        Display the appliance name.  # noqa: E501

        :return: The name of this ApplianceProcessData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplianceProcessData.

        Display the appliance name.  # noqa: E501

        :param name: The name of this ApplianceProcessData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def top_process_by_mem_list(self):
        """Gets the top_process_by_mem_list of this ApplianceProcessData.  # noqa: E501

        Display the top process list by memory.  # noqa: E501

        :return: The top_process_by_mem_list of this ApplianceProcessData.  # noqa: E501
        :rtype: list[ProcessInformation]
        """
        return self._top_process_by_mem_list

    @top_process_by_mem_list.setter
    def top_process_by_mem_list(self, top_process_by_mem_list):
        """Sets the top_process_by_mem_list of this ApplianceProcessData.

        Display the top process list by memory.  # noqa: E501

        :param top_process_by_mem_list: The top_process_by_mem_list of this ApplianceProcessData.  # noqa: E501
        :type: list[ProcessInformation]
        """

        self._top_process_by_mem_list = top_process_by_mem_list

    @property
    def timestamp(self):
        """Gets the timestamp of this ApplianceProcessData.  # noqa: E501

        Timestamp of last modification.  # noqa: E501

        :return: The timestamp of this ApplianceProcessData.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ApplianceProcessData.

        Timestamp of last modification.  # noqa: E501

        :param timestamp: The timestamp of this ApplianceProcessData.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def top_process_by_mem_count(self):
        """Gets the top_process_by_mem_count of this ApplianceProcessData.  # noqa: E501

        Display the total count of process.  # noqa: E501

        :return: The top_process_by_mem_count of this ApplianceProcessData.  # noqa: E501
        :rtype: int
        """
        return self._top_process_by_mem_count

    @top_process_by_mem_count.setter
    def top_process_by_mem_count(self, top_process_by_mem_count):
        """Sets the top_process_by_mem_count of this ApplianceProcessData.

        Display the total count of process.  # noqa: E501

        :param top_process_by_mem_count: The top_process_by_mem_count of this ApplianceProcessData.  # noqa: E501
        :type: int
        """

        self._top_process_by_mem_count = top_process_by_mem_count

    @property
    def id(self):
        """Gets the id of this ApplianceProcessData.  # noqa: E501

        Display the Appliance id.  # noqa: E501

        :return: The id of this ApplianceProcessData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplianceProcessData.

        Display the Appliance id.  # noqa: E501

        :param id: The id of this ApplianceProcessData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def top_process_by_cpu_list(self):
        """Gets the top_process_by_cpu_list of this ApplianceProcessData.  # noqa: E501

        Display the top process list by CPU.  # noqa: E501

        :return: The top_process_by_cpu_list of this ApplianceProcessData.  # noqa: E501
        :rtype: list[ProcessInformation]
        """
        return self._top_process_by_cpu_list

    @top_process_by_cpu_list.setter
    def top_process_by_cpu_list(self, top_process_by_cpu_list):
        """Sets the top_process_by_cpu_list of this ApplianceProcessData.

        Display the top process list by CPU.  # noqa: E501

        :param top_process_by_cpu_list: The top_process_by_cpu_list of this ApplianceProcessData.  # noqa: E501
        :type: list[ProcessInformation]
        """

        self._top_process_by_cpu_list = top_process_by_cpu_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplianceProcessData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceProcessData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
