# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeProgressStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upgrade_bundle_present': 'bool',
        'last_upgrade_step_status': 'object',
        'upgrade_metadata': 'object'
    }

    attribute_map = {
        'upgrade_bundle_present': 'upgrade_bundle_present',
        'last_upgrade_step_status': 'last_upgrade_step_status',
        'upgrade_metadata': 'upgrade_metadata'
    }

    def __init__(self, upgrade_bundle_present=None, last_upgrade_step_status=None, upgrade_metadata=None):  # noqa: E501
        """UpgradeProgressStatus - a model defined in Swagger"""  # noqa: E501
        self._upgrade_bundle_present = None
        self._last_upgrade_step_status = None
        self._upgrade_metadata = None
        self.discriminator = None
        if upgrade_bundle_present is not None:
            self.upgrade_bundle_present = upgrade_bundle_present
        if last_upgrade_step_status is not None:
            self.last_upgrade_step_status = last_upgrade_step_status
        if upgrade_metadata is not None:
            self.upgrade_metadata = upgrade_metadata

    @property
    def upgrade_bundle_present(self):
        """Gets the upgrade_bundle_present of this UpgradeProgressStatus.  # noqa: E501

        True if upgrade bundle is present  # noqa: E501

        :return: The upgrade_bundle_present of this UpgradeProgressStatus.  # noqa: E501
        :rtype: bool
        """
        return self._upgrade_bundle_present

    @upgrade_bundle_present.setter
    def upgrade_bundle_present(self, upgrade_bundle_present):
        """Sets the upgrade_bundle_present of this UpgradeProgressStatus.

        True if upgrade bundle is present  # noqa: E501

        :param upgrade_bundle_present: The upgrade_bundle_present of this UpgradeProgressStatus.  # noqa: E501
        :type: bool
        """

        self._upgrade_bundle_present = upgrade_bundle_present

    @property
    def last_upgrade_step_status(self):
        """Gets the last_upgrade_step_status of this UpgradeProgressStatus.  # noqa: E501

        Status of last upgrade step  # noqa: E501

        :return: The last_upgrade_step_status of this UpgradeProgressStatus.  # noqa: E501
        :rtype: object
        """
        return self._last_upgrade_step_status

    @last_upgrade_step_status.setter
    def last_upgrade_step_status(self, last_upgrade_step_status):
        """Sets the last_upgrade_step_status of this UpgradeProgressStatus.

        Status of last upgrade step  # noqa: E501

        :param last_upgrade_step_status: The last_upgrade_step_status of this UpgradeProgressStatus.  # noqa: E501
        :type: object
        """

        self._last_upgrade_step_status = last_upgrade_step_status

    @property
    def upgrade_metadata(self):
        """Gets the upgrade_metadata of this UpgradeProgressStatus.  # noqa: E501

        Meta info of upgrade  # noqa: E501

        :return: The upgrade_metadata of this UpgradeProgressStatus.  # noqa: E501
        :rtype: object
        """
        return self._upgrade_metadata

    @upgrade_metadata.setter
    def upgrade_metadata(self, upgrade_metadata):
        """Sets the upgrade_metadata of this UpgradeProgressStatus.

        Meta info of upgrade  # noqa: E501

        :param upgrade_metadata: The upgrade_metadata of this UpgradeProgressStatus.  # noqa: E501
        :type: object
        """

        self._upgrade_metadata = upgrade_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeProgressStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeProgressStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
