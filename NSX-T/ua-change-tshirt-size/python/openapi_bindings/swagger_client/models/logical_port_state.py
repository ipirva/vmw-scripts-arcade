# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogicalPortState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transport_node_ids': 'list[str]',
        'attachment': 'LogicalPortAttachmentState',
        'duplicate_bindings': 'list[DuplicateAddressBindingEntry]',
        'discovered_bindings': 'list[AddressBindingEntry]',
        'id': 'str',
        'realized_bindings': 'list[AddressBindingEntry]'
    }

    attribute_map = {
        'transport_node_ids': 'transport_node_ids',
        'attachment': 'attachment',
        'duplicate_bindings': 'duplicate_bindings',
        'discovered_bindings': 'discovered_bindings',
        'id': 'id',
        'realized_bindings': 'realized_bindings'
    }

    def __init__(self, transport_node_ids=None, attachment=None, duplicate_bindings=None, discovered_bindings=None, id=None, realized_bindings=None):  # noqa: E501
        """LogicalPortState - a model defined in Swagger"""  # noqa: E501
        self._transport_node_ids = None
        self._attachment = None
        self._duplicate_bindings = None
        self._discovered_bindings = None
        self._id = None
        self._realized_bindings = None
        self.discriminator = None
        if transport_node_ids is not None:
            self.transport_node_ids = transport_node_ids
        if attachment is not None:
            self.attachment = attachment
        if duplicate_bindings is not None:
            self.duplicate_bindings = duplicate_bindings
        if discovered_bindings is not None:
            self.discovered_bindings = discovered_bindings
        self.id = id
        if realized_bindings is not None:
            self.realized_bindings = realized_bindings

    @property
    def transport_node_ids(self):
        """Gets the transport_node_ids of this LogicalPortState.  # noqa: E501

        Identifiers of the transport node where the port is located  # noqa: E501

        :return: The transport_node_ids of this LogicalPortState.  # noqa: E501
        :rtype: list[str]
        """
        return self._transport_node_ids

    @transport_node_ids.setter
    def transport_node_ids(self, transport_node_ids):
        """Sets the transport_node_ids of this LogicalPortState.

        Identifiers of the transport node where the port is located  # noqa: E501

        :param transport_node_ids: The transport_node_ids of this LogicalPortState.  # noqa: E501
        :type: list[str]
        """

        self._transport_node_ids = transport_node_ids

    @property
    def attachment(self):
        """Gets the attachment of this LogicalPortState.  # noqa: E501


        :return: The attachment of this LogicalPortState.  # noqa: E501
        :rtype: LogicalPortAttachmentState
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this LogicalPortState.


        :param attachment: The attachment of this LogicalPortState.  # noqa: E501
        :type: LogicalPortAttachmentState
        """

        self._attachment = attachment

    @property
    def duplicate_bindings(self):
        """Gets the duplicate_bindings of this LogicalPortState.  # noqa: E501

        If any address binding discovered on the port is also found on other port on the same logical switch, then it is included in the duplicate bindings list along with the ID of the port with which it conflicts.   # noqa: E501

        :return: The duplicate_bindings of this LogicalPortState.  # noqa: E501
        :rtype: list[DuplicateAddressBindingEntry]
        """
        return self._duplicate_bindings

    @duplicate_bindings.setter
    def duplicate_bindings(self, duplicate_bindings):
        """Sets the duplicate_bindings of this LogicalPortState.

        If any address binding discovered on the port is also found on other port on the same logical switch, then it is included in the duplicate bindings list along with the ID of the port with which it conflicts.   # noqa: E501

        :param duplicate_bindings: The duplicate_bindings of this LogicalPortState.  # noqa: E501
        :type: list[DuplicateAddressBindingEntry]
        """

        self._duplicate_bindings = duplicate_bindings

    @property
    def discovered_bindings(self):
        """Gets the discovered_bindings of this LogicalPortState.  # noqa: E501

        Contains the list of address bindings for a logical port that were automatically dicovered using various snooping methods like ARP, DHCP etc.   # noqa: E501

        :return: The discovered_bindings of this LogicalPortState.  # noqa: E501
        :rtype: list[AddressBindingEntry]
        """
        return self._discovered_bindings

    @discovered_bindings.setter
    def discovered_bindings(self, discovered_bindings):
        """Sets the discovered_bindings of this LogicalPortState.

        Contains the list of address bindings for a logical port that were automatically dicovered using various snooping methods like ARP, DHCP etc.   # noqa: E501

        :param discovered_bindings: The discovered_bindings of this LogicalPortState.  # noqa: E501
        :type: list[AddressBindingEntry]
        """

        self._discovered_bindings = discovered_bindings

    @property
    def id(self):
        """Gets the id of this LogicalPortState.  # noqa: E501

        Id of the logical port  # noqa: E501

        :return: The id of this LogicalPortState.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogicalPortState.

        Id of the logical port  # noqa: E501

        :param id: The id of this LogicalPortState.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def realized_bindings(self):
        """Gets the realized_bindings of this LogicalPortState.  # noqa: E501

        List of logical port bindings that are realized. This list may be populated from the discovered bindings or manual user specified bindings. This binding configuration can be used by features such as firewall, spoof-guard, traceflow etc.   # noqa: E501

        :return: The realized_bindings of this LogicalPortState.  # noqa: E501
        :rtype: list[AddressBindingEntry]
        """
        return self._realized_bindings

    @realized_bindings.setter
    def realized_bindings(self, realized_bindings):
        """Sets the realized_bindings of this LogicalPortState.

        List of logical port bindings that are realized. This list may be populated from the discovered bindings or manual user specified bindings. This binding configuration can be used by features such as firewall, spoof-guard, traceflow etc.   # noqa: E501

        :param realized_bindings: The realized_bindings of this LogicalPortState.  # noqa: E501
        :type: list[AddressBindingEntry]
        """

        self._realized_bindings = realized_bindings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalPortState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalPortState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
