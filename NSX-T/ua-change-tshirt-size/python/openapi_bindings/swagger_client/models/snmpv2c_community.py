# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Snmpv2cCommunity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'str',
        'community_name': 'str',
        'community_string': 'str'
    }

    attribute_map = {
        'access': 'access',
        'community_name': 'community_name',
        'community_string': 'community_string'
    }

    def __init__(self, access='READ_ONLY', community_name=None, community_string=None):  # noqa: E501
        """Snmpv2cCommunity - a model defined in Swagger"""  # noqa: E501
        self._access = None
        self._community_name = None
        self._community_string = None
        self.discriminator = None
        if access is not None:
            self.access = access
        self.community_name = community_name
        if community_string is not None:
            self.community_string = community_string

    @property
    def access(self):
        """Gets the access of this Snmpv2cCommunity.  # noqa: E501

        Access permissions for polling NSX nodes over SNMP v2c.  # noqa: E501

        :return: The access of this Snmpv2cCommunity.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this Snmpv2cCommunity.

        Access permissions for polling NSX nodes over SNMP v2c.  # noqa: E501

        :param access: The access of this Snmpv2cCommunity.  # noqa: E501
        :type: str
        """
        allowed_values = ["READ_ONLY"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"  # noqa: E501
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def community_name(self):
        """Gets the community_name of this Snmpv2cCommunity.  # noqa: E501

        Unique, non-sensitive community name to identify community.  # noqa: E501

        :return: The community_name of this Snmpv2cCommunity.  # noqa: E501
        :rtype: str
        """
        return self._community_name

    @community_name.setter
    def community_name(self, community_name):
        """Sets the community_name of this Snmpv2cCommunity.

        Unique, non-sensitive community name to identify community.  # noqa: E501

        :param community_name: The community_name of this Snmpv2cCommunity.  # noqa: E501
        :type: str
        """
        if community_name is None:
            raise ValueError("Invalid value for `community_name`, must not be `None`")  # noqa: E501

        self._community_name = community_name

    @property
    def community_string(self):
        """Gets the community_string of this Snmpv2cCommunity.  # noqa: E501

        Community string. This is considered a shared secret and therefore sensitive information. This field is required when adding a community. When updating a community, do not include this field in the request. If this field is present in an update request, it will be considered as a new value for community string.  # noqa: E501

        :return: The community_string of this Snmpv2cCommunity.  # noqa: E501
        :rtype: str
        """
        return self._community_string

    @community_string.setter
    def community_string(self, community_string):
        """Sets the community_string of this Snmpv2cCommunity.

        Community string. This is considered a shared secret and therefore sensitive information. This field is required when adding a community. When updating a community, do not include this field in the request. If this field is present in an update request, it will be considered as a new value for community string.  # noqa: E501

        :param community_string: The community_string of this Snmpv2cCommunity.  # noqa: E501
        :type: str
        """

        self._community_string = community_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snmpv2cCommunity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snmpv2cCommunity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
