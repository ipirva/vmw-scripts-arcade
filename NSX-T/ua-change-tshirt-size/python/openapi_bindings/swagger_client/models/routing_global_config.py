# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.global_configs import GlobalConfigs  # noqa: F401,E501

class RoutingGlobalConfig(GlobalConfigs):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_uplink_mtu': 'int',
        'vdr_mac_nested': 'str',
        'allow_changing_vdr_mac_in_use': 'bool',
        'l3_forwarding_mode': 'str',
        'vdr_mac': 'str'
    }
    if hasattr(GlobalConfigs, "swagger_types"):
        swagger_types.update(GlobalConfigs.swagger_types)

    attribute_map = {
        'logical_uplink_mtu': 'logical_uplink_mtu',
        'vdr_mac_nested': 'vdr_mac_nested',
        'allow_changing_vdr_mac_in_use': 'allow_changing_vdr_mac_in_use',
        'l3_forwarding_mode': 'l3_forwarding_mode',
        'vdr_mac': 'vdr_mac'
    }
    if hasattr(GlobalConfigs, "attribute_map"):
        attribute_map.update(GlobalConfigs.attribute_map)

    def __init__(self, logical_uplink_mtu=1500, vdr_mac_nested='02:50:56:56:44:53', allow_changing_vdr_mac_in_use=False, l3_forwarding_mode='IPV4_ONLY', vdr_mac='02:50:56:56:44:52', *args, **kwargs):  # noqa: E501
        """RoutingGlobalConfig - a model defined in Swagger"""  # noqa: E501
        self._logical_uplink_mtu = None
        self._vdr_mac_nested = None
        self._allow_changing_vdr_mac_in_use = None
        self._l3_forwarding_mode = None
        self._vdr_mac = None
        self.discriminator = None
        if logical_uplink_mtu is not None:
            self.logical_uplink_mtu = logical_uplink_mtu
        if vdr_mac_nested is not None:
            self.vdr_mac_nested = vdr_mac_nested
        if allow_changing_vdr_mac_in_use is not None:
            self.allow_changing_vdr_mac_in_use = allow_changing_vdr_mac_in_use
        self.l3_forwarding_mode = l3_forwarding_mode
        if vdr_mac is not None:
            self.vdr_mac = vdr_mac
        GlobalConfigs.__init__(self, *args, **kwargs)

    @property
    def logical_uplink_mtu(self):
        """Gets the logical_uplink_mtu of this RoutingGlobalConfig.  # noqa: E501

        This is the global default MTU for all the logical uplinks in a NSX domain. Currently logical uplink MTU can only be set globally and applies to the entire NSX domain. There is no option to override this value at transport zone level or transport node level. If this value is not set, the default value of 1500 will be used.  # noqa: E501

        :return: The logical_uplink_mtu of this RoutingGlobalConfig.  # noqa: E501
        :rtype: int
        """
        return self._logical_uplink_mtu

    @logical_uplink_mtu.setter
    def logical_uplink_mtu(self, logical_uplink_mtu):
        """Sets the logical_uplink_mtu of this RoutingGlobalConfig.

        This is the global default MTU for all the logical uplinks in a NSX domain. Currently logical uplink MTU can only be set globally and applies to the entire NSX domain. There is no option to override this value at transport zone level or transport node level. If this value is not set, the default value of 1500 will be used.  # noqa: E501

        :param logical_uplink_mtu: The logical_uplink_mtu of this RoutingGlobalConfig.  # noqa: E501
        :type: int
        """

        self._logical_uplink_mtu = logical_uplink_mtu

    @property
    def vdr_mac_nested(self):
        """Gets the vdr_mac_nested of this RoutingGlobalConfig.  # noqa: E501

        This is the global default MAC address for all VDRs in all transport nodes in a NSX system nested in another NSX system. All transport zones in such a nested NSX system will have the \"nested_nsx\" property being true so that all transport nodes will use this MAC for the VDR ports to avoid conflict with the VDR MAC in the outer NSX system. When the property \"allow_changing_vdr_mac_in_use\" is false, it can not be changed if the current VDR MAC is being used by any transport node in a nested NSX environment. A transport node uses this VDR MAC if any host switch in the node is in an OVERLAY transport zone whose \"nested_nsx\" property is true.  # noqa: E501

        :return: The vdr_mac_nested of this RoutingGlobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._vdr_mac_nested

    @vdr_mac_nested.setter
    def vdr_mac_nested(self, vdr_mac_nested):
        """Sets the vdr_mac_nested of this RoutingGlobalConfig.

        This is the global default MAC address for all VDRs in all transport nodes in a NSX system nested in another NSX system. All transport zones in such a nested NSX system will have the \"nested_nsx\" property being true so that all transport nodes will use this MAC for the VDR ports to avoid conflict with the VDR MAC in the outer NSX system. When the property \"allow_changing_vdr_mac_in_use\" is false, it can not be changed if the current VDR MAC is being used by any transport node in a nested NSX environment. A transport node uses this VDR MAC if any host switch in the node is in an OVERLAY transport zone whose \"nested_nsx\" property is true.  # noqa: E501

        :param vdr_mac_nested: The vdr_mac_nested of this RoutingGlobalConfig.  # noqa: E501
        :type: str
        """

        self._vdr_mac_nested = vdr_mac_nested

    @property
    def allow_changing_vdr_mac_in_use(self):
        """Gets the allow_changing_vdr_mac_in_use of this RoutingGlobalConfig.  # noqa: E501

        When this flag is set to true, it is allowed to change the VDR MAC being used by existing transport nodes in a NSX system. The VDR MAC used by a host switch in a transport node is decided by the OVERLAY transport zone(s) which the host switch joins. If any of the OVERLAY transport zone(s) has \"nested_nsx\" property being true, the MAC in \"vdr_mac_nested\" is used; otherwise the MAC in \"vdr_mac\" is used. Thus the VDR MAC being used by a host switch in a transport node can be changed in below ways. If the host switch is not in any OVERLAY transport zone whose \"nested_nsx\" property is true but is in an OVERLAY transport zone, the first way is updating the \"vdr_mac\" property. The 2nd way is updating one of the OVERLAY tranport zones joined by the host switch to set \"nested_nsx\" property true which will make the host switch use the VDR MAC in \"vdr_mac_nested\". The third way is directly updating the transport node to add an OVERLAY transport zone whose \"nested_nsx\" property is true into the host switch which will also make the host switch use the VDR MAC in \"vdr_mac_nested\". If the host switch is in some OVERLAY transport zone(s) whose \"nested_nsx\" property is true, the first way is updating the \"vdr_mac_nested\" property. The 2nd way is updating all those OVERLAY tranport zones to set \"nested_nsx\" property false which will make the host switch use the VDR MAC in \"vdr_mac\". The third way is directly updating the transport node to remove all those OVERLAY transport zones from the host switch which will also make the host switch use the VDR MAC in \"vdr_mac\". Please note that changing the VDR MAC being used by existing transport nodes will most likely cause traffic disruption and network outage!  # noqa: E501

        :return: The allow_changing_vdr_mac_in_use of this RoutingGlobalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._allow_changing_vdr_mac_in_use

    @allow_changing_vdr_mac_in_use.setter
    def allow_changing_vdr_mac_in_use(self, allow_changing_vdr_mac_in_use):
        """Sets the allow_changing_vdr_mac_in_use of this RoutingGlobalConfig.

        When this flag is set to true, it is allowed to change the VDR MAC being used by existing transport nodes in a NSX system. The VDR MAC used by a host switch in a transport node is decided by the OVERLAY transport zone(s) which the host switch joins. If any of the OVERLAY transport zone(s) has \"nested_nsx\" property being true, the MAC in \"vdr_mac_nested\" is used; otherwise the MAC in \"vdr_mac\" is used. Thus the VDR MAC being used by a host switch in a transport node can be changed in below ways. If the host switch is not in any OVERLAY transport zone whose \"nested_nsx\" property is true but is in an OVERLAY transport zone, the first way is updating the \"vdr_mac\" property. The 2nd way is updating one of the OVERLAY tranport zones joined by the host switch to set \"nested_nsx\" property true which will make the host switch use the VDR MAC in \"vdr_mac_nested\". The third way is directly updating the transport node to add an OVERLAY transport zone whose \"nested_nsx\" property is true into the host switch which will also make the host switch use the VDR MAC in \"vdr_mac_nested\". If the host switch is in some OVERLAY transport zone(s) whose \"nested_nsx\" property is true, the first way is updating the \"vdr_mac_nested\" property. The 2nd way is updating all those OVERLAY tranport zones to set \"nested_nsx\" property false which will make the host switch use the VDR MAC in \"vdr_mac\". The third way is directly updating the transport node to remove all those OVERLAY transport zones from the host switch which will also make the host switch use the VDR MAC in \"vdr_mac\". Please note that changing the VDR MAC being used by existing transport nodes will most likely cause traffic disruption and network outage!  # noqa: E501

        :param allow_changing_vdr_mac_in_use: The allow_changing_vdr_mac_in_use of this RoutingGlobalConfig.  # noqa: E501
        :type: bool
        """

        self._allow_changing_vdr_mac_in_use = allow_changing_vdr_mac_in_use

    @property
    def l3_forwarding_mode(self):
        """Gets the l3_forwarding_mode of this RoutingGlobalConfig.  # noqa: E501

        This setting does not restrict configuration as per other modes. But the forwarding will only work as per the mode set here.  # noqa: E501

        :return: The l3_forwarding_mode of this RoutingGlobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._l3_forwarding_mode

    @l3_forwarding_mode.setter
    def l3_forwarding_mode(self, l3_forwarding_mode):
        """Sets the l3_forwarding_mode of this RoutingGlobalConfig.

        This setting does not restrict configuration as per other modes. But the forwarding will only work as per the mode set here.  # noqa: E501

        :param l3_forwarding_mode: The l3_forwarding_mode of this RoutingGlobalConfig.  # noqa: E501
        :type: str
        """
        if l3_forwarding_mode is None:
            raise ValueError("Invalid value for `l3_forwarding_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["IPV4_ONLY", "IPV4_AND_IPV6"]  # noqa: E501
        if l3_forwarding_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `l3_forwarding_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(l3_forwarding_mode, allowed_values)
            )

        self._l3_forwarding_mode = l3_forwarding_mode

    @property
    def vdr_mac(self):
        """Gets the vdr_mac of this RoutingGlobalConfig.  # noqa: E501

        This is the global default MAC address for all VDRs in all transport nodes in a NSX system. When the property \"allow_changing_vdr_mac_in_use\" is false, it can not be changed if the current VDR MAC is being used by any transport node. A transport node uses this VDR MAC if any host switch in the node is in OVERLAY transport zone(s) but none of the transport zone(s) has \"nested_nsx\" property being true.  # noqa: E501

        :return: The vdr_mac of this RoutingGlobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._vdr_mac

    @vdr_mac.setter
    def vdr_mac(self, vdr_mac):
        """Sets the vdr_mac of this RoutingGlobalConfig.

        This is the global default MAC address for all VDRs in all transport nodes in a NSX system. When the property \"allow_changing_vdr_mac_in_use\" is false, it can not be changed if the current VDR MAC is being used by any transport node. A transport node uses this VDR MAC if any host switch in the node is in OVERLAY transport zone(s) but none of the transport zone(s) has \"nested_nsx\" property being true.  # noqa: E501

        :param vdr_mac: The vdr_mac of this RoutingGlobalConfig.  # noqa: E501
        :type: str
        """

        self._vdr_mac = vdr_mac

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingGlobalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingGlobalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
