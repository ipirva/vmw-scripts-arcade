# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ControlConnStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'control_node_ip': 'str',
        'failure_status': 'str'
    }

    attribute_map = {
        'status': 'status',
        'control_node_ip': 'control_node_ip',
        'failure_status': 'failure_status'
    }

    def __init__(self, status=None, control_node_ip=None, failure_status=None):  # noqa: E501
        """ControlConnStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._control_node_ip = None
        self._failure_status = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if control_node_ip is not None:
            self.control_node_ip = control_node_ip
        if failure_status is not None:
            self.failure_status = failure_status

    @property
    def status(self):
        """Gets the status of this ControlConnStatus.  # noqa: E501

        Status of the control Node for e.g  UP, DOWN.  # noqa: E501

        :return: The status of this ControlConnStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ControlConnStatus.

        Status of the control Node for e.g  UP, DOWN.  # noqa: E501

        :param status: The status of this ControlConnStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def control_node_ip(self):
        """Gets the control_node_ip of this ControlConnStatus.  # noqa: E501

        IP address of the control Node.  # noqa: E501

        :return: The control_node_ip of this ControlConnStatus.  # noqa: E501
        :rtype: str
        """
        return self._control_node_ip

    @control_node_ip.setter
    def control_node_ip(self, control_node_ip):
        """Sets the control_node_ip of this ControlConnStatus.

        IP address of the control Node.  # noqa: E501

        :param control_node_ip: The control_node_ip of this ControlConnStatus.  # noqa: E501
        :type: str
        """

        self._control_node_ip = control_node_ip

    @property
    def failure_status(self):
        """Gets the failure_status of this ControlConnStatus.  # noqa: E501

        Failure status of the control Node for e.g CONNECTION_REFUSED,INCOMPLETE_HOST_CERT.  # noqa: E501

        :return: The failure_status of this ControlConnStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_status

    @failure_status.setter
    def failure_status(self, failure_status):
        """Sets the failure_status of this ControlConnStatus.

        Failure status of the control Node for e.g CONNECTION_REFUSED,INCOMPLETE_HOST_CERT.  # noqa: E501

        :param failure_status: The failure_status of this ControlConnStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["CONNECTION_REFUSED", "INCOMPLETE_HOST_CERT", "INCOMPLETE_CONTROLLER_CERT", "CONTROLLER_REJECTED_HOST_CERT", "HOST_REJECTED_CONTROLLER_CERT", "KEEP_ALIVE_TIMEOUT", "OTHER_SSL_ERROR", "OTHER_ERROR"]  # noqa: E501
        if failure_status not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_status` ({0}), must be one of {1}"  # noqa: E501
                .format(failure_status, allowed_values)
            )

        self._failure_status = failure_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControlConnStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlConnStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
