# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.cluster_role_config import ClusterRoleConfig  # noqa: F401,E501

class ControllerClusterRoleConfig(ClusterRoleConfig):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mpa_msg_client_info': 'MsgClientInfo',
        'host_msg_client_info': 'MsgClientInfo',
        'control_plane_listen_addr': 'ServiceEndpoint',
        'control_cluster_listen_addr': 'ServiceEndpoint'
    }
    if hasattr(ClusterRoleConfig, "swagger_types"):
        swagger_types.update(ClusterRoleConfig.swagger_types)

    attribute_map = {
        'mpa_msg_client_info': 'mpa_msg_client_info',
        'host_msg_client_info': 'host_msg_client_info',
        'control_plane_listen_addr': 'control_plane_listen_addr',
        'control_cluster_listen_addr': 'control_cluster_listen_addr'
    }
    if hasattr(ClusterRoleConfig, "attribute_map"):
        attribute_map.update(ClusterRoleConfig.attribute_map)

    def __init__(self, mpa_msg_client_info=None, host_msg_client_info=None, control_plane_listen_addr=None, control_cluster_listen_addr=None, *args, **kwargs):  # noqa: E501
        """ControllerClusterRoleConfig - a model defined in Swagger"""  # noqa: E501
        self._mpa_msg_client_info = None
        self._host_msg_client_info = None
        self._control_plane_listen_addr = None
        self._control_cluster_listen_addr = None
        self.discriminator = None
        if mpa_msg_client_info is not None:
            self.mpa_msg_client_info = mpa_msg_client_info
        if host_msg_client_info is not None:
            self.host_msg_client_info = host_msg_client_info
        if control_plane_listen_addr is not None:
            self.control_plane_listen_addr = control_plane_listen_addr
        if control_cluster_listen_addr is not None:
            self.control_cluster_listen_addr = control_cluster_listen_addr
        ClusterRoleConfig.__init__(self, *args, **kwargs)

    @property
    def mpa_msg_client_info(self):
        """Gets the mpa_msg_client_info of this ControllerClusterRoleConfig.  # noqa: E501


        :return: The mpa_msg_client_info of this ControllerClusterRoleConfig.  # noqa: E501
        :rtype: MsgClientInfo
        """
        return self._mpa_msg_client_info

    @mpa_msg_client_info.setter
    def mpa_msg_client_info(self, mpa_msg_client_info):
        """Sets the mpa_msg_client_info of this ControllerClusterRoleConfig.


        :param mpa_msg_client_info: The mpa_msg_client_info of this ControllerClusterRoleConfig.  # noqa: E501
        :type: MsgClientInfo
        """

        self._mpa_msg_client_info = mpa_msg_client_info

    @property
    def host_msg_client_info(self):
        """Gets the host_msg_client_info of this ControllerClusterRoleConfig.  # noqa: E501


        :return: The host_msg_client_info of this ControllerClusterRoleConfig.  # noqa: E501
        :rtype: MsgClientInfo
        """
        return self._host_msg_client_info

    @host_msg_client_info.setter
    def host_msg_client_info(self, host_msg_client_info):
        """Sets the host_msg_client_info of this ControllerClusterRoleConfig.


        :param host_msg_client_info: The host_msg_client_info of this ControllerClusterRoleConfig.  # noqa: E501
        :type: MsgClientInfo
        """

        self._host_msg_client_info = host_msg_client_info

    @property
    def control_plane_listen_addr(self):
        """Gets the control_plane_listen_addr of this ControllerClusterRoleConfig.  # noqa: E501


        :return: The control_plane_listen_addr of this ControllerClusterRoleConfig.  # noqa: E501
        :rtype: ServiceEndpoint
        """
        return self._control_plane_listen_addr

    @control_plane_listen_addr.setter
    def control_plane_listen_addr(self, control_plane_listen_addr):
        """Sets the control_plane_listen_addr of this ControllerClusterRoleConfig.


        :param control_plane_listen_addr: The control_plane_listen_addr of this ControllerClusterRoleConfig.  # noqa: E501
        :type: ServiceEndpoint
        """

        self._control_plane_listen_addr = control_plane_listen_addr

    @property
    def control_cluster_listen_addr(self):
        """Gets the control_cluster_listen_addr of this ControllerClusterRoleConfig.  # noqa: E501


        :return: The control_cluster_listen_addr of this ControllerClusterRoleConfig.  # noqa: E501
        :rtype: ServiceEndpoint
        """
        return self._control_cluster_listen_addr

    @control_cluster_listen_addr.setter
    def control_cluster_listen_addr(self, control_cluster_listen_addr):
        """Sets the control_cluster_listen_addr of this ControllerClusterRoleConfig.


        :param control_cluster_listen_addr: The control_cluster_listen_addr of this ControllerClusterRoleConfig.  # noqa: E501
        :type: ServiceEndpoint
        """

        self._control_cluster_listen_addr = control_cluster_listen_addr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControllerClusterRoleConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControllerClusterRoleConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
