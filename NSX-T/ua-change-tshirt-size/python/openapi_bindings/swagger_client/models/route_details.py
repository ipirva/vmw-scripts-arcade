# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RouteDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'med': 'int',
        'next_hop': 'str',
        'network': 'str',
        'weight': 'int',
        'local_pref': 'int',
        'as_path': 'str'
    }

    attribute_map = {
        'med': 'med',
        'next_hop': 'next_hop',
        'network': 'network',
        'weight': 'weight',
        'local_pref': 'local_pref',
        'as_path': 'as_path'
    }

    def __init__(self, med=None, next_hop=None, network=None, weight=None, local_pref=None, as_path=None):  # noqa: E501
        """RouteDetails - a model defined in Swagger"""  # noqa: E501
        self._med = None
        self._next_hop = None
        self._network = None
        self._weight = None
        self._local_pref = None
        self._as_path = None
        self.discriminator = None
        if med is not None:
            self.med = med
        if next_hop is not None:
            self.next_hop = next_hop
        if network is not None:
            self.network = network
        if weight is not None:
            self.weight = weight
        if local_pref is not None:
            self.local_pref = local_pref
        if as_path is not None:
            self.as_path = as_path

    @property
    def med(self):
        """Gets the med of this RouteDetails.  # noqa: E501

        BGP Multi Exit Discriminator attribute.  # noqa: E501

        :return: The med of this RouteDetails.  # noqa: E501
        :rtype: int
        """
        return self._med

    @med.setter
    def med(self, med):
        """Sets the med of this RouteDetails.

        BGP Multi Exit Discriminator attribute.  # noqa: E501

        :param med: The med of this RouteDetails.  # noqa: E501
        :type: int
        """

        self._med = med

    @property
    def next_hop(self):
        """Gets the next_hop of this RouteDetails.  # noqa: E501

        Next hop IP address.  # noqa: E501

        :return: The next_hop of this RouteDetails.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this RouteDetails.

        Next hop IP address.  # noqa: E501

        :param next_hop: The next_hop of this RouteDetails.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def network(self):
        """Gets the network of this RouteDetails.  # noqa: E501

        CIDR network address.  # noqa: E501

        :return: The network of this RouteDetails.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this RouteDetails.

        CIDR network address.  # noqa: E501

        :param network: The network of this RouteDetails.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def weight(self):
        """Gets the weight of this RouteDetails.  # noqa: E501

        BGP Weight attribute.  # noqa: E501

        :return: The weight of this RouteDetails.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this RouteDetails.

        BGP Weight attribute.  # noqa: E501

        :param weight: The weight of this RouteDetails.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def local_pref(self):
        """Gets the local_pref of this RouteDetails.  # noqa: E501

        BGP Local Preference attribute.  # noqa: E501

        :return: The local_pref of this RouteDetails.  # noqa: E501
        :rtype: int
        """
        return self._local_pref

    @local_pref.setter
    def local_pref(self, local_pref):
        """Sets the local_pref of this RouteDetails.

        BGP Local Preference attribute.  # noqa: E501

        :param local_pref: The local_pref of this RouteDetails.  # noqa: E501
        :type: int
        """

        self._local_pref = local_pref

    @property
    def as_path(self):
        """Gets the as_path of this RouteDetails.  # noqa: E501

        BGP AS path attribute.  # noqa: E501

        :return: The as_path of this RouteDetails.  # noqa: E501
        :rtype: str
        """
        return self._as_path

    @as_path.setter
    def as_path(self, as_path):
        """Sets the as_path of this RouteDetails.

        BGP AS path attribute.  # noqa: E501

        :param as_path: The as_path of this RouteDetails.  # noqa: E501
        :type: str
        """

        self._as_path = as_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
