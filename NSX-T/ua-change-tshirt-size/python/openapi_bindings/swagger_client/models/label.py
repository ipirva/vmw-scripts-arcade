# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Label(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'hover': 'bool',
        'navigation': 'str',
        'condition': 'str',
        'icons': 'list[Icon]'
    }

    attribute_map = {
        'text': 'text',
        'hover': 'hover',
        'navigation': 'navigation',
        'condition': 'condition',
        'icons': 'icons'
    }

    def __init__(self, text=None, hover=False, navigation=None, condition=None, icons=None):  # noqa: E501
        """Label - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._hover = None
        self._navigation = None
        self._condition = None
        self._icons = None
        self.discriminator = None
        self.text = text
        if hover is not None:
            self.hover = hover
        if navigation is not None:
            self.navigation = navigation
        if condition is not None:
            self.condition = condition
        if icons is not None:
            self.icons = icons

    @property
    def text(self):
        """Gets the text of this Label.  # noqa: E501

        Text to be displayed at the label.  # noqa: E501

        :return: The text of this Label.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Label.

        Text to be displayed at the label.  # noqa: E501

        :param text: The text of this Label.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def hover(self):
        """Gets the hover of this Label.  # noqa: E501

        If true, displays the label only on hover  # noqa: E501

        :return: The hover of this Label.  # noqa: E501
        :rtype: bool
        """
        return self._hover

    @hover.setter
    def hover(self, hover):
        """Sets the hover of this Label.

        If true, displays the label only on hover  # noqa: E501

        :param hover: The hover of this Label.  # noqa: E501
        :type: bool
        """

        self._hover = hover

    @property
    def navigation(self):
        """Gets the navigation of this Label.  # noqa: E501

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :return: The navigation of this Label.  # noqa: E501
        :rtype: str
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this Label.

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :param navigation: The navigation of this Label.  # noqa: E501
        :type: str
        """

        self._navigation = navigation

    @property
    def condition(self):
        """Gets the condition of this Label.  # noqa: E501

        If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.  # noqa: E501

        :return: The condition of this Label.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Label.

        If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.  # noqa: E501

        :param condition: The condition of this Label.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def icons(self):
        """Gets the icons of this Label.  # noqa: E501

        Icons to be applied at dashboard for the label  # noqa: E501

        :return: The icons of this Label.  # noqa: E501
        :rtype: list[Icon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this Label.

        Icons to be applied at dashboard for the label  # noqa: E501

        :param icons: The icons of this Label.  # noqa: E501
        :type: list[Icon]
        """

        self._icons = icons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Label, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Label):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
