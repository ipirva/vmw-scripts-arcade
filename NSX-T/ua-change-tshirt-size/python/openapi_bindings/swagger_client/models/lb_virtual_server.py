# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class LbVirtualServer(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_list_control': 'LbAccessListControl',
        'ip_protocol': 'str',
        'log_significant_event_only': 'bool',
        'default_pool_member_ports': 'list[str]',
        'persistence_profile_id': 'str',
        'server_ssl_profile_binding': 'ServerSslProfileBinding',
        'application_profile_id': 'str',
        'pool_id': 'str',
        'access_log_enabled': 'bool',
        'max_concurrent_connections': 'int',
        'rule_ids': 'list[str]',
        'max_new_connection_rate': 'int',
        'sorry_pool_id': 'str',
        'client_ssl_profile_binding': 'ClientSslProfileBinding',
        'default_pool_member_port': 'str',
        'ip_address': 'str',
        'port': 'str',
        'enabled': 'bool',
        'ports': 'list[str]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'access_list_control': 'access_list_control',
        'ip_protocol': 'ip_protocol',
        'log_significant_event_only': 'log_significant_event_only',
        'default_pool_member_ports': 'default_pool_member_ports',
        'persistence_profile_id': 'persistence_profile_id',
        'server_ssl_profile_binding': 'server_ssl_profile_binding',
        'application_profile_id': 'application_profile_id',
        'pool_id': 'pool_id',
        'access_log_enabled': 'access_log_enabled',
        'max_concurrent_connections': 'max_concurrent_connections',
        'rule_ids': 'rule_ids',
        'max_new_connection_rate': 'max_new_connection_rate',
        'sorry_pool_id': 'sorry_pool_id',
        'client_ssl_profile_binding': 'client_ssl_profile_binding',
        'default_pool_member_port': 'default_pool_member_port',
        'ip_address': 'ip_address',
        'port': 'port',
        'enabled': 'enabled',
        'ports': 'ports'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, access_list_control=None, ip_protocol='TCP', log_significant_event_only=False, default_pool_member_ports=None, persistence_profile_id=None, server_ssl_profile_binding=None, application_profile_id=None, pool_id=None, access_log_enabled=False, max_concurrent_connections=None, rule_ids=None, max_new_connection_rate=None, sorry_pool_id=None, client_ssl_profile_binding=None, default_pool_member_port=None, ip_address=None, port=None, enabled=True, ports=None, *args, **kwargs):  # noqa: E501
        """LbVirtualServer - a model defined in Swagger"""  # noqa: E501
        self._access_list_control = None
        self._ip_protocol = None
        self._log_significant_event_only = None
        self._default_pool_member_ports = None
        self._persistence_profile_id = None
        self._server_ssl_profile_binding = None
        self._application_profile_id = None
        self._pool_id = None
        self._access_log_enabled = None
        self._max_concurrent_connections = None
        self._rule_ids = None
        self._max_new_connection_rate = None
        self._sorry_pool_id = None
        self._client_ssl_profile_binding = None
        self._default_pool_member_port = None
        self._ip_address = None
        self._port = None
        self._enabled = None
        self._ports = None
        self.discriminator = None
        if access_list_control is not None:
            self.access_list_control = access_list_control
        if ip_protocol is not None:
            self.ip_protocol = ip_protocol
        if log_significant_event_only is not None:
            self.log_significant_event_only = log_significant_event_only
        if default_pool_member_ports is not None:
            self.default_pool_member_ports = default_pool_member_ports
        if persistence_profile_id is not None:
            self.persistence_profile_id = persistence_profile_id
        if server_ssl_profile_binding is not None:
            self.server_ssl_profile_binding = server_ssl_profile_binding
        self.application_profile_id = application_profile_id
        if pool_id is not None:
            self.pool_id = pool_id
        if access_log_enabled is not None:
            self.access_log_enabled = access_log_enabled
        if max_concurrent_connections is not None:
            self.max_concurrent_connections = max_concurrent_connections
        if rule_ids is not None:
            self.rule_ids = rule_ids
        if max_new_connection_rate is not None:
            self.max_new_connection_rate = max_new_connection_rate
        if sorry_pool_id is not None:
            self.sorry_pool_id = sorry_pool_id
        if client_ssl_profile_binding is not None:
            self.client_ssl_profile_binding = client_ssl_profile_binding
        if default_pool_member_port is not None:
            self.default_pool_member_port = default_pool_member_port
        self.ip_address = ip_address
        if port is not None:
            self.port = port
        if enabled is not None:
            self.enabled = enabled
        if ports is not None:
            self.ports = ports
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def access_list_control(self):
        """Gets the access_list_control of this LbVirtualServer.  # noqa: E501


        :return: The access_list_control of this LbVirtualServer.  # noqa: E501
        :rtype: LbAccessListControl
        """
        return self._access_list_control

    @access_list_control.setter
    def access_list_control(self, access_list_control):
        """Sets the access_list_control of this LbVirtualServer.


        :param access_list_control: The access_list_control of this LbVirtualServer.  # noqa: E501
        :type: LbAccessListControl
        """

        self._access_list_control = access_list_control

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this LbVirtualServer.  # noqa: E501

        Assigned Internet Protocol in IP header, TCP, UDP are supported.   # noqa: E501

        :return: The ip_protocol of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this LbVirtualServer.

        Assigned Internet Protocol in IP header, TCP, UDP are supported.   # noqa: E501

        :param ip_protocol: The ip_protocol of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if ip_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_protocol, allowed_values)
            )

        self._ip_protocol = ip_protocol

    @property
    def log_significant_event_only(self):
        """Gets the log_significant_event_only of this LbVirtualServer.  # noqa: E501

        The property log_significant_event_only can take effect only when access_log_enabled is true. If log_significant_event_only is true, significant events are logged in access log. For L4 virtual server, significant event means unsuccessful(error or dropped) TCP/UDP connections. For L7 virtual server, significant event means unsuccessful connections or HTTP/HTTPS requests which have error response code(e.g. 4xx, 5xx).   # noqa: E501

        :return: The log_significant_event_only of this LbVirtualServer.  # noqa: E501
        :rtype: bool
        """
        return self._log_significant_event_only

    @log_significant_event_only.setter
    def log_significant_event_only(self, log_significant_event_only):
        """Sets the log_significant_event_only of this LbVirtualServer.

        The property log_significant_event_only can take effect only when access_log_enabled is true. If log_significant_event_only is true, significant events are logged in access log. For L4 virtual server, significant event means unsuccessful(error or dropped) TCP/UDP connections. For L7 virtual server, significant event means unsuccessful connections or HTTP/HTTPS requests which have error response code(e.g. 4xx, 5xx).   # noqa: E501

        :param log_significant_event_only: The log_significant_event_only of this LbVirtualServer.  # noqa: E501
        :type: bool
        """

        self._log_significant_event_only = log_significant_event_only

    @property
    def default_pool_member_ports(self):
        """Gets the default_pool_member_ports of this LbVirtualServer.  # noqa: E501

        If default_pool_member_ports are configured, both default_pool_member_port and default_pool_member_ports in the response payload would include port settings, notice that the value of default_pool_member_port is the first element of default_pool_member_ports.   # noqa: E501

        :return: The default_pool_member_ports of this LbVirtualServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_pool_member_ports

    @default_pool_member_ports.setter
    def default_pool_member_ports(self, default_pool_member_ports):
        """Sets the default_pool_member_ports of this LbVirtualServer.

        If default_pool_member_ports are configured, both default_pool_member_port and default_pool_member_ports in the response payload would include port settings, notice that the value of default_pool_member_port is the first element of default_pool_member_ports.   # noqa: E501

        :param default_pool_member_ports: The default_pool_member_ports of this LbVirtualServer.  # noqa: E501
        :type: list[str]
        """

        self._default_pool_member_ports = default_pool_member_ports

    @property
    def persistence_profile_id(self):
        """Gets the persistence_profile_id of this LbVirtualServer.  # noqa: E501

        Persistence profile is used to allow related client connections to be sent to the same backend server.   # noqa: E501

        :return: The persistence_profile_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._persistence_profile_id

    @persistence_profile_id.setter
    def persistence_profile_id(self, persistence_profile_id):
        """Sets the persistence_profile_id of this LbVirtualServer.

        Persistence profile is used to allow related client connections to be sent to the same backend server.   # noqa: E501

        :param persistence_profile_id: The persistence_profile_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._persistence_profile_id = persistence_profile_id

    @property
    def server_ssl_profile_binding(self):
        """Gets the server_ssl_profile_binding of this LbVirtualServer.  # noqa: E501


        :return: The server_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :rtype: ServerSslProfileBinding
        """
        return self._server_ssl_profile_binding

    @server_ssl_profile_binding.setter
    def server_ssl_profile_binding(self, server_ssl_profile_binding):
        """Sets the server_ssl_profile_binding of this LbVirtualServer.


        :param server_ssl_profile_binding: The server_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :type: ServerSslProfileBinding
        """

        self._server_ssl_profile_binding = server_ssl_profile_binding

    @property
    def application_profile_id(self):
        """Gets the application_profile_id of this LbVirtualServer.  # noqa: E501

        The application profile defines the application protocol characteristics. It is used to influence how load balancing is performed. Currently, LbFastTCPProfile, LbFastUDPProfile and LbHttpProfile, etc are supported.   # noqa: E501

        :return: The application_profile_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._application_profile_id

    @application_profile_id.setter
    def application_profile_id(self, application_profile_id):
        """Sets the application_profile_id of this LbVirtualServer.

        The application profile defines the application protocol characteristics. It is used to influence how load balancing is performed. Currently, LbFastTCPProfile, LbFastUDPProfile and LbHttpProfile, etc are supported.   # noqa: E501

        :param application_profile_id: The application_profile_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if application_profile_id is None:
            raise ValueError("Invalid value for `application_profile_id`, must not be `None`")  # noqa: E501

        self._application_profile_id = application_profile_id

    @property
    def pool_id(self):
        """Gets the pool_id of this LbVirtualServer.  # noqa: E501

        The server pool(LbPool) contains backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.   # noqa: E501

        :return: The pool_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this LbVirtualServer.

        The server pool(LbPool) contains backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.   # noqa: E501

        :param pool_id: The pool_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._pool_id = pool_id

    @property
    def access_log_enabled(self):
        """Gets the access_log_enabled of this LbVirtualServer.  # noqa: E501

        Whether access log is enabled  # noqa: E501

        :return: The access_log_enabled of this LbVirtualServer.  # noqa: E501
        :rtype: bool
        """
        return self._access_log_enabled

    @access_log_enabled.setter
    def access_log_enabled(self, access_log_enabled):
        """Sets the access_log_enabled of this LbVirtualServer.

        Whether access log is enabled  # noqa: E501

        :param access_log_enabled: The access_log_enabled of this LbVirtualServer.  # noqa: E501
        :type: bool
        """

        self._access_log_enabled = access_log_enabled

    @property
    def max_concurrent_connections(self):
        """Gets the max_concurrent_connections of this LbVirtualServer.  # noqa: E501

        To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.   # noqa: E501

        :return: The max_concurrent_connections of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._max_concurrent_connections

    @max_concurrent_connections.setter
    def max_concurrent_connections(self, max_concurrent_connections):
        """Sets the max_concurrent_connections of this LbVirtualServer.

        To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.   # noqa: E501

        :param max_concurrent_connections: The max_concurrent_connections of this LbVirtualServer.  # noqa: E501
        :type: int
        """

        self._max_concurrent_connections = max_concurrent_connections

    @property
    def rule_ids(self):
        """Gets the rule_ids of this LbVirtualServer.  # noqa: E501

        Load balancer rules allow customization of load balancing behavior using match/action rules. Currently, load balancer rules are supported for only layer 7 virtual servers with LbHttpProfile.   # noqa: E501

        :return: The rule_ids of this LbVirtualServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._rule_ids

    @rule_ids.setter
    def rule_ids(self, rule_ids):
        """Sets the rule_ids of this LbVirtualServer.

        Load balancer rules allow customization of load balancing behavior using match/action rules. Currently, load balancer rules are supported for only layer 7 virtual servers with LbHttpProfile.   # noqa: E501

        :param rule_ids: The rule_ids of this LbVirtualServer.  # noqa: E501
        :type: list[str]
        """

        self._rule_ids = rule_ids

    @property
    def max_new_connection_rate(self):
        """Gets the max_new_connection_rate of this LbVirtualServer.  # noqa: E501

        To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.   # noqa: E501

        :return: The max_new_connection_rate of this LbVirtualServer.  # noqa: E501
        :rtype: int
        """
        return self._max_new_connection_rate

    @max_new_connection_rate.setter
    def max_new_connection_rate(self, max_new_connection_rate):
        """Sets the max_new_connection_rate of this LbVirtualServer.

        To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.   # noqa: E501

        :param max_new_connection_rate: The max_new_connection_rate of this LbVirtualServer.  # noqa: E501
        :type: int
        """

        self._max_new_connection_rate = max_new_connection_rate

    @property
    def sorry_pool_id(self):
        """Gets the sorry_pool_id of this LbVirtualServer.  # noqa: E501

        When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.   # noqa: E501

        :return: The sorry_pool_id of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._sorry_pool_id

    @sorry_pool_id.setter
    def sorry_pool_id(self, sorry_pool_id):
        """Sets the sorry_pool_id of this LbVirtualServer.

        When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.   # noqa: E501

        :param sorry_pool_id: The sorry_pool_id of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._sorry_pool_id = sorry_pool_id

    @property
    def client_ssl_profile_binding(self):
        """Gets the client_ssl_profile_binding of this LbVirtualServer.  # noqa: E501


        :return: The client_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :rtype: ClientSslProfileBinding
        """
        return self._client_ssl_profile_binding

    @client_ssl_profile_binding.setter
    def client_ssl_profile_binding(self, client_ssl_profile_binding):
        """Sets the client_ssl_profile_binding of this LbVirtualServer.


        :param client_ssl_profile_binding: The client_ssl_profile_binding of this LbVirtualServer.  # noqa: E501
        :type: ClientSslProfileBinding
        """

        self._client_ssl_profile_binding = client_ssl_profile_binding

    @property
    def default_pool_member_port(self):
        """Gets the default_pool_member_port of this LbVirtualServer.  # noqa: E501

        This is a deprecated property, please use 'default_pool_member_ports' instead. If default_pool_member_port is configured and default_pool_member_ports are not specified, both default_pool_member_port and default_pool_member_ports in response payload would return the same port value. If both are specified, default_pool_member_ports setting would take effect with higher priority.   # noqa: E501

        :return: The default_pool_member_port of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._default_pool_member_port

    @default_pool_member_port.setter
    def default_pool_member_port(self, default_pool_member_port):
        """Sets the default_pool_member_port of this LbVirtualServer.

        This is a deprecated property, please use 'default_pool_member_ports' instead. If default_pool_member_port is configured and default_pool_member_ports are not specified, both default_pool_member_port and default_pool_member_ports in response payload would return the same port value. If both are specified, default_pool_member_ports setting would take effect with higher priority.   # noqa: E501

        :param default_pool_member_port: The default_pool_member_port of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._default_pool_member_port = default_pool_member_port

    @property
    def ip_address(self):
        """Gets the ip_address of this LbVirtualServer.  # noqa: E501

        virtual server IP address  # noqa: E501

        :return: The ip_address of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this LbVirtualServer.

        virtual server IP address  # noqa: E501

        :param ip_address: The ip_address of this LbVirtualServer.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def port(self):
        """Gets the port of this LbVirtualServer.  # noqa: E501

        This is a deprecated property, please use 'ports' instead. Port setting could be single port for both L7 mode and L4 mode. For L4 mode, a single port range is also supported. The port setting could be a single port or port range such as \"80\", \"1234-1236\". If port is configured and ports are not specified, both port and ports in response payload would return the same port value. If both port and ports are configured, ports setting would take effect with higher priority.   # noqa: E501

        :return: The port of this LbVirtualServer.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LbVirtualServer.

        This is a deprecated property, please use 'ports' instead. Port setting could be single port for both L7 mode and L4 mode. For L4 mode, a single port range is also supported. The port setting could be a single port or port range such as \"80\", \"1234-1236\". If port is configured and ports are not specified, both port and ports in response payload would return the same port value. If both port and ports are configured, ports setting would take effect with higher priority.   # noqa: E501

        :param port: The port of this LbVirtualServer.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def enabled(self):
        """Gets the enabled of this LbVirtualServer.  # noqa: E501

        whether the virtual server is enabled  # noqa: E501

        :return: The enabled of this LbVirtualServer.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LbVirtualServer.

        whether the virtual server is enabled  # noqa: E501

        :param enabled: The enabled of this LbVirtualServer.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def ports(self):
        """Gets the ports of this LbVirtualServer.  # noqa: E501

        Port setting could be a single port for both L7 mode and L4 mode. For L4 mode, multiple ports or port ranges are also supported such as \"80\", \"443\", \"1234-1236\". If ports is configured, both port and ports in the response payload would include port settings, notice that the port field value is the first element of ports.   # noqa: E501

        :return: The ports of this LbVirtualServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this LbVirtualServer.

        Port setting could be a single port for both L7 mode and L4 mode. For L4 mode, multiple ports or port ranges are also supported such as \"80\", \"443\", \"1234-1236\". If ports is configured, both port and ports in the response payload would include port settings, notice that the port field value is the first element of ports.   # noqa: E501

        :param ports: The ports of this LbVirtualServer.  # noqa: E501
        :type: list[str]
        """

        self._ports = ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbVirtualServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbVirtualServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
