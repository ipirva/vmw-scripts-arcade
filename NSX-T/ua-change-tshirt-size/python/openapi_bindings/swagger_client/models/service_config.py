# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ServiceConfig(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_to': 'list[ResourceReference]',
        'precedence': 'int',
        'profiles': 'list[NSXProfileReference]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'applied_to': 'applied_to',
        'precedence': 'precedence',
        'profiles': 'profiles'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, applied_to=None, precedence=None, profiles=None, *args, **kwargs):  # noqa: E501
        """ServiceConfig - a model defined in Swagger"""  # noqa: E501
        self._applied_to = None
        self._precedence = None
        self._profiles = None
        self.discriminator = None
        if applied_to is not None:
            self.applied_to = applied_to
        if precedence is not None:
            self.precedence = precedence
        self.profiles = profiles
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def applied_to(self):
        """Gets the applied_to of this ServiceConfig.  # noqa: E501

        The list of entities that the configurations should be applied to. This can either be a NSGroup or any other entity like TransportNode, LogicalPorts etc.   # noqa: E501

        :return: The applied_to of this ServiceConfig.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._applied_to

    @applied_to.setter
    def applied_to(self, applied_to):
        """Sets the applied_to of this ServiceConfig.

        The list of entities that the configurations should be applied to. This can either be a NSGroup or any other entity like TransportNode, LogicalPorts etc.   # noqa: E501

        :param applied_to: The applied_to of this ServiceConfig.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._applied_to = applied_to

    @property
    def precedence(self):
        """Gets the precedence of this ServiceConfig.  # noqa: E501

        Every ServiceConfig has a priority based upon its precedence value. Lower the value of precedence, higher will be its priority. If user doesnt specify the precedence, it is generated automatically by system. The precedence is generated based upon the type of profile used in ServiceConfig. Precedence are auto-generated in decreasing order with difference of 100. Automatically generated precedence value will be 100 less than the current minimum value of precedence of ServiceConfig of a given profile type in system.There cannot be duplicate precedence for ServiceConfig of same profile type.   # noqa: E501

        :return: The precedence of this ServiceConfig.  # noqa: E501
        :rtype: int
        """
        return self._precedence

    @precedence.setter
    def precedence(self, precedence):
        """Sets the precedence of this ServiceConfig.

        Every ServiceConfig has a priority based upon its precedence value. Lower the value of precedence, higher will be its priority. If user doesnt specify the precedence, it is generated automatically by system. The precedence is generated based upon the type of profile used in ServiceConfig. Precedence are auto-generated in decreasing order with difference of 100. Automatically generated precedence value will be 100 less than the current minimum value of precedence of ServiceConfig of a given profile type in system.There cannot be duplicate precedence for ServiceConfig of same profile type.   # noqa: E501

        :param precedence: The precedence of this ServiceConfig.  # noqa: E501
        :type: int
        """

        self._precedence = precedence

    @property
    def profiles(self):
        """Gets the profiles of this ServiceConfig.  # noqa: E501

        These are the NSX Profiles which will be added to service config, which will be applied to entities/groups provided to applied_to field of service config.   # noqa: E501

        :return: The profiles of this ServiceConfig.  # noqa: E501
        :rtype: list[NSXProfileReference]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this ServiceConfig.

        These are the NSX Profiles which will be added to service config, which will be applied to entities/groups provided to applied_to field of service config.   # noqa: E501

        :param profiles: The profiles of this ServiceConfig.  # noqa: E501
        :type: list[NSXProfileReference]
        """
        if profiles is None:
            raise ValueError("Invalid value for `profiles`, must not be `None`")  # noqa: E501

        self._profiles = profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
