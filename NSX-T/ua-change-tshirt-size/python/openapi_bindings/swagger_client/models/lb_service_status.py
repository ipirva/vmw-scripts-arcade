# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbServiceStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_usage': 'int',
        'memory_usage': 'int',
        'last_update_timestamp': 'int',
        'error_message': 'str',
        'standby_transport_nodes': 'list[str]',
        'service_status': 'str',
        'virtual_servers': 'list[LbVirtualServerStatus]',
        'active_transport_nodes': 'list[str]',
        'instance_detail_per_tn': 'list[LbServiceInstanceDetailPerTransportNode]',
        'pools': 'list[LbPoolStatus]',
        'service_id': 'str'
    }

    attribute_map = {
        'cpu_usage': 'cpu_usage',
        'memory_usage': 'memory_usage',
        'last_update_timestamp': 'last_update_timestamp',
        'error_message': 'error_message',
        'standby_transport_nodes': 'standby_transport_nodes',
        'service_status': 'service_status',
        'virtual_servers': 'virtual_servers',
        'active_transport_nodes': 'active_transport_nodes',
        'instance_detail_per_tn': 'instance_detail_per_tn',
        'pools': 'pools',
        'service_id': 'service_id'
    }

    def __init__(self, cpu_usage=None, memory_usage=None, last_update_timestamp=None, error_message=None, standby_transport_nodes=None, service_status=None, virtual_servers=None, active_transport_nodes=None, instance_detail_per_tn=None, pools=None, service_id=None):  # noqa: E501
        """LbServiceStatus - a model defined in Swagger"""  # noqa: E501
        self._cpu_usage = None
        self._memory_usage = None
        self._last_update_timestamp = None
        self._error_message = None
        self._standby_transport_nodes = None
        self._service_status = None
        self._virtual_servers = None
        self._active_transport_nodes = None
        self._instance_detail_per_tn = None
        self._pools = None
        self._service_id = None
        self.discriminator = None
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if memory_usage is not None:
            self.memory_usage = memory_usage
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if error_message is not None:
            self.error_message = error_message
        if standby_transport_nodes is not None:
            self.standby_transport_nodes = standby_transport_nodes
        if service_status is not None:
            self.service_status = service_status
        if virtual_servers is not None:
            self.virtual_servers = virtual_servers
        if active_transport_nodes is not None:
            self.active_transport_nodes = active_transport_nodes
        if instance_detail_per_tn is not None:
            self.instance_detail_per_tn = instance_detail_per_tn
        if pools is not None:
            self.pools = pools
        self.service_id = service_id

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this LbServiceStatus.  # noqa: E501

        Cpu usage in percentage  # noqa: E501

        :return: The cpu_usage of this LbServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this LbServiceStatus.

        Cpu usage in percentage  # noqa: E501

        :param cpu_usage: The cpu_usage of this LbServiceStatus.  # noqa: E501
        :type: int
        """

        self._cpu_usage = cpu_usage

    @property
    def memory_usage(self):
        """Gets the memory_usage of this LbServiceStatus.  # noqa: E501

        Memory usage in percentage  # noqa: E501

        :return: The memory_usage of this LbServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._memory_usage

    @memory_usage.setter
    def memory_usage(self, memory_usage):
        """Sets the memory_usage of this LbServiceStatus.

        Memory usage in percentage  # noqa: E501

        :param memory_usage: The memory_usage of this LbServiceStatus.  # noqa: E501
        :type: int
        """

        self._memory_usage = memory_usage

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this LbServiceStatus.  # noqa: E501

        Timestamp when the data was last updated  # noqa: E501

        :return: The last_update_timestamp of this LbServiceStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this LbServiceStatus.

        Timestamp when the data was last updated  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this LbServiceStatus.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def error_message(self):
        """Gets the error_message of this LbServiceStatus.  # noqa: E501

        Error message, if available  # noqa: E501

        :return: The error_message of this LbServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this LbServiceStatus.

        Error message, if available  # noqa: E501

        :param error_message: The error_message of this LbServiceStatus.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def standby_transport_nodes(self):
        """Gets the standby_transport_nodes of this LbServiceStatus.  # noqa: E501

        Ids of load balancer service related standby transport nodes  # noqa: E501

        :return: The standby_transport_nodes of this LbServiceStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._standby_transport_nodes

    @standby_transport_nodes.setter
    def standby_transport_nodes(self, standby_transport_nodes):
        """Sets the standby_transport_nodes of this LbServiceStatus.

        Ids of load balancer service related standby transport nodes  # noqa: E501

        :param standby_transport_nodes: The standby_transport_nodes of this LbServiceStatus.  # noqa: E501
        :type: list[str]
        """

        self._standby_transport_nodes = standby_transport_nodes

    @property
    def service_status(self):
        """Gets the service_status of this LbServiceStatus.  # noqa: E501

        UP means the load balancer service is working fine on both transport-nodes(if have); PARTIALLY_UP means that some DLB instances on transport node are working successfully and some instances are not working successfully; DOWN means the load balancer service is down on both transport-nodes (if have), hence the load balancer will not respond to any requests; ERROR means error happens on transport-node(s) or no status is reported from transport-node(s). The load balancer service may be working (or not working); NO_STANDBY means load balancer service is working in one of the transport node while not in the other transport-node (if have). Hence if the load balancer service in the working transport-node goes down, the load balancer service will go down; DETACHED means that the load balancer service has no attachment setting and is not instantiated in any transport nodes; DISABLED means that admin state of load balancer service is DISABLED; UNKNOWN means that no status reported from transport-nodes.The load balancer service may be working(or not working).   # noqa: E501

        :return: The service_status of this LbServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this LbServiceStatus.

        UP means the load balancer service is working fine on both transport-nodes(if have); PARTIALLY_UP means that some DLB instances on transport node are working successfully and some instances are not working successfully; DOWN means the load balancer service is down on both transport-nodes (if have), hence the load balancer will not respond to any requests; ERROR means error happens on transport-node(s) or no status is reported from transport-node(s). The load balancer service may be working (or not working); NO_STANDBY means load balancer service is working in one of the transport node while not in the other transport-node (if have). Hence if the load balancer service in the working transport-node goes down, the load balancer service will go down; DETACHED means that the load balancer service has no attachment setting and is not instantiated in any transport nodes; DISABLED means that admin state of load balancer service is DISABLED; UNKNOWN means that no status reported from transport-nodes.The load balancer service may be working(or not working).   # noqa: E501

        :param service_status: The service_status of this LbServiceStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "PARTIALLY_UP", "DOWN", "ERROR", "NO_STANDBY", "DETACHED", "DISABLED", "UNKNOWN"]  # noqa: E501
        if service_status not in allowed_values:
            raise ValueError(
                "Invalid value for `service_status` ({0}), must be one of {1}"  # noqa: E501
                .format(service_status, allowed_values)
            )

        self._service_status = service_status

    @property
    def virtual_servers(self):
        """Gets the virtual_servers of this LbServiceStatus.  # noqa: E501

        status of load balancer virtual servers  # noqa: E501

        :return: The virtual_servers of this LbServiceStatus.  # noqa: E501
        :rtype: list[LbVirtualServerStatus]
        """
        return self._virtual_servers

    @virtual_servers.setter
    def virtual_servers(self, virtual_servers):
        """Sets the virtual_servers of this LbServiceStatus.

        status of load balancer virtual servers  # noqa: E501

        :param virtual_servers: The virtual_servers of this LbServiceStatus.  # noqa: E501
        :type: list[LbVirtualServerStatus]
        """

        self._virtual_servers = virtual_servers

    @property
    def active_transport_nodes(self):
        """Gets the active_transport_nodes of this LbServiceStatus.  # noqa: E501

        Ids of load balancer service related active transport nodes  # noqa: E501

        :return: The active_transport_nodes of this LbServiceStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_transport_nodes

    @active_transport_nodes.setter
    def active_transport_nodes(self, active_transport_nodes):
        """Sets the active_transport_nodes of this LbServiceStatus.

        Ids of load balancer service related active transport nodes  # noqa: E501

        :param active_transport_nodes: The active_transport_nodes of this LbServiceStatus.  # noqa: E501
        :type: list[str]
        """

        self._active_transport_nodes = active_transport_nodes

    @property
    def instance_detail_per_tn(self):
        """Gets the instance_detail_per_tn of this LbServiceStatus.  # noqa: E501

        Details of load balancer service instance per transport node.   # noqa: E501

        :return: The instance_detail_per_tn of this LbServiceStatus.  # noqa: E501
        :rtype: list[LbServiceInstanceDetailPerTransportNode]
        """
        return self._instance_detail_per_tn

    @instance_detail_per_tn.setter
    def instance_detail_per_tn(self, instance_detail_per_tn):
        """Sets the instance_detail_per_tn of this LbServiceStatus.

        Details of load balancer service instance per transport node.   # noqa: E501

        :param instance_detail_per_tn: The instance_detail_per_tn of this LbServiceStatus.  # noqa: E501
        :type: list[LbServiceInstanceDetailPerTransportNode]
        """

        self._instance_detail_per_tn = instance_detail_per_tn

    @property
    def pools(self):
        """Gets the pools of this LbServiceStatus.  # noqa: E501

        status of load balancer pools  # noqa: E501

        :return: The pools of this LbServiceStatus.  # noqa: E501
        :rtype: list[LbPoolStatus]
        """
        return self._pools

    @pools.setter
    def pools(self, pools):
        """Sets the pools of this LbServiceStatus.

        status of load balancer pools  # noqa: E501

        :param pools: The pools of this LbServiceStatus.  # noqa: E501
        :type: list[LbPoolStatus]
        """

        self._pools = pools

    @property
    def service_id(self):
        """Gets the service_id of this LbServiceStatus.  # noqa: E501

        Load balancer service identifier  # noqa: E501

        :return: The service_id of this LbServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this LbServiceStatus.

        Load balancer service identifier  # noqa: E501

        :param service_id: The service_id of this LbServiceStatus.  # noqa: E501
        :type: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbServiceStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbServiceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
