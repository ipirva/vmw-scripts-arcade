# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SIMacLearningCounters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'macs_learned': 'int',
        'mac_not_learned_packets_dropped': 'int',
        'mac_not_learned_packets_allowed': 'int'
    }

    attribute_map = {
        'macs_learned': 'macs_learned',
        'mac_not_learned_packets_dropped': 'mac_not_learned_packets_dropped',
        'mac_not_learned_packets_allowed': 'mac_not_learned_packets_allowed'
    }

    def __init__(self, macs_learned=None, mac_not_learned_packets_dropped=None, mac_not_learned_packets_allowed=None):  # noqa: E501
        """SIMacLearningCounters - a model defined in Swagger"""  # noqa: E501
        self._macs_learned = None
        self._mac_not_learned_packets_dropped = None
        self._mac_not_learned_packets_allowed = None
        self.discriminator = None
        if macs_learned is not None:
            self.macs_learned = macs_learned
        if mac_not_learned_packets_dropped is not None:
            self.mac_not_learned_packets_dropped = mac_not_learned_packets_dropped
        if mac_not_learned_packets_allowed is not None:
            self.mac_not_learned_packets_allowed = mac_not_learned_packets_allowed

    @property
    def macs_learned(self):
        """Gets the macs_learned of this SIMacLearningCounters.  # noqa: E501

        Number of MACs learned  # noqa: E501

        :return: The macs_learned of this SIMacLearningCounters.  # noqa: E501
        :rtype: int
        """
        return self._macs_learned

    @macs_learned.setter
    def macs_learned(self, macs_learned):
        """Sets the macs_learned of this SIMacLearningCounters.

        Number of MACs learned  # noqa: E501

        :param macs_learned: The macs_learned of this SIMacLearningCounters.  # noqa: E501
        :type: int
        """

        self._macs_learned = macs_learned

    @property
    def mac_not_learned_packets_dropped(self):
        """Gets the mac_not_learned_packets_dropped of this SIMacLearningCounters.  # noqa: E501

        The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP.  # noqa: E501

        :return: The mac_not_learned_packets_dropped of this SIMacLearningCounters.  # noqa: E501
        :rtype: int
        """
        return self._mac_not_learned_packets_dropped

    @mac_not_learned_packets_dropped.setter
    def mac_not_learned_packets_dropped(self, mac_not_learned_packets_dropped):
        """Sets the mac_not_learned_packets_dropped of this SIMacLearningCounters.

        The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP.  # noqa: E501

        :param mac_not_learned_packets_dropped: The mac_not_learned_packets_dropped of this SIMacLearningCounters.  # noqa: E501
        :type: int
        """

        self._mac_not_learned_packets_dropped = mac_not_learned_packets_dropped

    @property
    def mac_not_learned_packets_allowed(self):
        """Gets the mac_not_learned_packets_allowed of this SIMacLearningCounters.  # noqa: E501

        The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW.  # noqa: E501

        :return: The mac_not_learned_packets_allowed of this SIMacLearningCounters.  # noqa: E501
        :rtype: int
        """
        return self._mac_not_learned_packets_allowed

    @mac_not_learned_packets_allowed.setter
    def mac_not_learned_packets_allowed(self, mac_not_learned_packets_allowed):
        """Sets the mac_not_learned_packets_allowed of this SIMacLearningCounters.

        The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW.  # noqa: E501

        :param mac_not_learned_packets_allowed: The mac_not_learned_packets_allowed of this SIMacLearningCounters.  # noqa: E501
        :type: int
        """

        self._mac_not_learned_packets_allowed = mac_not_learned_packets_allowed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SIMacLearningCounters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SIMacLearningCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
