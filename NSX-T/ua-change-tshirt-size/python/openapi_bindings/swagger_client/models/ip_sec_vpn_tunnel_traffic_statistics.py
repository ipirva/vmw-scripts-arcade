# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPSecVPNTunnelTrafficStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packets_sent_other_error': 'int',
        'packets_out': 'int',
        'dropped_packets_out': 'int',
        'integrity_failures': 'int',
        'nomatching_policy_errors': 'int',
        'sa_mismatch_errors_in': 'int',
        'peer_subnet': 'str',
        'replay_errors': 'int',
        'bytes_out': 'int',
        'local_subnet': 'str',
        'dropped_packets_in': 'int',
        'encryption_failures': 'int',
        'sa_mismatch_errors_out': 'int',
        'tunnel_down_reason': 'str',
        'packets_receive_other_error': 'int',
        'bytes_in': 'int',
        'decryption_failures': 'int',
        'seq_number_overflow_error': 'int',
        'packets_in': 'int',
        'tunnel_status': 'str',
        'policy_id': 'str'
    }

    attribute_map = {
        'packets_sent_other_error': 'packets_sent_other_error',
        'packets_out': 'packets_out',
        'dropped_packets_out': 'dropped_packets_out',
        'integrity_failures': 'integrity_failures',
        'nomatching_policy_errors': 'nomatching_policy_errors',
        'sa_mismatch_errors_in': 'sa_mismatch_errors_in',
        'peer_subnet': 'peer_subnet',
        'replay_errors': 'replay_errors',
        'bytes_out': 'bytes_out',
        'local_subnet': 'local_subnet',
        'dropped_packets_in': 'dropped_packets_in',
        'encryption_failures': 'encryption_failures',
        'sa_mismatch_errors_out': 'sa_mismatch_errors_out',
        'tunnel_down_reason': 'tunnel_down_reason',
        'packets_receive_other_error': 'packets_receive_other_error',
        'bytes_in': 'bytes_in',
        'decryption_failures': 'decryption_failures',
        'seq_number_overflow_error': 'seq_number_overflow_error',
        'packets_in': 'packets_in',
        'tunnel_status': 'tunnel_status',
        'policy_id': 'policy_id'
    }

    def __init__(self, packets_sent_other_error=None, packets_out=None, dropped_packets_out=None, integrity_failures=None, nomatching_policy_errors=None, sa_mismatch_errors_in=None, peer_subnet=None, replay_errors=None, bytes_out=None, local_subnet=None, dropped_packets_in=None, encryption_failures=None, sa_mismatch_errors_out=None, tunnel_down_reason=None, packets_receive_other_error=None, bytes_in=None, decryption_failures=None, seq_number_overflow_error=None, packets_in=None, tunnel_status=None, policy_id=None):  # noqa: E501
        """IPSecVPNTunnelTrafficStatistics - a model defined in Swagger"""  # noqa: E501
        self._packets_sent_other_error = None
        self._packets_out = None
        self._dropped_packets_out = None
        self._integrity_failures = None
        self._nomatching_policy_errors = None
        self._sa_mismatch_errors_in = None
        self._peer_subnet = None
        self._replay_errors = None
        self._bytes_out = None
        self._local_subnet = None
        self._dropped_packets_in = None
        self._encryption_failures = None
        self._sa_mismatch_errors_out = None
        self._tunnel_down_reason = None
        self._packets_receive_other_error = None
        self._bytes_in = None
        self._decryption_failures = None
        self._seq_number_overflow_error = None
        self._packets_in = None
        self._tunnel_status = None
        self._policy_id = None
        self.discriminator = None
        if packets_sent_other_error is not None:
            self.packets_sent_other_error = packets_sent_other_error
        if packets_out is not None:
            self.packets_out = packets_out
        if dropped_packets_out is not None:
            self.dropped_packets_out = dropped_packets_out
        if integrity_failures is not None:
            self.integrity_failures = integrity_failures
        if nomatching_policy_errors is not None:
            self.nomatching_policy_errors = nomatching_policy_errors
        if sa_mismatch_errors_in is not None:
            self.sa_mismatch_errors_in = sa_mismatch_errors_in
        if peer_subnet is not None:
            self.peer_subnet = peer_subnet
        if replay_errors is not None:
            self.replay_errors = replay_errors
        if bytes_out is not None:
            self.bytes_out = bytes_out
        if local_subnet is not None:
            self.local_subnet = local_subnet
        if dropped_packets_in is not None:
            self.dropped_packets_in = dropped_packets_in
        if encryption_failures is not None:
            self.encryption_failures = encryption_failures
        if sa_mismatch_errors_out is not None:
            self.sa_mismatch_errors_out = sa_mismatch_errors_out
        if tunnel_down_reason is not None:
            self.tunnel_down_reason = tunnel_down_reason
        if packets_receive_other_error is not None:
            self.packets_receive_other_error = packets_receive_other_error
        if bytes_in is not None:
            self.bytes_in = bytes_in
        if decryption_failures is not None:
            self.decryption_failures = decryption_failures
        if seq_number_overflow_error is not None:
            self.seq_number_overflow_error = seq_number_overflow_error
        if packets_in is not None:
            self.packets_in = packets_in
        if tunnel_status is not None:
            self.tunnel_status = tunnel_status
        if policy_id is not None:
            self.policy_id = policy_id

    @property
    def packets_sent_other_error(self):
        """Gets the packets_sent_other_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of packets dropped while sending for any reason.  # noqa: E501

        :return: The packets_sent_other_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_sent_other_error

    @packets_sent_other_error.setter
    def packets_sent_other_error(self, packets_sent_other_error):
        """Sets the packets_sent_other_error of this IPSecVPNTunnelTrafficStatistics.

        Total number of packets dropped while sending for any reason.  # noqa: E501

        :param packets_sent_other_error: The packets_sent_other_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_sent_other_error = packets_sent_other_error

    @property
    def packets_out(self):
        """Gets the packets_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of outgoing packets on outbound Security association (SA).  # noqa: E501

        :return: The packets_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_out

    @packets_out.setter
    def packets_out(self, packets_out):
        """Sets the packets_out of this IPSecVPNTunnelTrafficStatistics.

        Total number of outgoing packets on outbound Security association (SA).  # noqa: E501

        :param packets_out: The packets_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_out = packets_out

    @property
    def dropped_packets_out(self):
        """Gets the dropped_packets_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of outgoing packets dropped on outbound security association.  # noqa: E501

        :return: The dropped_packets_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._dropped_packets_out

    @dropped_packets_out.setter
    def dropped_packets_out(self, dropped_packets_out):
        """Sets the dropped_packets_out of this IPSecVPNTunnelTrafficStatistics.

        Total number of outgoing packets dropped on outbound security association.  # noqa: E501

        :param dropped_packets_out: The dropped_packets_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._dropped_packets_out = dropped_packets_out

    @property
    def integrity_failures(self):
        """Gets the integrity_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of packets dropped due to integrity failures.  # noqa: E501

        :return: The integrity_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._integrity_failures

    @integrity_failures.setter
    def integrity_failures(self, integrity_failures):
        """Sets the integrity_failures of this IPSecVPNTunnelTrafficStatistics.

        Total number of packets dropped due to integrity failures.  # noqa: E501

        :param integrity_failures: The integrity_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._integrity_failures = integrity_failures

    @property
    def nomatching_policy_errors(self):
        """Gets the nomatching_policy_errors of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Number of packets dropped because of no matching policy is available.  # noqa: E501

        :return: The nomatching_policy_errors of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._nomatching_policy_errors

    @nomatching_policy_errors.setter
    def nomatching_policy_errors(self, nomatching_policy_errors):
        """Sets the nomatching_policy_errors of this IPSecVPNTunnelTrafficStatistics.

        Number of packets dropped because of no matching policy is available.  # noqa: E501

        :param nomatching_policy_errors: The nomatching_policy_errors of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._nomatching_policy_errors = nomatching_policy_errors

    @property
    def sa_mismatch_errors_in(self):
        """Gets the sa_mismatch_errors_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Totoal number of security association (SA) mismatch errors on incoming packets.  # noqa: E501

        :return: The sa_mismatch_errors_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._sa_mismatch_errors_in

    @sa_mismatch_errors_in.setter
    def sa_mismatch_errors_in(self, sa_mismatch_errors_in):
        """Sets the sa_mismatch_errors_in of this IPSecVPNTunnelTrafficStatistics.

        Totoal number of security association (SA) mismatch errors on incoming packets.  # noqa: E501

        :param sa_mismatch_errors_in: The sa_mismatch_errors_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._sa_mismatch_errors_in = sa_mismatch_errors_in

    @property
    def peer_subnet(self):
        """Gets the peer_subnet of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Peer subnet to which a tunnel belongs.  # noqa: E501

        :return: The peer_subnet of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._peer_subnet

    @peer_subnet.setter
    def peer_subnet(self, peer_subnet):
        """Sets the peer_subnet of this IPSecVPNTunnelTrafficStatistics.

        Peer subnet to which a tunnel belongs.  # noqa: E501

        :param peer_subnet: The peer_subnet of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: str
        """

        self._peer_subnet = peer_subnet

    @property
    def replay_errors(self):
        """Gets the replay_errors of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of packets dropped due to replay check on that Security association (SA).  # noqa: E501

        :return: The replay_errors of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._replay_errors

    @replay_errors.setter
    def replay_errors(self, replay_errors):
        """Sets the replay_errors of this IPSecVPNTunnelTrafficStatistics.

        Total number of packets dropped due to replay check on that Security association (SA).  # noqa: E501

        :param replay_errors: The replay_errors of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._replay_errors = replay_errors

    @property
    def bytes_out(self):
        """Gets the bytes_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of outgoing bytes on outbound Security association (SA).  # noqa: E501

        :return: The bytes_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this IPSecVPNTunnelTrafficStatistics.

        Total number of outgoing bytes on outbound Security association (SA).  # noqa: E501

        :param bytes_out: The bytes_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._bytes_out = bytes_out

    @property
    def local_subnet(self):
        """Gets the local_subnet of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Local subnet to which a tunnel belongs.  # noqa: E501

        :return: The local_subnet of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._local_subnet

    @local_subnet.setter
    def local_subnet(self, local_subnet):
        """Sets the local_subnet of this IPSecVPNTunnelTrafficStatistics.

        Local subnet to which a tunnel belongs.  # noqa: E501

        :param local_subnet: The local_subnet of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: str
        """

        self._local_subnet = local_subnet

    @property
    def dropped_packets_in(self):
        """Gets the dropped_packets_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of incoming packets dropped on inbound security association.  # noqa: E501

        :return: The dropped_packets_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._dropped_packets_in

    @dropped_packets_in.setter
    def dropped_packets_in(self, dropped_packets_in):
        """Sets the dropped_packets_in of this IPSecVPNTunnelTrafficStatistics.

        Total number of incoming packets dropped on inbound security association.  # noqa: E501

        :param dropped_packets_in: The dropped_packets_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._dropped_packets_in = dropped_packets_in

    @property
    def encryption_failures(self):
        """Gets the encryption_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of packets dropped because of failure in encryption.  # noqa: E501

        :return: The encryption_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._encryption_failures

    @encryption_failures.setter
    def encryption_failures(self, encryption_failures):
        """Sets the encryption_failures of this IPSecVPNTunnelTrafficStatistics.

        Total number of packets dropped because of failure in encryption.  # noqa: E501

        :param encryption_failures: The encryption_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._encryption_failures = encryption_failures

    @property
    def sa_mismatch_errors_out(self):
        """Gets the sa_mismatch_errors_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Totoal number of security association (SA) mismatch errors on outgoing packets.  # noqa: E501

        :return: The sa_mismatch_errors_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._sa_mismatch_errors_out

    @sa_mismatch_errors_out.setter
    def sa_mismatch_errors_out(self, sa_mismatch_errors_out):
        """Sets the sa_mismatch_errors_out of this IPSecVPNTunnelTrafficStatistics.

        Totoal number of security association (SA) mismatch errors on outgoing packets.  # noqa: E501

        :param sa_mismatch_errors_out: The sa_mismatch_errors_out of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._sa_mismatch_errors_out = sa_mismatch_errors_out

    @property
    def tunnel_down_reason(self):
        """Gets the tunnel_down_reason of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Gives the detailed reason about the tunnel when it is down. If tunnel is UP tunnel down reason will be empty.  # noqa: E501

        :return: The tunnel_down_reason of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_down_reason

    @tunnel_down_reason.setter
    def tunnel_down_reason(self, tunnel_down_reason):
        """Sets the tunnel_down_reason of this IPSecVPNTunnelTrafficStatistics.

        Gives the detailed reason about the tunnel when it is down. If tunnel is UP tunnel down reason will be empty.  # noqa: E501

        :param tunnel_down_reason: The tunnel_down_reason of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: str
        """

        self._tunnel_down_reason = tunnel_down_reason

    @property
    def packets_receive_other_error(self):
        """Gets the packets_receive_other_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of incoming packets dropped on inbound Security association (SA)(misc).  # noqa: E501

        :return: The packets_receive_other_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_receive_other_error

    @packets_receive_other_error.setter
    def packets_receive_other_error(self, packets_receive_other_error):
        """Sets the packets_receive_other_error of this IPSecVPNTunnelTrafficStatistics.

        Total number of incoming packets dropped on inbound Security association (SA)(misc).  # noqa: E501

        :param packets_receive_other_error: The packets_receive_other_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_receive_other_error = packets_receive_other_error

    @property
    def bytes_in(self):
        """Gets the bytes_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of incoming bytes on inbound Security association (SA).  # noqa: E501

        :return: The bytes_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this IPSecVPNTunnelTrafficStatistics.

        Total number of incoming bytes on inbound Security association (SA).  # noqa: E501

        :param bytes_in: The bytes_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._bytes_in = bytes_in

    @property
    def decryption_failures(self):
        """Gets the decryption_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of packets dropped due to decryption failures.  # noqa: E501

        :return: The decryption_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._decryption_failures

    @decryption_failures.setter
    def decryption_failures(self, decryption_failures):
        """Sets the decryption_failures of this IPSecVPNTunnelTrafficStatistics.

        Total number of packets dropped due to decryption failures.  # noqa: E501

        :param decryption_failures: The decryption_failures of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._decryption_failures = decryption_failures

    @property
    def seq_number_overflow_error(self):
        """Gets the seq_number_overflow_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of packets dropped while sending due to overflow in sequence number.  # noqa: E501

        :return: The seq_number_overflow_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._seq_number_overflow_error

    @seq_number_overflow_error.setter
    def seq_number_overflow_error(self, seq_number_overflow_error):
        """Sets the seq_number_overflow_error of this IPSecVPNTunnelTrafficStatistics.

        Total number of packets dropped while sending due to overflow in sequence number.  # noqa: E501

        :param seq_number_overflow_error: The seq_number_overflow_error of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._seq_number_overflow_error = seq_number_overflow_error

    @property
    def packets_in(self):
        """Gets the packets_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Total number of incoming packets on inbound Security association (SA).  # noqa: E501

        :return: The packets_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: int
        """
        return self._packets_in

    @packets_in.setter
    def packets_in(self, packets_in):
        """Sets the packets_in of this IPSecVPNTunnelTrafficStatistics.

        Total number of incoming packets on inbound Security association (SA).  # noqa: E501

        :param packets_in: The packets_in of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: int
        """

        self._packets_in = packets_in

    @property
    def tunnel_status(self):
        """Gets the tunnel_status of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Specifies the status of tunnel. If all the SA (Security association) are negotiated then tunnels status will be UP. If negotiation fails for the SAs status will be DOWN, if SAs are in negotiating phase tunnels status will be NEGOTIATING.  # noqa: E501

        :return: The tunnel_status of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_status

    @tunnel_status.setter
    def tunnel_status(self, tunnel_status):
        """Sets the tunnel_status of this IPSecVPNTunnelTrafficStatistics.

        Specifies the status of tunnel. If all the SA (Security association) are negotiated then tunnels status will be UP. If negotiation fails for the SAs status will be DOWN, if SAs are in negotiating phase tunnels status will be NEGOTIATING.  # noqa: E501

        :param tunnel_status: The tunnel_status of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "NEGOTIATING"]  # noqa: E501
        if tunnel_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tunnel_status` ({0}), must be one of {1}"  # noqa: E501
                .format(tunnel_status, allowed_values)
            )

        self._tunnel_status = tunnel_status

    @property
    def policy_id(self):
        """Gets the policy_id of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501

        Policy UUID of IPSec Tunnel.  # noqa: E501

        :return: The policy_id of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this IPSecVPNTunnelTrafficStatistics.

        Policy UUID of IPSec Tunnel.  # noqa: E501

        :param policy_id: The policy_id of this IPSecVPNTunnelTrafficStatistics.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNTunnelTrafficStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNTunnelTrafficStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
