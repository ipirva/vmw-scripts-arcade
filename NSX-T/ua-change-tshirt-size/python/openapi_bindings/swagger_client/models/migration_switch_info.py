# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationSwitchInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'version': 'str',
        'pnic_count': 'int',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'version': 'version',
        'pnic_count': 'pnic_count',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, kind='DVS', version=None, pnic_count=None, id=None, name=None):  # noqa: E501
        """MigrationSwitchInfo - a model defined in Swagger"""  # noqa: E501
        self._kind = None
        self._version = None
        self._pnic_count = None
        self._id = None
        self._name = None
        self.discriminator = None
        if kind is not None:
            self.kind = kind
        if version is not None:
            self.version = version
        if pnic_count is not None:
            self.pnic_count = pnic_count
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def kind(self):
        """Gets the kind of this MigrationSwitchInfo.  # noqa: E501

        Kind of switch, can be DVS, VSS.  # noqa: E501

        :return: The kind of this MigrationSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MigrationSwitchInfo.

        Kind of switch, can be DVS, VSS.  # noqa: E501

        :param kind: The kind of this MigrationSwitchInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DVS", "VSS"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def version(self):
        """Gets the version of this MigrationSwitchInfo.  # noqa: E501

        Version of the switch to be migrated.  # noqa: E501

        :return: The version of this MigrationSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MigrationSwitchInfo.

        Version of the switch to be migrated.  # noqa: E501

        :param version: The version of this MigrationSwitchInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def pnic_count(self):
        """Gets the pnic_count of this MigrationSwitchInfo.  # noqa: E501

        Number of PNICs associated with this switch.  # noqa: E501

        :return: The pnic_count of this MigrationSwitchInfo.  # noqa: E501
        :rtype: int
        """
        return self._pnic_count

    @pnic_count.setter
    def pnic_count(self, pnic_count):
        """Sets the pnic_count of this MigrationSwitchInfo.

        Number of PNICs associated with this switch.  # noqa: E501

        :param pnic_count: The pnic_count of this MigrationSwitchInfo.  # noqa: E501
        :type: int
        """

        self._pnic_count = pnic_count

    @property
    def id(self):
        """Gets the id of this MigrationSwitchInfo.  # noqa: E501

        Switch Identifier.  # noqa: E501

        :return: The id of this MigrationSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationSwitchInfo.

        Switch Identifier.  # noqa: E501

        :param id: The id of this MigrationSwitchInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MigrationSwitchInfo.  # noqa: E501

        Name of the switch.  # noqa: E501

        :return: The name of this MigrationSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MigrationSwitchInfo.

        Name of the switch.  # noqa: E501

        :param name: The name of this MigrationSwitchInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationSwitchInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationSwitchInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
