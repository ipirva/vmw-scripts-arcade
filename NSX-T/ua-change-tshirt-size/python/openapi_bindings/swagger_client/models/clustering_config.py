# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusteringConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'clustering_type': 'str'
    }

    attribute_map = {
        'clustering_type': 'clustering_type'
    }

    discriminator_value_class_map = {
          'ControlClusteringConfig': 'ControlClusteringConfig'    }

    def __init__(self, clustering_type=None):  # noqa: E501
        """ClusteringConfig - a model defined in Swagger"""  # noqa: E501
        self._clustering_type = None
        self.discriminator = 'clustering_type'
        self.clustering_type = clustering_type

    @property
    def clustering_type(self):
        """Gets the clustering_type of this ClusteringConfig.  # noqa: E501

        Specifies the type of clustering config to be used.   # noqa: E501

        :return: The clustering_type of this ClusteringConfig.  # noqa: E501
        :rtype: str
        """
        return self._clustering_type

    @clustering_type.setter
    def clustering_type(self, clustering_type):
        """Sets the clustering_type of this ClusteringConfig.

        Specifies the type of clustering config to be used.   # noqa: E501

        :param clustering_type: The clustering_type of this ClusteringConfig.  # noqa: E501
        :type: str
        """
        if clustering_type is None:
            raise ValueError("Invalid value for `clustering_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ControlClusteringConfig"]  # noqa: E501
        if clustering_type not in allowed_values:
            raise ValueError(
                "Invalid value for `clustering_type` ({0}), must be one of {1}"  # noqa: E501
                .format(clustering_type, allowed_values)
            )

        self._clustering_type = clustering_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusteringConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusteringConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
