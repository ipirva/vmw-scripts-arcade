# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComputeManagerStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'connection_status': 'str',
        'connection_errors': 'list[ErrorInfo]',
        'oidc_end_point_id': 'str',
        'last_sync_time': 'int',
        'connection_status_details': 'str',
        'registration_errors': 'list[ErrorInfo]',
        'registration_status': 'str'
    }

    attribute_map = {
        'version': 'version',
        'connection_status': 'connection_status',
        'connection_errors': 'connection_errors',
        'oidc_end_point_id': 'oidc_end_point_id',
        'last_sync_time': 'last_sync_time',
        'connection_status_details': 'connection_status_details',
        'registration_errors': 'registration_errors',
        'registration_status': 'registration_status'
    }

    def __init__(self, version=None, connection_status=None, connection_errors=None, oidc_end_point_id=None, last_sync_time=None, connection_status_details=None, registration_errors=None, registration_status=None):  # noqa: E501
        """ComputeManagerStatus - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._connection_status = None
        self._connection_errors = None
        self._oidc_end_point_id = None
        self._last_sync_time = None
        self._connection_status_details = None
        self._registration_errors = None
        self._registration_status = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if connection_status is not None:
            self.connection_status = connection_status
        if connection_errors is not None:
            self.connection_errors = connection_errors
        if oidc_end_point_id is not None:
            self.oidc_end_point_id = oidc_end_point_id
        if last_sync_time is not None:
            self.last_sync_time = last_sync_time
        if connection_status_details is not None:
            self.connection_status_details = connection_status_details
        if registration_errors is not None:
            self.registration_errors = registration_errors
        if registration_status is not None:
            self.registration_status = registration_status

    @property
    def version(self):
        """Gets the version of this ComputeManagerStatus.  # noqa: E501

        Version of the compute manager  # noqa: E501

        :return: The version of this ComputeManagerStatus.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ComputeManagerStatus.

        Version of the compute manager  # noqa: E501

        :param version: The version of this ComputeManagerStatus.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def connection_status(self):
        """Gets the connection_status of this ComputeManagerStatus.  # noqa: E501

        Status of connection with the compute manager  # noqa: E501

        :return: The connection_status of this ComputeManagerStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this ComputeManagerStatus.

        Status of connection with the compute manager  # noqa: E501

        :param connection_status: The connection_status of this ComputeManagerStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "CONNECTING"]  # noqa: E501
        if connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_status, allowed_values)
            )

        self._connection_status = connection_status

    @property
    def connection_errors(self):
        """Gets the connection_errors of this ComputeManagerStatus.  # noqa: E501

        Errors when connecting with compute manager  # noqa: E501

        :return: The connection_errors of this ComputeManagerStatus.  # noqa: E501
        :rtype: list[ErrorInfo]
        """
        return self._connection_errors

    @connection_errors.setter
    def connection_errors(self, connection_errors):
        """Sets the connection_errors of this ComputeManagerStatus.

        Errors when connecting with compute manager  # noqa: E501

        :param connection_errors: The connection_errors of this ComputeManagerStatus.  # noqa: E501
        :type: list[ErrorInfo]
        """

        self._connection_errors = connection_errors

    @property
    def oidc_end_point_id(self):
        """Gets the oidc_end_point_id of this ComputeManagerStatus.  # noqa: E501

        If Compute manager is trusted as authorization server, then this Id will be Id of corresponding oidc end point.   # noqa: E501

        :return: The oidc_end_point_id of this ComputeManagerStatus.  # noqa: E501
        :rtype: str
        """
        return self._oidc_end_point_id

    @oidc_end_point_id.setter
    def oidc_end_point_id(self, oidc_end_point_id):
        """Sets the oidc_end_point_id of this ComputeManagerStatus.

        If Compute manager is trusted as authorization server, then this Id will be Id of corresponding oidc end point.   # noqa: E501

        :param oidc_end_point_id: The oidc_end_point_id of this ComputeManagerStatus.  # noqa: E501
        :type: str
        """

        self._oidc_end_point_id = oidc_end_point_id

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this ComputeManagerStatus.  # noqa: E501

        Timestamp of the last successful update of Inventory, in epoch milliseconds.  # noqa: E501

        :return: The last_sync_time of this ComputeManagerStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this ComputeManagerStatus.

        Timestamp of the last successful update of Inventory, in epoch milliseconds.  # noqa: E501

        :param last_sync_time: The last_sync_time of this ComputeManagerStatus.  # noqa: E501
        :type: int
        """

        self._last_sync_time = last_sync_time

    @property
    def connection_status_details(self):
        """Gets the connection_status_details of this ComputeManagerStatus.  # noqa: E501

        Details about connection status  # noqa: E501

        :return: The connection_status_details of this ComputeManagerStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_status_details

    @connection_status_details.setter
    def connection_status_details(self, connection_status_details):
        """Sets the connection_status_details of this ComputeManagerStatus.

        Details about connection status  # noqa: E501

        :param connection_status_details: The connection_status_details of this ComputeManagerStatus.  # noqa: E501
        :type: str
        """

        self._connection_status_details = connection_status_details

    @property
    def registration_errors(self):
        """Gets the registration_errors of this ComputeManagerStatus.  # noqa: E501

        Errors when registering with compute manager  # noqa: E501

        :return: The registration_errors of this ComputeManagerStatus.  # noqa: E501
        :rtype: list[ErrorInfo]
        """
        return self._registration_errors

    @registration_errors.setter
    def registration_errors(self, registration_errors):
        """Sets the registration_errors of this ComputeManagerStatus.

        Errors when registering with compute manager  # noqa: E501

        :param registration_errors: The registration_errors of this ComputeManagerStatus.  # noqa: E501
        :type: list[ErrorInfo]
        """

        self._registration_errors = registration_errors

    @property
    def registration_status(self):
        """Gets the registration_status of this ComputeManagerStatus.  # noqa: E501

        Registration status of compute manager  # noqa: E501

        :return: The registration_status of this ComputeManagerStatus.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this ComputeManagerStatus.

        Registration status of compute manager  # noqa: E501

        :param registration_status: The registration_status of this ComputeManagerStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGISTERED", "UNREGISTERED", "REGISTERING", "REGISTERED_WITH_ERRORS"]  # noqa: E501
        if registration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_status, allowed_values)
            )

        self._registration_status = registration_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputeManagerStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeManagerStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
