# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbAccessListControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'group_id': 'str',
        'enabled': 'bool'
    }

    attribute_map = {
        'action': 'action',
        'group_id': 'group_id',
        'enabled': 'enabled'
    }

    def __init__(self, action=None, group_id=None, enabled=False):  # noqa: E501
        """LbAccessListControl - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._group_id = None
        self._enabled = None
        self.discriminator = None
        self.action = action
        self.group_id = group_id
        if enabled is not None:
            self.enabled = enabled

    @property
    def action(self):
        """Gets the action of this LbAccessListControl.  # noqa: E501

        ALLOW means connections matching grouping object IP list are allowed and requests not matching grouping object IP list are dropped. DROP means connections matching grouping object IP list are dropped and requests not matching grouping object IP list are allowed.   # noqa: E501

        :return: The action of this LbAccessListControl.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LbAccessListControl.

        ALLOW means connections matching grouping object IP list are allowed and requests not matching grouping object IP list are dropped. DROP means connections matching grouping object IP list are dropped and requests not matching grouping object IP list are allowed.   # noqa: E501

        :param action: The action of this LbAccessListControl.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["ALLOW", "DROP"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def group_id(self):
        """Gets the group_id of this LbAccessListControl.  # noqa: E501

        The identifier of grouping object which defines the IP addresses or ranges to match the client IP.   # noqa: E501

        :return: The group_id of this LbAccessListControl.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this LbAccessListControl.

        The identifier of grouping object which defines the IP addresses or ranges to match the client IP.   # noqa: E501

        :param group_id: The group_id of this LbAccessListControl.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def enabled(self):
        """Gets the enabled of this LbAccessListControl.  # noqa: E501

        The enabled flag indicates whether to enable access list control option. It is false by default.   # noqa: E501

        :return: The enabled of this LbAccessListControl.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LbAccessListControl.

        The enabled flag indicates whether to enable access list control option. It is false by default.   # noqa: E501

        :param enabled: The enabled of this LbAccessListControl.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbAccessListControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbAccessListControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
