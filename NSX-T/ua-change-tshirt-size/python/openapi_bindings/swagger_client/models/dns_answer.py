# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DnsAnswer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dns_server': 'str',
        'raw_answer': 'str',
        'non_authoritative_answers': 'list[DnsQueryAnswer]',
        'source_ip': 'str',
        'edge_node_id': 'str',
        'authoritative_answers': 'list[DnsQueryAnswer]',
        'answers': 'list[DnsQueryAnswer]'
    }

    attribute_map = {
        'dns_server': 'dns_server',
        'raw_answer': 'raw_answer',
        'non_authoritative_answers': 'non_authoritative_answers',
        'source_ip': 'source_ip',
        'edge_node_id': 'edge_node_id',
        'authoritative_answers': 'authoritative_answers',
        'answers': 'answers'
    }

    def __init__(self, dns_server=None, raw_answer=None, non_authoritative_answers=None, source_ip=None, edge_node_id=None, authoritative_answers=None, answers=None):  # noqa: E501
        """DnsAnswer - a model defined in Swagger"""  # noqa: E501
        self._dns_server = None
        self._raw_answer = None
        self._non_authoritative_answers = None
        self._source_ip = None
        self._edge_node_id = None
        self._authoritative_answers = None
        self._answers = None
        self.discriminator = None
        self.dns_server = dns_server
        if raw_answer is not None:
            self.raw_answer = raw_answer
        if non_authoritative_answers is not None:
            self.non_authoritative_answers = non_authoritative_answers
        self.source_ip = source_ip
        self.edge_node_id = edge_node_id
        if authoritative_answers is not None:
            self.authoritative_answers = authoritative_answers
        if answers is not None:
            self.answers = answers

    @property
    def dns_server(self):
        """Gets the dns_server of this DnsAnswer.  # noqa: E501

        Dns server ip address and port, format is \"ip address#port\".   # noqa: E501

        :return: The dns_server of this DnsAnswer.  # noqa: E501
        :rtype: str
        """
        return self._dns_server

    @dns_server.setter
    def dns_server(self, dns_server):
        """Sets the dns_server of this DnsAnswer.

        Dns server ip address and port, format is \"ip address#port\".   # noqa: E501

        :param dns_server: The dns_server of this DnsAnswer.  # noqa: E501
        :type: str
        """
        if dns_server is None:
            raise ValueError("Invalid value for `dns_server`, must not be `None`")  # noqa: E501

        self._dns_server = dns_server

    @property
    def raw_answer(self):
        """Gets the raw_answer of this DnsAnswer.  # noqa: E501

        It can be NXDOMAIN or error message which is not consisted of authoritative_answer or non_authoritative_answer.   # noqa: E501

        :return: The raw_answer of this DnsAnswer.  # noqa: E501
        :rtype: str
        """
        return self._raw_answer

    @raw_answer.setter
    def raw_answer(self, raw_answer):
        """Sets the raw_answer of this DnsAnswer.

        It can be NXDOMAIN or error message which is not consisted of authoritative_answer or non_authoritative_answer.   # noqa: E501

        :param raw_answer: The raw_answer of this DnsAnswer.  # noqa: E501
        :type: str
        """

        self._raw_answer = raw_answer

    @property
    def non_authoritative_answers(self):
        """Gets the non_authoritative_answers of this DnsAnswer.  # noqa: E501

        Non-authotitative answers of the query. This is a deprecated property, please use 'answers' instead.   # noqa: E501

        :return: The non_authoritative_answers of this DnsAnswer.  # noqa: E501
        :rtype: list[DnsQueryAnswer]
        """
        return self._non_authoritative_answers

    @non_authoritative_answers.setter
    def non_authoritative_answers(self, non_authoritative_answers):
        """Sets the non_authoritative_answers of this DnsAnswer.

        Non-authotitative answers of the query. This is a deprecated property, please use 'answers' instead.   # noqa: E501

        :param non_authoritative_answers: The non_authoritative_answers of this DnsAnswer.  # noqa: E501
        :type: list[DnsQueryAnswer]
        """

        self._non_authoritative_answers = non_authoritative_answers

    @property
    def source_ip(self):
        """Gets the source_ip of this DnsAnswer.  # noqa: E501

        The source ip used in this lookup.   # noqa: E501

        :return: The source_ip of this DnsAnswer.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this DnsAnswer.

        The source ip used in this lookup.   # noqa: E501

        :param source_ip: The source_ip of this DnsAnswer.  # noqa: E501
        :type: str
        """
        if source_ip is None:
            raise ValueError("Invalid value for `source_ip`, must not be `None`")  # noqa: E501

        self._source_ip = source_ip

    @property
    def edge_node_id(self):
        """Gets the edge_node_id of this DnsAnswer.  # noqa: E501

        ID of the edge node that performed the query.   # noqa: E501

        :return: The edge_node_id of this DnsAnswer.  # noqa: E501
        :rtype: str
        """
        return self._edge_node_id

    @edge_node_id.setter
    def edge_node_id(self, edge_node_id):
        """Sets the edge_node_id of this DnsAnswer.

        ID of the edge node that performed the query.   # noqa: E501

        :param edge_node_id: The edge_node_id of this DnsAnswer.  # noqa: E501
        :type: str
        """
        if edge_node_id is None:
            raise ValueError("Invalid value for `edge_node_id`, must not be `None`")  # noqa: E501

        self._edge_node_id = edge_node_id

    @property
    def authoritative_answers(self):
        """Gets the authoritative_answers of this DnsAnswer.  # noqa: E501

        Authotitative answers of the query. This is a deprecated property, please use 'answers' instead.   # noqa: E501

        :return: The authoritative_answers of this DnsAnswer.  # noqa: E501
        :rtype: list[DnsQueryAnswer]
        """
        return self._authoritative_answers

    @authoritative_answers.setter
    def authoritative_answers(self, authoritative_answers):
        """Sets the authoritative_answers of this DnsAnswer.

        Authotitative answers of the query. This is a deprecated property, please use 'answers' instead.   # noqa: E501

        :param authoritative_answers: The authoritative_answers of this DnsAnswer.  # noqa: E501
        :type: list[DnsQueryAnswer]
        """

        self._authoritative_answers = authoritative_answers

    @property
    def answers(self):
        """Gets the answers of this DnsAnswer.  # noqa: E501

        The answers of the query.   # noqa: E501

        :return: The answers of this DnsAnswer.  # noqa: E501
        :rtype: list[DnsQueryAnswer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this DnsAnswer.

        The answers of the query.   # noqa: E501

        :param answers: The answers of this DnsAnswer.  # noqa: E501
        :type: list[DnsQueryAnswer]
        """

        self._answers = answers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsAnswer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsAnswer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
