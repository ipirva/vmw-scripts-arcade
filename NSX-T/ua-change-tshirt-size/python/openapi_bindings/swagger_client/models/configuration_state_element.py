# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationStateElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_system_address': 'str',
        'state': 'str',
        'failure_code': 'int',
        'sub_system_name': 'str',
        'failure_message': 'str',
        'sub_system_type': 'str',
        'sub_system_id': 'str'
    }

    attribute_map = {
        'sub_system_address': 'sub_system_address',
        'state': 'state',
        'failure_code': 'failure_code',
        'sub_system_name': 'sub_system_name',
        'failure_message': 'failure_message',
        'sub_system_type': 'sub_system_type',
        'sub_system_id': 'sub_system_id'
    }

    def __init__(self, sub_system_address=None, state=None, failure_code=None, sub_system_name=None, failure_message=None, sub_system_type=None, sub_system_id=None):  # noqa: E501
        """ConfigurationStateElement - a model defined in Swagger"""  # noqa: E501
        self._sub_system_address = None
        self._state = None
        self._failure_code = None
        self._sub_system_name = None
        self._failure_message = None
        self._sub_system_type = None
        self._sub_system_id = None
        self.discriminator = None
        if sub_system_address is not None:
            self.sub_system_address = sub_system_address
        if state is not None:
            self.state = state
        if failure_code is not None:
            self.failure_code = failure_code
        if sub_system_name is not None:
            self.sub_system_name = sub_system_name
        if failure_message is not None:
            self.failure_message = failure_message
        if sub_system_type is not None:
            self.sub_system_type = sub_system_type
        if sub_system_id is not None:
            self.sub_system_id = sub_system_id

    @property
    def sub_system_address(self):
        """Gets the sub_system_address of this ConfigurationStateElement.  # noqa: E501

        URI of backing resource on sub system  # noqa: E501

        :return: The sub_system_address of this ConfigurationStateElement.  # noqa: E501
        :rtype: str
        """
        return self._sub_system_address

    @sub_system_address.setter
    def sub_system_address(self, sub_system_address):
        """Sets the sub_system_address of this ConfigurationStateElement.

        URI of backing resource on sub system  # noqa: E501

        :param sub_system_address: The sub_system_address of this ConfigurationStateElement.  # noqa: E501
        :type: str
        """

        self._sub_system_address = sub_system_address

    @property
    def state(self):
        """Gets the state of this ConfigurationStateElement.  # noqa: E501

        State of configuration on this sub system  # noqa: E501

        :return: The state of this ConfigurationStateElement.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigurationStateElement.

        State of configuration on this sub system  # noqa: E501

        :param state: The state of this ConfigurationStateElement.  # noqa: E501
        :type: str
        """
        allowed_values = ["in_progress", "success", "failed", "partial_success", "in_sync", "VM_DEPLOYMENT_FAILED", "VM_POWER_ON_FAILED", "VM_POWER_OFF_FAILED", "VM_UNDEPLOY_FAILED", "REPLACE_FAILED", "UPLINK_FROM_TEAMING_POLICY_NOT_MAPPED", "LOGICAL_SWITCH_NAMED_TEAMING_HAS_NO_PNIC_BACKING", "DELETE_VM_IN_REDEPLOY_FAILED", "DEPLOY_VM_IN_REDEPLOY_FAILED", "INSUFFICIENT_RESOURCES_IN_EDGE_NODE_FOR_SERVICE", "EDGE_CONFIG_ERROR", "REGISTRATION_FAILED", "TRANSPORT_NODE_CONFIGURATION_MISSING", "EDGE_HARDWARE_NOT_SUPPORTED", "MULTIPLE_OVERLAY_TZS_NOT_SUPPORTED", "TN_OVERLAY_TZ_IN_USE_BY_EDGE_CLUSTER", "TZ_ENDPOINTS_NOT_SPECIFIED", "NO_PNIC_PREPARED_IN_EDGE", "APPLIANCE_INTERNAL_ERROR", "VTEP_DHCP_NOT_SUPPORTED", "UNSUPPORTED_HOST_SWITCH_PROFILE", "UPLINK_HOST_SWITCH_PROFILE_NOT_SPECIFIED", "HOSTSWITCH_PROFILE_NOT_FOUND", "LLDP_SEND_ENABLED_NOT_SUPPORTED", "UNSUPPORTED_NAMED_TEAMING_POLICY", "LBSRCID_NOT_SUPPORTED_FOR_EDGE_VM", "LACP_NOT_SUPPORTED_FOR_EDGE_VM", "STANDBY_UPLINKS_NOT_SUPPORTED_FOR_EDGE_VM", "MULTIPLE_ACTIVE_UPLINKS_NOT_SUPPORTED_FOR_EDGE", "UNSUPPORTED_LACP_LB_ALGO_FOR_NODE", "EDGE_NODE_VERSION_NOT_SUPPORTED", "NO_PNIC_SPECIFIED_IN_TN", "INVALID_PNIC_DEVICE_NAME", "UNSUPPORTED_DEFAULT_TEAMING_POLICY", "MPA_DISCONNECTED", "VM_NETWORK_EDIT_PENDING", "VM_RENAME_PENDING", "VM_CONFIG_EDIT_PENDING", "VM_NETWORK_EDIT_FAILED", "VM_RENAME_FAILED", "VM_CONFIG_EDIT_FAILED", "VM_CONFIG_DISCREPANCY", "VM_NODE_REFRESH_FAILED", "VM_PLACEMENT_REFRESH_FAILED", "NOT_AVAILABLE", "REGISTRATION_TIMEDOUT", "pending", "orphaned", "unknown", "error"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def failure_code(self):
        """Gets the failure_code of this ConfigurationStateElement.  # noqa: E501

        Error code  # noqa: E501

        :return: The failure_code of this ConfigurationStateElement.  # noqa: E501
        :rtype: int
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this ConfigurationStateElement.

        Error code  # noqa: E501

        :param failure_code: The failure_code of this ConfigurationStateElement.  # noqa: E501
        :type: int
        """

        self._failure_code = failure_code

    @property
    def sub_system_name(self):
        """Gets the sub_system_name of this ConfigurationStateElement.  # noqa: E501

        Name of backing resource on sub system  # noqa: E501

        :return: The sub_system_name of this ConfigurationStateElement.  # noqa: E501
        :rtype: str
        """
        return self._sub_system_name

    @sub_system_name.setter
    def sub_system_name(self, sub_system_name):
        """Sets the sub_system_name of this ConfigurationStateElement.

        Name of backing resource on sub system  # noqa: E501

        :param sub_system_name: The sub_system_name of this ConfigurationStateElement.  # noqa: E501
        :type: str
        """

        self._sub_system_name = sub_system_name

    @property
    def failure_message(self):
        """Gets the failure_message of this ConfigurationStateElement.  # noqa: E501

        Error message in case of failure  # noqa: E501

        :return: The failure_message of this ConfigurationStateElement.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this ConfigurationStateElement.

        Error message in case of failure  # noqa: E501

        :param failure_message: The failure_message of this ConfigurationStateElement.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def sub_system_type(self):
        """Gets the sub_system_type of this ConfigurationStateElement.  # noqa: E501

        Type of backing resource on sub system  # noqa: E501

        :return: The sub_system_type of this ConfigurationStateElement.  # noqa: E501
        :rtype: str
        """
        return self._sub_system_type

    @sub_system_type.setter
    def sub_system_type(self, sub_system_type):
        """Sets the sub_system_type of this ConfigurationStateElement.

        Type of backing resource on sub system  # noqa: E501

        :param sub_system_type: The sub_system_type of this ConfigurationStateElement.  # noqa: E501
        :type: str
        """

        self._sub_system_type = sub_system_type

    @property
    def sub_system_id(self):
        """Gets the sub_system_id of this ConfigurationStateElement.  # noqa: E501

        Identifier of backing resource on sub system  # noqa: E501

        :return: The sub_system_id of this ConfigurationStateElement.  # noqa: E501
        :rtype: str
        """
        return self._sub_system_id

    @sub_system_id.setter
    def sub_system_id(self, sub_system_id):
        """Sets the sub_system_id of this ConfigurationStateElement.

        Identifier of backing resource on sub system  # noqa: E501

        :param sub_system_id: The sub_system_id of this ConfigurationStateElement.  # noqa: E501
        :type: str
        """

        self._sub_system_id = sub_system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationStateElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationStateElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
