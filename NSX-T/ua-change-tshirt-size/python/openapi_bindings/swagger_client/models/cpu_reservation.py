# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CPUReservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reservation_in_mhz': 'int',
        'reservation_in_shares': 'str'
    }

    attribute_map = {
        'reservation_in_mhz': 'reservation_in_mhz',
        'reservation_in_shares': 'reservation_in_shares'
    }

    def __init__(self, reservation_in_mhz=None, reservation_in_shares='HIGH_PRIORITY'):  # noqa: E501
        """CPUReservation - a model defined in Swagger"""  # noqa: E501
        self._reservation_in_mhz = None
        self._reservation_in_shares = None
        self.discriminator = None
        if reservation_in_mhz is not None:
            self.reservation_in_mhz = reservation_in_mhz
        if reservation_in_shares is not None:
            self.reservation_in_shares = reservation_in_shares

    @property
    def reservation_in_mhz(self):
        """Gets the reservation_in_mhz of this CPUReservation.  # noqa: E501

        The CPU reservation in MHz is the guaranteed minimum amount of clock cycles that the vmkernel CPU scheduler will give the Edge VM in case of contention. If an Edge VM is not using its reserved resources, then other machines can use them thus preventing waste of CPU cycles on the physical host. Note: We recommend use of reservation_in_shares instead of this absolute configuration. When you specify this value, set reservation_in_shares to LOW_PRIORITY.   # noqa: E501

        :return: The reservation_in_mhz of this CPUReservation.  # noqa: E501
        :rtype: int
        """
        return self._reservation_in_mhz

    @reservation_in_mhz.setter
    def reservation_in_mhz(self, reservation_in_mhz):
        """Sets the reservation_in_mhz of this CPUReservation.

        The CPU reservation in MHz is the guaranteed minimum amount of clock cycles that the vmkernel CPU scheduler will give the Edge VM in case of contention. If an Edge VM is not using its reserved resources, then other machines can use them thus preventing waste of CPU cycles on the physical host. Note: We recommend use of reservation_in_shares instead of this absolute configuration. When you specify this value, set reservation_in_shares to LOW_PRIORITY.   # noqa: E501

        :param reservation_in_mhz: The reservation_in_mhz of this CPUReservation.  # noqa: E501
        :type: int
        """

        self._reservation_in_mhz = reservation_in_mhz

    @property
    def reservation_in_shares(self):
        """Gets the reservation_in_shares of this CPUReservation.  # noqa: E501

        Shares specify the relative importance of a virtual machine on a given host. When you assign shares to a virtual machine, you always specify the priority for that virtual machine relative to other powered-on virtual machines on the same host. The default priority for shares is HIGH_PRIORITY.   # noqa: E501

        :return: The reservation_in_shares of this CPUReservation.  # noqa: E501
        :rtype: str
        """
        return self._reservation_in_shares

    @reservation_in_shares.setter
    def reservation_in_shares(self, reservation_in_shares):
        """Sets the reservation_in_shares of this CPUReservation.

        Shares specify the relative importance of a virtual machine on a given host. When you assign shares to a virtual machine, you always specify the priority for that virtual machine relative to other powered-on virtual machines on the same host. The default priority for shares is HIGH_PRIORITY.   # noqa: E501

        :param reservation_in_shares: The reservation_in_shares of this CPUReservation.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXTRA_HIGH_PRIORITY", "HIGH_PRIORITY", "NORMAL_PRIORITY", "LOW_PRIORITY"]  # noqa: E501
        if reservation_in_shares not in allowed_values:
            raise ValueError(
                "Invalid value for `reservation_in_shares` ({0}), must be one of {1}"  # noqa: E501
                .format(reservation_in_shares, allowed_values)
            )

        self._reservation_in_shares = reservation_in_shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CPUReservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CPUReservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
