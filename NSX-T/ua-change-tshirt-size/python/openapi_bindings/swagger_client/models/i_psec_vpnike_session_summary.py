# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPsecVPNIKESessionSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'established_sessions': 'int',
        'total_sessions': 'int',
        'failed_sessions': 'int',
        'degraded_sessions': 'int'
    }

    attribute_map = {
        'established_sessions': 'established_sessions',
        'total_sessions': 'total_sessions',
        'failed_sessions': 'failed_sessions',
        'degraded_sessions': 'degraded_sessions'
    }

    def __init__(self, established_sessions=None, total_sessions=None, failed_sessions=None, degraded_sessions=None):  # noqa: E501
        """IPsecVPNIKESessionSummary - a model defined in Swagger"""  # noqa: E501
        self._established_sessions = None
        self._total_sessions = None
        self._failed_sessions = None
        self._degraded_sessions = None
        self.discriminator = None
        if established_sessions is not None:
            self.established_sessions = established_sessions
        if total_sessions is not None:
            self.total_sessions = total_sessions
        if failed_sessions is not None:
            self.failed_sessions = failed_sessions
        if degraded_sessions is not None:
            self.degraded_sessions = degraded_sessions

    @property
    def established_sessions(self):
        """Gets the established_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501

        Number of established sessions.  # noqa: E501

        :return: The established_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :rtype: int
        """
        return self._established_sessions

    @established_sessions.setter
    def established_sessions(self, established_sessions):
        """Sets the established_sessions of this IPsecVPNIKESessionSummary.

        Number of established sessions.  # noqa: E501

        :param established_sessions: The established_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :type: int
        """

        self._established_sessions = established_sessions

    @property
    def total_sessions(self):
        """Gets the total_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501

        Total sessions configured.  # noqa: E501

        :return: The total_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_sessions

    @total_sessions.setter
    def total_sessions(self, total_sessions):
        """Sets the total_sessions of this IPsecVPNIKESessionSummary.

        Total sessions configured.  # noqa: E501

        :param total_sessions: The total_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :type: int
        """

        self._total_sessions = total_sessions

    @property
    def failed_sessions(self):
        """Gets the failed_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501

        Number of failed sessions.  # noqa: E501

        :return: The failed_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :rtype: int
        """
        return self._failed_sessions

    @failed_sessions.setter
    def failed_sessions(self, failed_sessions):
        """Sets the failed_sessions of this IPsecVPNIKESessionSummary.

        Number of failed sessions.  # noqa: E501

        :param failed_sessions: The failed_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :type: int
        """

        self._failed_sessions = failed_sessions

    @property
    def degraded_sessions(self):
        """Gets the degraded_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501

        Number of degraded sessions.  # noqa: E501

        :return: The degraded_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :rtype: int
        """
        return self._degraded_sessions

    @degraded_sessions.setter
    def degraded_sessions(self, degraded_sessions):
        """Sets the degraded_sessions of this IPsecVPNIKESessionSummary.

        Number of degraded sessions.  # noqa: E501

        :param degraded_sessions: The degraded_sessions of this IPsecVPNIKESessionSummary.  # noqa: E501
        :type: int
        """

        self._degraded_sessions = degraded_sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPsecVPNIKESessionSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPsecVPNIKESessionSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
