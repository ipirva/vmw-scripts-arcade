# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InterfacePimConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hold_interval': 'int',
        'enabled': 'bool',
        'hello_interval': 'int'
    }

    attribute_map = {
        'hold_interval': 'hold_interval',
        'enabled': 'enabled',
        'hello_interval': 'hello_interval'
    }

    def __init__(self, hold_interval=None, enabled=False, hello_interval=30):  # noqa: E501
        """InterfacePimConfig - a model defined in Swagger"""  # noqa: E501
        self._hold_interval = None
        self._enabled = None
        self._hello_interval = None
        self.discriminator = None
        if hold_interval is not None:
            self.hold_interval = hold_interval
        if enabled is not None:
            self.enabled = enabled
        if hello_interval is not None:
            self.hello_interval = hello_interval

    @property
    def hold_interval(self):
        """Gets the hold_interval of this InterfacePimConfig.  # noqa: E501

        PIM hold interval. Ranges from 1 to 630 seconds. hold_interval should be greater than hello_interval. If hold interval is not provided then it will be considered as 3.5 times of hello_interval.   # noqa: E501

        :return: The hold_interval of this InterfacePimConfig.  # noqa: E501
        :rtype: int
        """
        return self._hold_interval

    @hold_interval.setter
    def hold_interval(self, hold_interval):
        """Sets the hold_interval of this InterfacePimConfig.

        PIM hold interval. Ranges from 1 to 630 seconds. hold_interval should be greater than hello_interval. If hold interval is not provided then it will be considered as 3.5 times of hello_interval.   # noqa: E501

        :param hold_interval: The hold_interval of this InterfacePimConfig.  # noqa: E501
        :type: int
        """

        self._hold_interval = hold_interval

    @property
    def enabled(self):
        """Gets the enabled of this InterfacePimConfig.  # noqa: E501

        If the flag is set to true - it will enable PIM on the uplink interface. If the flag is set to false - it will disable PIM on the uplink interface.   # noqa: E501

        :return: The enabled of this InterfacePimConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InterfacePimConfig.

        If the flag is set to true - it will enable PIM on the uplink interface. If the flag is set to false - it will disable PIM on the uplink interface.   # noqa: E501

        :param enabled: The enabled of this InterfacePimConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def hello_interval(self):
        """Gets the hello_interval of this InterfacePimConfig.  # noqa: E501

        PIM hello interval. Ranges from 1 to 180 seconds.   # noqa: E501

        :return: The hello_interval of this InterfacePimConfig.  # noqa: E501
        :rtype: int
        """
        return self._hello_interval

    @hello_interval.setter
    def hello_interval(self, hello_interval):
        """Sets the hello_interval of this InterfacePimConfig.

        PIM hello interval. Ranges from 1 to 180 seconds.   # noqa: E501

        :param hello_interval: The hello_interval of this InterfacePimConfig.  # noqa: E501
        :type: int
        """

        self._hello_interval = hello_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterfacePimConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterfacePimConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
