# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class PortMirroringSession(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        'mirror_sources': 'list[MirrorSource]',
        'encapsulation_vlan_id': 'int',
        'session_type': 'str',
        'snap_length': 'int',
        'port_mirroring_filters': 'list[PortMirroringFilter]',
        'tcp_ip_stack': 'str',
        'preserve_original_vlan': 'bool',
        'mirror_destination': 'MirrorDestination'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'direction': 'direction',
        'mirror_sources': 'mirror_sources',
        'encapsulation_vlan_id': 'encapsulation_vlan_id',
        'session_type': 'session_type',
        'snap_length': 'snap_length',
        'port_mirroring_filters': 'port_mirroring_filters',
        'tcp_ip_stack': 'tcp_ip_stack',
        'preserve_original_vlan': 'preserve_original_vlan',
        'mirror_destination': 'mirror_destination'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, direction=None, mirror_sources=None, encapsulation_vlan_id=None, session_type='LocalPortMirrorSession', snap_length=None, port_mirroring_filters=None, tcp_ip_stack=None, preserve_original_vlan=False, mirror_destination=None, *args, **kwargs):  # noqa: E501
        """PortMirroringSession - a model defined in Swagger"""  # noqa: E501
        self._direction = None
        self._mirror_sources = None
        self._encapsulation_vlan_id = None
        self._session_type = None
        self._snap_length = None
        self._port_mirroring_filters = None
        self._tcp_ip_stack = None
        self._preserve_original_vlan = None
        self._mirror_destination = None
        self.discriminator = None
        self.direction = direction
        self.mirror_sources = mirror_sources
        if encapsulation_vlan_id is not None:
            self.encapsulation_vlan_id = encapsulation_vlan_id
        if session_type is not None:
            self.session_type = session_type
        if snap_length is not None:
            self.snap_length = snap_length
        if port_mirroring_filters is not None:
            self.port_mirroring_filters = port_mirroring_filters
        if tcp_ip_stack is not None:
            self.tcp_ip_stack = tcp_ip_stack
        if preserve_original_vlan is not None:
            self.preserve_original_vlan = preserve_original_vlan
        self.mirror_destination = mirror_destination
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def direction(self):
        """Gets the direction of this PortMirroringSession.  # noqa: E501

        Port mirroring session direction  # noqa: E501

        :return: The direction of this PortMirroringSession.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PortMirroringSession.

        Port mirroring session direction  # noqa: E501

        :param direction: The direction of this PortMirroringSession.  # noqa: E501
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501
        allowed_values = ["INGRESS", "EGRESS", "BIDIRECTIONAL"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def mirror_sources(self):
        """Gets the mirror_sources of this PortMirroringSession.  # noqa: E501

        Mirror sources  # noqa: E501

        :return: The mirror_sources of this PortMirroringSession.  # noqa: E501
        :rtype: list[MirrorSource]
        """
        return self._mirror_sources

    @mirror_sources.setter
    def mirror_sources(self, mirror_sources):
        """Sets the mirror_sources of this PortMirroringSession.

        Mirror sources  # noqa: E501

        :param mirror_sources: The mirror_sources of this PortMirroringSession.  # noqa: E501
        :type: list[MirrorSource]
        """
        if mirror_sources is None:
            raise ValueError("Invalid value for `mirror_sources`, must not be `None`")  # noqa: E501

        self._mirror_sources = mirror_sources

    @property
    def encapsulation_vlan_id(self):
        """Gets the encapsulation_vlan_id of this PortMirroringSession.  # noqa: E501

        Only for Remote SPAN Port Mirror.  # noqa: E501

        :return: The encapsulation_vlan_id of this PortMirroringSession.  # noqa: E501
        :rtype: int
        """
        return self._encapsulation_vlan_id

    @encapsulation_vlan_id.setter
    def encapsulation_vlan_id(self, encapsulation_vlan_id):
        """Sets the encapsulation_vlan_id of this PortMirroringSession.

        Only for Remote SPAN Port Mirror.  # noqa: E501

        :param encapsulation_vlan_id: The encapsulation_vlan_id of this PortMirroringSession.  # noqa: E501
        :type: int
        """

        self._encapsulation_vlan_id = encapsulation_vlan_id

    @property
    def session_type(self):
        """Gets the session_type of this PortMirroringSession.  # noqa: E501

        If this property is unset, this session will be treated as LocalPortMirrorSession.   # noqa: E501

        :return: The session_type of this PortMirroringSession.  # noqa: E501
        :rtype: str
        """
        return self._session_type

    @session_type.setter
    def session_type(self, session_type):
        """Sets the session_type of this PortMirroringSession.

        If this property is unset, this session will be treated as LocalPortMirrorSession.   # noqa: E501

        :param session_type: The session_type of this PortMirroringSession.  # noqa: E501
        :type: str
        """
        allowed_values = ["LogicalPortMirrorSession", "UplinkPortMirrorSession", "RspanSrcMirrorSession", "RspanDstMirrorSession", "LocalPortMirrorSession", "LogicalLocalPortMirrorSession", "L3PortMirrorSession"]  # noqa: E501
        if session_type not in allowed_values:
            raise ValueError(
                "Invalid value for `session_type` ({0}), must be one of {1}"  # noqa: E501
                .format(session_type, allowed_values)
            )

        self._session_type = session_type

    @property
    def snap_length(self):
        """Gets the snap_length of this PortMirroringSession.  # noqa: E501

        If this property is set, the packet will be truncated to the provided length. If this property is unset, entire packet will be mirrored.   # noqa: E501

        :return: The snap_length of this PortMirroringSession.  # noqa: E501
        :rtype: int
        """
        return self._snap_length

    @snap_length.setter
    def snap_length(self, snap_length):
        """Sets the snap_length of this PortMirroringSession.

        If this property is set, the packet will be truncated to the provided length. If this property is unset, entire packet will be mirrored.   # noqa: E501

        :param snap_length: The snap_length of this PortMirroringSession.  # noqa: E501
        :type: int
        """

        self._snap_length = snap_length

    @property
    def port_mirroring_filters(self):
        """Gets the port_mirroring_filters of this PortMirroringSession.  # noqa: E501

        An array of 5-tuples used to filter packets for the mirror session, if not provided, all the packets will be mirrored.  # noqa: E501

        :return: The port_mirroring_filters of this PortMirroringSession.  # noqa: E501
        :rtype: list[PortMirroringFilter]
        """
        return self._port_mirroring_filters

    @port_mirroring_filters.setter
    def port_mirroring_filters(self, port_mirroring_filters):
        """Sets the port_mirroring_filters of this PortMirroringSession.

        An array of 5-tuples used to filter packets for the mirror session, if not provided, all the packets will be mirrored.  # noqa: E501

        :param port_mirroring_filters: The port_mirroring_filters of this PortMirroringSession.  # noqa: E501
        :type: list[PortMirroringFilter]
        """

        self._port_mirroring_filters = port_mirroring_filters

    @property
    def tcp_ip_stack(self):
        """Gets the tcp_ip_stack of this PortMirroringSession.  # noqa: E501

        If set to mirror, mirror packet will be sent via dedicated mirror stack to destination; If set to default, mirror packet will be sent via default stack; So far, the value mirror can only be chosen in L3PortMirrorSession.   # noqa: E501

        :return: The tcp_ip_stack of this PortMirroringSession.  # noqa: E501
        :rtype: str
        """
        return self._tcp_ip_stack

    @tcp_ip_stack.setter
    def tcp_ip_stack(self, tcp_ip_stack):
        """Sets the tcp_ip_stack of this PortMirroringSession.

        If set to mirror, mirror packet will be sent via dedicated mirror stack to destination; If set to default, mirror packet will be sent via default stack; So far, the value mirror can only be chosen in L3PortMirrorSession.   # noqa: E501

        :param tcp_ip_stack: The tcp_ip_stack of this PortMirroringSession.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Mirror"]  # noqa: E501
        if tcp_ip_stack not in allowed_values:
            raise ValueError(
                "Invalid value for `tcp_ip_stack` ({0}), must be one of {1}"  # noqa: E501
                .format(tcp_ip_stack, allowed_values)
            )

        self._tcp_ip_stack = tcp_ip_stack

    @property
    def preserve_original_vlan(self):
        """Gets the preserve_original_vlan of this PortMirroringSession.  # noqa: E501

        Only for Remote SPAN Port Mirror. Whether to preserve original VLAN.  # noqa: E501

        :return: The preserve_original_vlan of this PortMirroringSession.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_original_vlan

    @preserve_original_vlan.setter
    def preserve_original_vlan(self, preserve_original_vlan):
        """Sets the preserve_original_vlan of this PortMirroringSession.

        Only for Remote SPAN Port Mirror. Whether to preserve original VLAN.  # noqa: E501

        :param preserve_original_vlan: The preserve_original_vlan of this PortMirroringSession.  # noqa: E501
        :type: bool
        """

        self._preserve_original_vlan = preserve_original_vlan

    @property
    def mirror_destination(self):
        """Gets the mirror_destination of this PortMirroringSession.  # noqa: E501


        :return: The mirror_destination of this PortMirroringSession.  # noqa: E501
        :rtype: MirrorDestination
        """
        return self._mirror_destination

    @mirror_destination.setter
    def mirror_destination(self, mirror_destination):
        """Sets the mirror_destination of this PortMirroringSession.


        :param mirror_destination: The mirror_destination of this PortMirroringSession.  # noqa: E501
        :type: MirrorDestination
        """
        if mirror_destination is None:
            raise ValueError("Invalid value for `mirror_destination`, must not be `None`")  # noqa: E501

        self._mirror_destination = mirror_destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortMirroringSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortMirroringSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
