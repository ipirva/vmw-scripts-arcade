# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class NodeInterfaceStatisticsProperties(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tx_dropped': 'int',
        'rx_packets': 'int',
        'tx_carrier': 'int',
        'rx_bytes': 'int',
        'tx_errors': 'int',
        'interface_id': 'str',
        'tx_colls': 'int',
        'rx_frame': 'int',
        'rx_errors': 'int',
        'tx_bytes': 'int',
        'rx_dropped': 'int',
        'tx_packets': 'int',
        'source': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'tx_dropped': 'tx_dropped',
        'rx_packets': 'rx_packets',
        'tx_carrier': 'tx_carrier',
        'rx_bytes': 'rx_bytes',
        'tx_errors': 'tx_errors',
        'interface_id': 'interface_id',
        'tx_colls': 'tx_colls',
        'rx_frame': 'rx_frame',
        'rx_errors': 'rx_errors',
        'tx_bytes': 'tx_bytes',
        'rx_dropped': 'rx_dropped',
        'tx_packets': 'tx_packets',
        'source': 'source'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, tx_dropped=None, rx_packets=None, tx_carrier=None, rx_bytes=None, tx_errors=None, interface_id=None, tx_colls=None, rx_frame=None, rx_errors=None, tx_bytes=None, rx_dropped=None, tx_packets=None, source=None, *args, **kwargs):  # noqa: E501
        """NodeInterfaceStatisticsProperties - a model defined in Swagger"""  # noqa: E501
        self._tx_dropped = None
        self._rx_packets = None
        self._tx_carrier = None
        self._rx_bytes = None
        self._tx_errors = None
        self._interface_id = None
        self._tx_colls = None
        self._rx_frame = None
        self._rx_errors = None
        self._tx_bytes = None
        self._rx_dropped = None
        self._tx_packets = None
        self._source = None
        self.discriminator = None
        if tx_dropped is not None:
            self.tx_dropped = tx_dropped
        if rx_packets is not None:
            self.rx_packets = rx_packets
        if tx_carrier is not None:
            self.tx_carrier = tx_carrier
        if rx_bytes is not None:
            self.rx_bytes = rx_bytes
        if tx_errors is not None:
            self.tx_errors = tx_errors
        if interface_id is not None:
            self.interface_id = interface_id
        if tx_colls is not None:
            self.tx_colls = tx_colls
        if rx_frame is not None:
            self.rx_frame = rx_frame
        if rx_errors is not None:
            self.rx_errors = rx_errors
        if tx_bytes is not None:
            self.tx_bytes = tx_bytes
        if rx_dropped is not None:
            self.rx_dropped = rx_dropped
        if tx_packets is not None:
            self.tx_packets = tx_packets
        if source is not None:
            self.source = source
        Resource.__init__(self, *args, **kwargs)

    @property
    def tx_dropped(self):
        """Gets the tx_dropped of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of packets dropped  # noqa: E501

        :return: The tx_dropped of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._tx_dropped

    @tx_dropped.setter
    def tx_dropped(self, tx_dropped):
        """Sets the tx_dropped of this NodeInterfaceStatisticsProperties.

        Number of packets dropped  # noqa: E501

        :param tx_dropped: The tx_dropped of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._tx_dropped = tx_dropped

    @property
    def rx_packets(self):
        """Gets the rx_packets of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of packets received  # noqa: E501

        :return: The rx_packets of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._rx_packets

    @rx_packets.setter
    def rx_packets(self, rx_packets):
        """Sets the rx_packets of this NodeInterfaceStatisticsProperties.

        Number of packets received  # noqa: E501

        :param rx_packets: The rx_packets of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._rx_packets = rx_packets

    @property
    def tx_carrier(self):
        """Gets the tx_carrier of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of carrier losses detected  # noqa: E501

        :return: The tx_carrier of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._tx_carrier

    @tx_carrier.setter
    def tx_carrier(self, tx_carrier):
        """Sets the tx_carrier of this NodeInterfaceStatisticsProperties.

        Number of carrier losses detected  # noqa: E501

        :param tx_carrier: The tx_carrier of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._tx_carrier = tx_carrier

    @property
    def rx_bytes(self):
        """Gets the rx_bytes of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of bytes received  # noqa: E501

        :return: The rx_bytes of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, rx_bytes):
        """Sets the rx_bytes of this NodeInterfaceStatisticsProperties.

        Number of bytes received  # noqa: E501

        :param rx_bytes: The rx_bytes of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._rx_bytes = rx_bytes

    @property
    def tx_errors(self):
        """Gets the tx_errors of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of transmit errors  # noqa: E501

        :return: The tx_errors of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._tx_errors

    @tx_errors.setter
    def tx_errors(self, tx_errors):
        """Sets the tx_errors of this NodeInterfaceStatisticsProperties.

        Number of transmit errors  # noqa: E501

        :param tx_errors: The tx_errors of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._tx_errors = tx_errors

    @property
    def interface_id(self):
        """Gets the interface_id of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Interface ID  # noqa: E501

        :return: The interface_id of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: str
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this NodeInterfaceStatisticsProperties.

        Interface ID  # noqa: E501

        :param interface_id: The interface_id of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: str
        """

        self._interface_id = interface_id

    @property
    def tx_colls(self):
        """Gets the tx_colls of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of collisions detected  # noqa: E501

        :return: The tx_colls of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._tx_colls

    @tx_colls.setter
    def tx_colls(self, tx_colls):
        """Sets the tx_colls of this NodeInterfaceStatisticsProperties.

        Number of collisions detected  # noqa: E501

        :param tx_colls: The tx_colls of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._tx_colls = tx_colls

    @property
    def rx_frame(self):
        """Gets the rx_frame of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of framing errors  # noqa: E501

        :return: The rx_frame of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._rx_frame

    @rx_frame.setter
    def rx_frame(self, rx_frame):
        """Sets the rx_frame of this NodeInterfaceStatisticsProperties.

        Number of framing errors  # noqa: E501

        :param rx_frame: The rx_frame of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._rx_frame = rx_frame

    @property
    def rx_errors(self):
        """Gets the rx_errors of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of receive errors  # noqa: E501

        :return: The rx_errors of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._rx_errors

    @rx_errors.setter
    def rx_errors(self, rx_errors):
        """Sets the rx_errors of this NodeInterfaceStatisticsProperties.

        Number of receive errors  # noqa: E501

        :param rx_errors: The rx_errors of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._rx_errors = rx_errors

    @property
    def tx_bytes(self):
        """Gets the tx_bytes of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of bytes transmitted  # noqa: E501

        :return: The tx_bytes of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._tx_bytes

    @tx_bytes.setter
    def tx_bytes(self, tx_bytes):
        """Sets the tx_bytes of this NodeInterfaceStatisticsProperties.

        Number of bytes transmitted  # noqa: E501

        :param tx_bytes: The tx_bytes of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._tx_bytes = tx_bytes

    @property
    def rx_dropped(self):
        """Gets the rx_dropped of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of packets dropped  # noqa: E501

        :return: The rx_dropped of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._rx_dropped

    @rx_dropped.setter
    def rx_dropped(self, rx_dropped):
        """Sets the rx_dropped of this NodeInterfaceStatisticsProperties.

        Number of packets dropped  # noqa: E501

        :param rx_dropped: The rx_dropped of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._rx_dropped = rx_dropped

    @property
    def tx_packets(self):
        """Gets the tx_packets of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Number of packets transmitted  # noqa: E501

        :return: The tx_packets of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: int
        """
        return self._tx_packets

    @tx_packets.setter
    def tx_packets(self, tx_packets):
        """Sets the tx_packets of this NodeInterfaceStatisticsProperties.

        Number of packets transmitted  # noqa: E501

        :param tx_packets: The tx_packets of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: int
        """

        self._tx_packets = tx_packets

    @property
    def source(self):
        """Gets the source of this NodeInterfaceStatisticsProperties.  # noqa: E501

        Source of status data.  # noqa: E501

        :return: The source of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this NodeInterfaceStatisticsProperties.

        Source of status data.  # noqa: E501

        :param source: The source of this NodeInterfaceStatisticsProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["realtime", "cached"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeInterfaceStatisticsProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeInterfaceStatisticsProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
