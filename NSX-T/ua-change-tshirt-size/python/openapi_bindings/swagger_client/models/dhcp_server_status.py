# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpServerStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_message': 'str',
        'service_status': 'str',
        'stand_by_node': 'str',
        'active_node': 'str'
    }

    attribute_map = {
        'error_message': 'error_message',
        'service_status': 'service_status',
        'stand_by_node': 'stand_by_node',
        'active_node': 'active_node'
    }

    def __init__(self, error_message=None, service_status=None, stand_by_node=None, active_node=None):  # noqa: E501
        """DhcpServerStatus - a model defined in Swagger"""  # noqa: E501
        self._error_message = None
        self._service_status = None
        self._stand_by_node = None
        self._active_node = None
        self.discriminator = None
        if error_message is not None:
            self.error_message = error_message
        self.service_status = service_status
        if stand_by_node is not None:
            self.stand_by_node = stand_by_node
        self.active_node = active_node

    @property
    def error_message(self):
        """Gets the error_message of this DhcpServerStatus.  # noqa: E501

        Error message, if available  # noqa: E501

        :return: The error_message of this DhcpServerStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DhcpServerStatus.

        Error message, if available  # noqa: E501

        :param error_message: The error_message of this DhcpServerStatus.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def service_status(self):
        """Gets the service_status of this DhcpServerStatus.  # noqa: E501

        UP means the dhcp service is working fine on both active transport-node and stand-by transport-node (if have), hence fail-over can work at this time if there is failure happens on one of the transport-node; DOWN means the dhcp service is down on both active transport-node and stand-by node (if have), hence the dhcp-service will not repsonse any dhcp request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The dhcp service may be working (or not working); NO_STANDBY means dhcp service is working in one of the transport node while not in the other transport-node (if have). Hence if the dhcp service in the working transport-node is down, fail-over will not happen and the dhcp service will go down.   # noqa: E501

        :return: The service_status of this DhcpServerStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this DhcpServerStatus.

        UP means the dhcp service is working fine on both active transport-node and stand-by transport-node (if have), hence fail-over can work at this time if there is failure happens on one of the transport-node; DOWN means the dhcp service is down on both active transport-node and stand-by node (if have), hence the dhcp-service will not repsonse any dhcp request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The dhcp service may be working (or not working); NO_STANDBY means dhcp service is working in one of the transport node while not in the other transport-node (if have). Hence if the dhcp service in the working transport-node is down, fail-over will not happen and the dhcp service will go down.   # noqa: E501

        :param service_status: The service_status of this DhcpServerStatus.  # noqa: E501
        :type: str
        """
        if service_status is None:
            raise ValueError("Invalid value for `service_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UP", "DOWN", "ERROR", "NO_STANDBY"]  # noqa: E501
        if service_status not in allowed_values:
            raise ValueError(
                "Invalid value for `service_status` ({0}), must be one of {1}"  # noqa: E501
                .format(service_status, allowed_values)
            )

        self._service_status = service_status

    @property
    def stand_by_node(self):
        """Gets the stand_by_node of this DhcpServerStatus.  # noqa: E501

        uuid of stand_by transport node. null if non-HA mode  # noqa: E501

        :return: The stand_by_node of this DhcpServerStatus.  # noqa: E501
        :rtype: str
        """
        return self._stand_by_node

    @stand_by_node.setter
    def stand_by_node(self, stand_by_node):
        """Sets the stand_by_node of this DhcpServerStatus.

        uuid of stand_by transport node. null if non-HA mode  # noqa: E501

        :param stand_by_node: The stand_by_node of this DhcpServerStatus.  # noqa: E501
        :type: str
        """

        self._stand_by_node = stand_by_node

    @property
    def active_node(self):
        """Gets the active_node of this DhcpServerStatus.  # noqa: E501

        uuid of active transport node  # noqa: E501

        :return: The active_node of this DhcpServerStatus.  # noqa: E501
        :rtype: str
        """
        return self._active_node

    @active_node.setter
    def active_node(self, active_node):
        """Sets the active_node of this DhcpServerStatus.

        uuid of active transport node  # noqa: E501

        :param active_node: The active_node of this DhcpServerStatus.  # noqa: E501
        :type: str
        """
        if active_node is None:
            raise ValueError("Invalid value for `active_node`, must not be `None`")  # noqa: E501

        self._active_node = active_node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpServerStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpServerStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
