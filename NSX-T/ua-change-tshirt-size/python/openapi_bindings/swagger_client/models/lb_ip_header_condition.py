# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_rule_condition import LbRuleCondition  # noqa: F401,E501

class LbIpHeaderCondition(LbRuleCondition):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'source_address': 'str'
    }
    if hasattr(LbRuleCondition, "swagger_types"):
        swagger_types.update(LbRuleCondition.swagger_types)

    attribute_map = {
        'group_id': 'group_id',
        'source_address': 'source_address'
    }
    if hasattr(LbRuleCondition, "attribute_map"):
        attribute_map.update(LbRuleCondition.attribute_map)

    def __init__(self, group_id=None, source_address=None, *args, **kwargs):  # noqa: E501
        """LbIpHeaderCondition - a model defined in Swagger"""  # noqa: E501
        self._group_id = None
        self._source_address = None
        self.discriminator = None
        if group_id is not None:
            self.group_id = group_id
        if source_address is not None:
            self.source_address = source_address
        LbRuleCondition.__init__(self, *args, **kwargs)

    @property
    def group_id(self):
        """Gets the group_id of this LbIpHeaderCondition.  # noqa: E501

        Source IP address of HTTP message should match IP addresses which are configured in Group in order to perform actions.   # noqa: E501

        :return: The group_id of this LbIpHeaderCondition.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this LbIpHeaderCondition.

        Source IP address of HTTP message should match IP addresses which are configured in Group in order to perform actions.   # noqa: E501

        :param group_id: The group_id of this LbIpHeaderCondition.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def source_address(self):
        """Gets the source_address of this LbIpHeaderCondition.  # noqa: E501

        Source IP address of HTTP message. IP Address can be expressed as a single IP address like 10.1.1.1, or a range of IP addresses like 10.1.1.101-10.1.1.160. Both IPv4 and IPv6 addresses are supported.   # noqa: E501

        :return: The source_address of this LbIpHeaderCondition.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this LbIpHeaderCondition.

        Source IP address of HTTP message. IP Address can be expressed as a single IP address like 10.1.1.1, or a range of IP addresses like 10.1.1.101-10.1.1.160. Both IPv4 and IPv6 addresses are supported.   # noqa: E501

        :param source_address: The source_address of this LbIpHeaderCondition.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbIpHeaderCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbIpHeaderCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
