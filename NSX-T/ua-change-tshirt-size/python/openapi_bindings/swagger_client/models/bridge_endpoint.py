# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class BridgeEndpoint(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ha_enable': 'bool',
        'bridge_cluster_id': 'str',
        'vlan_transport_zone_id': 'str',
        'bridge_endpoint_profile_id': 'str',
        'uplink_teaming_policy_name': 'str',
        'vlan_trunk_spec': 'VlanTrunkSpec',
        'vlan': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'ha_enable': 'ha_enable',
        'bridge_cluster_id': 'bridge_cluster_id',
        'vlan_transport_zone_id': 'vlan_transport_zone_id',
        'bridge_endpoint_profile_id': 'bridge_endpoint_profile_id',
        'uplink_teaming_policy_name': 'uplink_teaming_policy_name',
        'vlan_trunk_spec': 'vlan_trunk_spec',
        'vlan': 'vlan'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, ha_enable=True, bridge_cluster_id=None, vlan_transport_zone_id=None, bridge_endpoint_profile_id=None, uplink_teaming_policy_name=None, vlan_trunk_spec=None, vlan=None, *args, **kwargs):  # noqa: E501
        """BridgeEndpoint - a model defined in Swagger"""  # noqa: E501
        self._ha_enable = None
        self._bridge_cluster_id = None
        self._vlan_transport_zone_id = None
        self._bridge_endpoint_profile_id = None
        self._uplink_teaming_policy_name = None
        self._vlan_trunk_spec = None
        self._vlan = None
        self.discriminator = None
        if ha_enable is not None:
            self.ha_enable = ha_enable
        if bridge_cluster_id is not None:
            self.bridge_cluster_id = bridge_cluster_id
        if vlan_transport_zone_id is not None:
            self.vlan_transport_zone_id = vlan_transport_zone_id
        if bridge_endpoint_profile_id is not None:
            self.bridge_endpoint_profile_id = bridge_endpoint_profile_id
        if uplink_teaming_policy_name is not None:
            self.uplink_teaming_policy_name = uplink_teaming_policy_name
        if vlan_trunk_spec is not None:
            self.vlan_trunk_spec = vlan_trunk_spec
        if vlan is not None:
            self.vlan = vlan
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def ha_enable(self):
        """Gets the ha_enable of this BridgeEndpoint.  # noqa: E501

        This field will not be used if an edge cluster is being used for the bridge endpoint   # noqa: E501

        :return: The ha_enable of this BridgeEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._ha_enable

    @ha_enable.setter
    def ha_enable(self, ha_enable):
        """Sets the ha_enable of this BridgeEndpoint.

        This field will not be used if an edge cluster is being used for the bridge endpoint   # noqa: E501

        :param ha_enable: The ha_enable of this BridgeEndpoint.  # noqa: E501
        :type: bool
        """

        self._ha_enable = ha_enable

    @property
    def bridge_cluster_id(self):
        """Gets the bridge_cluster_id of this BridgeEndpoint.  # noqa: E501

        This field will not be used if an edge cluster is being used for the bridge endpoint   # noqa: E501

        :return: The bridge_cluster_id of this BridgeEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._bridge_cluster_id

    @bridge_cluster_id.setter
    def bridge_cluster_id(self, bridge_cluster_id):
        """Sets the bridge_cluster_id of this BridgeEndpoint.

        This field will not be used if an edge cluster is being used for the bridge endpoint   # noqa: E501

        :param bridge_cluster_id: The bridge_cluster_id of this BridgeEndpoint.  # noqa: E501
        :type: str
        """

        self._bridge_cluster_id = bridge_cluster_id

    @property
    def vlan_transport_zone_id(self):
        """Gets the vlan_transport_zone_id of this BridgeEndpoint.  # noqa: E501

        This field will not be used if a bridge cluster is being used for the bridge endpoint   # noqa: E501

        :return: The vlan_transport_zone_id of this BridgeEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vlan_transport_zone_id

    @vlan_transport_zone_id.setter
    def vlan_transport_zone_id(self, vlan_transport_zone_id):
        """Sets the vlan_transport_zone_id of this BridgeEndpoint.

        This field will not be used if a bridge cluster is being used for the bridge endpoint   # noqa: E501

        :param vlan_transport_zone_id: The vlan_transport_zone_id of this BridgeEndpoint.  # noqa: E501
        :type: str
        """

        self._vlan_transport_zone_id = vlan_transport_zone_id

    @property
    def bridge_endpoint_profile_id(self):
        """Gets the bridge_endpoint_profile_id of this BridgeEndpoint.  # noqa: E501

        This field will not be used if a bridge cluster is being used for the bridge endpoint   # noqa: E501

        :return: The bridge_endpoint_profile_id of this BridgeEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._bridge_endpoint_profile_id

    @bridge_endpoint_profile_id.setter
    def bridge_endpoint_profile_id(self, bridge_endpoint_profile_id):
        """Sets the bridge_endpoint_profile_id of this BridgeEndpoint.

        This field will not be used if a bridge cluster is being used for the bridge endpoint   # noqa: E501

        :param bridge_endpoint_profile_id: The bridge_endpoint_profile_id of this BridgeEndpoint.  # noqa: E501
        :type: str
        """

        self._bridge_endpoint_profile_id = bridge_endpoint_profile_id

    @property
    def uplink_teaming_policy_name(self):
        """Gets the uplink_teaming_policy_name of this BridgeEndpoint.  # noqa: E501

        This name has to be one of the switching uplink teaming policy names listed inside the TransportZone. If this field is not specified, bridge will use the first pnic in host-switch config. This field will not be used if a bridge cluster is being used for the bridge endpoint  # noqa: E501

        :return: The uplink_teaming_policy_name of this BridgeEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._uplink_teaming_policy_name

    @uplink_teaming_policy_name.setter
    def uplink_teaming_policy_name(self, uplink_teaming_policy_name):
        """Sets the uplink_teaming_policy_name of this BridgeEndpoint.

        This name has to be one of the switching uplink teaming policy names listed inside the TransportZone. If this field is not specified, bridge will use the first pnic in host-switch config. This field will not be used if a bridge cluster is being used for the bridge endpoint  # noqa: E501

        :param uplink_teaming_policy_name: The uplink_teaming_policy_name of this BridgeEndpoint.  # noqa: E501
        :type: str
        """

        self._uplink_teaming_policy_name = uplink_teaming_policy_name

    @property
    def vlan_trunk_spec(self):
        """Gets the vlan_trunk_spec of this BridgeEndpoint.  # noqa: E501


        :return: The vlan_trunk_spec of this BridgeEndpoint.  # noqa: E501
        :rtype: VlanTrunkSpec
        """
        return self._vlan_trunk_spec

    @vlan_trunk_spec.setter
    def vlan_trunk_spec(self, vlan_trunk_spec):
        """Sets the vlan_trunk_spec of this BridgeEndpoint.


        :param vlan_trunk_spec: The vlan_trunk_spec of this BridgeEndpoint.  # noqa: E501
        :type: VlanTrunkSpec
        """

        self._vlan_trunk_spec = vlan_trunk_spec

    @property
    def vlan(self):
        """Gets the vlan of this BridgeEndpoint.  # noqa: E501

        This property is used for VLAN specification of bridge endpoint. It's mutually exclusive with 'vlan_trunk_spec', either 'vlan' or 'vlan_trunk_spec' should be specified.   # noqa: E501

        :return: The vlan of this BridgeEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this BridgeEndpoint.

        This property is used for VLAN specification of bridge endpoint. It's mutually exclusive with 'vlan_trunk_spec', either 'vlan' or 'vlan_trunk_spec' should be specified.   # noqa: E501

        :param vlan: The vlan of this BridgeEndpoint.  # noqa: E501
        :type: int
        """

        self._vlan = vlan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BridgeEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BridgeEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
