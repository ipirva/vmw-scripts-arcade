# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ServiceChain(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reverse_path_service_profiles': 'list[ResourceReference]',
        'service_attachments': 'list[ResourceReference]',
        'forward_path_service_profiles': 'list[ResourceReference]',
        'service_chain_id': 'str',
        'path_selection_policy': 'str',
        'on_failure_policy': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'reverse_path_service_profiles': 'reverse_path_service_profiles',
        'service_attachments': 'service_attachments',
        'forward_path_service_profiles': 'forward_path_service_profiles',
        'service_chain_id': 'service_chain_id',
        'path_selection_policy': 'path_selection_policy',
        'on_failure_policy': 'on_failure_policy'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, reverse_path_service_profiles=None, service_attachments=None, forward_path_service_profiles=None, service_chain_id=None, path_selection_policy='ANY', on_failure_policy='ALLOW', *args, **kwargs):  # noqa: E501
        """ServiceChain - a model defined in Swagger"""  # noqa: E501
        self._reverse_path_service_profiles = None
        self._service_attachments = None
        self._forward_path_service_profiles = None
        self._service_chain_id = None
        self._path_selection_policy = None
        self._on_failure_policy = None
        self.discriminator = None
        if reverse_path_service_profiles is not None:
            self.reverse_path_service_profiles = reverse_path_service_profiles
        self.service_attachments = service_attachments
        self.forward_path_service_profiles = forward_path_service_profiles
        if service_chain_id is not None:
            self.service_chain_id = service_chain_id
        if path_selection_policy is not None:
            self.path_selection_policy = path_selection_policy
        if on_failure_policy is not None:
            self.on_failure_policy = on_failure_policy
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def reverse_path_service_profiles(self):
        """Gets the reverse_path_service_profiles of this ServiceChain.  # noqa: E501

        List of ServiceInsertionServiceProfiles id. Reverse path service profiles are applied to egress traffic and is optional. 2 different set of profiles can be defined for forward and reverse path. If not defined, the reverse of the forward path service profile is applied.  # noqa: E501

        :return: The reverse_path_service_profiles of this ServiceChain.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._reverse_path_service_profiles

    @reverse_path_service_profiles.setter
    def reverse_path_service_profiles(self, reverse_path_service_profiles):
        """Sets the reverse_path_service_profiles of this ServiceChain.

        List of ServiceInsertionServiceProfiles id. Reverse path service profiles are applied to egress traffic and is optional. 2 different set of profiles can be defined for forward and reverse path. If not defined, the reverse of the forward path service profile is applied.  # noqa: E501

        :param reverse_path_service_profiles: The reverse_path_service_profiles of this ServiceChain.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._reverse_path_service_profiles = reverse_path_service_profiles

    @property
    def service_attachments(self):
        """Gets the service_attachments of this ServiceChain.  # noqa: E501

        Service attachment specifies the scope i.e Service plane at which the SVMs are deployed.  # noqa: E501

        :return: The service_attachments of this ServiceChain.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._service_attachments

    @service_attachments.setter
    def service_attachments(self, service_attachments):
        """Sets the service_attachments of this ServiceChain.

        Service attachment specifies the scope i.e Service plane at which the SVMs are deployed.  # noqa: E501

        :param service_attachments: The service_attachments of this ServiceChain.  # noqa: E501
        :type: list[ResourceReference]
        """
        if service_attachments is None:
            raise ValueError("Invalid value for `service_attachments`, must not be `None`")  # noqa: E501

        self._service_attachments = service_attachments

    @property
    def forward_path_service_profiles(self):
        """Gets the forward_path_service_profiles of this ServiceChain.  # noqa: E501

        List of ServiceInsertionServiceProfiles that constitutes the the service chain. The forward path service profiles are applied to ingress traffic.  # noqa: E501

        :return: The forward_path_service_profiles of this ServiceChain.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._forward_path_service_profiles

    @forward_path_service_profiles.setter
    def forward_path_service_profiles(self, forward_path_service_profiles):
        """Sets the forward_path_service_profiles of this ServiceChain.

        List of ServiceInsertionServiceProfiles that constitutes the the service chain. The forward path service profiles are applied to ingress traffic.  # noqa: E501

        :param forward_path_service_profiles: The forward_path_service_profiles of this ServiceChain.  # noqa: E501
        :type: list[ResourceReference]
        """
        if forward_path_service_profiles is None:
            raise ValueError("Invalid value for `forward_path_service_profiles`, must not be `None`")  # noqa: E501

        self._forward_path_service_profiles = forward_path_service_profiles

    @property
    def service_chain_id(self):
        """Gets the service_chain_id of this ServiceChain.  # noqa: E501

        A unique id generated for every service chain. This is not a uuid.  # noqa: E501

        :return: The service_chain_id of this ServiceChain.  # noqa: E501
        :rtype: str
        """
        return self._service_chain_id

    @service_chain_id.setter
    def service_chain_id(self, service_chain_id):
        """Sets the service_chain_id of this ServiceChain.

        A unique id generated for every service chain. This is not a uuid.  # noqa: E501

        :param service_chain_id: The service_chain_id of this ServiceChain.  # noqa: E501
        :type: str
        """

        self._service_chain_id = service_chain_id

    @property
    def path_selection_policy(self):
        """Gets the path_selection_policy of this ServiceChain.  # noqa: E501

        Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - means to prefer local service insances. REMOTE - preference is to redirect to the SVM co-located on the same host.  # noqa: E501

        :return: The path_selection_policy of this ServiceChain.  # noqa: E501
        :rtype: str
        """
        return self._path_selection_policy

    @path_selection_policy.setter
    def path_selection_policy(self, path_selection_policy):
        """Sets the path_selection_policy of this ServiceChain.

        Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - means to prefer local service insances. REMOTE - preference is to redirect to the SVM co-located on the same host.  # noqa: E501

        :param path_selection_policy: The path_selection_policy of this ServiceChain.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANY", "LOCAL", "REMOTE"]  # noqa: E501
        if path_selection_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `path_selection_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(path_selection_policy, allowed_values)
            )

        self._path_selection_policy = path_selection_policy

    @property
    def on_failure_policy(self):
        """Gets the on_failure_policy of this ServiceChain.  # noqa: E501

        Failure policy for the service tells datapath, the action to take i.e to allow or block traffic during failure scenarios.  # noqa: E501

        :return: The on_failure_policy of this ServiceChain.  # noqa: E501
        :rtype: str
        """
        return self._on_failure_policy

    @on_failure_policy.setter
    def on_failure_policy(self, on_failure_policy):
        """Sets the on_failure_policy of this ServiceChain.

        Failure policy for the service tells datapath, the action to take i.e to allow or block traffic during failure scenarios.  # noqa: E501

        :param on_failure_policy: The on_failure_policy of this ServiceChain.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALLOW", "BLOCK"]  # noqa: E501
        if on_failure_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `on_failure_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(on_failure_policy, allowed_values)
            )

        self._on_failure_policy = on_failure_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceChain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceChain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
