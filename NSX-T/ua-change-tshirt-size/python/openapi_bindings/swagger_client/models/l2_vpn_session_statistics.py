# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2VPNSessionStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'traffic_statistics_per_logical_switch': 'list[L2VPNPerLSTrafficStatistics]',
        'display_name': 'str',
        'partial_stats': 'bool',
        'session_id': 'str',
        'tap_traffic_counters': 'list[L2VPNTapTrafficStatistics]'
    }

    attribute_map = {
        'traffic_statistics_per_logical_switch': 'traffic_statistics_per_logical_switch',
        'display_name': 'display_name',
        'partial_stats': 'partial_stats',
        'session_id': 'session_id',
        'tap_traffic_counters': 'tap_traffic_counters'
    }

    def __init__(self, traffic_statistics_per_logical_switch=None, display_name=None, partial_stats=None, session_id=None, tap_traffic_counters=None):  # noqa: E501
        """L2VPNSessionStatistics - a model defined in Swagger"""  # noqa: E501
        self._traffic_statistics_per_logical_switch = None
        self._display_name = None
        self._partial_stats = None
        self._session_id = None
        self._tap_traffic_counters = None
        self.discriminator = None
        if traffic_statistics_per_logical_switch is not None:
            self.traffic_statistics_per_logical_switch = traffic_statistics_per_logical_switch
        if display_name is not None:
            self.display_name = display_name
        if partial_stats is not None:
            self.partial_stats = partial_stats
        if session_id is not None:
            self.session_id = session_id
        if tap_traffic_counters is not None:
            self.tap_traffic_counters = tap_traffic_counters

    @property
    def traffic_statistics_per_logical_switch(self):
        """Gets the traffic_statistics_per_logical_switch of this L2VPNSessionStatistics.  # noqa: E501

        Traffic statistics per logical switch.  # noqa: E501

        :return: The traffic_statistics_per_logical_switch of this L2VPNSessionStatistics.  # noqa: E501
        :rtype: list[L2VPNPerLSTrafficStatistics]
        """
        return self._traffic_statistics_per_logical_switch

    @traffic_statistics_per_logical_switch.setter
    def traffic_statistics_per_logical_switch(self, traffic_statistics_per_logical_switch):
        """Sets the traffic_statistics_per_logical_switch of this L2VPNSessionStatistics.

        Traffic statistics per logical switch.  # noqa: E501

        :param traffic_statistics_per_logical_switch: The traffic_statistics_per_logical_switch of this L2VPNSessionStatistics.  # noqa: E501
        :type: list[L2VPNPerLSTrafficStatistics]
        """

        self._traffic_statistics_per_logical_switch = traffic_statistics_per_logical_switch

    @property
    def display_name(self):
        """Gets the display_name of this L2VPNSessionStatistics.  # noqa: E501

        L2VPN display name.  # noqa: E501

        :return: The display_name of this L2VPNSessionStatistics.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this L2VPNSessionStatistics.

        L2VPN display name.  # noqa: E501

        :param display_name: The display_name of this L2VPNSessionStatistics.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def partial_stats(self):
        """Gets the partial_stats of this L2VPNSessionStatistics.  # noqa: E501

        Partial statistics is set to true if onle active node responds while standby does not. In case of both nodes responded statistics will be summed and partial stats will be false. If cluster has only active node, partial statistics will always be false.  # noqa: E501

        :return: The partial_stats of this L2VPNSessionStatistics.  # noqa: E501
        :rtype: bool
        """
        return self._partial_stats

    @partial_stats.setter
    def partial_stats(self, partial_stats):
        """Sets the partial_stats of this L2VPNSessionStatistics.

        Partial statistics is set to true if onle active node responds while standby does not. In case of both nodes responded statistics will be summed and partial stats will be false. If cluster has only active node, partial statistics will always be false.  # noqa: E501

        :param partial_stats: The partial_stats of this L2VPNSessionStatistics.  # noqa: E501
        :type: bool
        """

        self._partial_stats = partial_stats

    @property
    def session_id(self):
        """Gets the session_id of this L2VPNSessionStatistics.  # noqa: E501

        Session identifier for L2VPN.  # noqa: E501

        :return: The session_id of this L2VPNSessionStatistics.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this L2VPNSessionStatistics.

        Session identifier for L2VPN.  # noqa: E501

        :param session_id: The session_id of this L2VPNSessionStatistics.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def tap_traffic_counters(self):
        """Gets the tap_traffic_counters of this L2VPNSessionStatistics.  # noqa: E501

        Tunnel port traffic counters.  # noqa: E501

        :return: The tap_traffic_counters of this L2VPNSessionStatistics.  # noqa: E501
        :rtype: list[L2VPNTapTrafficStatistics]
        """
        return self._tap_traffic_counters

    @tap_traffic_counters.setter
    def tap_traffic_counters(self, tap_traffic_counters):
        """Sets the tap_traffic_counters of this L2VPNSessionStatistics.

        Tunnel port traffic counters.  # noqa: E501

        :param tap_traffic_counters: The tap_traffic_counters of this L2VPNSessionStatistics.  # noqa: E501
        :type: list[L2VPNTapTrafficStatistics]
        """

        self._tap_traffic_counters = tap_traffic_counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VPNSessionStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VPNSessionStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
