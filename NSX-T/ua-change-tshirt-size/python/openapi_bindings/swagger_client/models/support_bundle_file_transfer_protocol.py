# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupportBundleFileTransferProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssh_fingerprint': 'str',
        'name': 'str',
        'authentication_scheme': 'SupportBundleFileTransferAuthenticationScheme'
    }

    attribute_map = {
        'ssh_fingerprint': 'ssh_fingerprint',
        'name': 'name',
        'authentication_scheme': 'authentication_scheme'
    }

    def __init__(self, ssh_fingerprint=None, name=None, authentication_scheme=None):  # noqa: E501
        """SupportBundleFileTransferProtocol - a model defined in Swagger"""  # noqa: E501
        self._ssh_fingerprint = None
        self._name = None
        self._authentication_scheme = None
        self.discriminator = None
        self.ssh_fingerprint = ssh_fingerprint
        self.name = name
        self.authentication_scheme = authentication_scheme

    @property
    def ssh_fingerprint(self):
        """Gets the ssh_fingerprint of this SupportBundleFileTransferProtocol.  # noqa: E501

        SSH fingerprint of server  # noqa: E501

        :return: The ssh_fingerprint of this SupportBundleFileTransferProtocol.  # noqa: E501
        :rtype: str
        """
        return self._ssh_fingerprint

    @ssh_fingerprint.setter
    def ssh_fingerprint(self, ssh_fingerprint):
        """Sets the ssh_fingerprint of this SupportBundleFileTransferProtocol.

        SSH fingerprint of server  # noqa: E501

        :param ssh_fingerprint: The ssh_fingerprint of this SupportBundleFileTransferProtocol.  # noqa: E501
        :type: str
        """
        if ssh_fingerprint is None:
            raise ValueError("Invalid value for `ssh_fingerprint`, must not be `None`")  # noqa: E501

        self._ssh_fingerprint = ssh_fingerprint

    @property
    def name(self):
        """Gets the name of this SupportBundleFileTransferProtocol.  # noqa: E501

        Protocol name  # noqa: E501

        :return: The name of this SupportBundleFileTransferProtocol.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupportBundleFileTransferProtocol.

        Protocol name  # noqa: E501

        :param name: The name of this SupportBundleFileTransferProtocol.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        allowed_values = ["SCP", "SFTP"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def authentication_scheme(self):
        """Gets the authentication_scheme of this SupportBundleFileTransferProtocol.  # noqa: E501


        :return: The authentication_scheme of this SupportBundleFileTransferProtocol.  # noqa: E501
        :rtype: SupportBundleFileTransferAuthenticationScheme
        """
        return self._authentication_scheme

    @authentication_scheme.setter
    def authentication_scheme(self, authentication_scheme):
        """Sets the authentication_scheme of this SupportBundleFileTransferProtocol.


        :param authentication_scheme: The authentication_scheme of this SupportBundleFileTransferProtocol.  # noqa: E501
        :type: SupportBundleFileTransferAuthenticationScheme
        """
        if authentication_scheme is None:
            raise ValueError("Invalid value for `authentication_scheme`, must not be `None`")  # noqa: E501

        self._authentication_scheme = authentication_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportBundleFileTransferProtocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportBundleFileTransferProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
