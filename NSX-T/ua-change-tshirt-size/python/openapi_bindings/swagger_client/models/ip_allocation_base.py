# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IpAllocationBase(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lease_time': 'int',
        'gateway_ip': 'str',
        'options': 'DhcpOptions'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'lease_time': 'lease_time',
        'gateway_ip': 'gateway_ip',
        'options': 'options'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, lease_time=86400, gateway_ip=None, options=None, *args, **kwargs):  # noqa: E501
        """IpAllocationBase - a model defined in Swagger"""  # noqa: E501
        self._lease_time = None
        self._gateway_ip = None
        self._options = None
        self.discriminator = None
        if lease_time is not None:
            self.lease_time = lease_time
        if gateway_ip is not None:
            self.gateway_ip = gateway_ip
        if options is not None:
            self.options = options
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def lease_time(self):
        """Gets the lease_time of this IpAllocationBase.  # noqa: E501

        Lease time, in seconds, [60-(2^32-1)]. Default is 86400.  # noqa: E501

        :return: The lease_time of this IpAllocationBase.  # noqa: E501
        :rtype: int
        """
        return self._lease_time

    @lease_time.setter
    def lease_time(self, lease_time):
        """Sets the lease_time of this IpAllocationBase.

        Lease time, in seconds, [60-(2^32-1)]. Default is 86400.  # noqa: E501

        :param lease_time: The lease_time of this IpAllocationBase.  # noqa: E501
        :type: int
        """

        self._lease_time = lease_time

    @property
    def gateway_ip(self):
        """Gets the gateway_ip of this IpAllocationBase.  # noqa: E501

        Gateway ip address of the allocation.  # noqa: E501

        :return: The gateway_ip of this IpAllocationBase.  # noqa: E501
        :rtype: str
        """
        return self._gateway_ip

    @gateway_ip.setter
    def gateway_ip(self, gateway_ip):
        """Sets the gateway_ip of this IpAllocationBase.

        Gateway ip address of the allocation.  # noqa: E501

        :param gateway_ip: The gateway_ip of this IpAllocationBase.  # noqa: E501
        :type: str
        """

        self._gateway_ip = gateway_ip

    @property
    def options(self):
        """Gets the options of this IpAllocationBase.  # noqa: E501


        :return: The options of this IpAllocationBase.  # noqa: E501
        :rtype: DhcpOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this IpAllocationBase.


        :param options: The options of this IpAllocationBase.  # noqa: E501
        :type: DhcpOptions
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpAllocationBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpAllocationBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
