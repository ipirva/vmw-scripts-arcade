# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class TelemetryConfig(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_enabled': 'bool',
        'telemetry_proxy': 'TelemetryProxy',
        'ceip_acceptance': 'bool',
        'telemetry_schedule': 'TelemetrySchedule',
        'proxy_enabled': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'schedule_enabled': 'schedule_enabled',
        'telemetry_proxy': 'telemetry_proxy',
        'ceip_acceptance': 'ceip_acceptance',
        'telemetry_schedule': 'telemetry_schedule',
        'proxy_enabled': 'proxy_enabled'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, schedule_enabled=None, telemetry_proxy=None, ceip_acceptance=None, telemetry_schedule=None, proxy_enabled=False, *args, **kwargs):  # noqa: E501
        """TelemetryConfig - a model defined in Swagger"""  # noqa: E501
        self._schedule_enabled = None
        self._telemetry_proxy = None
        self._ceip_acceptance = None
        self._telemetry_schedule = None
        self._proxy_enabled = None
        self.discriminator = None
        self.schedule_enabled = schedule_enabled
        if telemetry_proxy is not None:
            self.telemetry_proxy = telemetry_proxy
        self.ceip_acceptance = ceip_acceptance
        if telemetry_schedule is not None:
            self.telemetry_schedule = telemetry_schedule
        if proxy_enabled is not None:
            self.proxy_enabled = proxy_enabled
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def schedule_enabled(self):
        """Gets the schedule_enabled of this TelemetryConfig.  # noqa: E501

        Enable this to schedule data collection and upload times. If enabled, and a schedule is not provided, a default schedule (WEEKLY, Sunday at 2:00 a.m) will be applied.   # noqa: E501

        :return: The schedule_enabled of this TelemetryConfig.  # noqa: E501
        :rtype: bool
        """
        return self._schedule_enabled

    @schedule_enabled.setter
    def schedule_enabled(self, schedule_enabled):
        """Sets the schedule_enabled of this TelemetryConfig.

        Enable this to schedule data collection and upload times. If enabled, and a schedule is not provided, a default schedule (WEEKLY, Sunday at 2:00 a.m) will be applied.   # noqa: E501

        :param schedule_enabled: The schedule_enabled of this TelemetryConfig.  # noqa: E501
        :type: bool
        """
        if schedule_enabled is None:
            raise ValueError("Invalid value for `schedule_enabled`, must not be `None`")  # noqa: E501

        self._schedule_enabled = schedule_enabled

    @property
    def telemetry_proxy(self):
        """Gets the telemetry_proxy of this TelemetryConfig.  # noqa: E501


        :return: The telemetry_proxy of this TelemetryConfig.  # noqa: E501
        :rtype: TelemetryProxy
        """
        return self._telemetry_proxy

    @telemetry_proxy.setter
    def telemetry_proxy(self, telemetry_proxy):
        """Sets the telemetry_proxy of this TelemetryConfig.


        :param telemetry_proxy: The telemetry_proxy of this TelemetryConfig.  # noqa: E501
        :type: TelemetryProxy
        """

        self._telemetry_proxy = telemetry_proxy

    @property
    def ceip_acceptance(self):
        """Gets the ceip_acceptance of this TelemetryConfig.  # noqa: E501

        Enable this flag to participate in the Customer Experience Improvement Program.   # noqa: E501

        :return: The ceip_acceptance of this TelemetryConfig.  # noqa: E501
        :rtype: bool
        """
        return self._ceip_acceptance

    @ceip_acceptance.setter
    def ceip_acceptance(self, ceip_acceptance):
        """Sets the ceip_acceptance of this TelemetryConfig.

        Enable this flag to participate in the Customer Experience Improvement Program.   # noqa: E501

        :param ceip_acceptance: The ceip_acceptance of this TelemetryConfig.  # noqa: E501
        :type: bool
        """
        if ceip_acceptance is None:
            raise ValueError("Invalid value for `ceip_acceptance`, must not be `None`")  # noqa: E501

        self._ceip_acceptance = ceip_acceptance

    @property
    def telemetry_schedule(self):
        """Gets the telemetry_schedule of this TelemetryConfig.  # noqa: E501


        :return: The telemetry_schedule of this TelemetryConfig.  # noqa: E501
        :rtype: TelemetrySchedule
        """
        return self._telemetry_schedule

    @telemetry_schedule.setter
    def telemetry_schedule(self, telemetry_schedule):
        """Sets the telemetry_schedule of this TelemetryConfig.


        :param telemetry_schedule: The telemetry_schedule of this TelemetryConfig.  # noqa: E501
        :type: TelemetrySchedule
        """

        self._telemetry_schedule = telemetry_schedule

    @property
    def proxy_enabled(self):
        """Gets the proxy_enabled of this TelemetryConfig.  # noqa: E501

        Enable this flag to specify a proxy, and provide the proxy settings.  # noqa: E501

        :return: The proxy_enabled of this TelemetryConfig.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_enabled

    @proxy_enabled.setter
    def proxy_enabled(self, proxy_enabled):
        """Sets the proxy_enabled of this TelemetryConfig.

        Enable this flag to specify a proxy, and provide the proxy settings.  # noqa: E501

        :param proxy_enabled: The proxy_enabled of this TelemetryConfig.  # noqa: E501
        :type: bool
        """

        self._proxy_enabled = proxy_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TelemetryConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TelemetryConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
