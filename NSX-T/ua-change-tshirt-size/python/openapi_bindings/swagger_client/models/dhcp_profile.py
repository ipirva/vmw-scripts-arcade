# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class DhcpProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'edge_cluster_member_indexes': 'list[int]',
        'enable_standby_relocation': 'bool',
        'edge_cluster_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'edge_cluster_member_indexes': 'edge_cluster_member_indexes',
        'enable_standby_relocation': 'enable_standby_relocation',
        'edge_cluster_id': 'edge_cluster_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, edge_cluster_member_indexes=None, enable_standby_relocation=False, edge_cluster_id=None, *args, **kwargs):  # noqa: E501
        """DhcpProfile - a model defined in Swagger"""  # noqa: E501
        self._edge_cluster_member_indexes = None
        self._enable_standby_relocation = None
        self._edge_cluster_id = None
        self.discriminator = None
        if edge_cluster_member_indexes is not None:
            self.edge_cluster_member_indexes = edge_cluster_member_indexes
        if enable_standby_relocation is not None:
            self.enable_standby_relocation = enable_standby_relocation
        self.edge_cluster_id = edge_cluster_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def edge_cluster_member_indexes(self):
        """Gets the edge_cluster_member_indexes of this DhcpProfile.  # noqa: E501

        The Edge nodes on which the DHCP servers run. If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If only one edge node is provided, the DHCP servers will run without HA support.   # noqa: E501

        :return: The edge_cluster_member_indexes of this DhcpProfile.  # noqa: E501
        :rtype: list[int]
        """
        return self._edge_cluster_member_indexes

    @edge_cluster_member_indexes.setter
    def edge_cluster_member_indexes(self, edge_cluster_member_indexes):
        """Sets the edge_cluster_member_indexes of this DhcpProfile.

        The Edge nodes on which the DHCP servers run. If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If only one edge node is provided, the DHCP servers will run without HA support.   # noqa: E501

        :param edge_cluster_member_indexes: The edge_cluster_member_indexes of this DhcpProfile.  # noqa: E501
        :type: list[int]
        """

        self._edge_cluster_member_indexes = edge_cluster_member_indexes

    @property
    def enable_standby_relocation(self):
        """Gets the enable_standby_relocation of this DhcpProfile.  # noqa: E501

        Flag to enable the auto-relocation of standby DHCP Service in case of edge node failure. Only tier 1 and auto placed DHCP servers are considered for the relocation.   # noqa: E501

        :return: The enable_standby_relocation of this DhcpProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enable_standby_relocation

    @enable_standby_relocation.setter
    def enable_standby_relocation(self, enable_standby_relocation):
        """Sets the enable_standby_relocation of this DhcpProfile.

        Flag to enable the auto-relocation of standby DHCP Service in case of edge node failure. Only tier 1 and auto placed DHCP servers are considered for the relocation.   # noqa: E501

        :param enable_standby_relocation: The enable_standby_relocation of this DhcpProfile.  # noqa: E501
        :type: bool
        """

        self._enable_standby_relocation = enable_standby_relocation

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this DhcpProfile.  # noqa: E501

        Edge cluster uuid on which the referencing logical DHCP server runs.   # noqa: E501

        :return: The edge_cluster_id of this DhcpProfile.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this DhcpProfile.

        Edge cluster uuid on which the referencing logical DHCP server runs.   # noqa: E501

        :param edge_cluster_id: The edge_cluster_id of this DhcpProfile.  # noqa: E501
        :type: str
        """
        if edge_cluster_id is None:
            raise ValueError("Invalid value for `edge_cluster_id`, must not be `None`")  # noqa: E501

        self._edge_cluster_id = edge_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
