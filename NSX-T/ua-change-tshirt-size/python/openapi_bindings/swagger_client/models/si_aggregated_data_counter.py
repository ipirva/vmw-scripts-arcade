# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SIAggregatedDataCounter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tx_bytes': 'SIDataCounter',
        'rx_packets': 'SIDataCounter',
        'tx_packets': 'SIDataCounter',
        'rx_bytes': 'SIDataCounter'
    }

    attribute_map = {
        'tx_bytes': 'tx_bytes',
        'rx_packets': 'rx_packets',
        'tx_packets': 'tx_packets',
        'rx_bytes': 'rx_bytes'
    }

    def __init__(self, tx_bytes=None, rx_packets=None, tx_packets=None, rx_bytes=None):  # noqa: E501
        """SIAggregatedDataCounter - a model defined in Swagger"""  # noqa: E501
        self._tx_bytes = None
        self._rx_packets = None
        self._tx_packets = None
        self._rx_bytes = None
        self.discriminator = None
        if tx_bytes is not None:
            self.tx_bytes = tx_bytes
        if rx_packets is not None:
            self.rx_packets = rx_packets
        if tx_packets is not None:
            self.tx_packets = tx_packets
        if rx_bytes is not None:
            self.rx_bytes = rx_bytes

    @property
    def tx_bytes(self):
        """Gets the tx_bytes of this SIAggregatedDataCounter.  # noqa: E501


        :return: The tx_bytes of this SIAggregatedDataCounter.  # noqa: E501
        :rtype: SIDataCounter
        """
        return self._tx_bytes

    @tx_bytes.setter
    def tx_bytes(self, tx_bytes):
        """Sets the tx_bytes of this SIAggregatedDataCounter.


        :param tx_bytes: The tx_bytes of this SIAggregatedDataCounter.  # noqa: E501
        :type: SIDataCounter
        """

        self._tx_bytes = tx_bytes

    @property
    def rx_packets(self):
        """Gets the rx_packets of this SIAggregatedDataCounter.  # noqa: E501


        :return: The rx_packets of this SIAggregatedDataCounter.  # noqa: E501
        :rtype: SIDataCounter
        """
        return self._rx_packets

    @rx_packets.setter
    def rx_packets(self, rx_packets):
        """Sets the rx_packets of this SIAggregatedDataCounter.


        :param rx_packets: The rx_packets of this SIAggregatedDataCounter.  # noqa: E501
        :type: SIDataCounter
        """

        self._rx_packets = rx_packets

    @property
    def tx_packets(self):
        """Gets the tx_packets of this SIAggregatedDataCounter.  # noqa: E501


        :return: The tx_packets of this SIAggregatedDataCounter.  # noqa: E501
        :rtype: SIDataCounter
        """
        return self._tx_packets

    @tx_packets.setter
    def tx_packets(self, tx_packets):
        """Sets the tx_packets of this SIAggregatedDataCounter.


        :param tx_packets: The tx_packets of this SIAggregatedDataCounter.  # noqa: E501
        :type: SIDataCounter
        """

        self._tx_packets = tx_packets

    @property
    def rx_bytes(self):
        """Gets the rx_bytes of this SIAggregatedDataCounter.  # noqa: E501


        :return: The rx_bytes of this SIAggregatedDataCounter.  # noqa: E501
        :rtype: SIDataCounter
        """
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, rx_bytes):
        """Sets the rx_bytes of this SIAggregatedDataCounter.


        :param rx_bytes: The rx_bytes of this SIAggregatedDataCounter.  # noqa: E501
        :type: SIDataCounter
        """

        self._rx_bytes = rx_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SIAggregatedDataCounter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SIAggregatedDataCounter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
