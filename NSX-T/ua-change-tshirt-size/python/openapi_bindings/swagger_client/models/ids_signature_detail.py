# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IDSSignatureDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_product': 'str',
        'direction': 'str',
        'protocol': 'str',
        'class_type': 'str',
        'enabled': 'bool',
        'action': 'str',
        'tag': 'list[str]',
        'malware_family': 'str',
        'name': 'str',
        'category': 'list[str]',
        'cvssv3': 'str',
        'cvssv2': 'str',
        'severity': 'str',
        'signature_revision': 'int',
        'performance_impact': 'str',
        'flow': 'str',
        'signature_severity': 'str',
        'urls': 'list[str]',
        'policy': 'list[str]',
        'attack_target': 'str',
        'signature_id': 'int',
        'cves': 'list[str]',
        'type': 'list[str]',
        'resource_type': 'str'
    }

    attribute_map = {
        'affected_product': 'affected_product',
        'direction': 'direction',
        'protocol': 'protocol',
        'class_type': 'class_type',
        'enabled': 'enabled',
        'action': 'action',
        'tag': 'tag',
        'malware_family': 'malware_family',
        'name': 'name',
        'category': 'category',
        'cvssv3': 'cvssv3',
        'cvssv2': 'cvssv2',
        'severity': 'severity',
        'signature_revision': 'signature_revision',
        'performance_impact': 'performance_impact',
        'flow': 'flow',
        'signature_severity': 'signature_severity',
        'urls': 'urls',
        'policy': 'policy',
        'attack_target': 'attack_target',
        'signature_id': 'signature_id',
        'cves': 'cves',
        'type': 'type',
        'resource_type': 'resource_type'
    }

    def __init__(self, affected_product=None, direction=None, protocol=None, class_type=None, enabled=None, action=None, tag=None, malware_family=None, name=None, category=None, cvssv3=None, cvssv2=None, severity=None, signature_revision=None, performance_impact=None, flow=None, signature_severity=None, urls=None, policy=None, attack_target=None, signature_id=None, cves=None, type=None, resource_type=None):  # noqa: E501
        """IDSSignatureDetail - a model defined in Swagger"""  # noqa: E501
        self._affected_product = None
        self._direction = None
        self._protocol = None
        self._class_type = None
        self._enabled = None
        self._action = None
        self._tag = None
        self._malware_family = None
        self._name = None
        self._category = None
        self._cvssv3 = None
        self._cvssv2 = None
        self._severity = None
        self._signature_revision = None
        self._performance_impact = None
        self._flow = None
        self._signature_severity = None
        self._urls = None
        self._policy = None
        self._attack_target = None
        self._signature_id = None
        self._cves = None
        self._type = None
        self._resource_type = None
        self.discriminator = None
        if affected_product is not None:
            self.affected_product = affected_product
        if direction is not None:
            self.direction = direction
        if protocol is not None:
            self.protocol = protocol
        if class_type is not None:
            self.class_type = class_type
        if enabled is not None:
            self.enabled = enabled
        if action is not None:
            self.action = action
        if tag is not None:
            self.tag = tag
        if malware_family is not None:
            self.malware_family = malware_family
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if cvssv3 is not None:
            self.cvssv3 = cvssv3
        if cvssv2 is not None:
            self.cvssv2 = cvssv2
        if severity is not None:
            self.severity = severity
        if signature_revision is not None:
            self.signature_revision = signature_revision
        if performance_impact is not None:
            self.performance_impact = performance_impact
        if flow is not None:
            self.flow = flow
        if signature_severity is not None:
            self.signature_severity = signature_severity
        if urls is not None:
            self.urls = urls
        if policy is not None:
            self.policy = policy
        if attack_target is not None:
            self.attack_target = attack_target
        if signature_id is not None:
            self.signature_id = signature_id
        if cves is not None:
            self.cves = cves
        if type is not None:
            self.type = type
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def affected_product(self):
        """Gets the affected_product of this IDSSignatureDetail.  # noqa: E501

        Product affected by the signature.  # noqa: E501

        :return: The affected_product of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._affected_product

    @affected_product.setter
    def affected_product(self, affected_product):
        """Sets the affected_product of this IDSSignatureDetail.

        Product affected by the signature.  # noqa: E501

        :param affected_product: The affected_product of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._affected_product = affected_product

    @property
    def direction(self):
        """Gets the direction of this IDSSignatureDetail.  # noqa: E501

        Source-destination direction.  # noqa: E501

        :return: The direction of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this IDSSignatureDetail.

        Source-destination direction.  # noqa: E501

        :param direction: The direction of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def protocol(self):
        """Gets the protocol of this IDSSignatureDetail.  # noqa: E501

        Protocol used in the packet analysis.  # noqa: E501

        :return: The protocol of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IDSSignatureDetail.

        Protocol used in the packet analysis.  # noqa: E501

        :param protocol: The protocol of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def class_type(self):
        """Gets the class_type of this IDSSignatureDetail.  # noqa: E501

        Class type of the signature.  # noqa: E501

        :return: The class_type of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._class_type

    @class_type.setter
    def class_type(self, class_type):
        """Sets the class_type of this IDSSignatureDetail.

        Class type of the signature.  # noqa: E501

        :param class_type: The class_type of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._class_type = class_type

    @property
    def enabled(self):
        """Gets the enabled of this IDSSignatureDetail.  # noqa: E501

        Signature enabled.  # noqa: E501

        :return: The enabled of this IDSSignatureDetail.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IDSSignatureDetail.

        Signature enabled.  # noqa: E501

        :param enabled: The enabled of this IDSSignatureDetail.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def action(self):
        """Gets the action of this IDSSignatureDetail.  # noqa: E501

        Packet analysis action  # noqa: E501

        :return: The action of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this IDSSignatureDetail.

        Packet analysis action  # noqa: E501

        :param action: The action of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def tag(self):
        """Gets the tag of this IDSSignatureDetail.  # noqa: E501

        Vendor assigned classification tag.  # noqa: E501

        :return: The tag of this IDSSignatureDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this IDSSignatureDetail.

        Vendor assigned classification tag.  # noqa: E501

        :param tag: The tag of this IDSSignatureDetail.  # noqa: E501
        :type: list[str]
        """

        self._tag = tag

    @property
    def malware_family(self):
        """Gets the malware_family of this IDSSignatureDetail.  # noqa: E501

        Family of the malware tracked in the signature.  # noqa: E501

        :return: The malware_family of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._malware_family

    @malware_family.setter
    def malware_family(self, malware_family):
        """Sets the malware_family of this IDSSignatureDetail.

        Family of the malware tracked in the signature.  # noqa: E501

        :param malware_family: The malware_family of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._malware_family = malware_family

    @property
    def name(self):
        """Gets the name of this IDSSignatureDetail.  # noqa: E501

        Name of the signature.  # noqa: E501

        :return: The name of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IDSSignatureDetail.

        Name of the signature.  # noqa: E501

        :param name: The name of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this IDSSignatureDetail.  # noqa: E501

        VMware defined signature category.  # noqa: E501

        :return: The category of this IDSSignatureDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this IDSSignatureDetail.

        VMware defined signature category.  # noqa: E501

        :param category: The category of this IDSSignatureDetail.  # noqa: E501
        :type: list[str]
        """

        self._category = category

    @property
    def cvssv3(self):
        """Gets the cvssv3 of this IDSSignatureDetail.  # noqa: E501

        Signature CVSSV3 score.  # noqa: E501

        :return: The cvssv3 of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._cvssv3

    @cvssv3.setter
    def cvssv3(self, cvssv3):
        """Sets the cvssv3 of this IDSSignatureDetail.

        Signature CVSSV3 score.  # noqa: E501

        :param cvssv3: The cvssv3 of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._cvssv3 = cvssv3

    @property
    def cvssv2(self):
        """Gets the cvssv2 of this IDSSignatureDetail.  # noqa: E501

        Signature CVSSV2 score.  # noqa: E501

        :return: The cvssv2 of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._cvssv2

    @cvssv2.setter
    def cvssv2(self, cvssv2):
        """Sets the cvssv2 of this IDSSignatureDetail.

        Signature CVSSV2 score.  # noqa: E501

        :param cvssv2: The cvssv2 of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._cvssv2 = cvssv2

    @property
    def severity(self):
        """Gets the severity of this IDSSignatureDetail.  # noqa: E501

        VMware defined signature severity.  # noqa: E501

        :return: The severity of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this IDSSignatureDetail.

        VMware defined signature severity.  # noqa: E501

        :param severity: The severity of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def signature_revision(self):
        """Gets the signature_revision of this IDSSignatureDetail.  # noqa: E501

        The revision of the signature  # noqa: E501

        :return: The signature_revision of this IDSSignatureDetail.  # noqa: E501
        :rtype: int
        """
        return self._signature_revision

    @signature_revision.setter
    def signature_revision(self, signature_revision):
        """Sets the signature_revision of this IDSSignatureDetail.

        The revision of the signature  # noqa: E501

        :param signature_revision: The signature_revision of this IDSSignatureDetail.  # noqa: E501
        :type: int
        """

        self._signature_revision = signature_revision

    @property
    def performance_impact(self):
        """Gets the performance_impact of this IDSSignatureDetail.  # noqa: E501

        Performance impact of the signature.  # noqa: E501

        :return: The performance_impact of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._performance_impact

    @performance_impact.setter
    def performance_impact(self, performance_impact):
        """Sets the performance_impact of this IDSSignatureDetail.

        Performance impact of the signature.  # noqa: E501

        :param performance_impact: The performance_impact of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._performance_impact = performance_impact

    @property
    def flow(self):
        """Gets the flow of this IDSSignatureDetail.  # noqa: E501

        Flow established from server, from client etc.  # noqa: E501

        :return: The flow of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this IDSSignatureDetail.

        Flow established from server, from client etc.  # noqa: E501

        :param flow: The flow of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._flow = flow

    @property
    def signature_severity(self):
        """Gets the signature_severity of this IDSSignatureDetail.  # noqa: E501

        Signature vendor set severity of the signature rule.  # noqa: E501

        :return: The signature_severity of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._signature_severity

    @signature_severity.setter
    def signature_severity(self, signature_severity):
        """Sets the signature_severity of this IDSSignatureDetail.

        Signature vendor set severity of the signature rule.  # noqa: E501

        :param signature_severity: The signature_severity of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._signature_severity = signature_severity

    @property
    def urls(self):
        """Gets the urls of this IDSSignatureDetail.  # noqa: E501

        List of mitre attack URLs pertaining to signature.  # noqa: E501

        :return: The urls of this IDSSignatureDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this IDSSignatureDetail.

        List of mitre attack URLs pertaining to signature.  # noqa: E501

        :param urls: The urls of this IDSSignatureDetail.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def policy(self):
        """Gets the policy of this IDSSignatureDetail.  # noqa: E501

        Signature policy.  # noqa: E501

        :return: The policy of this IDSSignatureDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this IDSSignatureDetail.

        Signature policy.  # noqa: E501

        :param policy: The policy of this IDSSignatureDetail.  # noqa: E501
        :type: list[str]
        """

        self._policy = policy

    @property
    def attack_target(self):
        """Gets the attack_target of this IDSSignatureDetail.  # noqa: E501

        Target of the attack tracked in the signature.  # noqa: E501

        :return: The attack_target of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._attack_target

    @attack_target.setter
    def attack_target(self, attack_target):
        """Sets the attack_target of this IDSSignatureDetail.

        Target of the attack tracked in the signature.  # noqa: E501

        :param attack_target: The attack_target of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._attack_target = attack_target

    @property
    def signature_id(self):
        """Gets the signature_id of this IDSSignatureDetail.  # noqa: E501

        Unique ID of the signature rule.  # noqa: E501

        :return: The signature_id of this IDSSignatureDetail.  # noqa: E501
        :rtype: int
        """
        return self._signature_id

    @signature_id.setter
    def signature_id(self, signature_id):
        """Sets the signature_id of this IDSSignatureDetail.

        Unique ID of the signature rule.  # noqa: E501

        :param signature_id: The signature_id of this IDSSignatureDetail.  # noqa: E501
        :type: int
        """

        self._signature_id = signature_id

    @property
    def cves(self):
        """Gets the cves of this IDSSignatureDetail.  # noqa: E501

        CVE of the signature.  # noqa: E501

        :return: The cves of this IDSSignatureDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._cves

    @cves.setter
    def cves(self, cves):
        """Sets the cves of this IDSSignatureDetail.

        CVE of the signature.  # noqa: E501

        :param cves: The cves of this IDSSignatureDetail.  # noqa: E501
        :type: list[str]
        """

        self._cves = cves

    @property
    def type(self):
        """Gets the type of this IDSSignatureDetail.  # noqa: E501

        Signature type.  # noqa: E501

        :return: The type of this IDSSignatureDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IDSSignatureDetail.

        Signature type.  # noqa: E501

        :param type: The type of this IDSSignatureDetail.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def resource_type(self):
        """Gets the resource_type of this IDSSignatureDetail.  # noqa: E501

        IDSSignatureDetail resource type.  # noqa: E501

        :return: The resource_type of this IDSSignatureDetail.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this IDSSignatureDetail.

        IDSSignatureDetail resource type.  # noqa: E501

        :param resource_type: The resource_type of this IDSSignatureDetail.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IDSSignatureDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDSSignatureDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
