# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GuestInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'os_name': 'str',
        'computer_name': 'str'
    }

    attribute_map = {
        'os_name': 'os_name',
        'computer_name': 'computer_name'
    }

    def __init__(self, os_name=None, computer_name=None):  # noqa: E501
        """GuestInfo - a model defined in Swagger"""  # noqa: E501
        self._os_name = None
        self._computer_name = None
        self.discriminator = None
        if os_name is not None:
            self.os_name = os_name
        if computer_name is not None:
            self.computer_name = computer_name

    @property
    def os_name(self):
        """Gets the os_name of this GuestInfo.  # noqa: E501

        OS name of guest virtual machine. Currently this is supported for guests on ESXi that have VMware Tools installed.   # noqa: E501

        :return: The os_name of this GuestInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this GuestInfo.

        OS name of guest virtual machine. Currently this is supported for guests on ESXi that have VMware Tools installed.   # noqa: E501

        :param os_name: The os_name of this GuestInfo.  # noqa: E501
        :type: str
        """

        self._os_name = os_name

    @property
    def computer_name(self):
        """Gets the computer_name of this GuestInfo.  # noqa: E501

        Computer name of guest virtual machine, which is set inside guest OS. Currently this is supported for guests on ESXi that have VMware Tools installed.   # noqa: E501

        :return: The computer_name of this GuestInfo.  # noqa: E501
        :rtype: str
        """
        return self._computer_name

    @computer_name.setter
    def computer_name(self, computer_name):
        """Sets the computer_name of this GuestInfo.

        Computer name of guest virtual machine, which is set inside guest OS. Currently this is supported for guests on ESXi that have VMware Tools installed.   # noqa: E501

        :param computer_name: The computer_name of this GuestInfo.  # noqa: E501
        :type: str
        """

        self._computer_name = computer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuestInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuestInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
