# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BrokerProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'broker_is_master': 'str',
        'broker_ip_address': 'str',
        'broker_virtual_host': 'str',
        'broker_ssl_cert_thumbprint': 'str',
        'broker_port': 'str',
        'broker_fqdn': 'str'
    }

    attribute_map = {
        'broker_is_master': 'BrokerIsMaster',
        'broker_ip_address': 'BrokerIpAddress',
        'broker_virtual_host': 'BrokerVirtualHost',
        'broker_ssl_cert_thumbprint': 'BrokerSslCertThumbprint',
        'broker_port': 'BrokerPort',
        'broker_fqdn': 'BrokerFqdn'
    }

    def __init__(self, broker_is_master=None, broker_ip_address=None, broker_virtual_host=None, broker_ssl_cert_thumbprint=None, broker_port=None, broker_fqdn=None):  # noqa: E501
        """BrokerProperties - a model defined in Swagger"""  # noqa: E501
        self._broker_is_master = None
        self._broker_ip_address = None
        self._broker_virtual_host = None
        self._broker_ssl_cert_thumbprint = None
        self._broker_port = None
        self._broker_fqdn = None
        self.discriminator = None
        if broker_is_master is not None:
            self.broker_is_master = broker_is_master
        self.broker_ip_address = broker_ip_address
        if broker_virtual_host is not None:
            self.broker_virtual_host = broker_virtual_host
        self.broker_ssl_cert_thumbprint = broker_ssl_cert_thumbprint
        if broker_port is not None:
            self.broker_port = broker_port
        if broker_fqdn is not None:
            self.broker_fqdn = broker_fqdn

    @property
    def broker_is_master(self):
        """Gets the broker_is_master of this BrokerProperties.  # noqa: E501

        Indicates whether this broker is the master.  # noqa: E501

        :return: The broker_is_master of this BrokerProperties.  # noqa: E501
        :rtype: str
        """
        return self._broker_is_master

    @broker_is_master.setter
    def broker_is_master(self, broker_is_master):
        """Sets the broker_is_master of this BrokerProperties.

        Indicates whether this broker is the master.  # noqa: E501

        :param broker_is_master: The broker_is_master of this BrokerProperties.  # noqa: E501
        :type: str
        """

        self._broker_is_master = broker_is_master

    @property
    def broker_ip_address(self):
        """Gets the broker_ip_address of this BrokerProperties.  # noqa: E501

        IP address or hostname of the message bus broker on the management plane node.  # noqa: E501

        :return: The broker_ip_address of this BrokerProperties.  # noqa: E501
        :rtype: str
        """
        return self._broker_ip_address

    @broker_ip_address.setter
    def broker_ip_address(self, broker_ip_address):
        """Sets the broker_ip_address of this BrokerProperties.

        IP address or hostname of the message bus broker on the management plane node.  # noqa: E501

        :param broker_ip_address: The broker_ip_address of this BrokerProperties.  # noqa: E501
        :type: str
        """
        if broker_ip_address is None:
            raise ValueError("Invalid value for `broker_ip_address`, must not be `None`")  # noqa: E501

        self._broker_ip_address = broker_ip_address

    @property
    def broker_virtual_host(self):
        """Gets the broker_virtual_host of this BrokerProperties.  # noqa: E501

        Type of host running the broker.  # noqa: E501

        :return: The broker_virtual_host of this BrokerProperties.  # noqa: E501
        :rtype: str
        """
        return self._broker_virtual_host

    @broker_virtual_host.setter
    def broker_virtual_host(self, broker_virtual_host):
        """Sets the broker_virtual_host of this BrokerProperties.

        Type of host running the broker.  # noqa: E501

        :param broker_virtual_host: The broker_virtual_host of this BrokerProperties.  # noqa: E501
        :type: str
        """

        self._broker_virtual_host = broker_virtual_host

    @property
    def broker_ssl_cert_thumbprint(self):
        """Gets the broker_ssl_cert_thumbprint of this BrokerProperties.  # noqa: E501

        Certificate thumbprint of the message bus broker on the management plane node.  # noqa: E501

        :return: The broker_ssl_cert_thumbprint of this BrokerProperties.  # noqa: E501
        :rtype: str
        """
        return self._broker_ssl_cert_thumbprint

    @broker_ssl_cert_thumbprint.setter
    def broker_ssl_cert_thumbprint(self, broker_ssl_cert_thumbprint):
        """Sets the broker_ssl_cert_thumbprint of this BrokerProperties.

        Certificate thumbprint of the message bus broker on the management plane node.  # noqa: E501

        :param broker_ssl_cert_thumbprint: The broker_ssl_cert_thumbprint of this BrokerProperties.  # noqa: E501
        :type: str
        """
        if broker_ssl_cert_thumbprint is None:
            raise ValueError("Invalid value for `broker_ssl_cert_thumbprint`, must not be `None`")  # noqa: E501

        self._broker_ssl_cert_thumbprint = broker_ssl_cert_thumbprint

    @property
    def broker_port(self):
        """Gets the broker_port of this BrokerProperties.  # noqa: E501

        Port number of the message bus broker on the management plane node.  # noqa: E501

        :return: The broker_port of this BrokerProperties.  # noqa: E501
        :rtype: str
        """
        return self._broker_port

    @broker_port.setter
    def broker_port(self, broker_port):
        """Sets the broker_port of this BrokerProperties.

        Port number of the message bus broker on the management plane node.  # noqa: E501

        :param broker_port: The broker_port of this BrokerProperties.  # noqa: E501
        :type: str
        """

        self._broker_port = broker_port

    @property
    def broker_fqdn(self):
        """Gets the broker_fqdn of this BrokerProperties.  # noqa: E501

        Fully qualified domain name of the message bus broker on the management plane node.  # noqa: E501

        :return: The broker_fqdn of this BrokerProperties.  # noqa: E501
        :rtype: str
        """
        return self._broker_fqdn

    @broker_fqdn.setter
    def broker_fqdn(self, broker_fqdn):
        """Sets the broker_fqdn of this BrokerProperties.

        Fully qualified domain name of the message bus broker on the management plane node.  # noqa: E501

        :param broker_fqdn: The broker_fqdn of this BrokerProperties.  # noqa: E501
        :type: str
        """

        self._broker_fqdn = broker_fqdn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrokerProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrokerProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
