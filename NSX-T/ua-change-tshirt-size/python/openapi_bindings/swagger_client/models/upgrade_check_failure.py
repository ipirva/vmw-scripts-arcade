# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeCheckFailure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component_type': 'str',
        'origin_name': 'str',
        'message': 'UpgradeCheckFailureMessage',
        'origin_id': 'str',
        'type': 'str',
        'origin_type': 'str',
        'group_name': 'str'
    }

    attribute_map = {
        'component_type': 'component_type',
        'origin_name': 'origin_name',
        'message': 'message',
        'origin_id': 'origin_id',
        'type': 'type',
        'origin_type': 'origin_type',
        'group_name': 'group_name'
    }

    def __init__(self, component_type=None, origin_name=None, message=None, origin_id=None, type=None, origin_type=None, group_name=None):  # noqa: E501
        """UpgradeCheckFailure - a model defined in Swagger"""  # noqa: E501
        self._component_type = None
        self._origin_name = None
        self._message = None
        self._origin_id = None
        self._type = None
        self._origin_type = None
        self._group_name = None
        self.discriminator = None
        if component_type is not None:
            self.component_type = component_type
        if origin_name is not None:
            self.origin_name = origin_name
        if message is not None:
            self.message = message
        if origin_id is not None:
            self.origin_id = origin_id
        if type is not None:
            self.type = type
        if origin_type is not None:
            self.origin_type = origin_type
        if group_name is not None:
            self.group_name = group_name

    @property
    def component_type(self):
        """Gets the component_type of this UpgradeCheckFailure.  # noqa: E501

        Component type of the origin of failure  # noqa: E501

        :return: The component_type of this UpgradeCheckFailure.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this UpgradeCheckFailure.

        Component type of the origin of failure  # noqa: E501

        :param component_type: The component_type of this UpgradeCheckFailure.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def origin_name(self):
        """Gets the origin_name of this UpgradeCheckFailure.  # noqa: E501

        Name of origin of pre/post-upgrade check failure  # noqa: E501

        :return: The origin_name of this UpgradeCheckFailure.  # noqa: E501
        :rtype: str
        """
        return self._origin_name

    @origin_name.setter
    def origin_name(self, origin_name):
        """Sets the origin_name of this UpgradeCheckFailure.

        Name of origin of pre/post-upgrade check failure  # noqa: E501

        :param origin_name: The origin_name of this UpgradeCheckFailure.  # noqa: E501
        :type: str
        """

        self._origin_name = origin_name

    @property
    def message(self):
        """Gets the message of this UpgradeCheckFailure.  # noqa: E501


        :return: The message of this UpgradeCheckFailure.  # noqa: E501
        :rtype: UpgradeCheckFailureMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpgradeCheckFailure.


        :param message: The message of this UpgradeCheckFailure.  # noqa: E501
        :type: UpgradeCheckFailureMessage
        """

        self._message = message

    @property
    def origin_id(self):
        """Gets the origin_id of this UpgradeCheckFailure.  # noqa: E501

        Unique id of origin of pre/post-upgrade check failure  # noqa: E501

        :return: The origin_id of this UpgradeCheckFailure.  # noqa: E501
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this UpgradeCheckFailure.

        Unique id of origin of pre/post-upgrade check failure  # noqa: E501

        :param origin_id: The origin_id of this UpgradeCheckFailure.  # noqa: E501
        :type: str
        """

        self._origin_id = origin_id

    @property
    def type(self):
        """Gets the type of this UpgradeCheckFailure.  # noqa: E501

        Type of the pre/post-upgrade check failure  # noqa: E501

        :return: The type of this UpgradeCheckFailure.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpgradeCheckFailure.

        Type of the pre/post-upgrade check failure  # noqa: E501

        :param type: The type of this UpgradeCheckFailure.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAILURE", "WARNING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def origin_type(self):
        """Gets the origin_type of this UpgradeCheckFailure.  # noqa: E501

        Type of origin of pre/post-upgrade check failure  # noqa: E501

        :return: The origin_type of this UpgradeCheckFailure.  # noqa: E501
        :rtype: str
        """
        return self._origin_type

    @origin_type.setter
    def origin_type(self, origin_type):
        """Sets the origin_type of this UpgradeCheckFailure.

        Type of origin of pre/post-upgrade check failure  # noqa: E501

        :param origin_type: The origin_type of this UpgradeCheckFailure.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPONENT", "UPGRADE_UNIT"]  # noqa: E501
        if origin_type not in allowed_values:
            raise ValueError(
                "Invalid value for `origin_type` ({0}), must be one of {1}"  # noqa: E501
                .format(origin_type, allowed_values)
            )

        self._origin_type = origin_type

    @property
    def group_name(self):
        """Gets the group_name of this UpgradeCheckFailure.  # noqa: E501

        Name of the upgrade group of the origin of failure. Only applicable when origin_type is UPGRADE_UNIT.   # noqa: E501

        :return: The group_name of this UpgradeCheckFailure.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this UpgradeCheckFailure.

        Name of the upgrade group of the origin of failure. Only applicable when origin_type is UPGRADE_UNIT.   # noqa: E501

        :param group_name: The group_name of this UpgradeCheckFailure.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeCheckFailure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeCheckFailure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
