# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.mirror_destination import MirrorDestination  # noqa: F401,E501

class IPMirrorDestination(MirrorDestination):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_ips': 'list[str]',
        'encapsulation_type': 'str',
        'erspan_id': 'int',
        'gre_key': 'int'
    }
    if hasattr(MirrorDestination, "swagger_types"):
        swagger_types.update(MirrorDestination.swagger_types)

    attribute_map = {
        'destination_ips': 'destination_ips',
        'encapsulation_type': 'encapsulation_type',
        'erspan_id': 'erspan_id',
        'gre_key': 'gre_key'
    }
    if hasattr(MirrorDestination, "attribute_map"):
        attribute_map.update(MirrorDestination.attribute_map)

    def __init__(self, destination_ips=None, encapsulation_type='GRE', erspan_id=None, gre_key=None, *args, **kwargs):  # noqa: E501
        """IPMirrorDestination - a model defined in Swagger"""  # noqa: E501
        self._destination_ips = None
        self._encapsulation_type = None
        self._erspan_id = None
        self._gre_key = None
        self.discriminator = None
        self.destination_ips = destination_ips
        self.encapsulation_type = encapsulation_type
        if erspan_id is not None:
            self.erspan_id = erspan_id
        if gre_key is not None:
            self.gre_key = gre_key
        MirrorDestination.__init__(self, *args, **kwargs)

    @property
    def destination_ips(self):
        """Gets the destination_ips of this IPMirrorDestination.  # noqa: E501

        The destination IPs of the mirror packet will be sent to.  # noqa: E501

        :return: The destination_ips of this IPMirrorDestination.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_ips

    @destination_ips.setter
    def destination_ips(self, destination_ips):
        """Sets the destination_ips of this IPMirrorDestination.

        The destination IPs of the mirror packet will be sent to.  # noqa: E501

        :param destination_ips: The destination_ips of this IPMirrorDestination.  # noqa: E501
        :type: list[str]
        """
        if destination_ips is None:
            raise ValueError("Invalid value for `destination_ips`, must not be `None`")  # noqa: E501

        self._destination_ips = destination_ips

    @property
    def encapsulation_type(self):
        """Gets the encapsulation_type of this IPMirrorDestination.  # noqa: E501

        You can choose GRE, ERSPAN II or ERSPAN III.  # noqa: E501

        :return: The encapsulation_type of this IPMirrorDestination.  # noqa: E501
        :rtype: str
        """
        return self._encapsulation_type

    @encapsulation_type.setter
    def encapsulation_type(self, encapsulation_type):
        """Sets the encapsulation_type of this IPMirrorDestination.

        You can choose GRE, ERSPAN II or ERSPAN III.  # noqa: E501

        :param encapsulation_type: The encapsulation_type of this IPMirrorDestination.  # noqa: E501
        :type: str
        """
        if encapsulation_type is None:
            raise ValueError("Invalid value for `encapsulation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["GRE", "ERSPAN_TWO", "ERSPAN_THREE"]  # noqa: E501
        if encapsulation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encapsulation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(encapsulation_type, allowed_values)
            )

        self._encapsulation_type = encapsulation_type

    @property
    def erspan_id(self):
        """Gets the erspan_id of this IPMirrorDestination.  # noqa: E501

        Used by physical switch for the mirror traffic forwarding. Must be provided and only effective when encapsulation type is ERSPAN type II or type III.   # noqa: E501

        :return: The erspan_id of this IPMirrorDestination.  # noqa: E501
        :rtype: int
        """
        return self._erspan_id

    @erspan_id.setter
    def erspan_id(self, erspan_id):
        """Sets the erspan_id of this IPMirrorDestination.

        Used by physical switch for the mirror traffic forwarding. Must be provided and only effective when encapsulation type is ERSPAN type II or type III.   # noqa: E501

        :param erspan_id: The erspan_id of this IPMirrorDestination.  # noqa: E501
        :type: int
        """

        self._erspan_id = erspan_id

    @property
    def gre_key(self):
        """Gets the gre_key of this IPMirrorDestination.  # noqa: E501

        User-configurable 32-bit key only for GRE  # noqa: E501

        :return: The gre_key of this IPMirrorDestination.  # noqa: E501
        :rtype: int
        """
        return self._gre_key

    @gre_key.setter
    def gre_key(self, gre_key):
        """Sets the gre_key of this IPMirrorDestination.

        User-configurable 32-bit key only for GRE  # noqa: E501

        :param gre_key: The gre_key of this IPMirrorDestination.  # noqa: E501
        :type: int
        """

        self._gre_key = gre_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPMirrorDestination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPMirrorDestination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
