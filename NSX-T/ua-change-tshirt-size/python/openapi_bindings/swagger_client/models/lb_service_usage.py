# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbServiceUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pool_capacity': 'int',
        'service_size': 'str',
        'severity': 'str',
        'pool_member_capacity': 'int',
        'current_virtual_server_count': 'int',
        'usage_percentage': 'float',
        'service_id': 'str',
        'current_pool_count': 'int',
        'virtual_server_capacity': 'int',
        'current_pool_member_count': 'int'
    }

    attribute_map = {
        'pool_capacity': 'pool_capacity',
        'service_size': 'service_size',
        'severity': 'severity',
        'pool_member_capacity': 'pool_member_capacity',
        'current_virtual_server_count': 'current_virtual_server_count',
        'usage_percentage': 'usage_percentage',
        'service_id': 'service_id',
        'current_pool_count': 'current_pool_count',
        'virtual_server_capacity': 'virtual_server_capacity',
        'current_pool_member_count': 'current_pool_member_count'
    }

    def __init__(self, pool_capacity=None, service_size=None, severity=None, pool_member_capacity=None, current_virtual_server_count=None, usage_percentage=None, service_id=None, current_pool_count=None, virtual_server_capacity=None, current_pool_member_count=None):  # noqa: E501
        """LbServiceUsage - a model defined in Swagger"""  # noqa: E501
        self._pool_capacity = None
        self._service_size = None
        self._severity = None
        self._pool_member_capacity = None
        self._current_virtual_server_count = None
        self._usage_percentage = None
        self._service_id = None
        self._current_pool_count = None
        self._virtual_server_capacity = None
        self._current_pool_member_count = None
        self.discriminator = None
        if pool_capacity is not None:
            self.pool_capacity = pool_capacity
        if service_size is not None:
            self.service_size = service_size
        if severity is not None:
            self.severity = severity
        if pool_member_capacity is not None:
            self.pool_member_capacity = pool_member_capacity
        if current_virtual_server_count is not None:
            self.current_virtual_server_count = current_virtual_server_count
        if usage_percentage is not None:
            self.usage_percentage = usage_percentage
        if service_id is not None:
            self.service_id = service_id
        if current_pool_count is not None:
            self.current_pool_count = current_pool_count
        if virtual_server_capacity is not None:
            self.virtual_server_capacity = virtual_server_capacity
        if current_pool_member_count is not None:
            self.current_pool_member_count = current_pool_member_count

    @property
    def pool_capacity(self):
        """Gets the pool_capacity of this LbServiceUsage.  # noqa: E501

        Pool capacity means maximum number of pools which could be configured in the given load balancer service.   # noqa: E501

        :return: The pool_capacity of this LbServiceUsage.  # noqa: E501
        :rtype: int
        """
        return self._pool_capacity

    @pool_capacity.setter
    def pool_capacity(self, pool_capacity):
        """Sets the pool_capacity of this LbServiceUsage.

        Pool capacity means maximum number of pools which could be configured in the given load balancer service.   # noqa: E501

        :param pool_capacity: The pool_capacity of this LbServiceUsage.  # noqa: E501
        :type: int
        """

        self._pool_capacity = pool_capacity

    @property
    def service_size(self):
        """Gets the service_size of this LbServiceUsage.  # noqa: E501

        The size of load balancer service  # noqa: E501

        :return: The service_size of this LbServiceUsage.  # noqa: E501
        :rtype: str
        """
        return self._service_size

    @service_size.setter
    def service_size(self, service_size):
        """Sets the service_size of this LbServiceUsage.

        The size of load balancer service  # noqa: E501

        :param service_size: The service_size of this LbServiceUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL", "MEDIUM", "LARGE", "XLARGE", "DLB"]  # noqa: E501
        if service_size not in allowed_values:
            raise ValueError(
                "Invalid value for `service_size` ({0}), must be one of {1}"  # noqa: E501
                .format(service_size, allowed_values)
            )

        self._service_size = service_size

    @property
    def severity(self):
        """Gets the severity of this LbServiceUsage.  # noqa: E501

        The severity calculation is based on the largest usage percentage from virtual servers, pools, pool members and rules for one load balancer service.   # noqa: E501

        :return: The severity of this LbServiceUsage.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LbServiceUsage.

        The severity calculation is based on the largest usage percentage from virtual servers, pools, pool members and rules for one load balancer service.   # noqa: E501

        :param severity: The severity of this LbServiceUsage.  # noqa: E501
        :type: str
        """
        allowed_values = ["GREEN", "ORANGE", "RED"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def pool_member_capacity(self):
        """Gets the pool_member_capacity of this LbServiceUsage.  # noqa: E501

        Pool member capacity means maximum number of pool members which could be configured in the given load balancer service.   # noqa: E501

        :return: The pool_member_capacity of this LbServiceUsage.  # noqa: E501
        :rtype: int
        """
        return self._pool_member_capacity

    @pool_member_capacity.setter
    def pool_member_capacity(self, pool_member_capacity):
        """Sets the pool_member_capacity of this LbServiceUsage.

        Pool member capacity means maximum number of pool members which could be configured in the given load balancer service.   # noqa: E501

        :param pool_member_capacity: The pool_member_capacity of this LbServiceUsage.  # noqa: E501
        :type: int
        """

        self._pool_member_capacity = pool_member_capacity

    @property
    def current_virtual_server_count(self):
        """Gets the current_virtual_server_count of this LbServiceUsage.  # noqa: E501

        The current number of virtual servers which have been configured in the given load balancer service.   # noqa: E501

        :return: The current_virtual_server_count of this LbServiceUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_virtual_server_count

    @current_virtual_server_count.setter
    def current_virtual_server_count(self, current_virtual_server_count):
        """Sets the current_virtual_server_count of this LbServiceUsage.

        The current number of virtual servers which have been configured in the given load balancer service.   # noqa: E501

        :param current_virtual_server_count: The current_virtual_server_count of this LbServiceUsage.  # noqa: E501
        :type: int
        """

        self._current_virtual_server_count = current_virtual_server_count

    @property
    def usage_percentage(self):
        """Gets the usage_percentage of this LbServiceUsage.  # noqa: E501

        The usage percentage is the largest usage percentage from virtual servers, pools and pool members for the load balancer service. If the property relax_scale_validation is set as true for LbService, it is possible that the value is larger than 100.0. For example, if SMALL LBS is deployed on MEDIUM edge node and configured with MEDIUM LBS virtual server scale number, LBS usage percentage is shown larger than 100.0.   # noqa: E501

        :return: The usage_percentage of this LbServiceUsage.  # noqa: E501
        :rtype: float
        """
        return self._usage_percentage

    @usage_percentage.setter
    def usage_percentage(self, usage_percentage):
        """Sets the usage_percentage of this LbServiceUsage.

        The usage percentage is the largest usage percentage from virtual servers, pools and pool members for the load balancer service. If the property relax_scale_validation is set as true for LbService, it is possible that the value is larger than 100.0. For example, if SMALL LBS is deployed on MEDIUM edge node and configured with MEDIUM LBS virtual server scale number, LBS usage percentage is shown larger than 100.0.   # noqa: E501

        :param usage_percentage: The usage_percentage of this LbServiceUsage.  # noqa: E501
        :type: float
        """

        self._usage_percentage = usage_percentage

    @property
    def service_id(self):
        """Gets the service_id of this LbServiceUsage.  # noqa: E501

        UUID of load balancer service  # noqa: E501

        :return: The service_id of this LbServiceUsage.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this LbServiceUsage.

        UUID of load balancer service  # noqa: E501

        :param service_id: The service_id of this LbServiceUsage.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def current_pool_count(self):
        """Gets the current_pool_count of this LbServiceUsage.  # noqa: E501

        The current number of pools which have been configured in the given load balancer service.   # noqa: E501

        :return: The current_pool_count of this LbServiceUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_pool_count

    @current_pool_count.setter
    def current_pool_count(self, current_pool_count):
        """Sets the current_pool_count of this LbServiceUsage.

        The current number of pools which have been configured in the given load balancer service.   # noqa: E501

        :param current_pool_count: The current_pool_count of this LbServiceUsage.  # noqa: E501
        :type: int
        """

        self._current_pool_count = current_pool_count

    @property
    def virtual_server_capacity(self):
        """Gets the virtual_server_capacity of this LbServiceUsage.  # noqa: E501

        Virtual server capacity means maximum number of virtual servers which could be configured in the given load balancer service.   # noqa: E501

        :return: The virtual_server_capacity of this LbServiceUsage.  # noqa: E501
        :rtype: int
        """
        return self._virtual_server_capacity

    @virtual_server_capacity.setter
    def virtual_server_capacity(self, virtual_server_capacity):
        """Sets the virtual_server_capacity of this LbServiceUsage.

        Virtual server capacity means maximum number of virtual servers which could be configured in the given load balancer service.   # noqa: E501

        :param virtual_server_capacity: The virtual_server_capacity of this LbServiceUsage.  # noqa: E501
        :type: int
        """

        self._virtual_server_capacity = virtual_server_capacity

    @property
    def current_pool_member_count(self):
        """Gets the current_pool_member_count of this LbServiceUsage.  # noqa: E501

        The current number of pool members which have been configured in the given load balancer service.   # noqa: E501

        :return: The current_pool_member_count of this LbServiceUsage.  # noqa: E501
        :rtype: int
        """
        return self._current_pool_member_count

    @current_pool_member_count.setter
    def current_pool_member_count(self, current_pool_member_count):
        """Sets the current_pool_member_count of this LbServiceUsage.

        The current number of pool members which have been configured in the given load balancer service.   # noqa: E501

        :param current_pool_member_count: The current_pool_member_count of this LbServiceUsage.  # noqa: E501
        :type: int
        """

        self._current_pool_member_count = current_pool_member_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbServiceUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbServiceUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
