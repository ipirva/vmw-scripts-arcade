# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class BgpNeighbor(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'graceful_restart_mode': 'str',
        'remote_as': 'int',
        'filter_out_ipprefixlist_id': 'str',
        'hold_down_timer': 'int',
        'source_addresses': 'list[str]',
        'maximum_hop_limit': 'int',
        'enabled': 'bool',
        'remote_as_num': 'str',
        'address_families': 'list[BgpNeighborAddressFamily]',
        'bfd_config': 'BfdConfigParameters',
        'logical_router_id': 'str',
        'filter_in_ipprefixlist_id': 'str',
        'filter_out_routemap_id': 'str',
        'filter_in_routemap_id': 'str',
        'keep_alive_timer': 'int',
        'password': 'str',
        'source_address': 'str',
        'allow_as_in': 'bool',
        'enable_bfd': 'bool',
        'neighbor_address': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'graceful_restart_mode': 'graceful_restart_mode',
        'remote_as': 'remote_as',
        'filter_out_ipprefixlist_id': 'filter_out_ipprefixlist_id',
        'hold_down_timer': 'hold_down_timer',
        'source_addresses': 'source_addresses',
        'maximum_hop_limit': 'maximum_hop_limit',
        'enabled': 'enabled',
        'remote_as_num': 'remote_as_num',
        'address_families': 'address_families',
        'bfd_config': 'bfd_config',
        'logical_router_id': 'logical_router_id',
        'filter_in_ipprefixlist_id': 'filter_in_ipprefixlist_id',
        'filter_out_routemap_id': 'filter_out_routemap_id',
        'filter_in_routemap_id': 'filter_in_routemap_id',
        'keep_alive_timer': 'keep_alive_timer',
        'password': 'password',
        'source_address': 'source_address',
        'allow_as_in': 'allow_as_in',
        'enable_bfd': 'enable_bfd',
        'neighbor_address': 'neighbor_address'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, graceful_restart_mode=None, remote_as=None, filter_out_ipprefixlist_id=None, hold_down_timer=180, source_addresses=None, maximum_hop_limit=1, enabled=True, remote_as_num=None, address_families=None, bfd_config=None, logical_router_id=None, filter_in_ipprefixlist_id=None, filter_out_routemap_id=None, filter_in_routemap_id=None, keep_alive_timer=60, password=None, source_address=None, allow_as_in=False, enable_bfd=False, neighbor_address=None, *args, **kwargs):  # noqa: E501
        """BgpNeighbor - a model defined in Swagger"""  # noqa: E501
        self._graceful_restart_mode = None
        self._remote_as = None
        self._filter_out_ipprefixlist_id = None
        self._hold_down_timer = None
        self._source_addresses = None
        self._maximum_hop_limit = None
        self._enabled = None
        self._remote_as_num = None
        self._address_families = None
        self._bfd_config = None
        self._logical_router_id = None
        self._filter_in_ipprefixlist_id = None
        self._filter_out_routemap_id = None
        self._filter_in_routemap_id = None
        self._keep_alive_timer = None
        self._password = None
        self._source_address = None
        self._allow_as_in = None
        self._enable_bfd = None
        self._neighbor_address = None
        self.discriminator = None
        if graceful_restart_mode is not None:
            self.graceful_restart_mode = graceful_restart_mode
        if remote_as is not None:
            self.remote_as = remote_as
        if filter_out_ipprefixlist_id is not None:
            self.filter_out_ipprefixlist_id = filter_out_ipprefixlist_id
        if hold_down_timer is not None:
            self.hold_down_timer = hold_down_timer
        if source_addresses is not None:
            self.source_addresses = source_addresses
        if maximum_hop_limit is not None:
            self.maximum_hop_limit = maximum_hop_limit
        if enabled is not None:
            self.enabled = enabled
        if remote_as_num is not None:
            self.remote_as_num = remote_as_num
        if address_families is not None:
            self.address_families = address_families
        if bfd_config is not None:
            self.bfd_config = bfd_config
        if logical_router_id is not None:
            self.logical_router_id = logical_router_id
        if filter_in_ipprefixlist_id is not None:
            self.filter_in_ipprefixlist_id = filter_in_ipprefixlist_id
        if filter_out_routemap_id is not None:
            self.filter_out_routemap_id = filter_out_routemap_id
        if filter_in_routemap_id is not None:
            self.filter_in_routemap_id = filter_in_routemap_id
        if keep_alive_timer is not None:
            self.keep_alive_timer = keep_alive_timer
        if password is not None:
            self.password = password
        if source_address is not None:
            self.source_address = source_address
        if allow_as_in is not None:
            self.allow_as_in = allow_as_in
        if enable_bfd is not None:
            self.enable_bfd = enable_bfd
        self.neighbor_address = neighbor_address
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def graceful_restart_mode(self):
        """Gets the graceful_restart_mode of this BgpNeighbor.  # noqa: E501

        BGP Graceful Restart mode. If specified, then it will take precedence over global Graceful Restart mode configured in logical router BgpConfig otherwise BgpConfig level Graceful Restart mode will be applicable for peer.   # noqa: E501

        :return: The graceful_restart_mode of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._graceful_restart_mode

    @graceful_restart_mode.setter
    def graceful_restart_mode(self, graceful_restart_mode):
        """Sets the graceful_restart_mode of this BgpNeighbor.

        BGP Graceful Restart mode. If specified, then it will take precedence over global Graceful Restart mode configured in logical router BgpConfig otherwise BgpConfig level Graceful Restart mode will be applicable for peer.   # noqa: E501

        :param graceful_restart_mode: The graceful_restart_mode of this BgpNeighbor.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLE", "HELPER_ONLY", "GR_AND_HELPER"]  # noqa: E501
        if graceful_restart_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `graceful_restart_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(graceful_restart_mode, allowed_values)
            )

        self._graceful_restart_mode = graceful_restart_mode

    @property
    def remote_as(self):
        """Gets the remote_as of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'remote_as_num' instead.  # noqa: E501

        :return: The remote_as of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._remote_as

    @remote_as.setter
    def remote_as(self, remote_as):
        """Sets the remote_as of this BgpNeighbor.

        This is a deprecated property, Please use 'remote_as_num' instead.  # noqa: E501

        :param remote_as: The remote_as of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._remote_as = remote_as

    @property
    def filter_out_ipprefixlist_id(self):
        """Gets the filter_out_ipprefixlist_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :return: The filter_out_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_out_ipprefixlist_id

    @filter_out_ipprefixlist_id.setter
    def filter_out_ipprefixlist_id(self, filter_out_ipprefixlist_id):
        """Sets the filter_out_ipprefixlist_id of this BgpNeighbor.

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :param filter_out_ipprefixlist_id: The filter_out_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_out_ipprefixlist_id = filter_out_ipprefixlist_id

    @property
    def hold_down_timer(self):
        """Gets the hold_down_timer of this BgpNeighbor.  # noqa: E501

        Wait period (seconds) before declaring peer dead  # noqa: E501

        :return: The hold_down_timer of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._hold_down_timer

    @hold_down_timer.setter
    def hold_down_timer(self, hold_down_timer):
        """Sets the hold_down_timer of this BgpNeighbor.

        Wait period (seconds) before declaring peer dead  # noqa: E501

        :param hold_down_timer: The hold_down_timer of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._hold_down_timer = hold_down_timer

    @property
    def source_addresses(self):
        """Gets the source_addresses of this BgpNeighbor.  # noqa: E501

        BGP neighborship will be formed from all these source addresses to this neighbour.  # noqa: E501

        :return: The source_addresses of this BgpNeighbor.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_addresses

    @source_addresses.setter
    def source_addresses(self, source_addresses):
        """Sets the source_addresses of this BgpNeighbor.

        BGP neighborship will be formed from all these source addresses to this neighbour.  # noqa: E501

        :param source_addresses: The source_addresses of this BgpNeighbor.  # noqa: E501
        :type: list[str]
        """

        self._source_addresses = source_addresses

    @property
    def maximum_hop_limit(self):
        """Gets the maximum_hop_limit of this BgpNeighbor.  # noqa: E501

        This value is set on TTL(time to live) of BGP header. When router receives the BGP packet, it decrements the TTL. The default value of TTL is one when BPG request is initiated.So in the case of a BGP peer multiple hops away and and value of TTL is one, then  next router in the path will decrement the TTL to 0, realize it cant forward the packet and will drop it. If the hop count value to reach neighbor is equal to or less than the maximum_hop_limit value then intermediate router decrements the TTL count by one and forwards the request to BGP neighour. If the hop count value is greater than the maximum_hop_limit value then intermediate router discards the request when TTL becomes 0.   # noqa: E501

        :return: The maximum_hop_limit of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._maximum_hop_limit

    @maximum_hop_limit.setter
    def maximum_hop_limit(self, maximum_hop_limit):
        """Sets the maximum_hop_limit of this BgpNeighbor.

        This value is set on TTL(time to live) of BGP header. When router receives the BGP packet, it decrements the TTL. The default value of TTL is one when BPG request is initiated.So in the case of a BGP peer multiple hops away and and value of TTL is one, then  next router in the path will decrement the TTL to 0, realize it cant forward the packet and will drop it. If the hop count value to reach neighbor is equal to or less than the maximum_hop_limit value then intermediate router decrements the TTL count by one and forwards the request to BGP neighour. If the hop count value is greater than the maximum_hop_limit value then intermediate router discards the request when TTL becomes 0.   # noqa: E501

        :param maximum_hop_limit: The maximum_hop_limit of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._maximum_hop_limit = maximum_hop_limit

    @property
    def enabled(self):
        """Gets the enabled of this BgpNeighbor.  # noqa: E501

        Flag to enable this BGP Neighbor  # noqa: E501

        :return: The enabled of this BgpNeighbor.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BgpNeighbor.

        Flag to enable this BGP Neighbor  # noqa: E501

        :param enabled: The enabled of this BgpNeighbor.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def remote_as_num(self):
        """Gets the remote_as_num of this BgpNeighbor.  # noqa: E501

        4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format  # noqa: E501

        :return: The remote_as_num of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._remote_as_num

    @remote_as_num.setter
    def remote_as_num(self, remote_as_num):
        """Sets the remote_as_num of this BgpNeighbor.

        4 Byte ASN of the neighbor in ASPLAIN/ASDOT Format  # noqa: E501

        :param remote_as_num: The remote_as_num of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._remote_as_num = remote_as_num

    @property
    def address_families(self):
        """Gets the address_families of this BgpNeighbor.  # noqa: E501

        User can enable the neighbor for the specific address families and also define filters per address family. When the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons. User can change that if required, by defining the address family configuration.   # noqa: E501

        :return: The address_families of this BgpNeighbor.  # noqa: E501
        :rtype: list[BgpNeighborAddressFamily]
        """
        return self._address_families

    @address_families.setter
    def address_families(self, address_families):
        """Sets the address_families of this BgpNeighbor.

        User can enable the neighbor for the specific address families and also define filters per address family. When the neighbor is created, it is default enabled for IPV4_UNICAST address family for backward compatibility reasons. User can change that if required, by defining the address family configuration.   # noqa: E501

        :param address_families: The address_families of this BgpNeighbor.  # noqa: E501
        :type: list[BgpNeighborAddressFamily]
        """

        self._address_families = address_families

    @property
    def bfd_config(self):
        """Gets the bfd_config of this BgpNeighbor.  # noqa: E501


        :return: The bfd_config of this BgpNeighbor.  # noqa: E501
        :rtype: BfdConfigParameters
        """
        return self._bfd_config

    @bfd_config.setter
    def bfd_config(self, bfd_config):
        """Sets the bfd_config of this BgpNeighbor.


        :param bfd_config: The bfd_config of this BgpNeighbor.  # noqa: E501
        :type: BfdConfigParameters
        """

        self._bfd_config = bfd_config

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this BgpNeighbor.  # noqa: E501

        Logical router id  # noqa: E501

        :return: The logical_router_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this BgpNeighbor.

        Logical router id  # noqa: E501

        :param logical_router_id: The logical_router_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._logical_router_id = logical_router_id

    @property
    def filter_in_ipprefixlist_id(self):
        """Gets the filter_in_ipprefixlist_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please  use 'address_family' instead.  # noqa: E501

        :return: The filter_in_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_in_ipprefixlist_id

    @filter_in_ipprefixlist_id.setter
    def filter_in_ipprefixlist_id(self, filter_in_ipprefixlist_id):
        """Sets the filter_in_ipprefixlist_id of this BgpNeighbor.

        This is a deprecated property, Please  use 'address_family' instead.  # noqa: E501

        :param filter_in_ipprefixlist_id: The filter_in_ipprefixlist_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_in_ipprefixlist_id = filter_in_ipprefixlist_id

    @property
    def filter_out_routemap_id(self):
        """Gets the filter_out_routemap_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :return: The filter_out_routemap_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_out_routemap_id

    @filter_out_routemap_id.setter
    def filter_out_routemap_id(self, filter_out_routemap_id):
        """Sets the filter_out_routemap_id of this BgpNeighbor.

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :param filter_out_routemap_id: The filter_out_routemap_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_out_routemap_id = filter_out_routemap_id

    @property
    def filter_in_routemap_id(self):
        """Gets the filter_in_routemap_id of this BgpNeighbor.  # noqa: E501

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :return: The filter_in_routemap_id of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._filter_in_routemap_id

    @filter_in_routemap_id.setter
    def filter_in_routemap_id(self, filter_in_routemap_id):
        """Sets the filter_in_routemap_id of this BgpNeighbor.

        This is a deprecated property, Please use 'address_family' instead.  # noqa: E501

        :param filter_in_routemap_id: The filter_in_routemap_id of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._filter_in_routemap_id = filter_in_routemap_id

    @property
    def keep_alive_timer(self):
        """Gets the keep_alive_timer of this BgpNeighbor.  # noqa: E501

        Frequency (seconds) with which keep alive messages are sent to peers  # noqa: E501

        :return: The keep_alive_timer of this BgpNeighbor.  # noqa: E501
        :rtype: int
        """
        return self._keep_alive_timer

    @keep_alive_timer.setter
    def keep_alive_timer(self, keep_alive_timer):
        """Sets the keep_alive_timer of this BgpNeighbor.

        Frequency (seconds) with which keep alive messages are sent to peers  # noqa: E501

        :param keep_alive_timer: The keep_alive_timer of this BgpNeighbor.  # noqa: E501
        :type: int
        """

        self._keep_alive_timer = keep_alive_timer

    @property
    def password(self):
        """Gets the password of this BgpNeighbor.  # noqa: E501

        User can create (POST) the neighbor with or without the password. The view (GET) on the neighbor, would never reveal if the password is set or not. The password can be set later using edit neighbor workFlow (PUT) On the edit neighbor (PUT), if the user does not specify the password property, the older value is retained. Maximum length of this field is 20 characters.   # noqa: E501

        :return: The password of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this BgpNeighbor.

        User can create (POST) the neighbor with or without the password. The view (GET) on the neighbor, would never reveal if the password is set or not. The password can be set later using edit neighbor workFlow (PUT) On the edit neighbor (PUT), if the user does not specify the password property, the older value is retained. Maximum length of this field is 20 characters.   # noqa: E501

        :param password: The password of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def source_address(self):
        """Gets the source_address of this BgpNeighbor.  # noqa: E501

        Deprecated - do not provide a value for this field. Use source_addresses instead.  # noqa: E501

        :return: The source_address of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this BgpNeighbor.

        Deprecated - do not provide a value for this field. Use source_addresses instead.  # noqa: E501

        :param source_address: The source_address of this BgpNeighbor.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def allow_as_in(self):
        """Gets the allow_as_in of this BgpNeighbor.  # noqa: E501

        Flag to enable allowas_in option for BGP neighbor  # noqa: E501

        :return: The allow_as_in of this BgpNeighbor.  # noqa: E501
        :rtype: bool
        """
        return self._allow_as_in

    @allow_as_in.setter
    def allow_as_in(self, allow_as_in):
        """Sets the allow_as_in of this BgpNeighbor.

        Flag to enable allowas_in option for BGP neighbor  # noqa: E501

        :param allow_as_in: The allow_as_in of this BgpNeighbor.  # noqa: E501
        :type: bool
        """

        self._allow_as_in = allow_as_in

    @property
    def enable_bfd(self):
        """Gets the enable_bfd of this BgpNeighbor.  # noqa: E501

        Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.  # noqa: E501

        :return: The enable_bfd of this BgpNeighbor.  # noqa: E501
        :rtype: bool
        """
        return self._enable_bfd

    @enable_bfd.setter
    def enable_bfd(self, enable_bfd):
        """Sets the enable_bfd of this BgpNeighbor.

        Flag to enable BFD for this BGP Neighbor. Enable this if the neighbor supports BFD as this will lead to faster convergence.  # noqa: E501

        :param enable_bfd: The enable_bfd of this BgpNeighbor.  # noqa: E501
        :type: bool
        """

        self._enable_bfd = enable_bfd

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this BgpNeighbor.  # noqa: E501

        Neighbor IP Address  # noqa: E501

        :return: The neighbor_address of this BgpNeighbor.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this BgpNeighbor.

        Neighbor IP Address  # noqa: E501

        :param neighbor_address: The neighbor_address of this BgpNeighbor.  # noqa: E501
        :type: str
        """
        if neighbor_address is None:
            raise ValueError("Invalid value for `neighbor_address`, must not be `None`")  # noqa: E501

        self._neighbor_address = neighbor_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpNeighbor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighbor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
