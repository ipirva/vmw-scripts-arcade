# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IntelligenceHostConfigurationInfo(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_inactive_flow_count': 'int',
        'context_data_collection_interval': 'int',
        'broker_truststore': 'str',
        'flow_data_collection_interval': 'int',
        'broker_certificate': 'str',
        'context_user_sids': 'list[str]',
        'enable_context_data_collection': 'bool',
        'context_user_uids': 'list[str]',
        'enable_flow_data_collection': 'bool',
        'enable_deep_packet_inspection': 'bool',
        'context_process_hashes': 'list[str]',
        'enable_data_collection': 'bool',
        'private_ip_prefix': 'list[IntelligenceFlowPrivateIpPrefixInfo]',
        'broker_bootstrap_servers': 'list[IntelligenceBrokerEndpointInfo]',
        'max_inactive_flow_count_bm': 'int',
        'max_active_flow_count_bm': 'int',
        'context_process_names': 'list[str]',
        'max_active_flow_count': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'max_inactive_flow_count': 'max_inactive_flow_count',
        'context_data_collection_interval': 'context_data_collection_interval',
        'broker_truststore': 'broker_truststore',
        'flow_data_collection_interval': 'flow_data_collection_interval',
        'broker_certificate': 'broker_certificate',
        'context_user_sids': 'context_user_sids',
        'enable_context_data_collection': 'enable_context_data_collection',
        'context_user_uids': 'context_user_uids',
        'enable_flow_data_collection': 'enable_flow_data_collection',
        'enable_deep_packet_inspection': 'enable_deep_packet_inspection',
        'context_process_hashes': 'context_process_hashes',
        'enable_data_collection': 'enable_data_collection',
        'private_ip_prefix': 'private_ip_prefix',
        'broker_bootstrap_servers': 'broker_bootstrap_servers',
        'max_inactive_flow_count_bm': 'max_inactive_flow_count_bm',
        'max_active_flow_count_bm': 'max_active_flow_count_bm',
        'context_process_names': 'context_process_names',
        'max_active_flow_count': 'max_active_flow_count'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, max_inactive_flow_count=50000, context_data_collection_interval=5, broker_truststore=None, flow_data_collection_interval=5, broker_certificate=None, context_user_sids=None, enable_context_data_collection=True, context_user_uids=None, enable_flow_data_collection=True, enable_deep_packet_inspection=True, context_process_hashes=None, enable_data_collection=True, private_ip_prefix=None, broker_bootstrap_servers=None, max_inactive_flow_count_bm=25000, max_active_flow_count_bm=12500, context_process_names=None, max_active_flow_count=25000, *args, **kwargs):  # noqa: E501
        """IntelligenceHostConfigurationInfo - a model defined in Swagger"""  # noqa: E501
        self._max_inactive_flow_count = None
        self._context_data_collection_interval = None
        self._broker_truststore = None
        self._flow_data_collection_interval = None
        self._broker_certificate = None
        self._context_user_sids = None
        self._enable_context_data_collection = None
        self._context_user_uids = None
        self._enable_flow_data_collection = None
        self._enable_deep_packet_inspection = None
        self._context_process_hashes = None
        self._enable_data_collection = None
        self._private_ip_prefix = None
        self._broker_bootstrap_servers = None
        self._max_inactive_flow_count_bm = None
        self._max_active_flow_count_bm = None
        self._context_process_names = None
        self._max_active_flow_count = None
        self.discriminator = None
        if max_inactive_flow_count is not None:
            self.max_inactive_flow_count = max_inactive_flow_count
        if context_data_collection_interval is not None:
            self.context_data_collection_interval = context_data_collection_interval
        if broker_truststore is not None:
            self.broker_truststore = broker_truststore
        if flow_data_collection_interval is not None:
            self.flow_data_collection_interval = flow_data_collection_interval
        if broker_certificate is not None:
            self.broker_certificate = broker_certificate
        if context_user_sids is not None:
            self.context_user_sids = context_user_sids
        if enable_context_data_collection is not None:
            self.enable_context_data_collection = enable_context_data_collection
        if context_user_uids is not None:
            self.context_user_uids = context_user_uids
        if enable_flow_data_collection is not None:
            self.enable_flow_data_collection = enable_flow_data_collection
        if enable_deep_packet_inspection is not None:
            self.enable_deep_packet_inspection = enable_deep_packet_inspection
        if context_process_hashes is not None:
            self.context_process_hashes = context_process_hashes
        if enable_data_collection is not None:
            self.enable_data_collection = enable_data_collection
        if private_ip_prefix is not None:
            self.private_ip_prefix = private_ip_prefix
        if broker_bootstrap_servers is not None:
            self.broker_bootstrap_servers = broker_bootstrap_servers
        if max_inactive_flow_count_bm is not None:
            self.max_inactive_flow_count_bm = max_inactive_flow_count_bm
        if max_active_flow_count_bm is not None:
            self.max_active_flow_count_bm = max_active_flow_count_bm
        if context_process_names is not None:
            self.context_process_names = context_process_names
        if max_active_flow_count is not None:
            self.max_active_flow_count = max_active_flow_count
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def max_inactive_flow_count(self):
        """Gets the max_inactive_flow_count of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Maximum inactive network flow to collect in collection interval.   # noqa: E501

        :return: The max_inactive_flow_count of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_inactive_flow_count

    @max_inactive_flow_count.setter
    def max_inactive_flow_count(self, max_inactive_flow_count):
        """Sets the max_inactive_flow_count of this IntelligenceHostConfigurationInfo.

        Maximum inactive network flow to collect in collection interval.   # noqa: E501

        :param max_inactive_flow_count: The max_inactive_flow_count of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: int
        """

        self._max_inactive_flow_count = max_inactive_flow_count

    @property
    def context_data_collection_interval(self):
        """Gets the context_data_collection_interval of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Interval in minute of reporting VM guest context data to NSX-Intelligence. Recommend to keep this value the same as flow_data_collection_interval.   # noqa: E501

        :return: The context_data_collection_interval of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: int
        """
        return self._context_data_collection_interval

    @context_data_collection_interval.setter
    def context_data_collection_interval(self, context_data_collection_interval):
        """Sets the context_data_collection_interval of this IntelligenceHostConfigurationInfo.

        Interval in minute of reporting VM guest context data to NSX-Intelligence. Recommend to keep this value the same as flow_data_collection_interval.   # noqa: E501

        :param context_data_collection_interval: The context_data_collection_interval of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: int
        """

        self._context_data_collection_interval = context_data_collection_interval

    @property
    def broker_truststore(self):
        """Gets the broker_truststore of this IntelligenceHostConfigurationInfo.  # noqa: E501

        A truststore to establish the trust between NSX and NSX-Intelligence brokers.   # noqa: E501

        :return: The broker_truststore of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: str
        """
        return self._broker_truststore

    @broker_truststore.setter
    def broker_truststore(self, broker_truststore):
        """Sets the broker_truststore of this IntelligenceHostConfigurationInfo.

        A truststore to establish the trust between NSX and NSX-Intelligence brokers.   # noqa: E501

        :param broker_truststore: The broker_truststore of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: str
        """

        self._broker_truststore = broker_truststore

    @property
    def flow_data_collection_interval(self):
        """Gets the flow_data_collection_interval of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Interval in minute of reporting network flow data to NSX-Intelligence. Recommend to keep this value the same as context_data_collection_interval.   # noqa: E501

        :return: The flow_data_collection_interval of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: int
        """
        return self._flow_data_collection_interval

    @flow_data_collection_interval.setter
    def flow_data_collection_interval(self, flow_data_collection_interval):
        """Sets the flow_data_collection_interval of this IntelligenceHostConfigurationInfo.

        Interval in minute of reporting network flow data to NSX-Intelligence. Recommend to keep this value the same as context_data_collection_interval.   # noqa: E501

        :param flow_data_collection_interval: The flow_data_collection_interval of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: int
        """

        self._flow_data_collection_interval = flow_data_collection_interval

    @property
    def broker_certificate(self):
        """Gets the broker_certificate of this IntelligenceHostConfigurationInfo.  # noqa: E501

        A broker certificate to verify the identity of brokers.   # noqa: E501

        :return: The broker_certificate of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: str
        """
        return self._broker_certificate

    @broker_certificate.setter
    def broker_certificate(self, broker_certificate):
        """Sets the broker_certificate of this IntelligenceHostConfigurationInfo.

        A broker certificate to verify the identity of brokers.   # noqa: E501

        :param broker_certificate: The broker_certificate of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: str
        """

        self._broker_certificate = broker_certificate

    @property
    def context_user_sids(self):
        """Gets the context_user_sids of this IntelligenceHostConfigurationInfo.  # noqa: E501

        List of windows user sid to collect context data. Empty implies all users.   # noqa: E501

        :return: The context_user_sids of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._context_user_sids

    @context_user_sids.setter
    def context_user_sids(self, context_user_sids):
        """Sets the context_user_sids of this IntelligenceHostConfigurationInfo.

        List of windows user sid to collect context data. Empty implies all users.   # noqa: E501

        :param context_user_sids: The context_user_sids of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: list[str]
        """

        self._context_user_sids = context_user_sids

    @property
    def enable_context_data_collection(self):
        """Gets the enable_context_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Enable NSX-Intelligence context data collection in host nodes.   # noqa: E501

        :return: The enable_context_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_context_data_collection

    @enable_context_data_collection.setter
    def enable_context_data_collection(self, enable_context_data_collection):
        """Sets the enable_context_data_collection of this IntelligenceHostConfigurationInfo.

        Enable NSX-Intelligence context data collection in host nodes.   # noqa: E501

        :param enable_context_data_collection: The enable_context_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: bool
        """

        self._enable_context_data_collection = enable_context_data_collection

    @property
    def context_user_uids(self):
        """Gets the context_user_uids of this IntelligenceHostConfigurationInfo.  # noqa: E501

        List of linux user uid to collect context data. Empty implies all users.   # noqa: E501

        :return: The context_user_uids of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._context_user_uids

    @context_user_uids.setter
    def context_user_uids(self, context_user_uids):
        """Sets the context_user_uids of this IntelligenceHostConfigurationInfo.

        List of linux user uid to collect context data. Empty implies all users.   # noqa: E501

        :param context_user_uids: The context_user_uids of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: list[str]
        """

        self._context_user_uids = context_user_uids

    @property
    def enable_flow_data_collection(self):
        """Gets the enable_flow_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Enable NSX-Intelligence flow data collection in host nodes.   # noqa: E501

        :return: The enable_flow_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_flow_data_collection

    @enable_flow_data_collection.setter
    def enable_flow_data_collection(self, enable_flow_data_collection):
        """Sets the enable_flow_data_collection of this IntelligenceHostConfigurationInfo.

        Enable NSX-Intelligence flow data collection in host nodes.   # noqa: E501

        :param enable_flow_data_collection: The enable_flow_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: bool
        """

        self._enable_flow_data_collection = enable_flow_data_collection

    @property
    def enable_deep_packet_inspection(self):
        """Gets the enable_deep_packet_inspection of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Enable NSX-Intelligence deep packet inspection in host nodes.   # noqa: E501

        :return: The enable_deep_packet_inspection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_deep_packet_inspection

    @enable_deep_packet_inspection.setter
    def enable_deep_packet_inspection(self, enable_deep_packet_inspection):
        """Sets the enable_deep_packet_inspection of this IntelligenceHostConfigurationInfo.

        Enable NSX-Intelligence deep packet inspection in host nodes.   # noqa: E501

        :param enable_deep_packet_inspection: The enable_deep_packet_inspection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: bool
        """

        self._enable_deep_packet_inspection = enable_deep_packet_inspection

    @property
    def context_process_hashes(self):
        """Gets the context_process_hashes of this IntelligenceHostConfigurationInfo.  # noqa: E501

        List of hashes of processes to collect context data. Empty implies all processes.   # noqa: E501

        :return: The context_process_hashes of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._context_process_hashes

    @context_process_hashes.setter
    def context_process_hashes(self, context_process_hashes):
        """Sets the context_process_hashes of this IntelligenceHostConfigurationInfo.

        List of hashes of processes to collect context data. Empty implies all processes.   # noqa: E501

        :param context_process_hashes: The context_process_hashes of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: list[str]
        """

        self._context_process_hashes = context_process_hashes

    @property
    def enable_data_collection(self):
        """Gets the enable_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Enable NSX-Intelligence data collection in host nodes.  This property has been deprecated. To enable flow data collection, use property enable_flow_data_collection instead. To enable context data collection, use property enable_context_data_collection instead.  When this property is set to false, no data collection is performed even if enable_flow_data_collection or enable_context_data_collection is set to true.  When this property is set to true, property enable_flow_data_collection and enable_context_data_collection control whether to collect flow data and context data separately.   # noqa: E501

        :return: The enable_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_data_collection

    @enable_data_collection.setter
    def enable_data_collection(self, enable_data_collection):
        """Sets the enable_data_collection of this IntelligenceHostConfigurationInfo.

        Enable NSX-Intelligence data collection in host nodes.  This property has been deprecated. To enable flow data collection, use property enable_flow_data_collection instead. To enable context data collection, use property enable_context_data_collection instead.  When this property is set to false, no data collection is performed even if enable_flow_data_collection or enable_context_data_collection is set to true.  When this property is set to true, property enable_flow_data_collection and enable_context_data_collection control whether to collect flow data and context data separately.   # noqa: E501

        :param enable_data_collection: The enable_data_collection of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: bool
        """

        self._enable_data_collection = enable_data_collection

    @property
    def private_ip_prefix(self):
        """Gets the private_ip_prefix of this IntelligenceHostConfigurationInfo.  # noqa: E501

        List of private IP prefix that NSX-Intelligence network flow is collected from.   # noqa: E501

        :return: The private_ip_prefix of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: list[IntelligenceFlowPrivateIpPrefixInfo]
        """
        return self._private_ip_prefix

    @private_ip_prefix.setter
    def private_ip_prefix(self, private_ip_prefix):
        """Sets the private_ip_prefix of this IntelligenceHostConfigurationInfo.

        List of private IP prefix that NSX-Intelligence network flow is collected from.   # noqa: E501

        :param private_ip_prefix: The private_ip_prefix of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: list[IntelligenceFlowPrivateIpPrefixInfo]
        """

        self._private_ip_prefix = private_ip_prefix

    @property
    def broker_bootstrap_servers(self):
        """Gets the broker_bootstrap_servers of this IntelligenceHostConfigurationInfo.  # noqa: E501

        List of NSX-Intelligence broker endpoints that host nodes contact initially.   # noqa: E501

        :return: The broker_bootstrap_servers of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: list[IntelligenceBrokerEndpointInfo]
        """
        return self._broker_bootstrap_servers

    @broker_bootstrap_servers.setter
    def broker_bootstrap_servers(self, broker_bootstrap_servers):
        """Sets the broker_bootstrap_servers of this IntelligenceHostConfigurationInfo.

        List of NSX-Intelligence broker endpoints that host nodes contact initially.   # noqa: E501

        :param broker_bootstrap_servers: The broker_bootstrap_servers of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: list[IntelligenceBrokerEndpointInfo]
        """

        self._broker_bootstrap_servers = broker_bootstrap_servers

    @property
    def max_inactive_flow_count_bm(self):
        """Gets the max_inactive_flow_count_bm of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Maximum inactive network flow to collect in collection interval for Bare Metal server.   # noqa: E501

        :return: The max_inactive_flow_count_bm of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_inactive_flow_count_bm

    @max_inactive_flow_count_bm.setter
    def max_inactive_flow_count_bm(self, max_inactive_flow_count_bm):
        """Sets the max_inactive_flow_count_bm of this IntelligenceHostConfigurationInfo.

        Maximum inactive network flow to collect in collection interval for Bare Metal server.   # noqa: E501

        :param max_inactive_flow_count_bm: The max_inactive_flow_count_bm of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: int
        """

        self._max_inactive_flow_count_bm = max_inactive_flow_count_bm

    @property
    def max_active_flow_count_bm(self):
        """Gets the max_active_flow_count_bm of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Maximum active network flow to collect in collection interval for Bare Metal server.   # noqa: E501

        :return: The max_active_flow_count_bm of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_active_flow_count_bm

    @max_active_flow_count_bm.setter
    def max_active_flow_count_bm(self, max_active_flow_count_bm):
        """Sets the max_active_flow_count_bm of this IntelligenceHostConfigurationInfo.

        Maximum active network flow to collect in collection interval for Bare Metal server.   # noqa: E501

        :param max_active_flow_count_bm: The max_active_flow_count_bm of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: int
        """

        self._max_active_flow_count_bm = max_active_flow_count_bm

    @property
    def context_process_names(self):
        """Gets the context_process_names of this IntelligenceHostConfigurationInfo.  # noqa: E501

        List of processes to collect context data. Empty implies all processes.   # noqa: E501

        :return: The context_process_names of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._context_process_names

    @context_process_names.setter
    def context_process_names(self, context_process_names):
        """Sets the context_process_names of this IntelligenceHostConfigurationInfo.

        List of processes to collect context data. Empty implies all processes.   # noqa: E501

        :param context_process_names: The context_process_names of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: list[str]
        """

        self._context_process_names = context_process_names

    @property
    def max_active_flow_count(self):
        """Gets the max_active_flow_count of this IntelligenceHostConfigurationInfo.  # noqa: E501

        Maximum active network flow to collect in collection interval.   # noqa: E501

        :return: The max_active_flow_count of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_active_flow_count

    @max_active_flow_count.setter
    def max_active_flow_count(self, max_active_flow_count):
        """Sets the max_active_flow_count of this IntelligenceHostConfigurationInfo.

        Maximum active network flow to collect in collection interval.   # noqa: E501

        :param max_active_flow_count: The max_active_flow_count of this IntelligenceHostConfigurationInfo.  # noqa: E501
        :type: int
        """

        self._max_active_flow_count = max_active_flow_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntelligenceHostConfigurationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntelligenceHostConfigurationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
