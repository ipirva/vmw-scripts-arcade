# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_rule_action import LbRuleAction  # noqa: F401,E501

class LbJwtAuthAction(LbRuleAction):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tokens': 'list[str]',
        'pass_jwt_to_pool': 'bool',
        'realm': 'str',
        'key': 'LbJwtKey'
    }
    if hasattr(LbRuleAction, "swagger_types"):
        swagger_types.update(LbRuleAction.swagger_types)

    attribute_map = {
        'tokens': 'tokens',
        'pass_jwt_to_pool': 'pass_jwt_to_pool',
        'realm': 'realm',
        'key': 'key'
    }
    if hasattr(LbRuleAction, "attribute_map"):
        attribute_map.update(LbRuleAction.attribute_map)

    def __init__(self, tokens=None, pass_jwt_to_pool=False, realm=None, key=None, *args, **kwargs):  # noqa: E501
        """LbJwtAuthAction - a model defined in Swagger"""  # noqa: E501
        self._tokens = None
        self._pass_jwt_to_pool = None
        self._realm = None
        self._key = None
        self.discriminator = None
        if tokens is not None:
            self.tokens = tokens
        if pass_jwt_to_pool is not None:
            self.pass_jwt_to_pool = pass_jwt_to_pool
        if realm is not None:
            self.realm = realm
        if key is not None:
            self.key = key
        LbRuleAction.__init__(self, *args, **kwargs)

    @property
    def tokens(self):
        """Gets the tokens of this LbJwtAuthAction.  # noqa: E501

        JWT is an open standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Load balancer will search for every specified tokens one by one for the jwt message until found. This parameter is optional. In case not found or this field is not configured, load balancer searches the Bearer header by default in the http request \"Authorization: Bearer &lt;token&gt;\".   # noqa: E501

        :return: The tokens of this LbJwtAuthAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this LbJwtAuthAction.

        JWT is an open standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Load balancer will search for every specified tokens one by one for the jwt message until found. This parameter is optional. In case not found or this field is not configured, load balancer searches the Bearer header by default in the http request \"Authorization: Bearer &lt;token&gt;\".   # noqa: E501

        :param tokens: The tokens of this LbJwtAuthAction.  # noqa: E501
        :type: list[str]
        """

        self._tokens = tokens

    @property
    def pass_jwt_to_pool(self):
        """Gets the pass_jwt_to_pool of this LbJwtAuthAction.  # noqa: E501

        Specify whether to pass the JWT to backend server or remove it. By default, it is false which means will not pass the JWT to backend servers.   # noqa: E501

        :return: The pass_jwt_to_pool of this LbJwtAuthAction.  # noqa: E501
        :rtype: bool
        """
        return self._pass_jwt_to_pool

    @pass_jwt_to_pool.setter
    def pass_jwt_to_pool(self, pass_jwt_to_pool):
        """Sets the pass_jwt_to_pool of this LbJwtAuthAction.

        Specify whether to pass the JWT to backend server or remove it. By default, it is false which means will not pass the JWT to backend servers.   # noqa: E501

        :param pass_jwt_to_pool: The pass_jwt_to_pool of this LbJwtAuthAction.  # noqa: E501
        :type: bool
        """

        self._pass_jwt_to_pool = pass_jwt_to_pool

    @property
    def realm(self):
        """Gets the realm of this LbJwtAuthAction.  # noqa: E501

        A description of the protected area. If no realm is specified, clients often display a formatted hostname instead. The configured realm is returned when client request is rejected with 401 http status. In the response, it will be \"WWW-Authentication: Bearer realm=&lt;realm&gt;\".   # noqa: E501

        :return: The realm of this LbJwtAuthAction.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this LbJwtAuthAction.

        A description of the protected area. If no realm is specified, clients often display a formatted hostname instead. The configured realm is returned when client request is rejected with 401 http status. In the response, it will be \"WWW-Authentication: Bearer realm=&lt;realm&gt;\".   # noqa: E501

        :param realm: The realm of this LbJwtAuthAction.  # noqa: E501
        :type: str
        """

        self._realm = realm

    @property
    def key(self):
        """Gets the key of this LbJwtAuthAction.  # noqa: E501


        :return: The key of this LbJwtAuthAction.  # noqa: E501
        :rtype: LbJwtKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LbJwtAuthAction.


        :param key: The key of this LbJwtAuthAction.  # noqa: E501
        :type: LbJwtKey
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbJwtAuthAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbJwtAuthAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
