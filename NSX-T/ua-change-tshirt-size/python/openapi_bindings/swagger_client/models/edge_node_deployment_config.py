# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeNodeDeploymentConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_user_settings': 'NodeUserSettings',
        'vm_deployment_config': 'DeploymentConfig',
        'form_factor': 'str'
    }

    attribute_map = {
        'node_user_settings': 'node_user_settings',
        'vm_deployment_config': 'vm_deployment_config',
        'form_factor': 'form_factor'
    }

    def __init__(self, node_user_settings=None, vm_deployment_config=None, form_factor='MEDIUM'):  # noqa: E501
        """EdgeNodeDeploymentConfig - a model defined in Swagger"""  # noqa: E501
        self._node_user_settings = None
        self._vm_deployment_config = None
        self._form_factor = None
        self.discriminator = None
        self.node_user_settings = node_user_settings
        self.vm_deployment_config = vm_deployment_config
        if form_factor is not None:
            self.form_factor = form_factor

    @property
    def node_user_settings(self):
        """Gets the node_user_settings of this EdgeNodeDeploymentConfig.  # noqa: E501


        :return: The node_user_settings of this EdgeNodeDeploymentConfig.  # noqa: E501
        :rtype: NodeUserSettings
        """
        return self._node_user_settings

    @node_user_settings.setter
    def node_user_settings(self, node_user_settings):
        """Sets the node_user_settings of this EdgeNodeDeploymentConfig.


        :param node_user_settings: The node_user_settings of this EdgeNodeDeploymentConfig.  # noqa: E501
        :type: NodeUserSettings
        """
        if node_user_settings is None:
            raise ValueError("Invalid value for `node_user_settings`, must not be `None`")  # noqa: E501

        self._node_user_settings = node_user_settings

    @property
    def vm_deployment_config(self):
        """Gets the vm_deployment_config of this EdgeNodeDeploymentConfig.  # noqa: E501


        :return: The vm_deployment_config of this EdgeNodeDeploymentConfig.  # noqa: E501
        :rtype: DeploymentConfig
        """
        return self._vm_deployment_config

    @vm_deployment_config.setter
    def vm_deployment_config(self, vm_deployment_config):
        """Sets the vm_deployment_config of this EdgeNodeDeploymentConfig.


        :param vm_deployment_config: The vm_deployment_config of this EdgeNodeDeploymentConfig.  # noqa: E501
        :type: DeploymentConfig
        """
        if vm_deployment_config is None:
            raise ValueError("Invalid value for `vm_deployment_config`, must not be `None`")  # noqa: E501

        self._vm_deployment_config = vm_deployment_config

    @property
    def form_factor(self):
        """Gets the form_factor of this EdgeNodeDeploymentConfig.  # noqa: E501

        Supported edge form factor.  # noqa: E501

        :return: The form_factor of this EdgeNodeDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this EdgeNodeDeploymentConfig.

        Supported edge form factor.  # noqa: E501

        :param form_factor: The form_factor of this EdgeNodeDeploymentConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL", "MEDIUM", "LARGE", "XLARGE"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"  # noqa: E501
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeNodeDeploymentConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeNodeDeploymentConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
