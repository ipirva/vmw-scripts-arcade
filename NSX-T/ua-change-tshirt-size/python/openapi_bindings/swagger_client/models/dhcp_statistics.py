# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'int',
        'releases': 'int',
        'informs': 'int',
        'declines': 'int',
        'dhcp_server_id': 'str',
        'nacks': 'int',
        'offers': 'int',
        'discovers': 'int',
        'acks': 'int',
        'timestamp': 'int',
        'requests': 'int',
        'ip_pool_stats': 'list[DhcpIpPoolUsage]'
    }

    attribute_map = {
        'errors': 'errors',
        'releases': 'releases',
        'informs': 'informs',
        'declines': 'declines',
        'dhcp_server_id': 'dhcp_server_id',
        'nacks': 'nacks',
        'offers': 'offers',
        'discovers': 'discovers',
        'acks': 'acks',
        'timestamp': 'timestamp',
        'requests': 'requests',
        'ip_pool_stats': 'ip_pool_stats'
    }

    def __init__(self, errors=None, releases=None, informs=None, declines=None, dhcp_server_id=None, nacks=None, offers=None, discovers=None, acks=None, timestamp=None, requests=None, ip_pool_stats=None):  # noqa: E501
        """DhcpStatistics - a model defined in Swagger"""  # noqa: E501
        self._errors = None
        self._releases = None
        self._informs = None
        self._declines = None
        self._dhcp_server_id = None
        self._nacks = None
        self._offers = None
        self._discovers = None
        self._acks = None
        self._timestamp = None
        self._requests = None
        self._ip_pool_stats = None
        self.discriminator = None
        self.errors = errors
        self.releases = releases
        self.informs = informs
        self.declines = declines
        self.dhcp_server_id = dhcp_server_id
        self.nacks = nacks
        self.offers = offers
        self.discovers = discovers
        self.acks = acks
        self.timestamp = timestamp
        self.requests = requests
        if ip_pool_stats is not None:
            self.ip_pool_stats = ip_pool_stats

    @property
    def errors(self):
        """Gets the errors of this DhcpStatistics.  # noqa: E501

        The total number of DHCP errors  # noqa: E501

        :return: The errors of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DhcpStatistics.

        The total number of DHCP errors  # noqa: E501

        :param errors: The errors of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def releases(self):
        """Gets the releases of this DhcpStatistics.  # noqa: E501

        The total number of DHCP RELEASE packets  # noqa: E501

        :return: The releases of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this DhcpStatistics.

        The total number of DHCP RELEASE packets  # noqa: E501

        :param releases: The releases of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if releases is None:
            raise ValueError("Invalid value for `releases`, must not be `None`")  # noqa: E501

        self._releases = releases

    @property
    def informs(self):
        """Gets the informs of this DhcpStatistics.  # noqa: E501

        The total number of DHCP INFORM packets  # noqa: E501

        :return: The informs of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._informs

    @informs.setter
    def informs(self, informs):
        """Sets the informs of this DhcpStatistics.

        The total number of DHCP INFORM packets  # noqa: E501

        :param informs: The informs of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if informs is None:
            raise ValueError("Invalid value for `informs`, must not be `None`")  # noqa: E501

        self._informs = informs

    @property
    def declines(self):
        """Gets the declines of this DhcpStatistics.  # noqa: E501

        The total number of DHCP DECLINE packets  # noqa: E501

        :return: The declines of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._declines

    @declines.setter
    def declines(self, declines):
        """Sets the declines of this DhcpStatistics.

        The total number of DHCP DECLINE packets  # noqa: E501

        :param declines: The declines of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if declines is None:
            raise ValueError("Invalid value for `declines`, must not be `None`")  # noqa: E501

        self._declines = declines

    @property
    def dhcp_server_id(self):
        """Gets the dhcp_server_id of this DhcpStatistics.  # noqa: E501

        dhcp server uuid  # noqa: E501

        :return: The dhcp_server_id of this DhcpStatistics.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_server_id

    @dhcp_server_id.setter
    def dhcp_server_id(self, dhcp_server_id):
        """Sets the dhcp_server_id of this DhcpStatistics.

        dhcp server uuid  # noqa: E501

        :param dhcp_server_id: The dhcp_server_id of this DhcpStatistics.  # noqa: E501
        :type: str
        """
        if dhcp_server_id is None:
            raise ValueError("Invalid value for `dhcp_server_id`, must not be `None`")  # noqa: E501

        self._dhcp_server_id = dhcp_server_id

    @property
    def nacks(self):
        """Gets the nacks of this DhcpStatistics.  # noqa: E501

        The total number of DHCP NACK packets  # noqa: E501

        :return: The nacks of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._nacks

    @nacks.setter
    def nacks(self, nacks):
        """Sets the nacks of this DhcpStatistics.

        The total number of DHCP NACK packets  # noqa: E501

        :param nacks: The nacks of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if nacks is None:
            raise ValueError("Invalid value for `nacks`, must not be `None`")  # noqa: E501

        self._nacks = nacks

    @property
    def offers(self):
        """Gets the offers of this DhcpStatistics.  # noqa: E501

        The total number of DHCP OFFER packets  # noqa: E501

        :return: The offers of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this DhcpStatistics.

        The total number of DHCP OFFER packets  # noqa: E501

        :param offers: The offers of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")  # noqa: E501

        self._offers = offers

    @property
    def discovers(self):
        """Gets the discovers of this DhcpStatistics.  # noqa: E501

        The total number of DHCP DISCOVER packets  # noqa: E501

        :return: The discovers of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._discovers

    @discovers.setter
    def discovers(self, discovers):
        """Sets the discovers of this DhcpStatistics.

        The total number of DHCP DISCOVER packets  # noqa: E501

        :param discovers: The discovers of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if discovers is None:
            raise ValueError("Invalid value for `discovers`, must not be `None`")  # noqa: E501

        self._discovers = discovers

    @property
    def acks(self):
        """Gets the acks of this DhcpStatistics.  # noqa: E501

        The total number of DHCP ACK packets  # noqa: E501

        :return: The acks of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._acks

    @acks.setter
    def acks(self, acks):
        """Sets the acks of this DhcpStatistics.

        The total number of DHCP ACK packets  # noqa: E501

        :param acks: The acks of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if acks is None:
            raise ValueError("Invalid value for `acks`, must not be `None`")  # noqa: E501

        self._acks = acks

    @property
    def timestamp(self):
        """Gets the timestamp of this DhcpStatistics.  # noqa: E501

        timestamp of the statistics  # noqa: E501

        :return: The timestamp of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DhcpStatistics.

        timestamp of the statistics  # noqa: E501

        :param timestamp: The timestamp of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def requests(self):
        """Gets the requests of this DhcpStatistics.  # noqa: E501

        The total number of DHCP REQUEST packets  # noqa: E501

        :return: The requests of this DhcpStatistics.  # noqa: E501
        :rtype: int
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this DhcpStatistics.

        The total number of DHCP REQUEST packets  # noqa: E501

        :param requests: The requests of this DhcpStatistics.  # noqa: E501
        :type: int
        """
        if requests is None:
            raise ValueError("Invalid value for `requests`, must not be `None`")  # noqa: E501

        self._requests = requests

    @property
    def ip_pool_stats(self):
        """Gets the ip_pool_stats of this DhcpStatistics.  # noqa: E501

        The DHCP ip pool usage statistics  # noqa: E501

        :return: The ip_pool_stats of this DhcpStatistics.  # noqa: E501
        :rtype: list[DhcpIpPoolUsage]
        """
        return self._ip_pool_stats

    @ip_pool_stats.setter
    def ip_pool_stats(self, ip_pool_stats):
        """Sets the ip_pool_stats of this DhcpStatistics.

        The DHCP ip pool usage statistics  # noqa: E501

        :param ip_pool_stats: The ip_pool_stats of this DhcpStatistics.  # noqa: E501
        :type: list[DhcpIpPoolUsage]
        """

        self._ip_pool_stats = ip_pool_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
