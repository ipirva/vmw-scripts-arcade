# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportNodeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'threat_status': 'ThreatStatus',
        'agent_status': 'AgentStatusCount',
        'node_uuid': 'str',
        'tunnel_status': 'TunnelStatusCount',
        'mgmt_connection_status': 'str',
        'control_connection_status': 'StatusCount',
        'pnic_status': 'StatusCount',
        'node_status': 'NodeStatus',
        'node_display_name': 'str'
    }

    attribute_map = {
        'status': 'status',
        'threat_status': 'threat_status',
        'agent_status': 'agent_status',
        'node_uuid': 'node_uuid',
        'tunnel_status': 'tunnel_status',
        'mgmt_connection_status': 'mgmt_connection_status',
        'control_connection_status': 'control_connection_status',
        'pnic_status': 'pnic_status',
        'node_status': 'node_status',
        'node_display_name': 'node_display_name'
    }

    def __init__(self, status=None, threat_status=None, agent_status=None, node_uuid=None, tunnel_status=None, mgmt_connection_status=None, control_connection_status=None, pnic_status=None, node_status=None, node_display_name=None):  # noqa: E501
        """TransportNodeStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._threat_status = None
        self._agent_status = None
        self._node_uuid = None
        self._tunnel_status = None
        self._mgmt_connection_status = None
        self._control_connection_status = None
        self._pnic_status = None
        self._node_status = None
        self._node_display_name = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if threat_status is not None:
            self.threat_status = threat_status
        if agent_status is not None:
            self.agent_status = agent_status
        if node_uuid is not None:
            self.node_uuid = node_uuid
        if tunnel_status is not None:
            self.tunnel_status = tunnel_status
        if mgmt_connection_status is not None:
            self.mgmt_connection_status = mgmt_connection_status
        if control_connection_status is not None:
            self.control_connection_status = control_connection_status
        if pnic_status is not None:
            self.pnic_status = pnic_status
        if node_status is not None:
            self.node_status = node_status
        if node_display_name is not None:
            self.node_display_name = node_display_name

    @property
    def status(self):
        """Gets the status of this TransportNodeStatus.  # noqa: E501

        Roll-up status of pNIC, management connection, control connection, tunnel status, agent status  # noqa: E501

        :return: The status of this TransportNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransportNodeStatus.

        Roll-up status of pNIC, management connection, control connection, tunnel status, agent status  # noqa: E501

        :param status: The status of this TransportNodeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "DEGRADED", "UNKNOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def threat_status(self):
        """Gets the threat_status of this TransportNodeStatus.  # noqa: E501


        :return: The threat_status of this TransportNodeStatus.  # noqa: E501
        :rtype: ThreatStatus
        """
        return self._threat_status

    @threat_status.setter
    def threat_status(self, threat_status):
        """Sets the threat_status of this TransportNodeStatus.


        :param threat_status: The threat_status of this TransportNodeStatus.  # noqa: E501
        :type: ThreatStatus
        """

        self._threat_status = threat_status

    @property
    def agent_status(self):
        """Gets the agent_status of this TransportNodeStatus.  # noqa: E501


        :return: The agent_status of this TransportNodeStatus.  # noqa: E501
        :rtype: AgentStatusCount
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this TransportNodeStatus.


        :param agent_status: The agent_status of this TransportNodeStatus.  # noqa: E501
        :type: AgentStatusCount
        """

        self._agent_status = agent_status

    @property
    def node_uuid(self):
        """Gets the node_uuid of this TransportNodeStatus.  # noqa: E501

        Transport node uuid  # noqa: E501

        :return: The node_uuid of this TransportNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_uuid

    @node_uuid.setter
    def node_uuid(self, node_uuid):
        """Sets the node_uuid of this TransportNodeStatus.

        Transport node uuid  # noqa: E501

        :param node_uuid: The node_uuid of this TransportNodeStatus.  # noqa: E501
        :type: str
        """

        self._node_uuid = node_uuid

    @property
    def tunnel_status(self):
        """Gets the tunnel_status of this TransportNodeStatus.  # noqa: E501


        :return: The tunnel_status of this TransportNodeStatus.  # noqa: E501
        :rtype: TunnelStatusCount
        """
        return self._tunnel_status

    @tunnel_status.setter
    def tunnel_status(self, tunnel_status):
        """Sets the tunnel_status of this TransportNodeStatus.


        :param tunnel_status: The tunnel_status of this TransportNodeStatus.  # noqa: E501
        :type: TunnelStatusCount
        """

        self._tunnel_status = tunnel_status

    @property
    def mgmt_connection_status(self):
        """Gets the mgmt_connection_status of this TransportNodeStatus.  # noqa: E501

        Management connection status  # noqa: E501

        :return: The mgmt_connection_status of this TransportNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_connection_status

    @mgmt_connection_status.setter
    def mgmt_connection_status(self, mgmt_connection_status):
        """Sets the mgmt_connection_status of this TransportNodeStatus.

        Management connection status  # noqa: E501

        :param mgmt_connection_status: The mgmt_connection_status of this TransportNodeStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if mgmt_connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `mgmt_connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(mgmt_connection_status, allowed_values)
            )

        self._mgmt_connection_status = mgmt_connection_status

    @property
    def control_connection_status(self):
        """Gets the control_connection_status of this TransportNodeStatus.  # noqa: E501


        :return: The control_connection_status of this TransportNodeStatus.  # noqa: E501
        :rtype: StatusCount
        """
        return self._control_connection_status

    @control_connection_status.setter
    def control_connection_status(self, control_connection_status):
        """Sets the control_connection_status of this TransportNodeStatus.


        :param control_connection_status: The control_connection_status of this TransportNodeStatus.  # noqa: E501
        :type: StatusCount
        """

        self._control_connection_status = control_connection_status

    @property
    def pnic_status(self):
        """Gets the pnic_status of this TransportNodeStatus.  # noqa: E501


        :return: The pnic_status of this TransportNodeStatus.  # noqa: E501
        :rtype: StatusCount
        """
        return self._pnic_status

    @pnic_status.setter
    def pnic_status(self, pnic_status):
        """Sets the pnic_status of this TransportNodeStatus.


        :param pnic_status: The pnic_status of this TransportNodeStatus.  # noqa: E501
        :type: StatusCount
        """

        self._pnic_status = pnic_status

    @property
    def node_status(self):
        """Gets the node_status of this TransportNodeStatus.  # noqa: E501


        :return: The node_status of this TransportNodeStatus.  # noqa: E501
        :rtype: NodeStatus
        """
        return self._node_status

    @node_status.setter
    def node_status(self, node_status):
        """Sets the node_status of this TransportNodeStatus.


        :param node_status: The node_status of this TransportNodeStatus.  # noqa: E501
        :type: NodeStatus
        """

        self._node_status = node_status

    @property
    def node_display_name(self):
        """Gets the node_display_name of this TransportNodeStatus.  # noqa: E501

        Transport node display name  # noqa: E501

        :return: The node_display_name of this TransportNodeStatus.  # noqa: E501
        :rtype: str
        """
        return self._node_display_name

    @node_display_name.setter
    def node_display_name(self, node_display_name):
        """Sets the node_display_name of this TransportNodeStatus.

        Transport node display name  # noqa: E501

        :param node_display_name: The node_display_name of this TransportNodeStatus.  # noqa: E501
        :type: str
        """

        self._node_display_name = node_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportNodeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportNodeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
