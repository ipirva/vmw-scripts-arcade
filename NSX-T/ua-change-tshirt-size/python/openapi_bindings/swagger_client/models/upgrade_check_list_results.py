# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpgradeCheckListResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failed_checks': 'UpgradeCheckListResult',
        'checks_with_warnings': 'UpgradeCheckListResult',
        'successful_checks': 'UpgradeCheckListResult'
    }

    attribute_map = {
        'failed_checks': 'failed_checks',
        'checks_with_warnings': 'checks_with_warnings',
        'successful_checks': 'successful_checks'
    }

    def __init__(self, failed_checks=None, checks_with_warnings=None, successful_checks=None):  # noqa: E501
        """UpgradeCheckListResults - a model defined in Swagger"""  # noqa: E501
        self._failed_checks = None
        self._checks_with_warnings = None
        self._successful_checks = None
        self.discriminator = None
        if failed_checks is not None:
            self.failed_checks = failed_checks
        if checks_with_warnings is not None:
            self.checks_with_warnings = checks_with_warnings
        if successful_checks is not None:
            self.successful_checks = successful_checks

    @property
    def failed_checks(self):
        """Gets the failed_checks of this UpgradeCheckListResults.  # noqa: E501


        :return: The failed_checks of this UpgradeCheckListResults.  # noqa: E501
        :rtype: UpgradeCheckListResult
        """
        return self._failed_checks

    @failed_checks.setter
    def failed_checks(self, failed_checks):
        """Sets the failed_checks of this UpgradeCheckListResults.


        :param failed_checks: The failed_checks of this UpgradeCheckListResults.  # noqa: E501
        :type: UpgradeCheckListResult
        """

        self._failed_checks = failed_checks

    @property
    def checks_with_warnings(self):
        """Gets the checks_with_warnings of this UpgradeCheckListResults.  # noqa: E501


        :return: The checks_with_warnings of this UpgradeCheckListResults.  # noqa: E501
        :rtype: UpgradeCheckListResult
        """
        return self._checks_with_warnings

    @checks_with_warnings.setter
    def checks_with_warnings(self, checks_with_warnings):
        """Sets the checks_with_warnings of this UpgradeCheckListResults.


        :param checks_with_warnings: The checks_with_warnings of this UpgradeCheckListResults.  # noqa: E501
        :type: UpgradeCheckListResult
        """

        self._checks_with_warnings = checks_with_warnings

    @property
    def successful_checks(self):
        """Gets the successful_checks of this UpgradeCheckListResults.  # noqa: E501


        :return: The successful_checks of this UpgradeCheckListResults.  # noqa: E501
        :rtype: UpgradeCheckListResult
        """
        return self._successful_checks

    @successful_checks.setter
    def successful_checks(self, successful_checks):
        """Sets the successful_checks of this UpgradeCheckListResults.


        :param successful_checks: The successful_checks of this UpgradeCheckListResults.  # noqa: E501
        :type: UpgradeCheckListResult
        """

        self._successful_checks = successful_checks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeCheckListResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeCheckListResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
