# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeClusterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_timestamp': 'int',
        'edge_cluster_status': 'str',
        'member_status': 'list[EdgeClusterMemberStatus]',
        'edge_cluster_id': 'str'
    }

    attribute_map = {
        'last_update_timestamp': 'last_update_timestamp',
        'edge_cluster_status': 'edge_cluster_status',
        'member_status': 'member_status',
        'edge_cluster_id': 'edge_cluster_id'
    }

    def __init__(self, last_update_timestamp=None, edge_cluster_status=None, member_status=None, edge_cluster_id=None):  # noqa: E501
        """EdgeClusterStatus - a model defined in Swagger"""  # noqa: E501
        self._last_update_timestamp = None
        self._edge_cluster_status = None
        self._member_status = None
        self._edge_cluster_id = None
        self.discriminator = None
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        self.edge_cluster_status = edge_cluster_status
        if member_status is not None:
            self.member_status = member_status
        self.edge_cluster_id = edge_cluster_id

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this EdgeClusterStatus.  # noqa: E501

        Timestamp when the cluster status was last updated  # noqa: E501

        :return: The last_update_timestamp of this EdgeClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this EdgeClusterStatus.

        Timestamp when the cluster status was last updated  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this EdgeClusterStatus.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def edge_cluster_status(self):
        """Gets the edge_cluster_status of this EdgeClusterStatus.  # noqa: E501

        Status of an edge node  # noqa: E501

        :return: The edge_cluster_status of this EdgeClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_status

    @edge_cluster_status.setter
    def edge_cluster_status(self, edge_cluster_status):
        """Sets the edge_cluster_status of this EdgeClusterStatus.

        Status of an edge node  # noqa: E501

        :param edge_cluster_status: The edge_cluster_status of this EdgeClusterStatus.  # noqa: E501
        :type: str
        """
        if edge_cluster_status is None:
            raise ValueError("Invalid value for `edge_cluster_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UP", "DOWN", "DEGRADED", "UNKNOWN"]  # noqa: E501
        if edge_cluster_status not in allowed_values:
            raise ValueError(
                "Invalid value for `edge_cluster_status` ({0}), must be one of {1}"  # noqa: E501
                .format(edge_cluster_status, allowed_values)
            )

        self._edge_cluster_status = edge_cluster_status

    @property
    def member_status(self):
        """Gets the member_status of this EdgeClusterStatus.  # noqa: E501

        Per Edge Node Status  # noqa: E501

        :return: The member_status of this EdgeClusterStatus.  # noqa: E501
        :rtype: list[EdgeClusterMemberStatus]
        """
        return self._member_status

    @member_status.setter
    def member_status(self, member_status):
        """Sets the member_status of this EdgeClusterStatus.

        Per Edge Node Status  # noqa: E501

        :param member_status: The member_status of this EdgeClusterStatus.  # noqa: E501
        :type: list[EdgeClusterMemberStatus]
        """

        self._member_status = member_status

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this EdgeClusterStatus.  # noqa: E501

        Id of the edge cluster whose status is being reported  # noqa: E501

        :return: The edge_cluster_id of this EdgeClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this EdgeClusterStatus.

        Id of the edge cluster whose status is being reported  # noqa: E501

        :param edge_cluster_id: The edge_cluster_id of this EdgeClusterStatus.  # noqa: E501
        :type: str
        """
        if edge_cluster_id is None:
            raise ValueError("Invalid value for `edge_cluster_id`, must not be `None`")  # noqa: E501

        self._edge_cluster_id = edge_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeClusterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeClusterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
