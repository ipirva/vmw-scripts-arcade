# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Snmpv3Properties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_protocol': 'str',
        'priv_protocol': 'str',
        'users': 'list[Snmpv3User]',
        'targets': 'list[Snmpv3Target]'
    }

    attribute_map = {
        'auth_protocol': 'auth_protocol',
        'priv_protocol': 'priv_protocol',
        'users': 'users',
        'targets': 'targets'
    }

    def __init__(self, auth_protocol='SHA1', priv_protocol='AES128', users=None, targets=None):  # noqa: E501
        """Snmpv3Properties - a model defined in Swagger"""  # noqa: E501
        self._auth_protocol = None
        self._priv_protocol = None
        self._users = None
        self._targets = None
        self.discriminator = None
        if auth_protocol is not None:
            self.auth_protocol = auth_protocol
        if priv_protocol is not None:
            self.priv_protocol = priv_protocol
        if users is not None:
            self.users = users
        if targets is not None:
            self.targets = targets

    @property
    def auth_protocol(self):
        """Gets the auth_protocol of this Snmpv3Properties.  # noqa: E501

        Authentication protocol used for SNMP v3 communication.  # noqa: E501

        :return: The auth_protocol of this Snmpv3Properties.  # noqa: E501
        :rtype: str
        """
        return self._auth_protocol

    @auth_protocol.setter
    def auth_protocol(self, auth_protocol):
        """Sets the auth_protocol of this Snmpv3Properties.

        Authentication protocol used for SNMP v3 communication.  # noqa: E501

        :param auth_protocol: The auth_protocol of this Snmpv3Properties.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHA1"]  # noqa: E501
        if auth_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_protocol, allowed_values)
            )

        self._auth_protocol = auth_protocol

    @property
    def priv_protocol(self):
        """Gets the priv_protocol of this Snmpv3Properties.  # noqa: E501

        Privacy protocol used for SNMP v3 communication.  # noqa: E501

        :return: The priv_protocol of this Snmpv3Properties.  # noqa: E501
        :rtype: str
        """
        return self._priv_protocol

    @priv_protocol.setter
    def priv_protocol(self, priv_protocol):
        """Sets the priv_protocol of this Snmpv3Properties.

        Privacy protocol used for SNMP v3 communication.  # noqa: E501

        :param priv_protocol: The priv_protocol of this Snmpv3Properties.  # noqa: E501
        :type: str
        """
        allowed_values = ["AES128"]  # noqa: E501
        if priv_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `priv_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(priv_protocol, allowed_values)
            )

        self._priv_protocol = priv_protocol

    @property
    def users(self):
        """Gets the users of this Snmpv3Properties.  # noqa: E501

        List of SNMP v3 users allowed to poll NSX nodes over SNMP. Also, users specified in a SNMP v3 target must exist in this list.  # noqa: E501

        :return: The users of this Snmpv3Properties.  # noqa: E501
        :rtype: list[Snmpv3User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Snmpv3Properties.

        List of SNMP v3 users allowed to poll NSX nodes over SNMP. Also, users specified in a SNMP v3 target must exist in this list.  # noqa: E501

        :param users: The users of this Snmpv3Properties.  # noqa: E501
        :type: list[Snmpv3User]
        """

        self._users = users

    @property
    def targets(self):
        """Gets the targets of this Snmpv3Properties.  # noqa: E501

        List of SNMP v3 targets/receivers where SNMP v3 traps/notifications will be sent from NSX nodes.  # noqa: E501

        :return: The targets of this Snmpv3Properties.  # noqa: E501
        :rtype: list[Snmpv3Target]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Snmpv3Properties.

        List of SNMP v3 targets/receivers where SNMP v3 traps/notifications will be sent from NSX nodes.  # noqa: E501

        :param targets: The targets of this Snmpv3Properties.  # noqa: E501
        :type: list[Snmpv3Target]
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Snmpv3Properties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Snmpv3Properties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
