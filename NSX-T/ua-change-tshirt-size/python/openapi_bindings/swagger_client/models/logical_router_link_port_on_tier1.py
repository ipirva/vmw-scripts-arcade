# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.logical_router_port import LogicalRouterPort  # noqa: F401,E501

class LogicalRouterLinkPortOnTIER1(LogicalRouterPort):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnets': 'list[IPSubnet]',
        'mac_address': 'str',
        'linked_logical_router_port_id': 'ResourceReference',
        'edge_cluster_member_index': 'list[int]'
    }
    if hasattr(LogicalRouterPort, "swagger_types"):
        swagger_types.update(LogicalRouterPort.swagger_types)

    attribute_map = {
        'subnets': 'subnets',
        'mac_address': 'mac_address',
        'linked_logical_router_port_id': 'linked_logical_router_port_id',
        'edge_cluster_member_index': 'edge_cluster_member_index'
    }
    if hasattr(LogicalRouterPort, "attribute_map"):
        attribute_map.update(LogicalRouterPort.attribute_map)

    def __init__(self, subnets=None, mac_address=None, linked_logical_router_port_id=None, edge_cluster_member_index=None, *args, **kwargs):  # noqa: E501
        """LogicalRouterLinkPortOnTIER1 - a model defined in Swagger"""  # noqa: E501
        self._subnets = None
        self._mac_address = None
        self._linked_logical_router_port_id = None
        self._edge_cluster_member_index = None
        self.discriminator = None
        if subnets is not None:
            self.subnets = subnets
        if mac_address is not None:
            self.mac_address = mac_address
        if linked_logical_router_port_id is not None:
            self.linked_logical_router_port_id = linked_logical_router_port_id
        if edge_cluster_member_index is not None:
            self.edge_cluster_member_index = edge_cluster_member_index
        LogicalRouterPort.__init__(self, *args, **kwargs)

    @property
    def subnets(self):
        """Gets the subnets of this LogicalRouterLinkPortOnTIER1.  # noqa: E501

        Logical router port subnets  # noqa: E501

        :return: The subnets of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :rtype: list[IPSubnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this LogicalRouterLinkPortOnTIER1.

        Logical router port subnets  # noqa: E501

        :param subnets: The subnets of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :type: list[IPSubnet]
        """

        self._subnets = subnets

    @property
    def mac_address(self):
        """Gets the mac_address of this LogicalRouterLinkPortOnTIER1.  # noqa: E501

        MAC address  # noqa: E501

        :return: The mac_address of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this LogicalRouterLinkPortOnTIER1.

        MAC address  # noqa: E501

        :param mac_address: The mac_address of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def linked_logical_router_port_id(self):
        """Gets the linked_logical_router_port_id of this LogicalRouterLinkPortOnTIER1.  # noqa: E501


        :return: The linked_logical_router_port_id of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._linked_logical_router_port_id

    @linked_logical_router_port_id.setter
    def linked_logical_router_port_id(self, linked_logical_router_port_id):
        """Sets the linked_logical_router_port_id of this LogicalRouterLinkPortOnTIER1.


        :param linked_logical_router_port_id: The linked_logical_router_port_id of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :type: ResourceReference
        """

        self._linked_logical_router_port_id = linked_logical_router_port_id

    @property
    def edge_cluster_member_index(self):
        """Gets the edge_cluster_member_index of this LogicalRouterLinkPortOnTIER1.  # noqa: E501

        Please use logical router API to pass edge cluster members indexes manually.   # noqa: E501

        :return: The edge_cluster_member_index of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :rtype: list[int]
        """
        return self._edge_cluster_member_index

    @edge_cluster_member_index.setter
    def edge_cluster_member_index(self, edge_cluster_member_index):
        """Sets the edge_cluster_member_index of this LogicalRouterLinkPortOnTIER1.

        Please use logical router API to pass edge cluster members indexes manually.   # noqa: E501

        :param edge_cluster_member_index: The edge_cluster_member_index of this LogicalRouterLinkPortOnTIER1.  # noqa: E501
        :type: list[int]
        """

        self._edge_cluster_member_index = edge_cluster_member_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalRouterLinkPortOnTIER1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalRouterLinkPortOnTIER1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
