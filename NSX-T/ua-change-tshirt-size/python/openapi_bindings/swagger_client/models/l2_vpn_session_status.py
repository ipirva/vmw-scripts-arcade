# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2VPNSessionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'transport_tunnels': 'list[L2VPNTransportTunnelStatus]',
        'display_name': 'str',
        'session_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'transport_tunnels': 'transport_tunnels',
        'display_name': 'display_name',
        'session_id': 'session_id'
    }

    def __init__(self, status=None, transport_tunnels=None, display_name=None, session_id=None):  # noqa: E501
        """L2VPNSessionStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._transport_tunnels = None
        self._display_name = None
        self._session_id = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if transport_tunnels is not None:
            self.transport_tunnels = transport_tunnels
        if display_name is not None:
            self.display_name = display_name
        if session_id is not None:
            self.session_id = session_id

    @property
    def status(self):
        """Gets the status of this L2VPNSessionStatus.  # noqa: E501

        L2 VPN session status, specifies UP/DOWN.  # noqa: E501

        :return: The status of this L2VPNSessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this L2VPNSessionStatus.

        L2 VPN session status, specifies UP/DOWN.  # noqa: E501

        :param status: The status of this L2VPNSessionStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transport_tunnels(self):
        """Gets the transport_tunnels of this L2VPNSessionStatus.  # noqa: E501

        Transport tunnels status.  # noqa: E501

        :return: The transport_tunnels of this L2VPNSessionStatus.  # noqa: E501
        :rtype: list[L2VPNTransportTunnelStatus]
        """
        return self._transport_tunnels

    @transport_tunnels.setter
    def transport_tunnels(self, transport_tunnels):
        """Sets the transport_tunnels of this L2VPNSessionStatus.

        Transport tunnels status.  # noqa: E501

        :param transport_tunnels: The transport_tunnels of this L2VPNSessionStatus.  # noqa: E501
        :type: list[L2VPNTransportTunnelStatus]
        """

        self._transport_tunnels = transport_tunnels

    @property
    def display_name(self):
        """Gets the display_name of this L2VPNSessionStatus.  # noqa: E501

        L2VPN display name.  # noqa: E501

        :return: The display_name of this L2VPNSessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this L2VPNSessionStatus.

        L2VPN display name.  # noqa: E501

        :param display_name: The display_name of this L2VPNSessionStatus.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def session_id(self):
        """Gets the session_id of this L2VPNSessionStatus.  # noqa: E501

        L2VPN session identifier.  # noqa: E501

        :return: The session_id of this L2VPNSessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this L2VPNSessionStatus.

        L2VPN session identifier.  # noqa: E501

        :param session_id: The session_id of this L2VPNSessionStatus.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VPNSessionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VPNSessionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
