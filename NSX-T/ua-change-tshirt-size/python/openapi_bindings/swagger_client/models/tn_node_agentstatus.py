# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TnNodeAgentstatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hyperbus_connection_status': 'str',
        'vif_id': 'str'
    }

    attribute_map = {
        'hyperbus_connection_status': 'hyperbus_connection_status',
        'vif_id': 'vif_id'
    }

    def __init__(self, hyperbus_connection_status=None, vif_id=None):  # noqa: E501
        """TnNodeAgentstatus - a model defined in Swagger"""  # noqa: E501
        self._hyperbus_connection_status = None
        self._vif_id = None
        self.discriminator = None
        self.hyperbus_connection_status = hyperbus_connection_status
        self.vif_id = vif_id

    @property
    def hyperbus_connection_status(self):
        """Gets the hyperbus_connection_status of this TnNodeAgentstatus.  # noqa: E501

        Show the Node Agent connected VM vif status.  # noqa: E501

        :return: The hyperbus_connection_status of this TnNodeAgentstatus.  # noqa: E501
        :rtype: str
        """
        return self._hyperbus_connection_status

    @hyperbus_connection_status.setter
    def hyperbus_connection_status(self, hyperbus_connection_status):
        """Sets the hyperbus_connection_status of this TnNodeAgentstatus.

        Show the Node Agent connected VM vif status.  # noqa: E501

        :param hyperbus_connection_status: The hyperbus_connection_status of this TnNodeAgentstatus.  # noqa: E501
        :type: str
        """
        if hyperbus_connection_status is None:
            raise ValueError("Invalid value for `hyperbus_connection_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "HEALTHY", "UNHEALTHY", "DEGRADED"]  # noqa: E501
        if hyperbus_connection_status not in allowed_values:
            raise ValueError(
                "Invalid value for `hyperbus_connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(hyperbus_connection_status, allowed_values)
            )

        self._hyperbus_connection_status = hyperbus_connection_status

    @property
    def vif_id(self):
        """Gets the vif_id of this TnNodeAgentstatus.  # noqa: E501

        Connected VM vif id.  # noqa: E501

        :return: The vif_id of this TnNodeAgentstatus.  # noqa: E501
        :rtype: str
        """
        return self._vif_id

    @vif_id.setter
    def vif_id(self, vif_id):
        """Sets the vif_id of this TnNodeAgentstatus.

        Connected VM vif id.  # noqa: E501

        :param vif_id: The vif_id of this TnNodeAgentstatus.  # noqa: E501
        :type: str
        """
        if vif_id is None:
            raise ValueError("Invalid value for `vif_id`, must not be `None`")  # noqa: E501

        self._vif_id = vif_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TnNodeAgentstatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TnNodeAgentstatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
