# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DnsFailedQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_spent': 'int',
        'record_type': 'str',
        'client_ip': 'str',
        'upstream_server_ip': 'str',
        'error_message': 'str',
        'address': 'str',
        'timestamp': 'str',
        'error_type': 'str',
        'source_ip': 'str',
        'forwarder_ip': 'str'
    }

    attribute_map = {
        'time_spent': 'time_spent',
        'record_type': 'record_type',
        'client_ip': 'client_ip',
        'upstream_server_ip': 'upstream_server_ip',
        'error_message': 'error_message',
        'address': 'address',
        'timestamp': 'timestamp',
        'error_type': 'error_type',
        'source_ip': 'source_ip',
        'forwarder_ip': 'forwarder_ip'
    }

    def __init__(self, time_spent=None, record_type=None, client_ip=None, upstream_server_ip=None, error_message=None, address=None, timestamp=None, error_type=None, source_ip=None, forwarder_ip=None):  # noqa: E501
        """DnsFailedQuery - a model defined in Swagger"""  # noqa: E501
        self._time_spent = None
        self._record_type = None
        self._client_ip = None
        self._upstream_server_ip = None
        self._error_message = None
        self._address = None
        self._timestamp = None
        self._error_type = None
        self._source_ip = None
        self._forwarder_ip = None
        self.discriminator = None
        if time_spent is not None:
            self.time_spent = time_spent
        if record_type is not None:
            self.record_type = record_type
        if client_ip is not None:
            self.client_ip = client_ip
        if upstream_server_ip is not None:
            self.upstream_server_ip = upstream_server_ip
        if error_message is not None:
            self.error_message = error_message
        if address is not None:
            self.address = address
        self.timestamp = timestamp
        if error_type is not None:
            self.error_type = error_type
        if source_ip is not None:
            self.source_ip = source_ip
        if forwarder_ip is not None:
            self.forwarder_ip = forwarder_ip

    @property
    def time_spent(self):
        """Gets the time_spent of this DnsFailedQuery.  # noqa: E501

        The time the query took before it got a failed answer, in ms.  # noqa: E501

        :return: The time_spent of this DnsFailedQuery.  # noqa: E501
        :rtype: int
        """
        return self._time_spent

    @time_spent.setter
    def time_spent(self, time_spent):
        """Sets the time_spent of this DnsFailedQuery.

        The time the query took before it got a failed answer, in ms.  # noqa: E501

        :param time_spent: The time_spent of this DnsFailedQuery.  # noqa: E501
        :type: int
        """

        self._time_spent = time_spent

    @property
    def record_type(self):
        """Gets the record_type of this DnsFailedQuery.  # noqa: E501

        The record type be queried, e.g. A, CNAME, SOA, etc.  # noqa: E501

        :return: The record_type of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this DnsFailedQuery.

        The record type be queried, e.g. A, CNAME, SOA, etc.  # noqa: E501

        :param record_type: The record_type of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def client_ip(self):
        """Gets the client_ip of this DnsFailedQuery.  # noqa: E501

        The client host ip address from which the query was issued.   # noqa: E501

        :return: The client_ip of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this DnsFailedQuery.

        The client host ip address from which the query was issued.   # noqa: E501

        :param client_ip: The client_ip of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    @property
    def upstream_server_ip(self):
        """Gets the upstream_server_ip of this DnsFailedQuery.  # noqa: E501

        The upstream server ip address to which the query was forwarded. If the query could not be serviced from the DNS forwarder cache, this property will contain the IP address of the DNS server that serviced the request. If the request was serviced from the cache, this property will be absent.   # noqa: E501

        :return: The upstream_server_ip of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._upstream_server_ip

    @upstream_server_ip.setter
    def upstream_server_ip(self, upstream_server_ip):
        """Sets the upstream_server_ip of this DnsFailedQuery.

        The upstream server ip address to which the query was forwarded. If the query could not be serviced from the DNS forwarder cache, this property will contain the IP address of the DNS server that serviced the request. If the request was serviced from the cache, this property will be absent.   # noqa: E501

        :param upstream_server_ip: The upstream_server_ip of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._upstream_server_ip = upstream_server_ip

    @property
    def error_message(self):
        """Gets the error_message of this DnsFailedQuery.  # noqa: E501

        The detailed error message of the failed query, if any.  # noqa: E501

        :return: The error_message of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DnsFailedQuery.

        The detailed error message of the failed query, if any.  # noqa: E501

        :param error_message: The error_message of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def address(self):
        """Gets the address of this DnsFailedQuery.  # noqa: E501

        The address be queried, can be a FQDN or an ip address.  # noqa: E501

        :return: The address of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DnsFailedQuery.

        The address be queried, can be a FQDN or an ip address.  # noqa: E501

        :param address: The address of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def timestamp(self):
        """Gets the timestamp of this DnsFailedQuery.  # noqa: E501

        Timestamp of the request, in YYYY-MM-DD HH:MM:SS.zzz format.  # noqa: E501

        :return: The timestamp of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DnsFailedQuery.

        Timestamp of the request, in YYYY-MM-DD HH:MM:SS.zzz format.  # noqa: E501

        :param timestamp: The timestamp of this DnsFailedQuery.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def error_type(self):
        """Gets the error_type of this DnsFailedQuery.  # noqa: E501

        The type of the query failure, e.g. NXDOMAIN, etc.  # noqa: E501

        :return: The error_type of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this DnsFailedQuery.

        The type of the query failure, e.g. NXDOMAIN, etc.  # noqa: E501

        :param error_type: The error_type of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def source_ip(self):
        """Gets the source_ip of this DnsFailedQuery.  # noqa: E501

        The source ip address that is used to forward a query to an upstream server.   # noqa: E501

        :return: The source_ip of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this DnsFailedQuery.

        The source ip address that is used to forward a query to an upstream server.   # noqa: E501

        :param source_ip: The source_ip of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._source_ip = source_ip

    @property
    def forwarder_ip(self):
        """Gets the forwarder_ip of this DnsFailedQuery.  # noqa: E501

        The DNS forwarder ip address to which the query was first received.   # noqa: E501

        :return: The forwarder_ip of this DnsFailedQuery.  # noqa: E501
        :rtype: str
        """
        return self._forwarder_ip

    @forwarder_ip.setter
    def forwarder_ip(self, forwarder_ip):
        """Sets the forwarder_ip of this DnsFailedQuery.

        The DNS forwarder ip address to which the query was first received.   # noqa: E501

        :param forwarder_ip: The forwarder_ip of this DnsFailedQuery.  # noqa: E501
        :type: str
        """

        self._forwarder_ip = forwarder_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsFailedQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsFailedQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
