# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbPoolMemberStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'failure_cause': 'str',
        'last_check_time': 'int',
        'ip_address': 'str',
        'last_state_change_time': 'int',
        'port': 'str'
    }

    attribute_map = {
        'status': 'status',
        'failure_cause': 'failure_cause',
        'last_check_time': 'last_check_time',
        'ip_address': 'ip_address',
        'last_state_change_time': 'last_state_change_time',
        'port': 'port'
    }

    def __init__(self, status=None, failure_cause=None, last_check_time=None, ip_address=None, last_state_change_time=None, port=None):  # noqa: E501
        """LbPoolMemberStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._failure_cause = None
        self._last_check_time = None
        self._ip_address = None
        self._last_state_change_time = None
        self._port = None
        self.discriminator = None
        self.status = status
        if failure_cause is not None:
            self.failure_cause = failure_cause
        if last_check_time is not None:
            self.last_check_time = last_check_time
        self.ip_address = ip_address
        if last_state_change_time is not None:
            self.last_state_change_time = last_state_change_time
        if port is not None:
            self.port = port

    @property
    def status(self):
        """Gets the status of this LbPoolMemberStatus.  # noqa: E501

        UP means that pool member is enabled and monitors have marked the pool member as UP. If the pool member has no monitor configured, it would be treated as UP. DOWN means that pool member is enabled and monitors have marked the pool member as DOWN. DISABLED means that admin state of pool member is set to DISABLED. GRACEFUL_DISABLED means that admin state of pool member is set to GRACEFUL_DISABLED. UNUSED means that the pool member is not used when the IP list size of member group exceeds the maximum setting. The remaining IP addresses would not be used as available backend servers, hence mark the status as UNUSED. UNKNOWN means that the related pool is not associated to any enabled virtual servers, or no status reported from transport-nodes, the associated load balancer service may be working(or not working).   # noqa: E501

        :return: The status of this LbPoolMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LbPoolMemberStatus.

        UP means that pool member is enabled and monitors have marked the pool member as UP. If the pool member has no monitor configured, it would be treated as UP. DOWN means that pool member is enabled and monitors have marked the pool member as DOWN. DISABLED means that admin state of pool member is set to DISABLED. GRACEFUL_DISABLED means that admin state of pool member is set to GRACEFUL_DISABLED. UNUSED means that the pool member is not used when the IP list size of member group exceeds the maximum setting. The remaining IP addresses would not be used as available backend servers, hence mark the status as UNUSED. UNKNOWN means that the related pool is not associated to any enabled virtual servers, or no status reported from transport-nodes, the associated load balancer service may be working(or not working).   # noqa: E501

        :param status: The status of this LbPoolMemberStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["UP", "DOWN", "DISABLED", "GRACEFUL_DISABLED", "UNUSED", "UNKNOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def failure_cause(self):
        """Gets the failure_cause of this LbPoolMemberStatus.  # noqa: E501

        If multiple active monitors are configured, the failure_cause contains failure cause for each monitors. Like \"Monitor_1:failure_cause_1. Monitor_2:failure_cause_2.\"   # noqa: E501

        :return: The failure_cause of this LbPoolMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._failure_cause

    @failure_cause.setter
    def failure_cause(self, failure_cause):
        """Sets the failure_cause of this LbPoolMemberStatus.

        If multiple active monitors are configured, the failure_cause contains failure cause for each monitors. Like \"Monitor_1:failure_cause_1. Monitor_2:failure_cause_2.\"   # noqa: E501

        :param failure_cause: The failure_cause of this LbPoolMemberStatus.  # noqa: E501
        :type: str
        """

        self._failure_cause = failure_cause

    @property
    def last_check_time(self):
        """Gets the last_check_time of this LbPoolMemberStatus.  # noqa: E501

        If multiple active monitors are configured, the property value is the latest last_check_time among all the monitors.   # noqa: E501

        :return: The last_check_time of this LbPoolMemberStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_check_time

    @last_check_time.setter
    def last_check_time(self, last_check_time):
        """Sets the last_check_time of this LbPoolMemberStatus.

        If multiple active monitors are configured, the property value is the latest last_check_time among all the monitors.   # noqa: E501

        :param last_check_time: The last_check_time of this LbPoolMemberStatus.  # noqa: E501
        :type: int
        """

        self._last_check_time = last_check_time

    @property
    def ip_address(self):
        """Gets the ip_address of this LbPoolMemberStatus.  # noqa: E501

        Pool member IP address  # noqa: E501

        :return: The ip_address of this LbPoolMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this LbPoolMemberStatus.

        Pool member IP address  # noqa: E501

        :param ip_address: The ip_address of this LbPoolMemberStatus.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def last_state_change_time(self):
        """Gets the last_state_change_time of this LbPoolMemberStatus.  # noqa: E501

        If multiple active monitors are configured, the property value is the latest last_state_change_time among all the monitors.   # noqa: E501

        :return: The last_state_change_time of this LbPoolMemberStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_state_change_time

    @last_state_change_time.setter
    def last_state_change_time(self, last_state_change_time):
        """Sets the last_state_change_time of this LbPoolMemberStatus.

        If multiple active monitors are configured, the property value is the latest last_state_change_time among all the monitors.   # noqa: E501

        :param last_state_change_time: The last_state_change_time of this LbPoolMemberStatus.  # noqa: E501
        :type: int
        """

        self._last_state_change_time = last_state_change_time

    @property
    def port(self):
        """Gets the port of this LbPoolMemberStatus.  # noqa: E501

        The port is configured in pool member. For virtual server port range case, pool member port must be null.   # noqa: E501

        :return: The port of this LbPoolMemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LbPoolMemberStatus.

        The port is configured in pool member. For virtual server port range case, pool member port must be null.   # noqa: E501

        :param port: The port of this LbPoolMemberStatus.  # noqa: E501
        :type: str
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbPoolMemberStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbPoolMemberStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
