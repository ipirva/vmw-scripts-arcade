# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorResolverUserInputData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'property_name': 'str',
        'property_value': 'str'
    }

    attribute_map = {
        'data_type': 'data_type',
        'property_name': 'property_name',
        'property_value': 'property_value'
    }

    def __init__(self, data_type=None, property_name=None, property_value=None):  # noqa: E501
        """ErrorResolverUserInputData - a model defined in Swagger"""  # noqa: E501
        self._data_type = None
        self._property_name = None
        self._property_value = None
        self.discriminator = None
        self.data_type = data_type
        self.property_name = property_name
        if property_value is not None:
            self.property_value = property_value

    @property
    def data_type(self):
        """Gets the data_type of this ErrorResolverUserInputData.  # noqa: E501

        The datatype of the given property. Useful for data validation  # noqa: E501

        :return: The data_type of this ErrorResolverUserInputData.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ErrorResolverUserInputData.

        The datatype of the given property. Useful for data validation  # noqa: E501

        :param data_type: The data_type of this ErrorResolverUserInputData.  # noqa: E501
        :type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TEXT", "NUMBER", "PASSWORD"]  # noqa: E501
        if data_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def property_name(self):
        """Gets the property_name of this ErrorResolverUserInputData.  # noqa: E501

        Name of the property supplied by the user  # noqa: E501

        :return: The property_name of this ErrorResolverUserInputData.  # noqa: E501
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """Sets the property_name of this ErrorResolverUserInputData.

        Name of the property supplied by the user  # noqa: E501

        :param property_name: The property_name of this ErrorResolverUserInputData.  # noqa: E501
        :type: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")  # noqa: E501

        self._property_name = property_name

    @property
    def property_value(self):
        """Gets the property_value of this ErrorResolverUserInputData.  # noqa: E501

        The value associated with the above property  # noqa: E501

        :return: The property_value of this ErrorResolverUserInputData.  # noqa: E501
        :rtype: str
        """
        return self._property_value

    @property_value.setter
    def property_value(self, property_value):
        """Sets the property_value of this ErrorResolverUserInputData.

        The value associated with the above property  # noqa: E501

        :param property_value: The property_value of this ErrorResolverUserInputData.  # noqa: E501
        :type: str
        """

        self._property_value = property_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResolverUserInputData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResolverUserInputData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
