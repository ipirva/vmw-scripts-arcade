# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPSecVPNSessionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ipsec_vpn_session_id': 'str',
        'display_name': 'str',
        'failed_tunnels': 'int',
        'negotiated_tunnels': 'int',
        'session_status': 'str',
        'last_update_timestamp': 'int',
        'aggregate_traffic_counters': 'IPSecVPNTrafficCounters',
        'ike_status': 'IPSecVPNIKESessionStatus',
        'total_tunnels': 'int'
    }

    attribute_map = {
        'ipsec_vpn_session_id': 'ipsec_vpn_session_id',
        'display_name': 'display_name',
        'failed_tunnels': 'failed_tunnels',
        'negotiated_tunnels': 'negotiated_tunnels',
        'session_status': 'session_status',
        'last_update_timestamp': 'last_update_timestamp',
        'aggregate_traffic_counters': 'aggregate_traffic_counters',
        'ike_status': 'ike_status',
        'total_tunnels': 'total_tunnels'
    }

    def __init__(self, ipsec_vpn_session_id=None, display_name=None, failed_tunnels=None, negotiated_tunnels=None, session_status=None, last_update_timestamp=None, aggregate_traffic_counters=None, ike_status=None, total_tunnels=None):  # noqa: E501
        """IPSecVPNSessionStatus - a model defined in Swagger"""  # noqa: E501
        self._ipsec_vpn_session_id = None
        self._display_name = None
        self._failed_tunnels = None
        self._negotiated_tunnels = None
        self._session_status = None
        self._last_update_timestamp = None
        self._aggregate_traffic_counters = None
        self._ike_status = None
        self._total_tunnels = None
        self.discriminator = None
        if ipsec_vpn_session_id is not None:
            self.ipsec_vpn_session_id = ipsec_vpn_session_id
        if display_name is not None:
            self.display_name = display_name
        if failed_tunnels is not None:
            self.failed_tunnels = failed_tunnels
        if negotiated_tunnels is not None:
            self.negotiated_tunnels = negotiated_tunnels
        if session_status is not None:
            self.session_status = session_status
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if aggregate_traffic_counters is not None:
            self.aggregate_traffic_counters = aggregate_traffic_counters
        if ike_status is not None:
            self.ike_status = ike_status
        if total_tunnels is not None:
            self.total_tunnels = total_tunnels

    @property
    def ipsec_vpn_session_id(self):
        """Gets the ipsec_vpn_session_id of this IPSecVPNSessionStatus.  # noqa: E501

        UUID of vpn session.  # noqa: E501

        :return: The ipsec_vpn_session_id of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_vpn_session_id

    @ipsec_vpn_session_id.setter
    def ipsec_vpn_session_id(self, ipsec_vpn_session_id):
        """Sets the ipsec_vpn_session_id of this IPSecVPNSessionStatus.

        UUID of vpn session.  # noqa: E501

        :param ipsec_vpn_session_id: The ipsec_vpn_session_id of this IPSecVPNSessionStatus.  # noqa: E501
        :type: str
        """

        self._ipsec_vpn_session_id = ipsec_vpn_session_id

    @property
    def display_name(self):
        """Gets the display_name of this IPSecVPNSessionStatus.  # noqa: E501

        Display name of vpn session.  # noqa: E501

        :return: The display_name of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IPSecVPNSessionStatus.

        Display name of vpn session.  # noqa: E501

        :param display_name: The display_name of this IPSecVPNSessionStatus.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def failed_tunnels(self):
        """Gets the failed_tunnels of this IPSecVPNSessionStatus.  # noqa: E501

        Number of failed tunnels.  # noqa: E501

        :return: The failed_tunnels of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: int
        """
        return self._failed_tunnels

    @failed_tunnels.setter
    def failed_tunnels(self, failed_tunnels):
        """Sets the failed_tunnels of this IPSecVPNSessionStatus.

        Number of failed tunnels.  # noqa: E501

        :param failed_tunnels: The failed_tunnels of this IPSecVPNSessionStatus.  # noqa: E501
        :type: int
        """

        self._failed_tunnels = failed_tunnels

    @property
    def negotiated_tunnels(self):
        """Gets the negotiated_tunnels of this IPSecVPNSessionStatus.  # noqa: E501

        Number of negotiated tunnels.  # noqa: E501

        :return: The negotiated_tunnels of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: int
        """
        return self._negotiated_tunnels

    @negotiated_tunnels.setter
    def negotiated_tunnels(self, negotiated_tunnels):
        """Sets the negotiated_tunnels of this IPSecVPNSessionStatus.

        Number of negotiated tunnels.  # noqa: E501

        :param negotiated_tunnels: The negotiated_tunnels of this IPSecVPNSessionStatus.  # noqa: E501
        :type: int
        """

        self._negotiated_tunnels = negotiated_tunnels

    @property
    def session_status(self):
        """Gets the session_status of this IPSecVPNSessionStatus.  # noqa: E501

        Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.  # noqa: E501

        :return: The session_status of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: str
        """
        return self._session_status

    @session_status.setter
    def session_status(self, session_status):
        """Sets the session_status of this IPSecVPNSessionStatus.

        Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.  # noqa: E501

        :param session_status: The session_status of this IPSecVPNSessionStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "DEGRADED"]  # noqa: E501
        if session_status not in allowed_values:
            raise ValueError(
                "Invalid value for `session_status` ({0}), must be one of {1}"  # noqa: E501
                .format(session_status, allowed_values)
            )

        self._session_status = session_status

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this IPSecVPNSessionStatus.  # noqa: E501

        Timestamp when the data was last updated.  # noqa: E501

        :return: The last_update_timestamp of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this IPSecVPNSessionStatus.

        Timestamp when the data was last updated.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this IPSecVPNSessionStatus.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def aggregate_traffic_counters(self):
        """Gets the aggregate_traffic_counters of this IPSecVPNSessionStatus.  # noqa: E501


        :return: The aggregate_traffic_counters of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: IPSecVPNTrafficCounters
        """
        return self._aggregate_traffic_counters

    @aggregate_traffic_counters.setter
    def aggregate_traffic_counters(self, aggregate_traffic_counters):
        """Sets the aggregate_traffic_counters of this IPSecVPNSessionStatus.


        :param aggregate_traffic_counters: The aggregate_traffic_counters of this IPSecVPNSessionStatus.  # noqa: E501
        :type: IPSecVPNTrafficCounters
        """

        self._aggregate_traffic_counters = aggregate_traffic_counters

    @property
    def ike_status(self):
        """Gets the ike_status of this IPSecVPNSessionStatus.  # noqa: E501


        :return: The ike_status of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: IPSecVPNIKESessionStatus
        """
        return self._ike_status

    @ike_status.setter
    def ike_status(self, ike_status):
        """Sets the ike_status of this IPSecVPNSessionStatus.


        :param ike_status: The ike_status of this IPSecVPNSessionStatus.  # noqa: E501
        :type: IPSecVPNIKESessionStatus
        """

        self._ike_status = ike_status

    @property
    def total_tunnels(self):
        """Gets the total_tunnels of this IPSecVPNSessionStatus.  # noqa: E501

        Total number of tunnels.  # noqa: E501

        :return: The total_tunnels of this IPSecVPNSessionStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_tunnels

    @total_tunnels.setter
    def total_tunnels(self, total_tunnels):
        """Sets the total_tunnels of this IPSecVPNSessionStatus.

        Total number of tunnels.  # noqa: E501

        :param total_tunnels: The total_tunnels of this IPSecVPNSessionStatus.  # noqa: E501
        :type: int
        """

        self._total_tunnels = total_tunnels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNSessionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNSessionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
