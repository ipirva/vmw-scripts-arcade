# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BridgeClusterStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_timestamp': 'int',
        'health': 'str',
        'cluster_id': 'str'
    }

    attribute_map = {
        'last_update_timestamp': 'last_update_timestamp',
        'health': 'health',
        'cluster_id': 'cluster_id'
    }

    def __init__(self, last_update_timestamp=None, health=None, cluster_id=None):  # noqa: E501
        """BridgeClusterStatus - a model defined in Swagger"""  # noqa: E501
        self._last_update_timestamp = None
        self._health = None
        self._cluster_id = None
        self.discriminator = None
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if health is not None:
            self.health = health
        if cluster_id is not None:
            self.cluster_id = cluster_id

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this BridgeClusterStatus.  # noqa: E501

        Timestamp when the data was last updated; unset if data source has never updated the data.  # noqa: E501

        :return: The last_update_timestamp of this BridgeClusterStatus.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this BridgeClusterStatus.

        Timestamp when the data was last updated; unset if data source has never updated the data.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this BridgeClusterStatus.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def health(self):
        """Gets the health of this BridgeClusterStatus.  # noqa: E501

        The health status of the cluster  # noqa: E501

        :return: The health of this BridgeClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this BridgeClusterStatus.

        The health status of the cluster  # noqa: E501

        :param health: The health of this BridgeClusterStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "DEGRADED", "UNKNOWN"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"  # noqa: E501
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def cluster_id(self):
        """Gets the cluster_id of this BridgeClusterStatus.  # noqa: E501

        The id of the cluster  # noqa: E501

        :return: The cluster_id of this BridgeClusterStatus.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this BridgeClusterStatus.

        The id of the cluster  # noqa: E501

        :param cluster_id: The cluster_id of this BridgeClusterStatus.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BridgeClusterStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BridgeClusterStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
