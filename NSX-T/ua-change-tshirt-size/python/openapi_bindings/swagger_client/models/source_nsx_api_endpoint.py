# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceNsxApiEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vc_port': 'int',
        'vc_username': 'str',
        'vc_ip': 'str',
        'ip': 'str',
        'auth_token': 'str',
        'nsx_syncrole': 'str',
        'vc_version': 'str',
        'nsx_username': 'str',
        'nsx_version': 'str',
        'nsx_password': 'str',
        'vc_password': 'str'
    }

    attribute_map = {
        'vc_port': 'vc_port',
        'vc_username': 'vc_username',
        'vc_ip': 'vc_ip',
        'ip': 'ip',
        'auth_token': 'auth_token',
        'nsx_syncrole': 'nsx_syncrole',
        'vc_version': 'vc_version',
        'nsx_username': 'nsx_username',
        'nsx_version': 'nsx_version',
        'nsx_password': 'nsx_password',
        'vc_password': 'vc_password'
    }

    def __init__(self, vc_port=443, vc_username=None, vc_ip=None, ip=None, auth_token=None, nsx_syncrole=None, vc_version=None, nsx_username=None, nsx_version=None, nsx_password=None, vc_password=None):  # noqa: E501
        """SourceNsxApiEndpoint - a model defined in Swagger"""  # noqa: E501
        self._vc_port = None
        self._vc_username = None
        self._vc_ip = None
        self._ip = None
        self._auth_token = None
        self._nsx_syncrole = None
        self._vc_version = None
        self._nsx_username = None
        self._nsx_version = None
        self._nsx_password = None
        self._vc_password = None
        self.discriminator = None
        if vc_port is not None:
            self.vc_port = vc_port
        self.vc_username = vc_username
        self.vc_ip = vc_ip
        if ip is not None:
            self.ip = ip
        if auth_token is not None:
            self.auth_token = auth_token
        if nsx_syncrole is not None:
            self.nsx_syncrole = nsx_syncrole
        if vc_version is not None:
            self.vc_version = vc_version
        if nsx_username is not None:
            self.nsx_username = nsx_username
        if nsx_version is not None:
            self.nsx_version = nsx_version
        if nsx_password is not None:
            self.nsx_password = nsx_password
        if vc_password is not None:
            self.vc_password = vc_password

    @property
    def vc_port(self):
        """Gets the vc_port of this SourceNsxApiEndpoint.  # noqa: E501

        VC port that will be used to fetch details.  # noqa: E501

        :return: The vc_port of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._vc_port

    @vc_port.setter
    def vc_port(self, vc_port):
        """Sets the vc_port of this SourceNsxApiEndpoint.

        VC port that will be used to fetch details.  # noqa: E501

        :param vc_port: The vc_port of this SourceNsxApiEndpoint.  # noqa: E501
        :type: int
        """

        self._vc_port = vc_port

    @property
    def vc_username(self):
        """Gets the vc_username of this SourceNsxApiEndpoint.  # noqa: E501

        Username for connecting to VC.  # noqa: E501

        :return: The vc_username of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vc_username

    @vc_username.setter
    def vc_username(self, vc_username):
        """Sets the vc_username of this SourceNsxApiEndpoint.

        Username for connecting to VC.  # noqa: E501

        :param vc_username: The vc_username of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """
        if vc_username is None:
            raise ValueError("Invalid value for `vc_username`, must not be `None`")  # noqa: E501

        self._vc_username = vc_username

    @property
    def vc_ip(self):
        """Gets the vc_ip of this SourceNsxApiEndpoint.  # noqa: E501

        IP address or host name of VC.  # noqa: E501

        :return: The vc_ip of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vc_ip

    @vc_ip.setter
    def vc_ip(self, vc_ip):
        """Sets the vc_ip of this SourceNsxApiEndpoint.

        IP address or host name of VC.  # noqa: E501

        :param vc_ip: The vc_ip of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """
        if vc_ip is None:
            raise ValueError("Invalid value for `vc_ip`, must not be `None`")  # noqa: E501

        self._vc_ip = vc_ip

    @property
    def ip(self):
        """Gets the ip of this SourceNsxApiEndpoint.  # noqa: E501

        IP address or hostname of a source NSX API endpoint. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :return: The ip of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this SourceNsxApiEndpoint.

        IP address or hostname of a source NSX API endpoint. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :param ip: The ip of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def auth_token(self):
        """Gets the auth_token of this SourceNsxApiEndpoint.  # noqa: E501

        Auth token used to make REST calls to source NSX API endpoint. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :return: The auth_token of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this SourceNsxApiEndpoint.

        Auth token used to make REST calls to source NSX API endpoint. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :param auth_token: The auth_token of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    @property
    def nsx_syncrole(self):
        """Gets the nsx_syncrole of this SourceNsxApiEndpoint.  # noqa: E501

        Signifies Universal Sync role status (STANDALONE, PRIMARY, SECONDARY) of a source NSX API endpoint.  # noqa: E501

        :return: The nsx_syncrole of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._nsx_syncrole

    @nsx_syncrole.setter
    def nsx_syncrole(self, nsx_syncrole):
        """Sets the nsx_syncrole of this SourceNsxApiEndpoint.

        Signifies Universal Sync role status (STANDALONE, PRIMARY, SECONDARY) of a source NSX API endpoint.  # noqa: E501

        :param nsx_syncrole: The nsx_syncrole of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._nsx_syncrole = nsx_syncrole

    @property
    def vc_version(self):
        """Gets the vc_version of this SourceNsxApiEndpoint.  # noqa: E501

        Build version of VC.  # noqa: E501

        :return: The vc_version of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vc_version

    @vc_version.setter
    def vc_version(self, vc_version):
        """Sets the vc_version of this SourceNsxApiEndpoint.

        Build version of VC.  # noqa: E501

        :param vc_version: The vc_version of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._vc_version = vc_version

    @property
    def nsx_username(self):
        """Gets the nsx_username of this SourceNsxApiEndpoint.  # noqa: E501

        Username for connecting to NSX manager. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :return: The nsx_username of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._nsx_username

    @nsx_username.setter
    def nsx_username(self, nsx_username):
        """Sets the nsx_username of this SourceNsxApiEndpoint.

        Username for connecting to NSX manager. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :param nsx_username: The nsx_username of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._nsx_username = nsx_username

    @property
    def nsx_version(self):
        """Gets the nsx_version of this SourceNsxApiEndpoint.  # noqa: E501

        Build version (major, minor, patch) of a source NSX API endpoint.  # noqa: E501

        :return: The nsx_version of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._nsx_version

    @nsx_version.setter
    def nsx_version(self, nsx_version):
        """Sets the nsx_version of this SourceNsxApiEndpoint.

        Build version (major, minor, patch) of a source NSX API endpoint.  # noqa: E501

        :param nsx_version: The nsx_version of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._nsx_version = nsx_version

    @property
    def nsx_password(self):
        """Gets the nsx_password of this SourceNsxApiEndpoint.  # noqa: E501

        Password for connecting to NSX manager. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :return: The nsx_password of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._nsx_password

    @nsx_password.setter
    def nsx_password(self, nsx_password):
        """Sets the nsx_password of this SourceNsxApiEndpoint.

        Password for connecting to NSX manager. This field is not applicable in case of vSphere network migration.  # noqa: E501

        :param nsx_password: The nsx_password of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._nsx_password = nsx_password

    @property
    def vc_password(self):
        """Gets the vc_password of this SourceNsxApiEndpoint.  # noqa: E501

        Password for connecting to VC.  # noqa: E501

        :return: The vc_password of this SourceNsxApiEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._vc_password

    @vc_password.setter
    def vc_password(self, vc_password):
        """Sets the vc_password of this SourceNsxApiEndpoint.

        Password for connecting to VC.  # noqa: E501

        :param vc_password: The vc_password of this SourceNsxApiEndpoint.  # noqa: E501
        :type: str
        """

        self._vc_password = vc_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceNsxApiEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceNsxApiEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
