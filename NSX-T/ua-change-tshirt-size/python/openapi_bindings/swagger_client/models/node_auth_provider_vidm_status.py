# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeAuthProviderVidmStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'runtime_state': 'str',
        'vidm_enable': 'bool'
    }

    attribute_map = {
        'runtime_state': 'runtime_state',
        'vidm_enable': 'vidm_enable'
    }

    def __init__(self, runtime_state=None, vidm_enable=None):  # noqa: E501
        """NodeAuthProviderVidmStatus - a model defined in Swagger"""  # noqa: E501
        self._runtime_state = None
        self._vidm_enable = None
        self.discriminator = None
        self.runtime_state = runtime_state
        self.vidm_enable = vidm_enable

    @property
    def runtime_state(self):
        """Gets the runtime_state of this NodeAuthProviderVidmStatus.  # noqa: E501

        AAA provider vIDM status  # noqa: E501

        :return: The runtime_state of this NodeAuthProviderVidmStatus.  # noqa: E501
        :rtype: str
        """
        return self._runtime_state

    @runtime_state.setter
    def runtime_state(self, runtime_state):
        """Sets the runtime_state of this NodeAuthProviderVidmStatus.

        AAA provider vIDM status  # noqa: E501

        :param runtime_state: The runtime_state of this NodeAuthProviderVidmStatus.  # noqa: E501
        :type: str
        """
        if runtime_state is None:
            raise ValueError("Invalid value for `runtime_state`, must not be `None`")  # noqa: E501

        self._runtime_state = runtime_state

    @property
    def vidm_enable(self):
        """Gets the vidm_enable of this NodeAuthProviderVidmStatus.  # noqa: E501

        vIDM enable flag  # noqa: E501

        :return: The vidm_enable of this NodeAuthProviderVidmStatus.  # noqa: E501
        :rtype: bool
        """
        return self._vidm_enable

    @vidm_enable.setter
    def vidm_enable(self, vidm_enable):
        """Sets the vidm_enable of this NodeAuthProviderVidmStatus.

        vIDM enable flag  # noqa: E501

        :param vidm_enable: The vidm_enable of this NodeAuthProviderVidmStatus.  # noqa: E501
        :type: bool
        """
        if vidm_enable is None:
            raise ValueError("Invalid value for `vidm_enable`, must not be `None`")  # noqa: E501

        self._vidm_enable = vidm_enable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeAuthProviderVidmStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeAuthProviderVidmStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
