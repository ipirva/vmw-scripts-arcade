# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ComputeManager(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential': 'LoginCredential',
        'set_as_oidc_provider': 'bool',
        'access_level_for_oidc': 'str',
        'reverse_proxy_https_port': 'int',
        'create_service_account': 'bool',
        'origin_properties': 'list[KeyValuePair]',
        'origin_type': 'str',
        'server': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'credential': 'credential',
        'set_as_oidc_provider': 'set_as_oidc_provider',
        'access_level_for_oidc': 'access_level_for_oidc',
        'reverse_proxy_https_port': 'reverse_proxy_https_port',
        'create_service_account': 'create_service_account',
        'origin_properties': 'origin_properties',
        'origin_type': 'origin_type',
        'server': 'server'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, credential=None, set_as_oidc_provider=False, access_level_for_oidc='FULL', reverse_proxy_https_port=443, create_service_account=False, origin_properties=None, origin_type=None, server=None, *args, **kwargs):  # noqa: E501
        """ComputeManager - a model defined in Swagger"""  # noqa: E501
        self._credential = None
        self._set_as_oidc_provider = None
        self._access_level_for_oidc = None
        self._reverse_proxy_https_port = None
        self._create_service_account = None
        self._origin_properties = None
        self._origin_type = None
        self._server = None
        self.discriminator = None
        if credential is not None:
            self.credential = credential
        if set_as_oidc_provider is not None:
            self.set_as_oidc_provider = set_as_oidc_provider
        if access_level_for_oidc is not None:
            self.access_level_for_oidc = access_level_for_oidc
        if reverse_proxy_https_port is not None:
            self.reverse_proxy_https_port = reverse_proxy_https_port
        if create_service_account is not None:
            self.create_service_account = create_service_account
        if origin_properties is not None:
            self.origin_properties = origin_properties
        self.origin_type = origin_type
        self.server = server
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def credential(self):
        """Gets the credential of this ComputeManager.  # noqa: E501


        :return: The credential of this ComputeManager.  # noqa: E501
        :rtype: LoginCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this ComputeManager.


        :param credential: The credential of this ComputeManager.  # noqa: E501
        :type: LoginCredential
        """

        self._credential = credential

    @property
    def set_as_oidc_provider(self):
        """Gets the set_as_oidc_provider of this ComputeManager.  # noqa: E501

        If the compute manager is VC and need to set set as OIDC provider for NSX then this flag should be set as true. This is specific to wcp feature, should be enabled when this feature is being used.   # noqa: E501

        :return: The set_as_oidc_provider of this ComputeManager.  # noqa: E501
        :rtype: bool
        """
        return self._set_as_oidc_provider

    @set_as_oidc_provider.setter
    def set_as_oidc_provider(self, set_as_oidc_provider):
        """Sets the set_as_oidc_provider of this ComputeManager.

        If the compute manager is VC and need to set set as OIDC provider for NSX then this flag should be set as true. This is specific to wcp feature, should be enabled when this feature is being used.   # noqa: E501

        :param set_as_oidc_provider: The set_as_oidc_provider of this ComputeManager.  # noqa: E501
        :type: bool
        """

        self._set_as_oidc_provider = set_as_oidc_provider

    @property
    def access_level_for_oidc(self):
        """Gets the access_level_for_oidc of this ComputeManager.  # noqa: E501

        Specifies the maximum access level allowed for calls from compute manager to NSX using the OIDC provider.   # noqa: E501

        :return: The access_level_for_oidc of this ComputeManager.  # noqa: E501
        :rtype: str
        """
        return self._access_level_for_oidc

    @access_level_for_oidc.setter
    def access_level_for_oidc(self, access_level_for_oidc):
        """Sets the access_level_for_oidc of this ComputeManager.

        Specifies the maximum access level allowed for calls from compute manager to NSX using the OIDC provider.   # noqa: E501

        :param access_level_for_oidc: The access_level_for_oidc of this ComputeManager.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "LIMITED"]  # noqa: E501
        if access_level_for_oidc not in allowed_values:
            raise ValueError(
                "Invalid value for `access_level_for_oidc` ({0}), must be one of {1}"  # noqa: E501
                .format(access_level_for_oidc, allowed_values)
            )

        self._access_level_for_oidc = access_level_for_oidc

    @property
    def reverse_proxy_https_port(self):
        """Gets the reverse_proxy_https_port of this ComputeManager.  # noqa: E501

        Specifies https port of the reverse proxy to connect to compute manager. For e.g. In case of VC, this port can be retrieved from this config file /etc/vmware-rhttpproxy/config.xml.   # noqa: E501

        :return: The reverse_proxy_https_port of this ComputeManager.  # noqa: E501
        :rtype: int
        """
        return self._reverse_proxy_https_port

    @reverse_proxy_https_port.setter
    def reverse_proxy_https_port(self, reverse_proxy_https_port):
        """Sets the reverse_proxy_https_port of this ComputeManager.

        Specifies https port of the reverse proxy to connect to compute manager. For e.g. In case of VC, this port can be retrieved from this config file /etc/vmware-rhttpproxy/config.xml.   # noqa: E501

        :param reverse_proxy_https_port: The reverse_proxy_https_port of this ComputeManager.  # noqa: E501
        :type: int
        """

        self._reverse_proxy_https_port = reverse_proxy_https_port

    @property
    def create_service_account(self):
        """Gets the create_service_account of this ComputeManager.  # noqa: E501

        Enable this flag to create service account user on compute manager. This is required by features such as vSphere Lifecycle Manager for authentication with vAPIs from nsx.   # noqa: E501

        :return: The create_service_account of this ComputeManager.  # noqa: E501
        :rtype: bool
        """
        return self._create_service_account

    @create_service_account.setter
    def create_service_account(self, create_service_account):
        """Sets the create_service_account of this ComputeManager.

        Enable this flag to create service account user on compute manager. This is required by features such as vSphere Lifecycle Manager for authentication with vAPIs from nsx.   # noqa: E501

        :param create_service_account: The create_service_account of this ComputeManager.  # noqa: E501
        :type: bool
        """

        self._create_service_account = create_service_account

    @property
    def origin_properties(self):
        """Gets the origin_properties of this ComputeManager.  # noqa: E501

        Key-Value map of additional specific properties of compute manager  # noqa: E501

        :return: The origin_properties of this ComputeManager.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._origin_properties

    @origin_properties.setter
    def origin_properties(self, origin_properties):
        """Sets the origin_properties of this ComputeManager.

        Key-Value map of additional specific properties of compute manager  # noqa: E501

        :param origin_properties: The origin_properties of this ComputeManager.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._origin_properties = origin_properties

    @property
    def origin_type(self):
        """Gets the origin_type of this ComputeManager.  # noqa: E501

        Compute manager type like vCenter  # noqa: E501

        :return: The origin_type of this ComputeManager.  # noqa: E501
        :rtype: str
        """
        return self._origin_type

    @origin_type.setter
    def origin_type(self, origin_type):
        """Sets the origin_type of this ComputeManager.

        Compute manager type like vCenter  # noqa: E501

        :param origin_type: The origin_type of this ComputeManager.  # noqa: E501
        :type: str
        """
        if origin_type is None:
            raise ValueError("Invalid value for `origin_type`, must not be `None`")  # noqa: E501

        self._origin_type = origin_type

    @property
    def server(self):
        """Gets the server of this ComputeManager.  # noqa: E501

        IP address or hostname of compute manager  # noqa: E501

        :return: The server of this ComputeManager.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ComputeManager.

        IP address or hostname of compute manager  # noqa: E501

        :param server: The server of this ComputeManager.  # noqa: E501
        :type: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComputeManager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputeManager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
