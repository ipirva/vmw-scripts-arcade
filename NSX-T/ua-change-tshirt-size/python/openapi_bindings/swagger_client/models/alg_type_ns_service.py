# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.ns_service_element import NSServiceElement  # noqa: F401,E501

class ALGTypeNSService(NSServiceElement):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alg': 'str',
        'destination_ports': 'list[str]',
        'source_ports': 'list[str]'
    }
    if hasattr(NSServiceElement, "swagger_types"):
        swagger_types.update(NSServiceElement.swagger_types)

    attribute_map = {
        'alg': 'alg',
        'destination_ports': 'destination_ports',
        'source_ports': 'source_ports'
    }
    if hasattr(NSServiceElement, "attribute_map"):
        attribute_map.update(NSServiceElement.attribute_map)

    def __init__(self, alg=None, destination_ports=None, source_ports=None, *args, **kwargs):  # noqa: E501
        """ALGTypeNSService - a model defined in Swagger"""  # noqa: E501
        self._alg = None
        self._destination_ports = None
        self._source_ports = None
        self.discriminator = None
        self.alg = alg
        self.destination_ports = destination_ports
        if source_ports is not None:
            self.source_ports = source_ports
        NSServiceElement.__init__(self, *args, **kwargs)

    @property
    def alg(self):
        """Gets the alg of this ALGTypeNSService.  # noqa: E501

        The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are  deprecated. Please use UDP protocol and create L4 Port Set type of service instead.   # noqa: E501

        :return: The alg of this ALGTypeNSService.  # noqa: E501
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this ALGTypeNSService.

        The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are  deprecated. Please use UDP protocol and create L4 Port Set type of service instead.   # noqa: E501

        :param alg: The alg of this ALGTypeNSService.  # noqa: E501
        :type: str
        """
        if alg is None:
            raise ValueError("Invalid value for `alg`, must not be `None`")  # noqa: E501
        allowed_values = ["ORACLE_TNS", "FTP", "SUN_RPC_TCP", "SUN_RPC_UDP", "MS_RPC_TCP", "MS_RPC_UDP", "NBNS_BROADCAST", "NBDG_BROADCAST", "TFTP"]  # noqa: E501
        if alg not in allowed_values:
            raise ValueError(
                "Invalid value for `alg` ({0}), must be one of {1}"  # noqa: E501
                .format(alg, allowed_values)
            )

        self._alg = alg

    @property
    def destination_ports(self):
        """Gets the destination_ports of this ALGTypeNSService.  # noqa: E501

        The destination_port cannot be empty and must be a single value.  # noqa: E501

        :return: The destination_ports of this ALGTypeNSService.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this ALGTypeNSService.

        The destination_port cannot be empty and must be a single value.  # noqa: E501

        :param destination_ports: The destination_ports of this ALGTypeNSService.  # noqa: E501
        :type: list[str]
        """
        if destination_ports is None:
            raise ValueError("Invalid value for `destination_ports`, must not be `None`")  # noqa: E501

        self._destination_ports = destination_ports

    @property
    def source_ports(self):
        """Gets the source_ports of this ALGTypeNSService.  # noqa: E501

        Source ports  # noqa: E501

        :return: The source_ports of this ALGTypeNSService.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_ports

    @source_ports.setter
    def source_ports(self, source_ports):
        """Sets the source_ports of this ALGTypeNSService.

        Source ports  # noqa: E501

        :param source_ports: The source_ports of this ALGTypeNSService.  # noqa: E501
        :type: list[str]
        """

        self._source_ports = source_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ALGTypeNSService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ALGTypeNSService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
