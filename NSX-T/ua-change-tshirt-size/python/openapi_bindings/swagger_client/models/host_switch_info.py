# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostSwitchInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_switch_type': 'str',
        'host_switch_id': 'str',
        'host_switch_mode': 'str',
        'host_switch_name': 'str'
    }

    attribute_map = {
        'host_switch_type': 'host_switch_type',
        'host_switch_id': 'host_switch_id',
        'host_switch_mode': 'host_switch_mode',
        'host_switch_name': 'host_switch_name'
    }

    def __init__(self, host_switch_type=None, host_switch_id=None, host_switch_mode=None, host_switch_name=None):  # noqa: E501
        """HostSwitchInfo - a model defined in Swagger"""  # noqa: E501
        self._host_switch_type = None
        self._host_switch_id = None
        self._host_switch_mode = None
        self._host_switch_name = None
        self.discriminator = None
        if host_switch_type is not None:
            self.host_switch_type = host_switch_type
        if host_switch_id is not None:
            self.host_switch_id = host_switch_id
        if host_switch_mode is not None:
            self.host_switch_mode = host_switch_mode
        if host_switch_name is not None:
            self.host_switch_name = host_switch_name

    @property
    def host_switch_type(self):
        """Gets the host_switch_type of this HostSwitchInfo.  # noqa: E501

        Type of a host switch  # noqa: E501

        :return: The host_switch_type of this HostSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_type

    @host_switch_type.setter
    def host_switch_type(self, host_switch_type):
        """Sets the host_switch_type of this HostSwitchInfo.

        Type of a host switch  # noqa: E501

        :param host_switch_type: The host_switch_type of this HostSwitchInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["NVDS", "VDS"]  # noqa: E501
        if host_switch_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_switch_type` ({0}), must be one of {1}"  # noqa: E501
                .format(host_switch_type, allowed_values)
            )

        self._host_switch_type = host_switch_type

    @property
    def host_switch_id(self):
        """Gets the host_switch_id of this HostSwitchInfo.  # noqa: E501

        Unique ID of a host switch  # noqa: E501

        :return: The host_switch_id of this HostSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_id

    @host_switch_id.setter
    def host_switch_id(self, host_switch_id):
        """Sets the host_switch_id of this HostSwitchInfo.

        Unique ID of a host switch  # noqa: E501

        :param host_switch_id: The host_switch_id of this HostSwitchInfo.  # noqa: E501
        :type: str
        """

        self._host_switch_id = host_switch_id

    @property
    def host_switch_mode(self):
        """Gets the host_switch_mode of this HostSwitchInfo.  # noqa: E501

        Mode of host switch  # noqa: E501

        :return: The host_switch_mode of this HostSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_mode

    @host_switch_mode.setter
    def host_switch_mode(self, host_switch_mode):
        """Sets the host_switch_mode of this HostSwitchInfo.

        Mode of host switch  # noqa: E501

        :param host_switch_mode: The host_switch_mode of this HostSwitchInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["STANDARD", "ENS", "ENS_INTERRUPT"]  # noqa: E501
        if host_switch_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `host_switch_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(host_switch_mode, allowed_values)
            )

        self._host_switch_mode = host_switch_mode

    @property
    def host_switch_name(self):
        """Gets the host_switch_name of this HostSwitchInfo.  # noqa: E501

        Name of a host switch  # noqa: E501

        :return: The host_switch_name of this HostSwitchInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_name

    @host_switch_name.setter
    def host_switch_name(self, host_switch_name):
        """Sets the host_switch_name of this HostSwitchInfo.

        Name of a host switch  # noqa: E501

        :param host_switch_name: The host_switch_name of this HostSwitchInfo.  # noqa: E501
        :type: str
        """

        self._host_switch_name = host_switch_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostSwitchInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostSwitchInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
