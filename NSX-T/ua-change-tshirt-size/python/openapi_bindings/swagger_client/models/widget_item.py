# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WidgetItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alignment': 'str',
        'separator': 'bool',
        'widget_id': 'str',
        'weight': 'int',
        'label': 'Label'
    }

    attribute_map = {
        'alignment': 'alignment',
        'separator': 'separator',
        'widget_id': 'widget_id',
        'weight': 'weight',
        'label': 'label'
    }

    def __init__(self, alignment='LEFT', separator=False, widget_id=None, weight=10000, label=None):  # noqa: E501
        """WidgetItem - a model defined in Swagger"""  # noqa: E501
        self._alignment = None
        self._separator = None
        self._widget_id = None
        self._weight = None
        self._label = None
        self.discriminator = None
        if alignment is not None:
            self.alignment = alignment
        if separator is not None:
            self.separator = separator
        self.widget_id = widget_id
        if weight is not None:
            self.weight = weight
        if label is not None:
            self.label = label

    @property
    def alignment(self):
        """Gets the alignment of this WidgetItem.  # noqa: E501

        Aligns widget either left or right.  # noqa: E501

        :return: The alignment of this WidgetItem.  # noqa: E501
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this WidgetItem.

        Aligns widget either left or right.  # noqa: E501

        :param alignment: The alignment of this WidgetItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["LEFT", "RIGHT"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def separator(self):
        """Gets the separator of this WidgetItem.  # noqa: E501

        If true, separates this widget in a container.  # noqa: E501

        :return: The separator of this WidgetItem.  # noqa: E501
        :rtype: bool
        """
        return self._separator

    @separator.setter
    def separator(self, separator):
        """Sets the separator of this WidgetItem.

        If true, separates this widget in a container.  # noqa: E501

        :param separator: The separator of this WidgetItem.  # noqa: E501
        :type: bool
        """

        self._separator = separator

    @property
    def widget_id(self):
        """Gets the widget_id of this WidgetItem.  # noqa: E501

        Id of the widget configuration that is held by a multi-widget or a container or a view.  # noqa: E501

        :return: The widget_id of this WidgetItem.  # noqa: E501
        :rtype: str
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id):
        """Sets the widget_id of this WidgetItem.

        Id of the widget configuration that is held by a multi-widget or a container or a view.  # noqa: E501

        :param widget_id: The widget_id of this WidgetItem.  # noqa: E501
        :type: str
        """
        if widget_id is None:
            raise ValueError("Invalid value for `widget_id`, must not be `None`")  # noqa: E501

        self._widget_id = widget_id

    @property
    def weight(self):
        """Gets the weight of this WidgetItem.  # noqa: E501

        Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.  # noqa: E501

        :return: The weight of this WidgetItem.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WidgetItem.

        Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.  # noqa: E501

        :param weight: The weight of this WidgetItem.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def label(self):
        """Gets the label of this WidgetItem.  # noqa: E501


        :return: The label of this WidgetItem.  # noqa: E501
        :rtype: Label
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WidgetItem.


        :param label: The label of this WidgetItem.  # noqa: E501
        :type: Label
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WidgetItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
