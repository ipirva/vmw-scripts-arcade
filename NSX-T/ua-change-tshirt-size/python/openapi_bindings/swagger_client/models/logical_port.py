# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class LogicalPort(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_switch_id': 'str',
        'init_state': 'str',
        'switching_profile_ids': 'list[SwitchingProfileTypeIdEntry]',
        'attachment': 'LogicalPortAttachment',
        'internal_id': 'str',
        'extra_configs': 'list[ExtraConfig]',
        'address_bindings': 'list[PacketAddressClassifier]',
        'ignore_address_bindings': 'list[PacketAddressClassifier]',
        'admin_state': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'logical_switch_id': 'logical_switch_id',
        'init_state': 'init_state',
        'switching_profile_ids': 'switching_profile_ids',
        'attachment': 'attachment',
        'internal_id': 'internal_id',
        'extra_configs': 'extra_configs',
        'address_bindings': 'address_bindings',
        'ignore_address_bindings': 'ignore_address_bindings',
        'admin_state': 'admin_state'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, logical_switch_id=None, init_state=None, switching_profile_ids=None, attachment=None, internal_id=None, extra_configs=None, address_bindings=None, ignore_address_bindings=None, admin_state=None, *args, **kwargs):  # noqa: E501
        """LogicalPort - a model defined in Swagger"""  # noqa: E501
        self._logical_switch_id = None
        self._init_state = None
        self._switching_profile_ids = None
        self._attachment = None
        self._internal_id = None
        self._extra_configs = None
        self._address_bindings = None
        self._ignore_address_bindings = None
        self._admin_state = None
        self.discriminator = None
        self.logical_switch_id = logical_switch_id
        if init_state is not None:
            self.init_state = init_state
        if switching_profile_ids is not None:
            self.switching_profile_ids = switching_profile_ids
        if attachment is not None:
            self.attachment = attachment
        if internal_id is not None:
            self.internal_id = internal_id
        if extra_configs is not None:
            self.extra_configs = extra_configs
        if address_bindings is not None:
            self.address_bindings = address_bindings
        if ignore_address_bindings is not None:
            self.ignore_address_bindings = ignore_address_bindings
        self.admin_state = admin_state
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def logical_switch_id(self):
        """Gets the logical_switch_id of this LogicalPort.  # noqa: E501

        Id of the Logical switch that this port belongs to.  # noqa: E501

        :return: The logical_switch_id of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._logical_switch_id

    @logical_switch_id.setter
    def logical_switch_id(self, logical_switch_id):
        """Sets the logical_switch_id of this LogicalPort.

        Id of the Logical switch that this port belongs to.  # noqa: E501

        :param logical_switch_id: The logical_switch_id of this LogicalPort.  # noqa: E501
        :type: str
        """
        if logical_switch_id is None:
            raise ValueError("Invalid value for `logical_switch_id`, must not be `None`")  # noqa: E501

        self._logical_switch_id = logical_switch_id

    @property
    def init_state(self):
        """Gets the init_state of this LogicalPort.  # noqa: E501

        Set initial state when a new logical port is created. 'UNBLOCKED_VLAN' means new port will be unblocked on traffic in creation, also VLAN will be set with corresponding logical switch setting. This port setting can only be configured at port creation (POST), and cannot be modified. 'RESTORE_VIF' fetches and restores VIF attachment from ESX host.   # noqa: E501

        :return: The init_state of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._init_state

    @init_state.setter
    def init_state(self, init_state):
        """Sets the init_state of this LogicalPort.

        Set initial state when a new logical port is created. 'UNBLOCKED_VLAN' means new port will be unblocked on traffic in creation, also VLAN will be set with corresponding logical switch setting. This port setting can only be configured at port creation (POST), and cannot be modified. 'RESTORE_VIF' fetches and restores VIF attachment from ESX host.   # noqa: E501

        :param init_state: The init_state of this LogicalPort.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNBLOCKED_VLAN", "RESTORE_VIF"]  # noqa: E501
        if init_state not in allowed_values:
            raise ValueError(
                "Invalid value for `init_state` ({0}), must be one of {1}"  # noqa: E501
                .format(init_state, allowed_values)
            )

        self._init_state = init_state

    @property
    def switching_profile_ids(self):
        """Gets the switching_profile_ids of this LogicalPort.  # noqa: E501


        :return: The switching_profile_ids of this LogicalPort.  # noqa: E501
        :rtype: list[SwitchingProfileTypeIdEntry]
        """
        return self._switching_profile_ids

    @switching_profile_ids.setter
    def switching_profile_ids(self, switching_profile_ids):
        """Sets the switching_profile_ids of this LogicalPort.


        :param switching_profile_ids: The switching_profile_ids of this LogicalPort.  # noqa: E501
        :type: list[SwitchingProfileTypeIdEntry]
        """

        self._switching_profile_ids = switching_profile_ids

    @property
    def attachment(self):
        """Gets the attachment of this LogicalPort.  # noqa: E501


        :return: The attachment of this LogicalPort.  # noqa: E501
        :rtype: LogicalPortAttachment
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this LogicalPort.


        :param attachment: The attachment of this LogicalPort.  # noqa: E501
        :type: LogicalPortAttachment
        """

        self._attachment = attachment

    @property
    def internal_id(self):
        """Gets the internal_id of this LogicalPort.  # noqa: E501

        The internal_id of the logical port may or may not be identical to it's managed resource ID. If a VirtualMachine connected to logical port migrates from one site to another, then on the destination site, it will be connected to different logical port managed resource. However, the internal_id field will be persisted across vmotion.   # noqa: E501

        :return: The internal_id of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this LogicalPort.

        The internal_id of the logical port may or may not be identical to it's managed resource ID. If a VirtualMachine connected to logical port migrates from one site to another, then on the destination site, it will be connected to different logical port managed resource. However, the internal_id field will be persisted across vmotion.   # noqa: E501

        :param internal_id: The internal_id of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._internal_id = internal_id

    @property
    def extra_configs(self):
        """Gets the extra_configs of this LogicalPort.  # noqa: E501

        This property could be used for vendor specific configuration in key value string pairs. Logical port setting will override logical switch setting if the same key was set on both logical switch and logical port.   # noqa: E501

        :return: The extra_configs of this LogicalPort.  # noqa: E501
        :rtype: list[ExtraConfig]
        """
        return self._extra_configs

    @extra_configs.setter
    def extra_configs(self, extra_configs):
        """Sets the extra_configs of this LogicalPort.

        This property could be used for vendor specific configuration in key value string pairs. Logical port setting will override logical switch setting if the same key was set on both logical switch and logical port.   # noqa: E501

        :param extra_configs: The extra_configs of this LogicalPort.  # noqa: E501
        :type: list[ExtraConfig]
        """

        self._extra_configs = extra_configs

    @property
    def address_bindings(self):
        """Gets the address_bindings of this LogicalPort.  # noqa: E501

        Each address binding must contain both an IPElement and MAC address. VLAN ID is optional. This binding configuration can be used by features such as spoof-guard and overrides any discovered bindings. Any non unique entries are deduplicated to generate a unique set of address bindings and then stored. For IP addresses, a subnet address cannot have host bits set. A maximum of 128 unique address bindings is allowed per port.   # noqa: E501

        :return: The address_bindings of this LogicalPort.  # noqa: E501
        :rtype: list[PacketAddressClassifier]
        """
        return self._address_bindings

    @address_bindings.setter
    def address_bindings(self, address_bindings):
        """Sets the address_bindings of this LogicalPort.

        Each address binding must contain both an IPElement and MAC address. VLAN ID is optional. This binding configuration can be used by features such as spoof-guard and overrides any discovered bindings. Any non unique entries are deduplicated to generate a unique set of address bindings and then stored. For IP addresses, a subnet address cannot have host bits set. A maximum of 128 unique address bindings is allowed per port.   # noqa: E501

        :param address_bindings: The address_bindings of this LogicalPort.  # noqa: E501
        :type: list[PacketAddressClassifier]
        """

        self._address_bindings = address_bindings

    @property
    def ignore_address_bindings(self):
        """Gets the ignore_address_bindings of this LogicalPort.  # noqa: E501

        IP Discovery module uses various mechanisms to discover address bindings being used on each port. If a user would like to ignore any specific discovered address bindings or prevent the discovery of a particular set of discovered bindings, then those address bindings can be provided here. Currently IP range in CIDR format is not supported.   # noqa: E501

        :return: The ignore_address_bindings of this LogicalPort.  # noqa: E501
        :rtype: list[PacketAddressClassifier]
        """
        return self._ignore_address_bindings

    @ignore_address_bindings.setter
    def ignore_address_bindings(self, ignore_address_bindings):
        """Sets the ignore_address_bindings of this LogicalPort.

        IP Discovery module uses various mechanisms to discover address bindings being used on each port. If a user would like to ignore any specific discovered address bindings or prevent the discovery of a particular set of discovered bindings, then those address bindings can be provided here. Currently IP range in CIDR format is not supported.   # noqa: E501

        :param ignore_address_bindings: The ignore_address_bindings of this LogicalPort.  # noqa: E501
        :type: list[PacketAddressClassifier]
        """

        self._ignore_address_bindings = ignore_address_bindings

    @property
    def admin_state(self):
        """Gets the admin_state of this LogicalPort.  # noqa: E501

        Represents Desired state of the logical port  # noqa: E501

        :return: The admin_state of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this LogicalPort.

        Represents Desired state of the logical port  # noqa: E501

        :param admin_state: The admin_state of this LogicalPort.  # noqa: E501
        :type: str
        """
        if admin_state is None:
            raise ValueError("Invalid value for `admin_state`, must not be `None`")  # noqa: E501
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if admin_state not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_state` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_state, allowed_values)
            )

        self._admin_state = admin_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
