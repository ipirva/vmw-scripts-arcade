# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_id': 'str',
        'uri_filters': 'list[str]'
    }

    attribute_map = {
        'notification_id': 'notification_id',
        'uri_filters': 'uri_filters'
    }

    def __init__(self, notification_id=None, uri_filters=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        self._notification_id = None
        self._uri_filters = None
        self.discriminator = None
        if notification_id is not None:
            self.notification_id = notification_id
        if uri_filters is not None:
            self.uri_filters = uri_filters

    @property
    def notification_id(self):
        """Gets the notification_id of this Notification.  # noqa: E501

        A string identifying feature_name.notification_name to indicate a notification watcher is interested in receiving notifications for the URI identified by the feature_name.notification_name.  # noqa: E501

        :return: The notification_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this Notification.

        A string identifying feature_name.notification_name to indicate a notification watcher is interested in receiving notifications for the URI identified by the feature_name.notification_name.  # noqa: E501

        :param notification_id: The notification_id of this Notification.  # noqa: E501
        :type: str
        """

        self._notification_id = notification_id

    @property
    def uri_filters(self):
        """Gets the uri_filters of this Notification.  # noqa: E501

        Optional list of URIs  # noqa: E501

        :return: The uri_filters of this Notification.  # noqa: E501
        :rtype: list[str]
        """
        return self._uri_filters

    @uri_filters.setter
    def uri_filters(self, uri_filters):
        """Sets the uri_filters of this Notification.

        Optional list of URIs  # noqa: E501

        :param uri_filters: The uri_filters of this Notification.  # noqa: E501
        :type: list[str]
        """

        self._uri_filters = uri_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
