# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'priority': 'int',
        'procid': 'int',
        'facility': 'int',
        'full_log': 'str',
        'msgid': 'str',
        'appname': 'str',
        'timestamp': 'str',
        'message': 'str',
        'hostname': 'str',
        'struct_data': 'StructuredData'
    }

    attribute_map = {
        'priority': 'priority',
        'procid': 'procid',
        'facility': 'facility',
        'full_log': 'full_log',
        'msgid': 'msgid',
        'appname': 'appname',
        'timestamp': 'timestamp',
        'message': 'message',
        'hostname': 'hostname',
        'struct_data': 'struct_data'
    }

    def __init__(self, priority=None, procid=None, facility=None, full_log=None, msgid=None, appname=None, timestamp=None, message=None, hostname=None, struct_data=None):  # noqa: E501
        """AuditLog - a model defined in Swagger"""  # noqa: E501
        self._priority = None
        self._procid = None
        self._facility = None
        self._full_log = None
        self._msgid = None
        self._appname = None
        self._timestamp = None
        self._message = None
        self._hostname = None
        self._struct_data = None
        self.discriminator = None
        self.priority = priority
        self.procid = procid
        self.facility = facility
        self.full_log = full_log
        self.msgid = msgid
        self.appname = appname
        self.timestamp = timestamp
        self.message = message
        self.hostname = hostname
        self.struct_data = struct_data

    @property
    def priority(self):
        """Gets the priority of this AuditLog.  # noqa: E501

        Priority field of the log  # noqa: E501

        :return: The priority of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AuditLog.

        Priority field of the log  # noqa: E501

        :param priority: The priority of this AuditLog.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def procid(self):
        """Gets the procid of this AuditLog.  # noqa: E501

        Process ID field of the log  # noqa: E501

        :return: The procid of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._procid

    @procid.setter
    def procid(self, procid):
        """Sets the procid of this AuditLog.

        Process ID field of the log  # noqa: E501

        :param procid: The procid of this AuditLog.  # noqa: E501
        :type: int
        """
        if procid is None:
            raise ValueError("Invalid value for `procid`, must not be `None`")  # noqa: E501

        self._procid = procid

    @property
    def facility(self):
        """Gets the facility of this AuditLog.  # noqa: E501

        Facility field of the log  # noqa: E501

        :return: The facility of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this AuditLog.

        Facility field of the log  # noqa: E501

        :param facility: The facility of this AuditLog.  # noqa: E501
        :type: int
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")  # noqa: E501

        self._facility = facility

    @property
    def full_log(self):
        """Gets the full_log of this AuditLog.  # noqa: E501

        Full log with both header and message  # noqa: E501

        :return: The full_log of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._full_log

    @full_log.setter
    def full_log(self, full_log):
        """Sets the full_log of this AuditLog.

        Full log with both header and message  # noqa: E501

        :param full_log: The full_log of this AuditLog.  # noqa: E501
        :type: str
        """
        if full_log is None:
            raise ValueError("Invalid value for `full_log`, must not be `None`")  # noqa: E501

        self._full_log = full_log

    @property
    def msgid(self):
        """Gets the msgid of this AuditLog.  # noqa: E501

        Message ID field of the log  # noqa: E501

        :return: The msgid of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._msgid

    @msgid.setter
    def msgid(self, msgid):
        """Sets the msgid of this AuditLog.

        Message ID field of the log  # noqa: E501

        :param msgid: The msgid of this AuditLog.  # noqa: E501
        :type: str
        """
        if msgid is None:
            raise ValueError("Invalid value for `msgid`, must not be `None`")  # noqa: E501

        self._msgid = msgid

    @property
    def appname(self):
        """Gets the appname of this AuditLog.  # noqa: E501

        Application name field of the log  # noqa: E501

        :return: The appname of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._appname

    @appname.setter
    def appname(self, appname):
        """Sets the appname of this AuditLog.

        Application name field of the log  # noqa: E501

        :param appname: The appname of this AuditLog.  # noqa: E501
        :type: str
        """
        if appname is None:
            raise ValueError("Invalid value for `appname`, must not be `None`")  # noqa: E501

        self._appname = appname

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditLog.  # noqa: E501

        Date and time in UTC of the log  # noqa: E501

        :return: The timestamp of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditLog.

        Date and time in UTC of the log  # noqa: E501

        :param timestamp: The timestamp of this AuditLog.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this AuditLog.  # noqa: E501

        Message field of the log  # noqa: E501

        :return: The message of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditLog.

        Message field of the log  # noqa: E501

        :param message: The message of this AuditLog.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def hostname(self):
        """Gets the hostname of this AuditLog.  # noqa: E501

        Hostname field of the log  # noqa: E501

        :return: The hostname of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AuditLog.

        Hostname field of the log  # noqa: E501

        :param hostname: The hostname of this AuditLog.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def struct_data(self):
        """Gets the struct_data of this AuditLog.  # noqa: E501


        :return: The struct_data of this AuditLog.  # noqa: E501
        :rtype: StructuredData
        """
        return self._struct_data

    @struct_data.setter
    def struct_data(self, struct_data):
        """Sets the struct_data of this AuditLog.


        :param struct_data: The struct_data of this AuditLog.  # noqa: E501
        :type: StructuredData
        """
        if struct_data is None:
            raise ValueError("Invalid value for `struct_data`, must not be `None`")  # noqa: E501

        self._struct_data = struct_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
