# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogicalPortAttachmentState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'attachers': 'list[PortAttacher]',
        'id': 'str'
    }

    attribute_map = {
        'state': 'state',
        'attachers': 'attachers',
        'id': 'id'
    }

    def __init__(self, state=None, attachers=None, id=None):  # noqa: E501
        """LogicalPortAttachmentState - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._attachers = None
        self._id = None
        self.discriminator = None
        if state is not None:
            self.state = state
        if attachers is not None:
            self.attachers = attachers
        if id is not None:
            self.id = id

    @property
    def state(self):
        """Gets the state of this LogicalPortAttachmentState.  # noqa: E501

        A logicalPort must be in one of following state. FREE - If there are no active attachers. The LogicalPort may or may not have an attachment ID configured on it. This state is applicable only to LogialPort of static type. ATTACHED - LogicalPort has exactly one active attacher and no further configuration is pending. ATTACHED_PENDING_CONF - LogicalPort has exactly one attacher, however it may not have been configured completely. Additional configuration will be provided by other nsx components. ATTACHED_IN_MOTION - LogicalPort has multiple active attachers. This state represents a scenario where VM is moving from one location (host or storage) to another (e.g. vmotion, vSphere HA) DETACHED - A temporary state after all LogialPort attachers have been detached. This state is applicable only to LogicalPort of ephemeral type and the LogicalPort will soon be deleted.   # noqa: E501

        :return: The state of this LogicalPortAttachmentState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LogicalPortAttachmentState.

        A logicalPort must be in one of following state. FREE - If there are no active attachers. The LogicalPort may or may not have an attachment ID configured on it. This state is applicable only to LogialPort of static type. ATTACHED - LogicalPort has exactly one active attacher and no further configuration is pending. ATTACHED_PENDING_CONF - LogicalPort has exactly one attacher, however it may not have been configured completely. Additional configuration will be provided by other nsx components. ATTACHED_IN_MOTION - LogicalPort has multiple active attachers. This state represents a scenario where VM is moving from one location (host or storage) to another (e.g. vmotion, vSphere HA) DETACHED - A temporary state after all LogialPort attachers have been detached. This state is applicable only to LogicalPort of ephemeral type and the LogicalPort will soon be deleted.   # noqa: E501

        :param state: The state of this LogicalPortAttachmentState.  # noqa: E501
        :type: str
        """
        allowed_values = ["FREE", "ATTACHED", "ATTACHED_PENDING_CONF", "ATTACHED_IN_MOTION", "DETACHED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def attachers(self):
        """Gets the attachers of this LogicalPortAttachmentState.  # noqa: E501

        VM or vmknic entities that are attached to the LogicalPort  # noqa: E501

        :return: The attachers of this LogicalPortAttachmentState.  # noqa: E501
        :rtype: list[PortAttacher]
        """
        return self._attachers

    @attachers.setter
    def attachers(self, attachers):
        """Sets the attachers of this LogicalPortAttachmentState.

        VM or vmknic entities that are attached to the LogicalPort  # noqa: E501

        :param attachers: The attachers of this LogicalPortAttachmentState.  # noqa: E501
        :type: list[PortAttacher]
        """

        self._attachers = attachers

    @property
    def id(self):
        """Gets the id of this LogicalPortAttachmentState.  # noqa: E501

        VIF ID  # noqa: E501

        :return: The id of this LogicalPortAttachmentState.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogicalPortAttachmentState.

        VIF ID  # noqa: E501

        :param id: The id of this LogicalPortAttachmentState.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalPortAttachmentState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalPortAttachmentState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
