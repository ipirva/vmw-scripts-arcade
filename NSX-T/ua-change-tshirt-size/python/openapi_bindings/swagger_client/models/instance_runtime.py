# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class InstanceRuntime(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_vm_id': 'str',
        'deployment_status': 'str',
        'vm_nic_info': 'VmNicInfo',
        'maintenance_mode': 'str',
        'runtime_status': 'str',
        'error_message': 'str',
        'service_instance_id': 'str',
        'runtime_health_status_by_partner': 'str',
        'unhealthy_reason': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'service_vm_id': 'service_vm_id',
        'deployment_status': 'deployment_status',
        'vm_nic_info': 'vm_nic_info',
        'maintenance_mode': 'maintenance_mode',
        'runtime_status': 'runtime_status',
        'error_message': 'error_message',
        'service_instance_id': 'service_instance_id',
        'runtime_health_status_by_partner': 'runtime_health_status_by_partner',
        'unhealthy_reason': 'unhealthy_reason'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, service_vm_id=None, deployment_status=None, vm_nic_info=None, maintenance_mode=None, runtime_status=None, error_message=None, service_instance_id=None, runtime_health_status_by_partner=None, unhealthy_reason=None, *args, **kwargs):  # noqa: E501
        """InstanceRuntime - a model defined in Swagger"""  # noqa: E501
        self._service_vm_id = None
        self._deployment_status = None
        self._vm_nic_info = None
        self._maintenance_mode = None
        self._runtime_status = None
        self._error_message = None
        self._service_instance_id = None
        self._runtime_health_status_by_partner = None
        self._unhealthy_reason = None
        self.discriminator = None
        if service_vm_id is not None:
            self.service_vm_id = service_vm_id
        if deployment_status is not None:
            self.deployment_status = deployment_status
        if vm_nic_info is not None:
            self.vm_nic_info = vm_nic_info
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if runtime_status is not None:
            self.runtime_status = runtime_status
        if error_message is not None:
            self.error_message = error_message
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if runtime_health_status_by_partner is not None:
            self.runtime_health_status_by_partner = runtime_health_status_by_partner
        if unhealthy_reason is not None:
            self.unhealthy_reason = unhealthy_reason
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def service_vm_id(self):
        """Gets the service_vm_id of this InstanceRuntime.  # noqa: E501

        Service-VM/SVM id of deployed virtual-machine.  # noqa: E501

        :return: The service_vm_id of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._service_vm_id

    @service_vm_id.setter
    def service_vm_id(self, service_vm_id):
        """Sets the service_vm_id of this InstanceRuntime.

        Service-VM/SVM id of deployed virtual-machine.  # noqa: E501

        :param service_vm_id: The service_vm_id of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._service_vm_id = service_vm_id

    @property
    def deployment_status(self):
        """Gets the deployment_status of this InstanceRuntime.  # noqa: E501

        Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.  # noqa: E501

        :return: The deployment_status of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this InstanceRuntime.

        Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.  # noqa: E501

        :param deployment_status: The deployment_status of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYMENT_IN_PROGRESS", "DEPLOYMENT_FAILED", "DEPLOYMENT_SUCCESSFUL", "UPGRADE_IN_PROGRESS", "UPGRADE_FAILED", "UNDEPLOYMENT_IN_PROGRESS", "UNDEPLOYMENT_FAILED", "UNDEPLOYMENT_SUCCESSFUL", "UNKNOWN"]  # noqa: E501
        if deployment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_status, allowed_values)
            )

        self._deployment_status = deployment_status

    @property
    def vm_nic_info(self):
        """Gets the vm_nic_info of this InstanceRuntime.  # noqa: E501


        :return: The vm_nic_info of this InstanceRuntime.  # noqa: E501
        :rtype: VmNicInfo
        """
        return self._vm_nic_info

    @vm_nic_info.setter
    def vm_nic_info(self, vm_nic_info):
        """Sets the vm_nic_info of this InstanceRuntime.


        :param vm_nic_info: The vm_nic_info of this InstanceRuntime.  # noqa: E501
        :type: VmNicInfo
        """

        self._vm_nic_info = vm_nic_info

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this InstanceRuntime.  # noqa: E501

        The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode.   # noqa: E501

        :return: The maintenance_mode of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this InstanceRuntime.

        The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode.   # noqa: E501

        :param maintenance_mode: The maintenance_mode of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFF", "ENTERING", "ON", "EXITING"]  # noqa: E501
        if maintenance_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode, allowed_values)
            )

        self._maintenance_mode = maintenance_mode

    @property
    def runtime_status(self):
        """Gets the runtime_status of this InstanceRuntime.  # noqa: E501

        Service-Instance Runtime status of the deployed Service-VM.  # noqa: E501

        :return: The runtime_status of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._runtime_status

    @runtime_status.setter
    def runtime_status(self, runtime_status):
        """Sets the runtime_status of this InstanceRuntime.

        Service-Instance Runtime status of the deployed Service-VM.  # noqa: E501

        :param runtime_status: The runtime_status of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_SERVICE", "OUT_OF_SERVICE", "NEEDS_ATTENTION", "NOT_AVAILABLE"]  # noqa: E501
        if runtime_status not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_status` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_status, allowed_values)
            )

        self._runtime_status = runtime_status

    @property
    def error_message(self):
        """Gets the error_message of this InstanceRuntime.  # noqa: E501

        Error message for the Service Instance Runtime if any.  # noqa: E501

        :return: The error_message of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InstanceRuntime.

        Error message for the Service Instance Runtime if any.  # noqa: E501

        :param error_message: The error_message of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this InstanceRuntime.  # noqa: E501

        Id of an instantiation of a registered service.  # noqa: E501

        :return: The service_instance_id of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this InstanceRuntime.

        Id of an instantiation of a registered service.  # noqa: E501

        :param service_instance_id: The service_instance_id of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def runtime_health_status_by_partner(self):
        """Gets the runtime_health_status_by_partner of this InstanceRuntime.  # noqa: E501

        Service-Instance runtime health status set by partner to indicate whether the service is running properly or not.   # noqa: E501

        :return: The runtime_health_status_by_partner of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._runtime_health_status_by_partner

    @runtime_health_status_by_partner.setter
    def runtime_health_status_by_partner(self, runtime_health_status_by_partner):
        """Sets the runtime_health_status_by_partner of this InstanceRuntime.

        Service-Instance runtime health status set by partner to indicate whether the service is running properly or not.   # noqa: E501

        :param runtime_health_status_by_partner: The runtime_health_status_by_partner of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["HEALTHY", "STOPPED", "NOT_RESPONDING"]  # noqa: E501
        if runtime_health_status_by_partner not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_health_status_by_partner` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_health_status_by_partner, allowed_values)
            )

        self._runtime_health_status_by_partner = runtime_health_status_by_partner

    @property
    def unhealthy_reason(self):
        """Gets the unhealthy_reason of this InstanceRuntime.  # noqa: E501

        Reason provided by partner for the service being unhealthy. This could be due to various reasons such as connectivity lost as an example.   # noqa: E501

        :return: The unhealthy_reason of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._unhealthy_reason

    @unhealthy_reason.setter
    def unhealthy_reason(self, unhealthy_reason):
        """Sets the unhealthy_reason of this InstanceRuntime.

        Reason provided by partner for the service being unhealthy. This could be due to various reasons such as connectivity lost as an example.   # noqa: E501

        :param unhealthy_reason: The unhealthy_reason of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._unhealthy_reason = unhealthy_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceRuntime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceRuntime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
