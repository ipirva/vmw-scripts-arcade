# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnmpServiceProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'v3_auth_protocol': 'str',
        'communities': 'list[str]',
        'v3_configured': 'bool',
        'v3_priv_protocol': 'str',
        'v3_users': 'list[SnmpV3User]',
        'v2_configured': 'bool',
        'start_on_boot': 'bool'
    }

    attribute_map = {
        'v3_auth_protocol': 'v3_auth_protocol',
        'communities': 'communities',
        'v3_configured': 'v3_configured',
        'v3_priv_protocol': 'v3_priv_protocol',
        'v3_users': 'v3_users',
        'v2_configured': 'v2_configured',
        'start_on_boot': 'start_on_boot'
    }

    def __init__(self, v3_auth_protocol='SHA1', communities=None, v3_configured=None, v3_priv_protocol='AES128', v3_users=None, v2_configured=None, start_on_boot=None):  # noqa: E501
        """SnmpServiceProperties - a model defined in Swagger"""  # noqa: E501
        self._v3_auth_protocol = None
        self._communities = None
        self._v3_configured = None
        self._v3_priv_protocol = None
        self._v3_users = None
        self._v2_configured = None
        self._start_on_boot = None
        self.discriminator = None
        self.v3_auth_protocol = v3_auth_protocol
        if communities is not None:
            self.communities = communities
        if v3_configured is not None:
            self.v3_configured = v3_configured
        self.v3_priv_protocol = v3_priv_protocol
        if v3_users is not None:
            self.v3_users = v3_users
        if v2_configured is not None:
            self.v2_configured = v2_configured
        self.start_on_boot = start_on_boot

    @property
    def v3_auth_protocol(self):
        """Gets the v3_auth_protocol of this SnmpServiceProperties.  # noqa: E501

        SNMP v3 auth protocol  # noqa: E501

        :return: The v3_auth_protocol of this SnmpServiceProperties.  # noqa: E501
        :rtype: str
        """
        return self._v3_auth_protocol

    @v3_auth_protocol.setter
    def v3_auth_protocol(self, v3_auth_protocol):
        """Sets the v3_auth_protocol of this SnmpServiceProperties.

        SNMP v3 auth protocol  # noqa: E501

        :param v3_auth_protocol: The v3_auth_protocol of this SnmpServiceProperties.  # noqa: E501
        :type: str
        """
        if v3_auth_protocol is None:
            raise ValueError("Invalid value for `v3_auth_protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["SHA1"]  # noqa: E501
        if v3_auth_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `v3_auth_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(v3_auth_protocol, allowed_values)
            )

        self._v3_auth_protocol = v3_auth_protocol

    @property
    def communities(self):
        """Gets the communities of this SnmpServiceProperties.  # noqa: E501

        SNMP v1, v2c community strings  # noqa: E501

        :return: The communities of this SnmpServiceProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._communities

    @communities.setter
    def communities(self, communities):
        """Sets the communities of this SnmpServiceProperties.

        SNMP v1, v2c community strings  # noqa: E501

        :param communities: The communities of this SnmpServiceProperties.  # noqa: E501
        :type: list[str]
        """

        self._communities = communities

    @property
    def v3_configured(self):
        """Gets the v3_configured of this SnmpServiceProperties.  # noqa: E501

        SNMP v3 is configured or not  # noqa: E501

        :return: The v3_configured of this SnmpServiceProperties.  # noqa: E501
        :rtype: bool
        """
        return self._v3_configured

    @v3_configured.setter
    def v3_configured(self, v3_configured):
        """Sets the v3_configured of this SnmpServiceProperties.

        SNMP v3 is configured or not  # noqa: E501

        :param v3_configured: The v3_configured of this SnmpServiceProperties.  # noqa: E501
        :type: bool
        """

        self._v3_configured = v3_configured

    @property
    def v3_priv_protocol(self):
        """Gets the v3_priv_protocol of this SnmpServiceProperties.  # noqa: E501

        SNMP v3 private protocol  # noqa: E501

        :return: The v3_priv_protocol of this SnmpServiceProperties.  # noqa: E501
        :rtype: str
        """
        return self._v3_priv_protocol

    @v3_priv_protocol.setter
    def v3_priv_protocol(self, v3_priv_protocol):
        """Sets the v3_priv_protocol of this SnmpServiceProperties.

        SNMP v3 private protocol  # noqa: E501

        :param v3_priv_protocol: The v3_priv_protocol of this SnmpServiceProperties.  # noqa: E501
        :type: str
        """
        if v3_priv_protocol is None:
            raise ValueError("Invalid value for `v3_priv_protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["AES128"]  # noqa: E501
        if v3_priv_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `v3_priv_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(v3_priv_protocol, allowed_values)
            )

        self._v3_priv_protocol = v3_priv_protocol

    @property
    def v3_users(self):
        """Gets the v3_users of this SnmpServiceProperties.  # noqa: E501

        SNMP v3 users information  # noqa: E501

        :return: The v3_users of this SnmpServiceProperties.  # noqa: E501
        :rtype: list[SnmpV3User]
        """
        return self._v3_users

    @v3_users.setter
    def v3_users(self, v3_users):
        """Sets the v3_users of this SnmpServiceProperties.

        SNMP v3 users information  # noqa: E501

        :param v3_users: The v3_users of this SnmpServiceProperties.  # noqa: E501
        :type: list[SnmpV3User]
        """

        self._v3_users = v3_users

    @property
    def v2_configured(self):
        """Gets the v2_configured of this SnmpServiceProperties.  # noqa: E501

        SNMP v2 is configured or not  # noqa: E501

        :return: The v2_configured of this SnmpServiceProperties.  # noqa: E501
        :rtype: bool
        """
        return self._v2_configured

    @v2_configured.setter
    def v2_configured(self, v2_configured):
        """Sets the v2_configured of this SnmpServiceProperties.

        SNMP v2 is configured or not  # noqa: E501

        :param v2_configured: The v2_configured of this SnmpServiceProperties.  # noqa: E501
        :type: bool
        """

        self._v2_configured = v2_configured

    @property
    def start_on_boot(self):
        """Gets the start_on_boot of this SnmpServiceProperties.  # noqa: E501

        Start when system boots  # noqa: E501

        :return: The start_on_boot of this SnmpServiceProperties.  # noqa: E501
        :rtype: bool
        """
        return self._start_on_boot

    @start_on_boot.setter
    def start_on_boot(self, start_on_boot):
        """Sets the start_on_boot of this SnmpServiceProperties.

        Start when system boots  # noqa: E501

        :param start_on_boot: The start_on_boot of this SnmpServiceProperties.  # noqa: E501
        :type: bool
        """
        if start_on_boot is None:
            raise ValueError("Invalid value for `start_on_boot`, must not be `None`")  # noqa: E501

        self._start_on_boot = start_on_boot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnmpServiceProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpServiceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
