# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogicalRouterPortCounters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'no_arp_dropped_packets': 'int',
        'dropped_packets': 'int',
        'no_mem_dropped_packets': 'int',
        'ipsec_pol_err_dropped_packets': 'int',
        'no_linked_dropped_packets': 'int',
        'kni_dropped_packets': 'int',
        'blocked_packets': 'int',
        'rpf_check_dropped_packets': 'int',
        'ipsec_pol_block_dropped_packets': 'int',
        'dad_dropped_packets': 'int',
        'no_receiver_dropped_packets': 'int',
        'l4port_unsupported_dropped_packets': 'int',
        'frag_needed_dropped_packets': 'int',
        'destination_unsupported_dropped_packets': 'int',
        'firewall_dropped_packets': 'int',
        'no_route_dropped_packets': 'int',
        'malformed_dropped_packets': 'int',
        'non_ip_dropped_packets': 'int',
        'ipsec_dropped_packets': 'int',
        'redirect_dropped_packets': 'int',
        'service_insert_dropped_packets': 'int',
        'ipsec_no_vti_dropped_packets': 'int',
        'total_packets': 'int',
        'proto_unsupported_dropped_packets': 'int',
        'ttl_exceeded_dropped_packets': 'int',
        'ipv6_dropped_packets': 'int',
        'ipsec_no_sa_dropped_packets': 'int',
        'total_bytes': 'int'
    }

    attribute_map = {
        'no_arp_dropped_packets': 'no_arp_dropped_packets',
        'dropped_packets': 'dropped_packets',
        'no_mem_dropped_packets': 'no_mem_dropped_packets',
        'ipsec_pol_err_dropped_packets': 'ipsec_pol_err_dropped_packets',
        'no_linked_dropped_packets': 'no_linked_dropped_packets',
        'kni_dropped_packets': 'kni_dropped_packets',
        'blocked_packets': 'blocked_packets',
        'rpf_check_dropped_packets': 'rpf_check_dropped_packets',
        'ipsec_pol_block_dropped_packets': 'ipsec_pol_block_dropped_packets',
        'dad_dropped_packets': 'dad_dropped_packets',
        'no_receiver_dropped_packets': 'no_receiver_dropped_packets',
        'l4port_unsupported_dropped_packets': 'l4port_unsupported_dropped_packets',
        'frag_needed_dropped_packets': 'frag_needed_dropped_packets',
        'destination_unsupported_dropped_packets': 'destination_unsupported_dropped_packets',
        'firewall_dropped_packets': 'firewall_dropped_packets',
        'no_route_dropped_packets': 'no_route_dropped_packets',
        'malformed_dropped_packets': 'malformed_dropped_packets',
        'non_ip_dropped_packets': 'non_ip_dropped_packets',
        'ipsec_dropped_packets': 'ipsec_dropped_packets',
        'redirect_dropped_packets': 'redirect_dropped_packets',
        'service_insert_dropped_packets': 'service_insert_dropped_packets',
        'ipsec_no_vti_dropped_packets': 'ipsec_no_vti_dropped_packets',
        'total_packets': 'total_packets',
        'proto_unsupported_dropped_packets': 'proto_unsupported_dropped_packets',
        'ttl_exceeded_dropped_packets': 'ttl_exceeded_dropped_packets',
        'ipv6_dropped_packets': 'ipv6_dropped_packets',
        'ipsec_no_sa_dropped_packets': 'ipsec_no_sa_dropped_packets',
        'total_bytes': 'total_bytes'
    }

    def __init__(self, no_arp_dropped_packets=None, dropped_packets=None, no_mem_dropped_packets=None, ipsec_pol_err_dropped_packets=None, no_linked_dropped_packets=None, kni_dropped_packets=None, blocked_packets=None, rpf_check_dropped_packets=None, ipsec_pol_block_dropped_packets=None, dad_dropped_packets=None, no_receiver_dropped_packets=None, l4port_unsupported_dropped_packets=None, frag_needed_dropped_packets=None, destination_unsupported_dropped_packets=None, firewall_dropped_packets=None, no_route_dropped_packets=None, malformed_dropped_packets=None, non_ip_dropped_packets=None, ipsec_dropped_packets=None, redirect_dropped_packets=None, service_insert_dropped_packets=None, ipsec_no_vti_dropped_packets=None, total_packets=None, proto_unsupported_dropped_packets=None, ttl_exceeded_dropped_packets=None, ipv6_dropped_packets=None, ipsec_no_sa_dropped_packets=None, total_bytes=None):  # noqa: E501
        """LogicalRouterPortCounters - a model defined in Swagger"""  # noqa: E501
        self._no_arp_dropped_packets = None
        self._dropped_packets = None
        self._no_mem_dropped_packets = None
        self._ipsec_pol_err_dropped_packets = None
        self._no_linked_dropped_packets = None
        self._kni_dropped_packets = None
        self._blocked_packets = None
        self._rpf_check_dropped_packets = None
        self._ipsec_pol_block_dropped_packets = None
        self._dad_dropped_packets = None
        self._no_receiver_dropped_packets = None
        self._l4port_unsupported_dropped_packets = None
        self._frag_needed_dropped_packets = None
        self._destination_unsupported_dropped_packets = None
        self._firewall_dropped_packets = None
        self._no_route_dropped_packets = None
        self._malformed_dropped_packets = None
        self._non_ip_dropped_packets = None
        self._ipsec_dropped_packets = None
        self._redirect_dropped_packets = None
        self._service_insert_dropped_packets = None
        self._ipsec_no_vti_dropped_packets = None
        self._total_packets = None
        self._proto_unsupported_dropped_packets = None
        self._ttl_exceeded_dropped_packets = None
        self._ipv6_dropped_packets = None
        self._ipsec_no_sa_dropped_packets = None
        self._total_bytes = None
        self.discriminator = None
        if no_arp_dropped_packets is not None:
            self.no_arp_dropped_packets = no_arp_dropped_packets
        if dropped_packets is not None:
            self.dropped_packets = dropped_packets
        if no_mem_dropped_packets is not None:
            self.no_mem_dropped_packets = no_mem_dropped_packets
        if ipsec_pol_err_dropped_packets is not None:
            self.ipsec_pol_err_dropped_packets = ipsec_pol_err_dropped_packets
        if no_linked_dropped_packets is not None:
            self.no_linked_dropped_packets = no_linked_dropped_packets
        if kni_dropped_packets is not None:
            self.kni_dropped_packets = kni_dropped_packets
        if blocked_packets is not None:
            self.blocked_packets = blocked_packets
        if rpf_check_dropped_packets is not None:
            self.rpf_check_dropped_packets = rpf_check_dropped_packets
        if ipsec_pol_block_dropped_packets is not None:
            self.ipsec_pol_block_dropped_packets = ipsec_pol_block_dropped_packets
        if dad_dropped_packets is not None:
            self.dad_dropped_packets = dad_dropped_packets
        if no_receiver_dropped_packets is not None:
            self.no_receiver_dropped_packets = no_receiver_dropped_packets
        if l4port_unsupported_dropped_packets is not None:
            self.l4port_unsupported_dropped_packets = l4port_unsupported_dropped_packets
        if frag_needed_dropped_packets is not None:
            self.frag_needed_dropped_packets = frag_needed_dropped_packets
        if destination_unsupported_dropped_packets is not None:
            self.destination_unsupported_dropped_packets = destination_unsupported_dropped_packets
        if firewall_dropped_packets is not None:
            self.firewall_dropped_packets = firewall_dropped_packets
        if no_route_dropped_packets is not None:
            self.no_route_dropped_packets = no_route_dropped_packets
        if malformed_dropped_packets is not None:
            self.malformed_dropped_packets = malformed_dropped_packets
        if non_ip_dropped_packets is not None:
            self.non_ip_dropped_packets = non_ip_dropped_packets
        if ipsec_dropped_packets is not None:
            self.ipsec_dropped_packets = ipsec_dropped_packets
        if redirect_dropped_packets is not None:
            self.redirect_dropped_packets = redirect_dropped_packets
        if service_insert_dropped_packets is not None:
            self.service_insert_dropped_packets = service_insert_dropped_packets
        if ipsec_no_vti_dropped_packets is not None:
            self.ipsec_no_vti_dropped_packets = ipsec_no_vti_dropped_packets
        if total_packets is not None:
            self.total_packets = total_packets
        if proto_unsupported_dropped_packets is not None:
            self.proto_unsupported_dropped_packets = proto_unsupported_dropped_packets
        if ttl_exceeded_dropped_packets is not None:
            self.ttl_exceeded_dropped_packets = ttl_exceeded_dropped_packets
        if ipv6_dropped_packets is not None:
            self.ipv6_dropped_packets = ipv6_dropped_packets
        if ipsec_no_sa_dropped_packets is not None:
            self.ipsec_no_sa_dropped_packets = ipsec_no_sa_dropped_packets
        if total_bytes is not None:
            self.total_bytes = total_bytes

    @property
    def no_arp_dropped_packets(self):
        """Gets the no_arp_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of no ARP packets dropped.  # noqa: E501

        :return: The no_arp_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._no_arp_dropped_packets

    @no_arp_dropped_packets.setter
    def no_arp_dropped_packets(self, no_arp_dropped_packets):
        """Sets the no_arp_dropped_packets of this LogicalRouterPortCounters.

        Number of no ARP packets dropped.  # noqa: E501

        :param no_arp_dropped_packets: The no_arp_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._no_arp_dropped_packets = no_arp_dropped_packets

    @property
    def dropped_packets(self):
        """Gets the dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        The total number of packets dropped.  # noqa: E501

        :return: The dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._dropped_packets

    @dropped_packets.setter
    def dropped_packets(self, dropped_packets):
        """Sets the dropped_packets of this LogicalRouterPortCounters.

        The total number of packets dropped.  # noqa: E501

        :param dropped_packets: The dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._dropped_packets = dropped_packets

    @property
    def no_mem_dropped_packets(self):
        """Gets the no_mem_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packets dropped due to insufficient memory.  # noqa: E501

        :return: The no_mem_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._no_mem_dropped_packets

    @no_mem_dropped_packets.setter
    def no_mem_dropped_packets(self, no_mem_dropped_packets):
        """Sets the no_mem_dropped_packets of this LogicalRouterPortCounters.

        Number of packets dropped due to insufficient memory.  # noqa: E501

        :param no_mem_dropped_packets: The no_mem_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._no_mem_dropped_packets = no_mem_dropped_packets

    @property
    def ipsec_pol_err_dropped_packets(self):
        """Gets the ipsec_pol_err_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of IPSec policy error packets dropped.  # noqa: E501

        :return: The ipsec_pol_err_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ipsec_pol_err_dropped_packets

    @ipsec_pol_err_dropped_packets.setter
    def ipsec_pol_err_dropped_packets(self, ipsec_pol_err_dropped_packets):
        """Sets the ipsec_pol_err_dropped_packets of this LogicalRouterPortCounters.

        Number of IPSec policy error packets dropped.  # noqa: E501

        :param ipsec_pol_err_dropped_packets: The ipsec_pol_err_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ipsec_pol_err_dropped_packets = ipsec_pol_err_dropped_packets

    @property
    def no_linked_dropped_packets(self):
        """Gets the no_linked_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packets dropped as no linked ports are present.  # noqa: E501

        :return: The no_linked_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._no_linked_dropped_packets

    @no_linked_dropped_packets.setter
    def no_linked_dropped_packets(self, no_linked_dropped_packets):
        """Sets the no_linked_dropped_packets of this LogicalRouterPortCounters.

        Number of packets dropped as no linked ports are present.  # noqa: E501

        :param no_linked_dropped_packets: The no_linked_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._no_linked_dropped_packets = no_linked_dropped_packets

    @property
    def kni_dropped_packets(self):
        """Gets the kni_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of DPDK kernal NIC interface packets dropped.  # noqa: E501

        :return: The kni_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._kni_dropped_packets

    @kni_dropped_packets.setter
    def kni_dropped_packets(self, kni_dropped_packets):
        """Sets the kni_dropped_packets of this LogicalRouterPortCounters.

        Number of DPDK kernal NIC interface packets dropped.  # noqa: E501

        :param kni_dropped_packets: The kni_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._kni_dropped_packets = kni_dropped_packets

    @property
    def blocked_packets(self):
        """Gets the blocked_packets of this LogicalRouterPortCounters.  # noqa: E501

        The total number of packets blocked.  # noqa: E501

        :return: The blocked_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._blocked_packets

    @blocked_packets.setter
    def blocked_packets(self, blocked_packets):
        """Sets the blocked_packets of this LogicalRouterPortCounters.

        The total number of packets blocked.  # noqa: E501

        :param blocked_packets: The blocked_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._blocked_packets = blocked_packets

    @property
    def rpf_check_dropped_packets(self):
        """Gets the rpf_check_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of reverse-path forwarding check packets dropped.  # noqa: E501

        :return: The rpf_check_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._rpf_check_dropped_packets

    @rpf_check_dropped_packets.setter
    def rpf_check_dropped_packets(self, rpf_check_dropped_packets):
        """Sets the rpf_check_dropped_packets of this LogicalRouterPortCounters.

        Number of reverse-path forwarding check packets dropped.  # noqa: E501

        :param rpf_check_dropped_packets: The rpf_check_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._rpf_check_dropped_packets = rpf_check_dropped_packets

    @property
    def ipsec_pol_block_dropped_packets(self):
        """Gets the ipsec_pol_block_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of IPSec policy block packets dropped.  # noqa: E501

        :return: The ipsec_pol_block_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ipsec_pol_block_dropped_packets

    @ipsec_pol_block_dropped_packets.setter
    def ipsec_pol_block_dropped_packets(self, ipsec_pol_block_dropped_packets):
        """Sets the ipsec_pol_block_dropped_packets of this LogicalRouterPortCounters.

        Number of IPSec policy block packets dropped.  # noqa: E501

        :param ipsec_pol_block_dropped_packets: The ipsec_pol_block_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ipsec_pol_block_dropped_packets = ipsec_pol_block_dropped_packets

    @property
    def dad_dropped_packets(self):
        """Gets the dad_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of duplicate address detected packets dropped.  # noqa: E501

        :return: The dad_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._dad_dropped_packets

    @dad_dropped_packets.setter
    def dad_dropped_packets(self, dad_dropped_packets):
        """Sets the dad_dropped_packets of this LogicalRouterPortCounters.

        Number of duplicate address detected packets dropped.  # noqa: E501

        :param dad_dropped_packets: The dad_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._dad_dropped_packets = dad_dropped_packets

    @property
    def no_receiver_dropped_packets(self):
        """Gets the no_receiver_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packets dropped due to absence of receiver.  # noqa: E501

        :return: The no_receiver_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._no_receiver_dropped_packets

    @no_receiver_dropped_packets.setter
    def no_receiver_dropped_packets(self, no_receiver_dropped_packets):
        """Sets the no_receiver_dropped_packets of this LogicalRouterPortCounters.

        Number of packets dropped due to absence of receiver.  # noqa: E501

        :param no_receiver_dropped_packets: The no_receiver_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._no_receiver_dropped_packets = no_receiver_dropped_packets

    @property
    def l4port_unsupported_dropped_packets(self):
        """Gets the l4port_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packets dropped due to unsupported L4 port.  # noqa: E501

        :return: The l4port_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._l4port_unsupported_dropped_packets

    @l4port_unsupported_dropped_packets.setter
    def l4port_unsupported_dropped_packets(self, l4port_unsupported_dropped_packets):
        """Sets the l4port_unsupported_dropped_packets of this LogicalRouterPortCounters.

        Number of packets dropped due to unsupported L4 port.  # noqa: E501

        :param l4port_unsupported_dropped_packets: The l4port_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._l4port_unsupported_dropped_packets = l4port_unsupported_dropped_packets

    @property
    def frag_needed_dropped_packets(self):
        """Gets the frag_needed_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of fragmentation needed packets dropped.  # noqa: E501

        :return: The frag_needed_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._frag_needed_dropped_packets

    @frag_needed_dropped_packets.setter
    def frag_needed_dropped_packets(self, frag_needed_dropped_packets):
        """Sets the frag_needed_dropped_packets of this LogicalRouterPortCounters.

        Number of fragmentation needed packets dropped.  # noqa: E501

        :param frag_needed_dropped_packets: The frag_needed_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._frag_needed_dropped_packets = frag_needed_dropped_packets

    @property
    def destination_unsupported_dropped_packets(self):
        """Gets the destination_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packtes dropped as destination is not supported.  # noqa: E501

        :return: The destination_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._destination_unsupported_dropped_packets

    @destination_unsupported_dropped_packets.setter
    def destination_unsupported_dropped_packets(self, destination_unsupported_dropped_packets):
        """Sets the destination_unsupported_dropped_packets of this LogicalRouterPortCounters.

        Number of packtes dropped as destination is not supported.  # noqa: E501

        :param destination_unsupported_dropped_packets: The destination_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._destination_unsupported_dropped_packets = destination_unsupported_dropped_packets

    @property
    def firewall_dropped_packets(self):
        """Gets the firewall_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of firewall packets dropped.  # noqa: E501

        :return: The firewall_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._firewall_dropped_packets

    @firewall_dropped_packets.setter
    def firewall_dropped_packets(self, firewall_dropped_packets):
        """Sets the firewall_dropped_packets of this LogicalRouterPortCounters.

        Number of firewall packets dropped.  # noqa: E501

        :param firewall_dropped_packets: The firewall_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._firewall_dropped_packets = firewall_dropped_packets

    @property
    def no_route_dropped_packets(self):
        """Gets the no_route_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        The number of no route packets dropped  # noqa: E501

        :return: The no_route_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._no_route_dropped_packets

    @no_route_dropped_packets.setter
    def no_route_dropped_packets(self, no_route_dropped_packets):
        """Sets the no_route_dropped_packets of this LogicalRouterPortCounters.

        The number of no route packets dropped  # noqa: E501

        :param no_route_dropped_packets: The no_route_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._no_route_dropped_packets = no_route_dropped_packets

    @property
    def malformed_dropped_packets(self):
        """Gets the malformed_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packtes dropped as they are malformed.  # noqa: E501

        :return: The malformed_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._malformed_dropped_packets

    @malformed_dropped_packets.setter
    def malformed_dropped_packets(self, malformed_dropped_packets):
        """Sets the malformed_dropped_packets of this LogicalRouterPortCounters.

        Number of packtes dropped as they are malformed.  # noqa: E501

        :param malformed_dropped_packets: The malformed_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._malformed_dropped_packets = malformed_dropped_packets

    @property
    def non_ip_dropped_packets(self):
        """Gets the non_ip_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of non IP packets dropped.  # noqa: E501

        :return: The non_ip_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._non_ip_dropped_packets

    @non_ip_dropped_packets.setter
    def non_ip_dropped_packets(self, non_ip_dropped_packets):
        """Sets the non_ip_dropped_packets of this LogicalRouterPortCounters.

        Number of non IP packets dropped.  # noqa: E501

        :param non_ip_dropped_packets: The non_ip_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._non_ip_dropped_packets = non_ip_dropped_packets

    @property
    def ipsec_dropped_packets(self):
        """Gets the ipsec_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of IPSec packets dropped  # noqa: E501

        :return: The ipsec_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ipsec_dropped_packets

    @ipsec_dropped_packets.setter
    def ipsec_dropped_packets(self, ipsec_dropped_packets):
        """Sets the ipsec_dropped_packets of this LogicalRouterPortCounters.

        Number of IPSec packets dropped  # noqa: E501

        :param ipsec_dropped_packets: The ipsec_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ipsec_dropped_packets = ipsec_dropped_packets

    @property
    def redirect_dropped_packets(self):
        """Gets the redirect_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of redirect packets dropped.  # noqa: E501

        :return: The redirect_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._redirect_dropped_packets

    @redirect_dropped_packets.setter
    def redirect_dropped_packets(self, redirect_dropped_packets):
        """Sets the redirect_dropped_packets of this LogicalRouterPortCounters.

        Number of redirect packets dropped.  # noqa: E501

        :param redirect_dropped_packets: The redirect_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._redirect_dropped_packets = redirect_dropped_packets

    @property
    def service_insert_dropped_packets(self):
        """Gets the service_insert_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of service insert packets dropped.  # noqa: E501

        :return: The service_insert_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._service_insert_dropped_packets

    @service_insert_dropped_packets.setter
    def service_insert_dropped_packets(self, service_insert_dropped_packets):
        """Sets the service_insert_dropped_packets of this LogicalRouterPortCounters.

        Number of service insert packets dropped.  # noqa: E501

        :param service_insert_dropped_packets: The service_insert_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._service_insert_dropped_packets = service_insert_dropped_packets

    @property
    def ipsec_no_vti_dropped_packets(self):
        """Gets the ipsec_no_vti_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of IPSec packets dropped as no VTI is present.  # noqa: E501

        :return: The ipsec_no_vti_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ipsec_no_vti_dropped_packets

    @ipsec_no_vti_dropped_packets.setter
    def ipsec_no_vti_dropped_packets(self, ipsec_no_vti_dropped_packets):
        """Sets the ipsec_no_vti_dropped_packets of this LogicalRouterPortCounters.

        Number of IPSec packets dropped as no VTI is present.  # noqa: E501

        :param ipsec_no_vti_dropped_packets: The ipsec_no_vti_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ipsec_no_vti_dropped_packets = ipsec_no_vti_dropped_packets

    @property
    def total_packets(self):
        """Gets the total_packets of this LogicalRouterPortCounters.  # noqa: E501

        The total number of packets transferred.  # noqa: E501

        :return: The total_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._total_packets

    @total_packets.setter
    def total_packets(self, total_packets):
        """Sets the total_packets of this LogicalRouterPortCounters.

        The total number of packets transferred.  # noqa: E501

        :param total_packets: The total_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._total_packets = total_packets

    @property
    def proto_unsupported_dropped_packets(self):
        """Gets the proto_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of packets dropped as protocol is unsupported.  # noqa: E501

        :return: The proto_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._proto_unsupported_dropped_packets

    @proto_unsupported_dropped_packets.setter
    def proto_unsupported_dropped_packets(self, proto_unsupported_dropped_packets):
        """Sets the proto_unsupported_dropped_packets of this LogicalRouterPortCounters.

        Number of packets dropped as protocol is unsupported.  # noqa: E501

        :param proto_unsupported_dropped_packets: The proto_unsupported_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._proto_unsupported_dropped_packets = proto_unsupported_dropped_packets

    @property
    def ttl_exceeded_dropped_packets(self):
        """Gets the ttl_exceeded_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of time to live exceeded packets dropped.  # noqa: E501

        :return: The ttl_exceeded_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ttl_exceeded_dropped_packets

    @ttl_exceeded_dropped_packets.setter
    def ttl_exceeded_dropped_packets(self, ttl_exceeded_dropped_packets):
        """Sets the ttl_exceeded_dropped_packets of this LogicalRouterPortCounters.

        Number of time to live exceeded packets dropped.  # noqa: E501

        :param ttl_exceeded_dropped_packets: The ttl_exceeded_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ttl_exceeded_dropped_packets = ttl_exceeded_dropped_packets

    @property
    def ipv6_dropped_packets(self):
        """Gets the ipv6_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of IPV6 packets dropped.  # noqa: E501

        :return: The ipv6_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ipv6_dropped_packets

    @ipv6_dropped_packets.setter
    def ipv6_dropped_packets(self, ipv6_dropped_packets):
        """Sets the ipv6_dropped_packets of this LogicalRouterPortCounters.

        Number of IPV6 packets dropped.  # noqa: E501

        :param ipv6_dropped_packets: The ipv6_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ipv6_dropped_packets = ipv6_dropped_packets

    @property
    def ipsec_no_sa_dropped_packets(self):
        """Gets the ipsec_no_sa_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501

        Number of IPSec no security association packets dropped.  # noqa: E501

        :return: The ipsec_no_sa_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._ipsec_no_sa_dropped_packets

    @ipsec_no_sa_dropped_packets.setter
    def ipsec_no_sa_dropped_packets(self, ipsec_no_sa_dropped_packets):
        """Sets the ipsec_no_sa_dropped_packets of this LogicalRouterPortCounters.

        Number of IPSec no security association packets dropped.  # noqa: E501

        :param ipsec_no_sa_dropped_packets: The ipsec_no_sa_dropped_packets of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._ipsec_no_sa_dropped_packets = ipsec_no_sa_dropped_packets

    @property
    def total_bytes(self):
        """Gets the total_bytes of this LogicalRouterPortCounters.  # noqa: E501

        The total number of bytes transferred.  # noqa: E501

        :return: The total_bytes of this LogicalRouterPortCounters.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this LogicalRouterPortCounters.

        The total number of bytes transferred.  # noqa: E501

        :param total_bytes: The total_bytes of this LogicalRouterPortCounters.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalRouterPortCounters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalRouterPortCounters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
