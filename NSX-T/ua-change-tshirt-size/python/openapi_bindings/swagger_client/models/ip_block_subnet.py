# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IpBlockSubnet(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_ip': 'str',
        'cidr': 'str',
        'allocation_ranges': 'list[IpPoolRange]',
        'block_id': 'str',
        'size': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'start_ip': 'start_ip',
        'cidr': 'cidr',
        'allocation_ranges': 'allocation_ranges',
        'block_id': 'block_id',
        'size': 'size'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, start_ip=None, cidr=None, allocation_ranges=None, block_id=None, size=None, *args, **kwargs):  # noqa: E501
        """IpBlockSubnet - a model defined in Swagger"""  # noqa: E501
        self._start_ip = None
        self._cidr = None
        self._allocation_ranges = None
        self._block_id = None
        self._size = None
        self.discriminator = None
        if start_ip is not None:
            self.start_ip = start_ip
        if cidr is not None:
            self.cidr = cidr
        if allocation_ranges is not None:
            self.allocation_ranges = allocation_ranges
        self.block_id = block_id
        self.size = size
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def start_ip(self):
        """Gets the start_ip of this IpBlockSubnet.  # noqa: E501

        For internal system use Only. Represents start ip address of the subnet from IP block. Subnet ip adddress will start from this ip address.  # noqa: E501

        :return: The start_ip of this IpBlockSubnet.  # noqa: E501
        :rtype: str
        """
        return self._start_ip

    @start_ip.setter
    def start_ip(self, start_ip):
        """Sets the start_ip of this IpBlockSubnet.

        For internal system use Only. Represents start ip address of the subnet from IP block. Subnet ip adddress will start from this ip address.  # noqa: E501

        :param start_ip: The start_ip of this IpBlockSubnet.  # noqa: E501
        :type: str
        """

        self._start_ip = start_ip

    @property
    def cidr(self):
        """Gets the cidr of this IpBlockSubnet.  # noqa: E501

        Represents network address and the prefix length which will be associated with a layer-2 broadcast domain  # noqa: E501

        :return: The cidr of this IpBlockSubnet.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this IpBlockSubnet.

        Represents network address and the prefix length which will be associated with a layer-2 broadcast domain  # noqa: E501

        :param cidr: The cidr of this IpBlockSubnet.  # noqa: E501
        :type: str
        """

        self._cidr = cidr

    @property
    def allocation_ranges(self):
        """Gets the allocation_ranges of this IpBlockSubnet.  # noqa: E501

        A collection of IPv4/IPv6 IP ranges used for IP allocation.  # noqa: E501

        :return: The allocation_ranges of this IpBlockSubnet.  # noqa: E501
        :rtype: list[IpPoolRange]
        """
        return self._allocation_ranges

    @allocation_ranges.setter
    def allocation_ranges(self, allocation_ranges):
        """Sets the allocation_ranges of this IpBlockSubnet.

        A collection of IPv4/IPv6 IP ranges used for IP allocation.  # noqa: E501

        :param allocation_ranges: The allocation_ranges of this IpBlockSubnet.  # noqa: E501
        :type: list[IpPoolRange]
        """

        self._allocation_ranges = allocation_ranges

    @property
    def block_id(self):
        """Gets the block_id of this IpBlockSubnet.  # noqa: E501

        Block id for which the subnet is created.  # noqa: E501

        :return: The block_id of this IpBlockSubnet.  # noqa: E501
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this IpBlockSubnet.

        Block id for which the subnet is created.  # noqa: E501

        :param block_id: The block_id of this IpBlockSubnet.  # noqa: E501
        :type: str
        """
        if block_id is None:
            raise ValueError("Invalid value for `block_id`, must not be `None`")  # noqa: E501

        self._block_id = block_id

    @property
    def size(self):
        """Gets the size of this IpBlockSubnet.  # noqa: E501

        Represents the size or number of ip addresses in the subnet  # noqa: E501

        :return: The size of this IpBlockSubnet.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this IpBlockSubnet.

        Represents the size or number of ip addresses in the subnet  # noqa: E501

        :param size: The size of this IpBlockSubnet.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpBlockSubnet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpBlockSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
