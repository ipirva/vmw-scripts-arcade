# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_block_enabled': 'bool',
        'v6_client_block_enabled': 'bool',
        'server_block_enabled': 'bool',
        'v6_server_block_enabled': 'bool'
    }

    attribute_map = {
        'client_block_enabled': 'client_block_enabled',
        'v6_client_block_enabled': 'v6_client_block_enabled',
        'server_block_enabled': 'server_block_enabled',
        'v6_server_block_enabled': 'v6_server_block_enabled'
    }

    def __init__(self, client_block_enabled=None, v6_client_block_enabled=False, server_block_enabled=None, v6_server_block_enabled=False):  # noqa: E501
        """DhcpFilter - a model defined in Swagger"""  # noqa: E501
        self._client_block_enabled = None
        self._v6_client_block_enabled = None
        self._server_block_enabled = None
        self._v6_server_block_enabled = None
        self.discriminator = None
        self.client_block_enabled = client_block_enabled
        if v6_client_block_enabled is not None:
            self.v6_client_block_enabled = v6_client_block_enabled
        self.server_block_enabled = server_block_enabled
        if v6_server_block_enabled is not None:
            self.v6_server_block_enabled = v6_server_block_enabled

    @property
    def client_block_enabled(self):
        """Gets the client_block_enabled of this DhcpFilter.  # noqa: E501

        Indicates whether DHCP client blocking is enabled  # noqa: E501

        :return: The client_block_enabled of this DhcpFilter.  # noqa: E501
        :rtype: bool
        """
        return self._client_block_enabled

    @client_block_enabled.setter
    def client_block_enabled(self, client_block_enabled):
        """Sets the client_block_enabled of this DhcpFilter.

        Indicates whether DHCP client blocking is enabled  # noqa: E501

        :param client_block_enabled: The client_block_enabled of this DhcpFilter.  # noqa: E501
        :type: bool
        """
        if client_block_enabled is None:
            raise ValueError("Invalid value for `client_block_enabled`, must not be `None`")  # noqa: E501

        self._client_block_enabled = client_block_enabled

    @property
    def v6_client_block_enabled(self):
        """Gets the v6_client_block_enabled of this DhcpFilter.  # noqa: E501

        Indiactes whether DHCP v6 client blocking is enabled  # noqa: E501

        :return: The v6_client_block_enabled of this DhcpFilter.  # noqa: E501
        :rtype: bool
        """
        return self._v6_client_block_enabled

    @v6_client_block_enabled.setter
    def v6_client_block_enabled(self, v6_client_block_enabled):
        """Sets the v6_client_block_enabled of this DhcpFilter.

        Indiactes whether DHCP v6 client blocking is enabled  # noqa: E501

        :param v6_client_block_enabled: The v6_client_block_enabled of this DhcpFilter.  # noqa: E501
        :type: bool
        """

        self._v6_client_block_enabled = v6_client_block_enabled

    @property
    def server_block_enabled(self):
        """Gets the server_block_enabled of this DhcpFilter.  # noqa: E501

        Indicates whether DHCP server blocking is enabled  # noqa: E501

        :return: The server_block_enabled of this DhcpFilter.  # noqa: E501
        :rtype: bool
        """
        return self._server_block_enabled

    @server_block_enabled.setter
    def server_block_enabled(self, server_block_enabled):
        """Sets the server_block_enabled of this DhcpFilter.

        Indicates whether DHCP server blocking is enabled  # noqa: E501

        :param server_block_enabled: The server_block_enabled of this DhcpFilter.  # noqa: E501
        :type: bool
        """
        if server_block_enabled is None:
            raise ValueError("Invalid value for `server_block_enabled`, must not be `None`")  # noqa: E501

        self._server_block_enabled = server_block_enabled

    @property
    def v6_server_block_enabled(self):
        """Gets the v6_server_block_enabled of this DhcpFilter.  # noqa: E501

        Indiactes whether DHCP V6 server blocking is enabled  # noqa: E501

        :return: The v6_server_block_enabled of this DhcpFilter.  # noqa: E501
        :rtype: bool
        """
        return self._v6_server_block_enabled

    @v6_server_block_enabled.setter
    def v6_server_block_enabled(self, v6_server_block_enabled):
        """Sets the v6_server_block_enabled of this DhcpFilter.

        Indiactes whether DHCP V6 server blocking is enabled  # noqa: E501

        :param v6_server_block_enabled: The v6_server_block_enabled of this DhcpFilter.  # noqa: E501
        :type: bool
        """

        self._v6_server_block_enabled = v6_server_block_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
