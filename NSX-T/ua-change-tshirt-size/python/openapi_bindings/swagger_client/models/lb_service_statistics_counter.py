# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbServiceStatisticsCounter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'l4_total_sessions': 'int',
        'l7_current_sessions': 'int',
        'l4_max_sessions': 'int',
        'l4_current_sessions': 'int',
        'l7_total_sessions': 'int',
        'l4_current_session_rate': 'float',
        'l7_current_session_rate': 'float',
        'l7_max_sessions': 'int'
    }

    attribute_map = {
        'l4_total_sessions': 'l4_total_sessions',
        'l7_current_sessions': 'l7_current_sessions',
        'l4_max_sessions': 'l4_max_sessions',
        'l4_current_sessions': 'l4_current_sessions',
        'l7_total_sessions': 'l7_total_sessions',
        'l4_current_session_rate': 'l4_current_session_rate',
        'l7_current_session_rate': 'l7_current_session_rate',
        'l7_max_sessions': 'l7_max_sessions'
    }

    def __init__(self, l4_total_sessions=None, l7_current_sessions=None, l4_max_sessions=None, l4_current_sessions=None, l7_total_sessions=None, l4_current_session_rate=None, l7_current_session_rate=None, l7_max_sessions=None):  # noqa: E501
        """LbServiceStatisticsCounter - a model defined in Swagger"""  # noqa: E501
        self._l4_total_sessions = None
        self._l7_current_sessions = None
        self._l4_max_sessions = None
        self._l4_current_sessions = None
        self._l7_total_sessions = None
        self._l4_current_session_rate = None
        self._l7_current_session_rate = None
        self._l7_max_sessions = None
        self.discriminator = None
        if l4_total_sessions is not None:
            self.l4_total_sessions = l4_total_sessions
        if l7_current_sessions is not None:
            self.l7_current_sessions = l7_current_sessions
        if l4_max_sessions is not None:
            self.l4_max_sessions = l4_max_sessions
        if l4_current_sessions is not None:
            self.l4_current_sessions = l4_current_sessions
        if l7_total_sessions is not None:
            self.l7_total_sessions = l7_total_sessions
        if l4_current_session_rate is not None:
            self.l4_current_session_rate = l4_current_session_rate
        if l7_current_session_rate is not None:
            self.l7_current_session_rate = l7_current_session_rate
        if l7_max_sessions is not None:
            self.l7_max_sessions = l7_max_sessions

    @property
    def l4_total_sessions(self):
        """Gets the l4_total_sessions of this LbServiceStatisticsCounter.  # noqa: E501

        Number of l4 total sessions  # noqa: E501

        :return: The l4_total_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._l4_total_sessions

    @l4_total_sessions.setter
    def l4_total_sessions(self, l4_total_sessions):
        """Sets the l4_total_sessions of this LbServiceStatisticsCounter.

        Number of l4 total sessions  # noqa: E501

        :param l4_total_sessions: The l4_total_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._l4_total_sessions = l4_total_sessions

    @property
    def l7_current_sessions(self):
        """Gets the l7_current_sessions of this LbServiceStatisticsCounter.  # noqa: E501

        Number of l7 current sessions  # noqa: E501

        :return: The l7_current_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._l7_current_sessions

    @l7_current_sessions.setter
    def l7_current_sessions(self, l7_current_sessions):
        """Sets the l7_current_sessions of this LbServiceStatisticsCounter.

        Number of l7 current sessions  # noqa: E501

        :param l7_current_sessions: The l7_current_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._l7_current_sessions = l7_current_sessions

    @property
    def l4_max_sessions(self):
        """Gets the l4_max_sessions of this LbServiceStatisticsCounter.  # noqa: E501

        L4 max sessions is used to show the peak L4 max session data since load balancer starts to provide service.   # noqa: E501

        :return: The l4_max_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._l4_max_sessions

    @l4_max_sessions.setter
    def l4_max_sessions(self, l4_max_sessions):
        """Sets the l4_max_sessions of this LbServiceStatisticsCounter.

        L4 max sessions is used to show the peak L4 max session data since load balancer starts to provide service.   # noqa: E501

        :param l4_max_sessions: The l4_max_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._l4_max_sessions = l4_max_sessions

    @property
    def l4_current_sessions(self):
        """Gets the l4_current_sessions of this LbServiceStatisticsCounter.  # noqa: E501

        Number of l4 current sessions  # noqa: E501

        :return: The l4_current_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._l4_current_sessions

    @l4_current_sessions.setter
    def l4_current_sessions(self, l4_current_sessions):
        """Sets the l4_current_sessions of this LbServiceStatisticsCounter.

        Number of l4 current sessions  # noqa: E501

        :param l4_current_sessions: The l4_current_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._l4_current_sessions = l4_current_sessions

    @property
    def l7_total_sessions(self):
        """Gets the l7_total_sessions of this LbServiceStatisticsCounter.  # noqa: E501

        Number of l7 total sessions  # noqa: E501

        :return: The l7_total_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._l7_total_sessions

    @l7_total_sessions.setter
    def l7_total_sessions(self, l7_total_sessions):
        """Sets the l7_total_sessions of this LbServiceStatisticsCounter.

        Number of l7 total sessions  # noqa: E501

        :param l7_total_sessions: The l7_total_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._l7_total_sessions = l7_total_sessions

    @property
    def l4_current_session_rate(self):
        """Gets the l4_current_session_rate of this LbServiceStatisticsCounter.  # noqa: E501

        The average number of l4 current sessions per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The l4_current_session_rate of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._l4_current_session_rate

    @l4_current_session_rate.setter
    def l4_current_session_rate(self, l4_current_session_rate):
        """Sets the l4_current_session_rate of this LbServiceStatisticsCounter.

        The average number of l4 current sessions per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param l4_current_session_rate: The l4_current_session_rate of this LbServiceStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._l4_current_session_rate = l4_current_session_rate

    @property
    def l7_current_session_rate(self):
        """Gets the l7_current_session_rate of this LbServiceStatisticsCounter.  # noqa: E501

        The average number of l7 current requests per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The l7_current_session_rate of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._l7_current_session_rate

    @l7_current_session_rate.setter
    def l7_current_session_rate(self, l7_current_session_rate):
        """Sets the l7_current_session_rate of this LbServiceStatisticsCounter.

        The average number of l7 current requests per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param l7_current_session_rate: The l7_current_session_rate of this LbServiceStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._l7_current_session_rate = l7_current_session_rate

    @property
    def l7_max_sessions(self):
        """Gets the l7_max_sessions of this LbServiceStatisticsCounter.  # noqa: E501

        L7 max sessions is used to show the peak L7 max session data since load balancer starts to provide service.   # noqa: E501

        :return: The l7_max_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._l7_max_sessions

    @l7_max_sessions.setter
    def l7_max_sessions(self, l7_max_sessions):
        """Sets the l7_max_sessions of this LbServiceStatisticsCounter.

        L7 max sessions is used to show the peak L7 max session data since load balancer starts to provide service.   # noqa: E501

        :param l7_max_sessions: The l7_max_sessions of this LbServiceStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._l7_max_sessions = l7_max_sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbServiceStatisticsCounter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbServiceStatisticsCounter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
