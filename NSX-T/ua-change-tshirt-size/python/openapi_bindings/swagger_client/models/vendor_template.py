# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class VendorTemplate(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor_template_key': 'str',
        'attributes': 'list[Attribute]',
        'redirection_action': 'str',
        'functionality': 'str',
        'service_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'vendor_template_key': 'vendor_template_key',
        'attributes': 'attributes',
        'redirection_action': 'redirection_action',
        'functionality': 'functionality',
        'service_id': 'service_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, vendor_template_key=None, attributes=None, redirection_action='PUNT', functionality=None, service_id=None, *args, **kwargs):  # noqa: E501
        """VendorTemplate - a model defined in Swagger"""  # noqa: E501
        self._vendor_template_key = None
        self._attributes = None
        self._redirection_action = None
        self._functionality = None
        self._service_id = None
        self.discriminator = None
        if vendor_template_key is not None:
            self.vendor_template_key = vendor_template_key
        if attributes is not None:
            self.attributes = attributes
        if redirection_action is not None:
            self.redirection_action = redirection_action
        if functionality is not None:
            self.functionality = functionality
        if service_id is not None:
            self.service_id = service_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def vendor_template_key(self):
        """Gets the vendor_template_key of this VendorTemplate.  # noqa: E501

        Different VMs in data center can have Different protection levels as specified by administrator in the policy. The identifier for the policy with which the partner appliance identifies this policy. This identifier will be passed to the partner appliance at runtime to specify which protection level is applicable for the VM being protected.  # noqa: E501

        :return: The vendor_template_key of this VendorTemplate.  # noqa: E501
        :rtype: str
        """
        return self._vendor_template_key

    @vendor_template_key.setter
    def vendor_template_key(self, vendor_template_key):
        """Sets the vendor_template_key of this VendorTemplate.

        Different VMs in data center can have Different protection levels as specified by administrator in the policy. The identifier for the policy with which the partner appliance identifies this policy. This identifier will be passed to the partner appliance at runtime to specify which protection level is applicable for the VM being protected.  # noqa: E501

        :param vendor_template_key: The vendor_template_key of this VendorTemplate.  # noqa: E501
        :type: str
        """

        self._vendor_template_key = vendor_template_key

    @property
    def attributes(self):
        """Gets the attributes of this VendorTemplate.  # noqa: E501

        List of attributes specific to a partner for which the vendor template is created. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. Attributes are not supported by guest introspection service.  # noqa: E501

        :return: The attributes of this VendorTemplate.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this VendorTemplate.

        List of attributes specific to a partner for which the vendor template is created. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. Attributes are not supported by guest introspection service.  # noqa: E501

        :param attributes: The attributes of this VendorTemplate.  # noqa: E501
        :type: list[Attribute]
        """

        self._attributes = attributes

    @property
    def redirection_action(self):
        """Gets the redirection_action of this VendorTemplate.  # noqa: E501

        The redirection action represents if the packet is exclusively redirected to the service, or if a copy is forwarded to the service. Service profile inherits the redirection action specified at the vendor template and cannot override the action specified at the vendor template. Redirection action is not applicable to guest introspection service.  # noqa: E501

        :return: The redirection_action of this VendorTemplate.  # noqa: E501
        :rtype: str
        """
        return self._redirection_action

    @redirection_action.setter
    def redirection_action(self, redirection_action):
        """Sets the redirection_action of this VendorTemplate.

        The redirection action represents if the packet is exclusively redirected to the service, or if a copy is forwarded to the service. Service profile inherits the redirection action specified at the vendor template and cannot override the action specified at the vendor template. Redirection action is not applicable to guest introspection service.  # noqa: E501

        :param redirection_action: The redirection_action of this VendorTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUNT", "COPY"]  # noqa: E501
        if redirection_action not in allowed_values:
            raise ValueError(
                "Invalid value for `redirection_action` ({0}), must be one of {1}"  # noqa: E501
                .format(redirection_action, allowed_values)
            )

        self._redirection_action = redirection_action

    @property
    def functionality(self):
        """Gets the functionality of this VendorTemplate.  # noqa: E501

        The capabilities provided by the services. Needs to be one of the following | NG_FW - Next Generation Firewall | IDS_IPS - Intrusion detection System / Intrusion Prevention System | NET_MON - Network Monitoring | HCX - Hybrid Cloud Exchange | BYOD - Bring Your Own Device | EPP - Endpoint Protection.(Third party AntiVirus partners using NXGI should use this functionality for the service)  # noqa: E501

        :return: The functionality of this VendorTemplate.  # noqa: E501
        :rtype: str
        """
        return self._functionality

    @functionality.setter
    def functionality(self, functionality):
        """Sets the functionality of this VendorTemplate.

        The capabilities provided by the services. Needs to be one of the following | NG_FW - Next Generation Firewall | IDS_IPS - Intrusion detection System / Intrusion Prevention System | NET_MON - Network Monitoring | HCX - Hybrid Cloud Exchange | BYOD - Bring Your Own Device | EPP - Endpoint Protection.(Third party AntiVirus partners using NXGI should use this functionality for the service)  # noqa: E501

        :param functionality: The functionality of this VendorTemplate.  # noqa: E501
        :type: str
        """
        allowed_values = ["NG_FW", "IDS_IPS", "NET_MON", "HCX", "BYOD", "EPP"]  # noqa: E501
        if functionality not in allowed_values:
            raise ValueError(
                "Invalid value for `functionality` ({0}), must be one of {1}"  # noqa: E501
                .format(functionality, allowed_values)
            )

        self._functionality = functionality

    @property
    def service_id(self):
        """Gets the service_id of this VendorTemplate.  # noqa: E501

        The service to which the vendor template belongs.  # noqa: E501

        :return: The service_id of this VendorTemplate.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this VendorTemplate.

        The service to which the vendor template belongs.  # noqa: E501

        :param service_id: The service_id of this VendorTemplate.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VendorTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
