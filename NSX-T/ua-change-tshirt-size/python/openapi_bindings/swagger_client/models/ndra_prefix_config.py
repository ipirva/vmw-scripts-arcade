# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NDRAPrefixConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_prefix': 'str',
        'prefix_valid_time': 'int',
        'prefix_preferred_time': 'int'
    }

    attribute_map = {
        'network_prefix': 'network_prefix',
        'prefix_valid_time': 'prefix_valid_time',
        'prefix_preferred_time': 'prefix_preferred_time'
    }

    def __init__(self, network_prefix=None, prefix_valid_time=None, prefix_preferred_time=None):  # noqa: E501
        """NDRAPrefixConfig - a model defined in Swagger"""  # noqa: E501
        self._network_prefix = None
        self._prefix_valid_time = None
        self._prefix_preferred_time = None
        self.discriminator = None
        self.network_prefix = network_prefix
        if prefix_valid_time is not None:
            self.prefix_valid_time = prefix_valid_time
        if prefix_preferred_time is not None:
            self.prefix_preferred_time = prefix_preferred_time

    @property
    def network_prefix(self):
        """Gets the network_prefix of this NDRAPrefixConfig.  # noqa: E501

        Override the neighbor discovery prefix preferred time and prefix valid time for the subnet on uplink port whose network matches with the network address of CIDR specified in network_prefix.   # noqa: E501

        :return: The network_prefix of this NDRAPrefixConfig.  # noqa: E501
        :rtype: str
        """
        return self._network_prefix

    @network_prefix.setter
    def network_prefix(self, network_prefix):
        """Sets the network_prefix of this NDRAPrefixConfig.

        Override the neighbor discovery prefix preferred time and prefix valid time for the subnet on uplink port whose network matches with the network address of CIDR specified in network_prefix.   # noqa: E501

        :param network_prefix: The network_prefix of this NDRAPrefixConfig.  # noqa: E501
        :type: str
        """
        if network_prefix is None:
            raise ValueError("Invalid value for `network_prefix`, must not be `None`")  # noqa: E501

        self._network_prefix = network_prefix

    @property
    def prefix_valid_time(self):
        """Gets the prefix_valid_time of this NDRAPrefixConfig.  # noqa: E501

        The time interval in seconds, in which the prefix is advertised as valid.   # noqa: E501

        :return: The prefix_valid_time of this NDRAPrefixConfig.  # noqa: E501
        :rtype: int
        """
        return self._prefix_valid_time

    @prefix_valid_time.setter
    def prefix_valid_time(self, prefix_valid_time):
        """Sets the prefix_valid_time of this NDRAPrefixConfig.

        The time interval in seconds, in which the prefix is advertised as valid.   # noqa: E501

        :param prefix_valid_time: The prefix_valid_time of this NDRAPrefixConfig.  # noqa: E501
        :type: int
        """

        self._prefix_valid_time = prefix_valid_time

    @property
    def prefix_preferred_time(self):
        """Gets the prefix_preferred_time of this NDRAPrefixConfig.  # noqa: E501

        The time interval in seconds, in which the prefix is advertised as preferred.   # noqa: E501

        :return: The prefix_preferred_time of this NDRAPrefixConfig.  # noqa: E501
        :rtype: int
        """
        return self._prefix_preferred_time

    @prefix_preferred_time.setter
    def prefix_preferred_time(self, prefix_preferred_time):
        """Sets the prefix_preferred_time of this NDRAPrefixConfig.

        The time interval in seconds, in which the prefix is advertised as preferred.   # noqa: E501

        :param prefix_preferred_time: The prefix_preferred_time of this NDRAPrefixConfig.  # noqa: E501
        :type: int
        """

        self._prefix_preferred_time = prefix_preferred_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NDRAPrefixConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NDRAPrefixConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
