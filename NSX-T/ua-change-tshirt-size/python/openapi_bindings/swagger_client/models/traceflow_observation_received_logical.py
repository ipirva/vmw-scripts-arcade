# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.traceflow_observation import TraceflowObservation  # noqa: F401,E501

class TraceflowObservationReceivedLogical(TraceflowObservation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'svc_mac': 'str',
        'src_component_id': 'str',
        'component_id': 'str',
        'lport_id': 'str',
        'src_component_type': 'str',
        'lport_name': 'str',
        'src_component_name': 'str',
        'vni': 'int'
    }
    if hasattr(TraceflowObservation, "swagger_types"):
        swagger_types.update(TraceflowObservation.swagger_types)

    attribute_map = {
        'svc_mac': 'svc_mac',
        'src_component_id': 'src_component_id',
        'component_id': 'component_id',
        'lport_id': 'lport_id',
        'src_component_type': 'src_component_type',
        'lport_name': 'lport_name',
        'src_component_name': 'src_component_name',
        'vni': 'vni'
    }
    if hasattr(TraceflowObservation, "attribute_map"):
        attribute_map.update(TraceflowObservation.attribute_map)

    def __init__(self, svc_mac=None, src_component_id=None, component_id=None, lport_id=None, src_component_type=None, lport_name=None, src_component_name=None, vni=None, *args, **kwargs):  # noqa: E501
        """TraceflowObservationReceivedLogical - a model defined in Swagger"""  # noqa: E501
        self._svc_mac = None
        self._src_component_id = None
        self._component_id = None
        self._lport_id = None
        self._src_component_type = None
        self._lport_name = None
        self._src_component_name = None
        self._vni = None
        self.discriminator = None
        if svc_mac is not None:
            self.svc_mac = svc_mac
        if src_component_id is not None:
            self.src_component_id = src_component_id
        if component_id is not None:
            self.component_id = component_id
        if lport_id is not None:
            self.lport_id = lport_id
        if src_component_type is not None:
            self.src_component_type = src_component_type
        if lport_name is not None:
            self.lport_name = lport_name
        if src_component_name is not None:
            self.src_component_name = src_component_name
        if vni is not None:
            self.vni = vni
        TraceflowObservation.__init__(self, *args, **kwargs)

    @property
    def svc_mac(self):
        """Gets the svc_mac of this TraceflowObservationReceivedLogical.  # noqa: E501

        MAC address of SAN volume controller for service insertion(SI) in service VM(SVM) where the traceflow packet was received.   # noqa: E501

        :return: The svc_mac of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._svc_mac

    @svc_mac.setter
    def svc_mac(self, svc_mac):
        """Sets the svc_mac of this TraceflowObservationReceivedLogical.

        MAC address of SAN volume controller for service insertion(SI) in service VM(SVM) where the traceflow packet was received.   # noqa: E501

        :param svc_mac: The svc_mac of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """

        self._svc_mac = svc_mac

    @property
    def src_component_id(self):
        """Gets the src_component_id of this TraceflowObservationReceivedLogical.  # noqa: E501

        The id of the source component from which the traceflow packet was received.  # noqa: E501

        :return: The src_component_id of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._src_component_id

    @src_component_id.setter
    def src_component_id(self, src_component_id):
        """Sets the src_component_id of this TraceflowObservationReceivedLogical.

        The id of the source component from which the traceflow packet was received.  # noqa: E501

        :param src_component_id: The src_component_id of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """

        self._src_component_id = src_component_id

    @property
    def component_id(self):
        """Gets the component_id of this TraceflowObservationReceivedLogical.  # noqa: E501

        The id of the component that received the traceflow packet.  # noqa: E501

        :return: The component_id of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this TraceflowObservationReceivedLogical.

        The id of the component that received the traceflow packet.  # noqa: E501

        :param component_id: The component_id of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def lport_id(self):
        """Gets the lport_id of this TraceflowObservationReceivedLogical.  # noqa: E501

        The id of the logical port at which the traceflow packet was received  # noqa: E501

        :return: The lport_id of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._lport_id

    @lport_id.setter
    def lport_id(self, lport_id):
        """Sets the lport_id of this TraceflowObservationReceivedLogical.

        The id of the logical port at which the traceflow packet was received  # noqa: E501

        :param lport_id: The lport_id of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """

        self._lport_id = lport_id

    @property
    def src_component_type(self):
        """Gets the src_component_type of this TraceflowObservationReceivedLogical.  # noqa: E501

        The type of the source component from which the traceflow packet was received.  # noqa: E501

        :return: The src_component_type of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._src_component_type

    @src_component_type.setter
    def src_component_type(self, src_component_type):
        """Sets the src_component_type of this TraceflowObservationReceivedLogical.

        The type of the source component from which the traceflow packet was received.  # noqa: E501

        :param src_component_type: The src_component_type of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """
        allowed_values = ["PHYSICAL", "LR", "LS", "DFW", "BRIDGE", "EDGE_TUNNEL", "EDGE_HOSTSWITCH", "FW_BRIDGE", "LOAD_BALANCER", "NAT", "IPSEC", "SERVICE_INSERTION", "VMC", "SPOOFGUARD", "EDGE_FW", "DLB", "UNKNOWN"]  # noqa: E501
        if src_component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `src_component_type` ({0}), must be one of {1}"  # noqa: E501
                .format(src_component_type, allowed_values)
            )

        self._src_component_type = src_component_type

    @property
    def lport_name(self):
        """Gets the lport_name of this TraceflowObservationReceivedLogical.  # noqa: E501

        The name of the logical port at which the traceflow packet was received  # noqa: E501

        :return: The lport_name of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._lport_name

    @lport_name.setter
    def lport_name(self, lport_name):
        """Sets the lport_name of this TraceflowObservationReceivedLogical.

        The name of the logical port at which the traceflow packet was received  # noqa: E501

        :param lport_name: The lport_name of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """

        self._lport_name = lport_name

    @property
    def src_component_name(self):
        """Gets the src_component_name of this TraceflowObservationReceivedLogical.  # noqa: E501

        The name of source component from which the traceflow packet was received.  # noqa: E501

        :return: The src_component_name of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: str
        """
        return self._src_component_name

    @src_component_name.setter
    def src_component_name(self, src_component_name):
        """Sets the src_component_name of this TraceflowObservationReceivedLogical.

        The name of source component from which the traceflow packet was received.  # noqa: E501

        :param src_component_name: The src_component_name of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: str
        """

        self._src_component_name = src_component_name

    @property
    def vni(self):
        """Gets the vni of this TraceflowObservationReceivedLogical.  # noqa: E501

        VNI for the logical network on which the traceflow packet was received.  # noqa: E501

        :return: The vni of this TraceflowObservationReceivedLogical.  # noqa: E501
        :rtype: int
        """
        return self._vni

    @vni.setter
    def vni(self, vni):
        """Sets the vni of this TraceflowObservationReceivedLogical.

        VNI for the logical network on which the traceflow packet was received.  # noqa: E501

        :param vni: The vni of this TraceflowObservationReceivedLogical.  # noqa: E501
        :type: int
        """

        self._vni = vni

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceflowObservationReceivedLogical, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceflowObservationReceivedLogical):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
