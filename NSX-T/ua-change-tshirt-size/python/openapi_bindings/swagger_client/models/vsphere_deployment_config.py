# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.deployment_config import DeploymentConfig  # noqa: F401,E501

class VsphereDeploymentConfig(DeploymentConfig):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_network_ids': 'list[str]',
        'resource_allocation': 'ResourceAssignment',
        'dns_servers': 'list[str]',
        'compute_folder_id': 'str',
        'search_domains': 'list[str]',
        'hostname': 'str',
        'enable_ssh': 'bool',
        'allow_ssh_root_login': 'bool',
        'compute_id': 'str',
        'ntp_servers': 'list[str]',
        'reservation_info': 'ReservationInfo',
        'vc_id': 'str',
        'storage_id': 'str',
        'default_gateway_addresses': 'list[str]',
        'management_port_subnets': 'list[IPSubnet]',
        'host_id': 'str',
        'advanced_configuration': 'list[KeyValuePair]',
        'management_network_id': 'str'
    }
    if hasattr(DeploymentConfig, "swagger_types"):
        swagger_types.update(DeploymentConfig.swagger_types)

    attribute_map = {
        'data_network_ids': 'data_network_ids',
        'resource_allocation': 'resource_allocation',
        'dns_servers': 'dns_servers',
        'compute_folder_id': 'compute_folder_id',
        'search_domains': 'search_domains',
        'hostname': 'hostname',
        'enable_ssh': 'enable_ssh',
        'allow_ssh_root_login': 'allow_ssh_root_login',
        'compute_id': 'compute_id',
        'ntp_servers': 'ntp_servers',
        'reservation_info': 'reservation_info',
        'vc_id': 'vc_id',
        'storage_id': 'storage_id',
        'default_gateway_addresses': 'default_gateway_addresses',
        'management_port_subnets': 'management_port_subnets',
        'host_id': 'host_id',
        'advanced_configuration': 'advanced_configuration',
        'management_network_id': 'management_network_id'
    }
    if hasattr(DeploymentConfig, "attribute_map"):
        attribute_map.update(DeploymentConfig.attribute_map)

    def __init__(self, data_network_ids=None, resource_allocation=None, dns_servers=None, compute_folder_id=None, search_domains=None, hostname=None, enable_ssh=False, allow_ssh_root_login=False, compute_id=None, ntp_servers=None, reservation_info=None, vc_id=None, storage_id=None, default_gateway_addresses=None, management_port_subnets=None, host_id=None, advanced_configuration=None, management_network_id=None, *args, **kwargs):  # noqa: E501
        """VsphereDeploymentConfig - a model defined in Swagger"""  # noqa: E501
        self._data_network_ids = None
        self._resource_allocation = None
        self._dns_servers = None
        self._compute_folder_id = None
        self._search_domains = None
        self._hostname = None
        self._enable_ssh = None
        self._allow_ssh_root_login = None
        self._compute_id = None
        self._ntp_servers = None
        self._reservation_info = None
        self._vc_id = None
        self._storage_id = None
        self._default_gateway_addresses = None
        self._management_port_subnets = None
        self._host_id = None
        self._advanced_configuration = None
        self._management_network_id = None
        self.discriminator = None
        self.data_network_ids = data_network_ids
        if resource_allocation is not None:
            self.resource_allocation = resource_allocation
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if compute_folder_id is not None:
            self.compute_folder_id = compute_folder_id
        if search_domains is not None:
            self.search_domains = search_domains
        if hostname is not None:
            self.hostname = hostname
        if enable_ssh is not None:
            self.enable_ssh = enable_ssh
        if allow_ssh_root_login is not None:
            self.allow_ssh_root_login = allow_ssh_root_login
        self.compute_id = compute_id
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if reservation_info is not None:
            self.reservation_info = reservation_info
        self.vc_id = vc_id
        self.storage_id = storage_id
        if default_gateway_addresses is not None:
            self.default_gateway_addresses = default_gateway_addresses
        if management_port_subnets is not None:
            self.management_port_subnets = management_port_subnets
        if host_id is not None:
            self.host_id = host_id
        if advanced_configuration is not None:
            self.advanced_configuration = advanced_configuration
        self.management_network_id = management_network_id
        DeploymentConfig.__init__(self, *args, **kwargs)

    @property
    def data_network_ids(self):
        """Gets the data_network_ids of this VsphereDeploymentConfig.  # noqa: E501

        List of distributed portgroup or VLAN logical identifiers to which the datapath serving vnics of edge node vm will be connected.   # noqa: E501

        :return: The data_network_ids of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_network_ids

    @data_network_ids.setter
    def data_network_ids(self, data_network_ids):
        """Sets the data_network_ids of this VsphereDeploymentConfig.

        List of distributed portgroup or VLAN logical identifiers to which the datapath serving vnics of edge node vm will be connected.   # noqa: E501

        :param data_network_ids: The data_network_ids of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """
        if data_network_ids is None:
            raise ValueError("Invalid value for `data_network_ids`, must not be `None`")  # noqa: E501

        self._data_network_ids = data_network_ids

    @property
    def resource_allocation(self):
        """Gets the resource_allocation of this VsphereDeploymentConfig.  # noqa: E501


        :return: The resource_allocation of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: ResourceAssignment
        """
        return self._resource_allocation

    @resource_allocation.setter
    def resource_allocation(self, resource_allocation):
        """Sets the resource_allocation of this VsphereDeploymentConfig.


        :param resource_allocation: The resource_allocation of this VsphereDeploymentConfig.  # noqa: E501
        :type: ResourceAssignment
        """

        self._resource_allocation = resource_allocation

    @property
    def dns_servers(self):
        """Gets the dns_servers of this VsphereDeploymentConfig.  # noqa: E501

        List of DNS servers. This field is deprecated. Use dns_servers property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :return: The dns_servers of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this VsphereDeploymentConfig.

        List of DNS servers. This field is deprecated. Use dns_servers property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :param dns_servers: The dns_servers of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def compute_folder_id(self):
        """Gets the compute_folder_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified compute folder created in a datacenter, if compute folder is specified. Note - User must ensure that compute folder is accessible by specified cluster/host.   # noqa: E501

        :return: The compute_folder_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._compute_folder_id

    @compute_folder_id.setter
    def compute_folder_id(self, compute_folder_id):
        """Sets the compute_folder_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified compute folder created in a datacenter, if compute folder is specified. Note - User must ensure that compute folder is accessible by specified cluster/host.   # noqa: E501

        :param compute_folder_id: The compute_folder_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """

        self._compute_folder_id = compute_folder_id

    @property
    def search_domains(self):
        """Gets the search_domains of this VsphereDeploymentConfig.  # noqa: E501

        List of domain names that are used to complete unqualified host names. This field is deprecated. Use search_domains property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :return: The search_domains of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_domains

    @search_domains.setter
    def search_domains(self, search_domains):
        """Sets the search_domains of this VsphereDeploymentConfig.

        List of domain names that are used to complete unqualified host names. This field is deprecated. Use search_domains property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :param search_domains: The search_domains of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._search_domains = search_domains

    @property
    def hostname(self):
        """Gets the hostname of this VsphereDeploymentConfig.  # noqa: E501

        Host name or FQDN for edge node.  # noqa: E501

        :return: The hostname of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VsphereDeploymentConfig.

        Host name or FQDN for edge node.  # noqa: E501

        :param hostname: The hostname of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def enable_ssh(self):
        """Gets the enable_ssh of this VsphereDeploymentConfig.  # noqa: E501

        Enabling SSH service is not recommended for security reasons. This field is deprecated. Use enable_ssh property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :return: The enable_ssh of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssh

    @enable_ssh.setter
    def enable_ssh(self, enable_ssh):
        """Sets the enable_ssh of this VsphereDeploymentConfig.

        Enabling SSH service is not recommended for security reasons. This field is deprecated. Use enable_ssh property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :param enable_ssh: The enable_ssh of this VsphereDeploymentConfig.  # noqa: E501
        :type: bool
        """

        self._enable_ssh = enable_ssh

    @property
    def allow_ssh_root_login(self):
        """Gets the allow_ssh_root_login of this VsphereDeploymentConfig.  # noqa: E501

        Allowing root SSH logins is not recommended for security reasons. This field is deprecated. Use allow_ssh_root_login property in EdgeNodeSettings section when creating transport nodes.   # noqa: E501

        :return: The allow_ssh_root_login of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ssh_root_login

    @allow_ssh_root_login.setter
    def allow_ssh_root_login(self, allow_ssh_root_login):
        """Sets the allow_ssh_root_login of this VsphereDeploymentConfig.

        Allowing root SSH logins is not recommended for security reasons. This field is deprecated. Use allow_ssh_root_login property in EdgeNodeSettings section when creating transport nodes.   # noqa: E501

        :param allow_ssh_root_login: The allow_ssh_root_login of this VsphereDeploymentConfig.  # noqa: E501
        :type: bool
        """

        self._allow_ssh_root_login = allow_ssh_root_login

    @property
    def compute_id(self):
        """Gets the compute_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified cluster or resourcepool. Note - all the hosts must have nsx fabric prepared in the specified cluster.   # noqa: E501

        :return: The compute_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._compute_id

    @compute_id.setter
    def compute_id(self, compute_id):
        """Sets the compute_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified cluster or resourcepool. Note - all the hosts must have nsx fabric prepared in the specified cluster.   # noqa: E501

        :param compute_id: The compute_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if compute_id is None:
            raise ValueError("Invalid value for `compute_id`, must not be `None`")  # noqa: E501

        self._compute_id = compute_id

    @property
    def ntp_servers(self):
        """Gets the ntp_servers of this VsphereDeploymentConfig.  # noqa: E501

        List of NTP servers. This field is deprecated. Use ntp_servers property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :return: The ntp_servers of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_servers

    @ntp_servers.setter
    def ntp_servers(self, ntp_servers):
        """Sets the ntp_servers of this VsphereDeploymentConfig.

        List of NTP servers. This field is deprecated. Use ntp_servers property in EdgeNodeSettings section when creating or updating transport nodes.   # noqa: E501

        :param ntp_servers: The ntp_servers of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._ntp_servers = ntp_servers

    @property
    def reservation_info(self):
        """Gets the reservation_info of this VsphereDeploymentConfig.  # noqa: E501


        :return: The reservation_info of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: ReservationInfo
        """
        return self._reservation_info

    @reservation_info.setter
    def reservation_info(self, reservation_info):
        """Sets the reservation_info of this VsphereDeploymentConfig.


        :param reservation_info: The reservation_info of this VsphereDeploymentConfig.  # noqa: E501
        :type: ReservationInfo
        """

        self._reservation_info = reservation_info

    @property
    def vc_id(self):
        """Gets the vc_id of this VsphereDeploymentConfig.  # noqa: E501

        The vc specific identifiers will be resolved on this VC. So all other identifiers specified here must belong to this vcenter server.   # noqa: E501

        :return: The vc_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._vc_id

    @vc_id.setter
    def vc_id(self, vc_id):
        """Sets the vc_id of this VsphereDeploymentConfig.

        The vc specific identifiers will be resolved on this VC. So all other identifiers specified here must belong to this vcenter server.   # noqa: E501

        :param vc_id: The vc_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if vc_id is None:
            raise ValueError("Invalid value for `vc_id`, must not be `None`")  # noqa: E501

        self._vc_id = vc_id

    @property
    def storage_id(self):
        """Gets the storage_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified datastore. User must ensure that storage is accessible by the specified cluster/host.   # noqa: E501

        :return: The storage_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified datastore. User must ensure that storage is accessible by the specified cluster/host.   # noqa: E501

        :param storage_id: The storage_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if storage_id is None:
            raise ValueError("Invalid value for `storage_id`, must not be `None`")  # noqa: E501

        self._storage_id = storage_id

    @property
    def default_gateway_addresses(self):
        """Gets the default_gateway_addresses of this VsphereDeploymentConfig.  # noqa: E501

        The default gateway for edge node must be specified if all the nodes it communicates with are not in the same subnet. Note: Only single IPv4 default gateway address is supported and it must belong to management network.   # noqa: E501

        :return: The default_gateway_addresses of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_gateway_addresses

    @default_gateway_addresses.setter
    def default_gateway_addresses(self, default_gateway_addresses):
        """Sets the default_gateway_addresses of this VsphereDeploymentConfig.

        The default gateway for edge node must be specified if all the nodes it communicates with are not in the same subnet. Note: Only single IPv4 default gateway address is supported and it must belong to management network.   # noqa: E501

        :param default_gateway_addresses: The default_gateway_addresses of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._default_gateway_addresses = default_gateway_addresses

    @property
    def management_port_subnets(self):
        """Gets the management_port_subnets of this VsphereDeploymentConfig.  # noqa: E501

        IP Address and subnet configuration for the management port. Note: only one IPv4 address is supported for the management port.   # noqa: E501

        :return: The management_port_subnets of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[IPSubnet]
        """
        return self._management_port_subnets

    @management_port_subnets.setter
    def management_port_subnets(self, management_port_subnets):
        """Sets the management_port_subnets of this VsphereDeploymentConfig.

        IP Address and subnet configuration for the management port. Note: only one IPv4 address is supported for the management port.   # noqa: E501

        :param management_port_subnets: The management_port_subnets of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[IPSubnet]
        """

        self._management_port_subnets = management_port_subnets

    @property
    def host_id(self):
        """Gets the host_id of this VsphereDeploymentConfig.  # noqa: E501

        The edge node vm will be deployed on the specified Host within the cluster if host_id is specified. Note - User must ensure that storage and specified networks are accessible by this host.   # noqa: E501

        :return: The host_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VsphereDeploymentConfig.

        The edge node vm will be deployed on the specified Host within the cluster if host_id is specified. Note - User must ensure that storage and specified networks are accessible by this host.   # noqa: E501

        :param host_id: The host_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def advanced_configuration(self):
        """Gets the advanced_configuration of this VsphereDeploymentConfig.  # noqa: E501

        Array of additional specific properties for advanced or cloud- specific deployments in key-value format.   # noqa: E501

        :return: The advanced_configuration of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._advanced_configuration

    @advanced_configuration.setter
    def advanced_configuration(self, advanced_configuration):
        """Sets the advanced_configuration of this VsphereDeploymentConfig.

        Array of additional specific properties for advanced or cloud- specific deployments in key-value format.   # noqa: E501

        :param advanced_configuration: The advanced_configuration of this VsphereDeploymentConfig.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._advanced_configuration = advanced_configuration

    @property
    def management_network_id(self):
        """Gets the management_network_id of this VsphereDeploymentConfig.  # noqa: E501

        Distributed portgroup identifier to which the management vnic of edge node vm will be connected. This portgroup must have connectivity with MP and CCP. A VLAN logical switch identifier may also be specified.   # noqa: E501

        :return: The management_network_id of this VsphereDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._management_network_id

    @management_network_id.setter
    def management_network_id(self, management_network_id):
        """Sets the management_network_id of this VsphereDeploymentConfig.

        Distributed portgroup identifier to which the management vnic of edge node vm will be connected. This portgroup must have connectivity with MP and CCP. A VLAN logical switch identifier may also be specified.   # noqa: E501

        :param management_network_id: The management_network_id of this VsphereDeploymentConfig.  # noqa: E501
        :type: str
        """
        if management_network_id is None:
            raise ValueError("Invalid value for `management_network_id`, must not be `None`")  # noqa: E501

        self._management_network_id = management_network_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VsphereDeploymentConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VsphereDeploymentConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
