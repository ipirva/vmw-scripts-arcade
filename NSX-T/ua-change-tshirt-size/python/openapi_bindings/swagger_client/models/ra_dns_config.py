# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RaDNSConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_name_lifetime': 'int',
        'dns_server': 'list[str]',
        'domain_name': 'list[str]',
        'dns_server_lifetime': 'int'
    }

    attribute_map = {
        'domain_name_lifetime': 'domain_name_lifetime',
        'dns_server': 'dns_server',
        'domain_name': 'domain_name',
        'dns_server_lifetime': 'dns_server_lifetime'
    }

    def __init__(self, domain_name_lifetime=1800000, dns_server=None, domain_name=None, dns_server_lifetime=1800000):  # noqa: E501
        """RaDNSConfig - a model defined in Swagger"""  # noqa: E501
        self._domain_name_lifetime = None
        self._dns_server = None
        self._domain_name = None
        self._dns_server_lifetime = None
        self.discriminator = None
        if domain_name_lifetime is not None:
            self.domain_name_lifetime = domain_name_lifetime
        if dns_server is not None:
            self.dns_server = dns_server
        if domain_name is not None:
            self.domain_name = domain_name
        if dns_server_lifetime is not None:
            self.dns_server_lifetime = dns_server_lifetime

    @property
    def domain_name_lifetime(self):
        """Gets the domain_name_lifetime of this RaDNSConfig.  # noqa: E501

        Lifetime of Domain names in milliseconds  # noqa: E501

        :return: The domain_name_lifetime of this RaDNSConfig.  # noqa: E501
        :rtype: int
        """
        return self._domain_name_lifetime

    @domain_name_lifetime.setter
    def domain_name_lifetime(self, domain_name_lifetime):
        """Sets the domain_name_lifetime of this RaDNSConfig.

        Lifetime of Domain names in milliseconds  # noqa: E501

        :param domain_name_lifetime: The domain_name_lifetime of this RaDNSConfig.  # noqa: E501
        :type: int
        """

        self._domain_name_lifetime = domain_name_lifetime

    @property
    def dns_server(self):
        """Gets the dns_server of this RaDNSConfig.  # noqa: E501

        DNS server.   # noqa: E501

        :return: The dns_server of this RaDNSConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_server

    @dns_server.setter
    def dns_server(self, dns_server):
        """Sets the dns_server of this RaDNSConfig.

        DNS server.   # noqa: E501

        :param dns_server: The dns_server of this RaDNSConfig.  # noqa: E501
        :type: list[str]
        """

        self._dns_server = dns_server

    @property
    def domain_name(self):
        """Gets the domain_name of this RaDNSConfig.  # noqa: E501

        Domain name in RA message.   # noqa: E501

        :return: The domain_name of this RaDNSConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this RaDNSConfig.

        Domain name in RA message.   # noqa: E501

        :param domain_name: The domain_name of this RaDNSConfig.  # noqa: E501
        :type: list[str]
        """

        self._domain_name = domain_name

    @property
    def dns_server_lifetime(self):
        """Gets the dns_server_lifetime of this RaDNSConfig.  # noqa: E501

        Lifetime of DNS server in milliseconds  # noqa: E501

        :return: The dns_server_lifetime of this RaDNSConfig.  # noqa: E501
        :rtype: int
        """
        return self._dns_server_lifetime

    @dns_server_lifetime.setter
    def dns_server_lifetime(self, dns_server_lifetime):
        """Sets the dns_server_lifetime of this RaDNSConfig.

        Lifetime of DNS server in milliseconds  # noqa: E501

        :param dns_server_lifetime: The dns_server_lifetime of this RaDNSConfig.  # noqa: E501
        :type: int
        """

        self._dns_server_lifetime = dns_server_lifetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RaDNSConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RaDNSConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
