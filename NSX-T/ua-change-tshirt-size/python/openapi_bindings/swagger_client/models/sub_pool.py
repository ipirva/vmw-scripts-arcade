# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'usage_percentage': 'float',
        'remaining_credit_number': 'int',
        'sub_pool_type': 'str'
    }

    attribute_map = {
        'usage_percentage': 'usage_percentage',
        'remaining_credit_number': 'remaining_credit_number',
        'sub_pool_type': 'sub_pool_type'
    }

    def __init__(self, usage_percentage=None, remaining_credit_number=None, sub_pool_type=None):  # noqa: E501
        """SubPool - a model defined in Swagger"""  # noqa: E501
        self._usage_percentage = None
        self._remaining_credit_number = None
        self._sub_pool_type = None
        self.discriminator = None
        if usage_percentage is not None:
            self.usage_percentage = usage_percentage
        if remaining_credit_number is not None:
            self.remaining_credit_number = remaining_credit_number
        if sub_pool_type is not None:
            self.sub_pool_type = sub_pool_type

    @property
    def usage_percentage(self):
        """Gets the usage_percentage of this SubPool.  # noqa: E501

        Percentage utlization of sub-pool based on the number of services configured and the hard limits, if any.   # noqa: E501

        :return: The usage_percentage of this SubPool.  # noqa: E501
        :rtype: float
        """
        return self._usage_percentage

    @usage_percentage.setter
    def usage_percentage(self, usage_percentage):
        """Sets the usage_percentage of this SubPool.

        Percentage utlization of sub-pool based on the number of services configured and the hard limits, if any.   # noqa: E501

        :param usage_percentage: The usage_percentage of this SubPool.  # noqa: E501
        :type: float
        """

        self._usage_percentage = usage_percentage

    @property
    def remaining_credit_number(self):
        """Gets the remaining_credit_number of this SubPool.  # noqa: E501

        Credits remaining on the sub-pool that can be used to deploy services of corresponding sub-pool type.   # noqa: E501

        :return: The remaining_credit_number of this SubPool.  # noqa: E501
        :rtype: int
        """
        return self._remaining_credit_number

    @remaining_credit_number.setter
    def remaining_credit_number(self, remaining_credit_number):
        """Sets the remaining_credit_number of this SubPool.

        Credits remaining on the sub-pool that can be used to deploy services of corresponding sub-pool type.   # noqa: E501

        :param remaining_credit_number: The remaining_credit_number of this SubPool.  # noqa: E501
        :type: int
        """

        self._remaining_credit_number = remaining_credit_number

    @property
    def sub_pool_type(self):
        """Gets the sub_pool_type of this SubPool.  # noqa: E501

        Type of the sub-pool configured on edge node.  # noqa: E501

        :return: The sub_pool_type of this SubPool.  # noqa: E501
        :rtype: str
        """
        return self._sub_pool_type

    @sub_pool_type.setter
    def sub_pool_type(self, sub_pool_type):
        """Sets the sub_pool_type of this SubPool.

        Type of the sub-pool configured on edge node.  # noqa: E501

        :param sub_pool_type: The sub_pool_type of this SubPool.  # noqa: E501
        :type: str
        """

        self._sub_pool_type = sub_pool_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubPool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
