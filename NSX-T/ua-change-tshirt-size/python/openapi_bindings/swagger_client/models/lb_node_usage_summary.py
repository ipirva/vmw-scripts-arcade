# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbNodeUsageSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_counts': 'list[LbNodeCountPerSeverity]',
        'current_credit_number': 'int',
        'node_usages': 'list[LbNodeUsage]',
        'severity': 'str',
        'remaining_pool_members': 'int',
        'current_pool_members': 'int',
        'usage_percentage': 'float',
        'remaining_credit_number': 'int'
    }

    attribute_map = {
        'node_counts': 'node_counts',
        'current_credit_number': 'current_credit_number',
        'node_usages': 'node_usages',
        'severity': 'severity',
        'remaining_pool_members': 'remaining_pool_members',
        'current_pool_members': 'current_pool_members',
        'usage_percentage': 'usage_percentage',
        'remaining_credit_number': 'remaining_credit_number'
    }

    def __init__(self, node_counts=None, current_credit_number=None, node_usages=None, severity=None, remaining_pool_members=None, current_pool_members=None, usage_percentage=None, remaining_credit_number=None):  # noqa: E501
        """LbNodeUsageSummary - a model defined in Swagger"""  # noqa: E501
        self._node_counts = None
        self._current_credit_number = None
        self._node_usages = None
        self._severity = None
        self._remaining_pool_members = None
        self._current_pool_members = None
        self._usage_percentage = None
        self._remaining_credit_number = None
        self.discriminator = None
        if node_counts is not None:
            self.node_counts = node_counts
        if current_credit_number is not None:
            self.current_credit_number = current_credit_number
        if node_usages is not None:
            self.node_usages = node_usages
        if severity is not None:
            self.severity = severity
        if remaining_pool_members is not None:
            self.remaining_pool_members = remaining_pool_members
        if current_pool_members is not None:
            self.current_pool_members = current_pool_members
        if usage_percentage is not None:
            self.usage_percentage = usage_percentage
        if remaining_credit_number is not None:
            self.remaining_credit_number = remaining_credit_number

    @property
    def node_counts(self):
        """Gets the node_counts of this LbNodeUsageSummary.  # noqa: E501

        The property identifies array of node count for each severity (RED, ORANGE and GREEN).   # noqa: E501

        :return: The node_counts of this LbNodeUsageSummary.  # noqa: E501
        :rtype: list[LbNodeCountPerSeverity]
        """
        return self._node_counts

    @node_counts.setter
    def node_counts(self, node_counts):
        """Sets the node_counts of this LbNodeUsageSummary.

        The property identifies array of node count for each severity (RED, ORANGE and GREEN).   # noqa: E501

        :param node_counts: The node_counts of this LbNodeUsageSummary.  # noqa: E501
        :type: list[LbNodeCountPerSeverity]
        """

        self._node_counts = node_counts

    @property
    def current_credit_number(self):
        """Gets the current_credit_number of this LbNodeUsageSummary.  # noqa: E501

        The current credit number reflects the overall credit usage for all nodes.   # noqa: E501

        :return: The current_credit_number of this LbNodeUsageSummary.  # noqa: E501
        :rtype: int
        """
        return self._current_credit_number

    @current_credit_number.setter
    def current_credit_number(self, current_credit_number):
        """Sets the current_credit_number of this LbNodeUsageSummary.

        The current credit number reflects the overall credit usage for all nodes.   # noqa: E501

        :param current_credit_number: The current_credit_number of this LbNodeUsageSummary.  # noqa: E501
        :type: int
        """

        self._current_credit_number = current_credit_number

    @property
    def node_usages(self):
        """Gets the node_usages of this LbNodeUsageSummary.  # noqa: E501

        The property contains lb node usages for each node.   # noqa: E501

        :return: The node_usages of this LbNodeUsageSummary.  # noqa: E501
        :rtype: list[LbNodeUsage]
        """
        return self._node_usages

    @node_usages.setter
    def node_usages(self, node_usages):
        """Sets the node_usages of this LbNodeUsageSummary.

        The property contains lb node usages for each node.   # noqa: E501

        :param node_usages: The node_usages of this LbNodeUsageSummary.  # noqa: E501
        :type: list[LbNodeUsage]
        """

        self._node_usages = node_usages

    @property
    def severity(self):
        """Gets the severity of this LbNodeUsageSummary.  # noqa: E501

        The severity calculation is based on current credit usage percentage of load balancer for all nodes.   # noqa: E501

        :return: The severity of this LbNodeUsageSummary.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this LbNodeUsageSummary.

        The severity calculation is based on current credit usage percentage of load balancer for all nodes.   # noqa: E501

        :param severity: The severity of this LbNodeUsageSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["GREEN", "ORANGE", "RED"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def remaining_pool_members(self):
        """Gets the remaining_pool_members of this LbNodeUsageSummary.  # noqa: E501

        The overall remaining number of pool members which could be configured on all nodes.   # noqa: E501

        :return: The remaining_pool_members of this LbNodeUsageSummary.  # noqa: E501
        :rtype: int
        """
        return self._remaining_pool_members

    @remaining_pool_members.setter
    def remaining_pool_members(self, remaining_pool_members):
        """Sets the remaining_pool_members of this LbNodeUsageSummary.

        The overall remaining number of pool members which could be configured on all nodes.   # noqa: E501

        :param remaining_pool_members: The remaining_pool_members of this LbNodeUsageSummary.  # noqa: E501
        :type: int
        """

        self._remaining_pool_members = remaining_pool_members

    @property
    def current_pool_members(self):
        """Gets the current_pool_members of this LbNodeUsageSummary.  # noqa: E501

        The overall number of pool members configured on all nodes.   # noqa: E501

        :return: The current_pool_members of this LbNodeUsageSummary.  # noqa: E501
        :rtype: int
        """
        return self._current_pool_members

    @current_pool_members.setter
    def current_pool_members(self, current_pool_members):
        """Sets the current_pool_members of this LbNodeUsageSummary.

        The overall number of pool members configured on all nodes.   # noqa: E501

        :param current_pool_members: The current_pool_members of this LbNodeUsageSummary.  # noqa: E501
        :type: int
        """

        self._current_pool_members = current_pool_members

    @property
    def usage_percentage(self):
        """Gets the usage_percentage of this LbNodeUsageSummary.  # noqa: E501

        The overall usage percentage of all nodes for load balancer. The value is the larger value between overall pool member usage percentage and overall load balancer credit usage percentage.   # noqa: E501

        :return: The usage_percentage of this LbNodeUsageSummary.  # noqa: E501
        :rtype: float
        """
        return self._usage_percentage

    @usage_percentage.setter
    def usage_percentage(self, usage_percentage):
        """Sets the usage_percentage of this LbNodeUsageSummary.

        The overall usage percentage of all nodes for load balancer. The value is the larger value between overall pool member usage percentage and overall load balancer credit usage percentage.   # noqa: E501

        :param usage_percentage: The usage_percentage of this LbNodeUsageSummary.  # noqa: E501
        :type: float
        """

        self._usage_percentage = usage_percentage

    @property
    def remaining_credit_number(self):
        """Gets the remaining_credit_number of this LbNodeUsageSummary.  # noqa: E501

        The remaining credit number is the overall remaining credits that can be used for load balancer service configuration for all nodes.   # noqa: E501

        :return: The remaining_credit_number of this LbNodeUsageSummary.  # noqa: E501
        :rtype: int
        """
        return self._remaining_credit_number

    @remaining_credit_number.setter
    def remaining_credit_number(self, remaining_credit_number):
        """Sets the remaining_credit_number of this LbNodeUsageSummary.

        The remaining credit number is the overall remaining credits that can be used for load balancer service configuration for all nodes.   # noqa: E501

        :param remaining_credit_number: The remaining_credit_number of this LbNodeUsageSummary.  # noqa: E501
        :type: int
        """

        self._remaining_credit_number = remaining_credit_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbNodeUsageSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbNodeUsageSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
