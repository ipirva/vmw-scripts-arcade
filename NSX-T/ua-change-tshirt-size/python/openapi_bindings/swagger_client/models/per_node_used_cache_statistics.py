# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PerNodeUsedCacheStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cached_entries': 'int',
        'node_id': 'str',
        'used_cache_size': 'int'
    }

    attribute_map = {
        'cached_entries': 'cached_entries',
        'node_id': 'node_id',
        'used_cache_size': 'used_cache_size'
    }

    def __init__(self, cached_entries=None, node_id=None, used_cache_size=None):  # noqa: E501
        """PerNodeUsedCacheStatistics - a model defined in Swagger"""  # noqa: E501
        self._cached_entries = None
        self._node_id = None
        self._used_cache_size = None
        self.discriminator = None
        if cached_entries is not None:
            self.cached_entries = cached_entries
        if node_id is not None:
            self.node_id = node_id
        if used_cache_size is not None:
            self.used_cache_size = used_cache_size

    @property
    def cached_entries(self):
        """Gets the cached_entries of this PerNodeUsedCacheStatistics.  # noqa: E501

        The total number of cached entries  # noqa: E501

        :return: The cached_entries of this PerNodeUsedCacheStatistics.  # noqa: E501
        :rtype: int
        """
        return self._cached_entries

    @cached_entries.setter
    def cached_entries(self, cached_entries):
        """Sets the cached_entries of this PerNodeUsedCacheStatistics.

        The total number of cached entries  # noqa: E501

        :param cached_entries: The cached_entries of this PerNodeUsedCacheStatistics.  # noqa: E501
        :type: int
        """

        self._cached_entries = cached_entries

    @property
    def node_id(self):
        """Gets the node_id of this PerNodeUsedCacheStatistics.  # noqa: E501

        Uuid of active/standby transport node  # noqa: E501

        :return: The node_id of this PerNodeUsedCacheStatistics.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PerNodeUsedCacheStatistics.

        Uuid of active/standby transport node  # noqa: E501

        :param node_id: The node_id of this PerNodeUsedCacheStatistics.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def used_cache_size(self):
        """Gets the used_cache_size of this PerNodeUsedCacheStatistics.  # noqa: E501

        The memory size used in cache, in kb  # noqa: E501

        :return: The used_cache_size of this PerNodeUsedCacheStatistics.  # noqa: E501
        :rtype: int
        """
        return self._used_cache_size

    @used_cache_size.setter
    def used_cache_size(self, used_cache_size):
        """Sets the used_cache_size of this PerNodeUsedCacheStatistics.

        The memory size used in cache, in kb  # noqa: E501

        :param used_cache_size: The used_cache_size of this PerNodeUsedCacheStatistics.  # noqa: E501
        :type: int
        """

        self._used_cache_size = used_cache_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerNodeUsedCacheStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerNodeUsedCacheStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
