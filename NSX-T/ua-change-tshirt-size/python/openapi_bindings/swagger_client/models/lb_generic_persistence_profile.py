# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_persistence_profile import LbPersistenceProfile  # noqa: F401,E501

class LbGenericPersistenceProfile(LbPersistenceProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ha_persistence_mirroring_enabled': 'bool',
        'timeout': 'int'
    }
    if hasattr(LbPersistenceProfile, "swagger_types"):
        swagger_types.update(LbPersistenceProfile.swagger_types)

    attribute_map = {
        'ha_persistence_mirroring_enabled': 'ha_persistence_mirroring_enabled',
        'timeout': 'timeout'
    }
    if hasattr(LbPersistenceProfile, "attribute_map"):
        attribute_map.update(LbPersistenceProfile.attribute_map)

    def __init__(self, ha_persistence_mirroring_enabled=False, timeout=300, *args, **kwargs):  # noqa: E501
        """LbGenericPersistenceProfile - a model defined in Swagger"""  # noqa: E501
        self._ha_persistence_mirroring_enabled = None
        self._timeout = None
        self.discriminator = None
        if ha_persistence_mirroring_enabled is not None:
            self.ha_persistence_mirroring_enabled = ha_persistence_mirroring_enabled
        if timeout is not None:
            self.timeout = timeout
        LbPersistenceProfile.__init__(self, *args, **kwargs)

    @property
    def ha_persistence_mirroring_enabled(self):
        """Gets the ha_persistence_mirroring_enabled of this LbGenericPersistenceProfile.  # noqa: E501

        The mirroring enabled flag is to synchronize persistence entries. Persistence entries are not synchronized to the HA peer by default.   # noqa: E501

        :return: The ha_persistence_mirroring_enabled of this LbGenericPersistenceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._ha_persistence_mirroring_enabled

    @ha_persistence_mirroring_enabled.setter
    def ha_persistence_mirroring_enabled(self, ha_persistence_mirroring_enabled):
        """Sets the ha_persistence_mirroring_enabled of this LbGenericPersistenceProfile.

        The mirroring enabled flag is to synchronize persistence entries. Persistence entries are not synchronized to the HA peer by default.   # noqa: E501

        :param ha_persistence_mirroring_enabled: The ha_persistence_mirroring_enabled of this LbGenericPersistenceProfile.  # noqa: E501
        :type: bool
        """

        self._ha_persistence_mirroring_enabled = ha_persistence_mirroring_enabled

    @property
    def timeout(self):
        """Gets the timeout of this LbGenericPersistenceProfile.  # noqa: E501

        When all connections complete (reference count reaches 0), persistence entry timer is started with the expiration time.   # noqa: E501

        :return: The timeout of this LbGenericPersistenceProfile.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this LbGenericPersistenceProfile.

        When all connections complete (reference count reaches 0), persistence entry timer is started with the expiration time.   # noqa: E501

        :param timeout: The timeout of this LbGenericPersistenceProfile.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbGenericPersistenceProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbGenericPersistenceProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
