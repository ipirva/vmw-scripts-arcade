# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class L2VpnSession(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transport_tunnels': 'list[ResourceReference]',
        'tunnel_encapsulation': 'L2VpnTunnelEncapsulation',
        'enabled': 'bool',
        'l2vpn_tcp_mss_clamping': 'L2VpnTcpMssClamping',
        'l2vpn_service_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'transport_tunnels': 'transport_tunnels',
        'tunnel_encapsulation': 'tunnel_encapsulation',
        'enabled': 'enabled',
        'l2vpn_tcp_mss_clamping': 'l2vpn_tcp_mss_clamping',
        'l2vpn_service_id': 'l2vpn_service_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, transport_tunnels=None, tunnel_encapsulation=None, enabled=True, l2vpn_tcp_mss_clamping=None, l2vpn_service_id=None, *args, **kwargs):  # noqa: E501
        """L2VpnSession - a model defined in Swagger"""  # noqa: E501
        self._transport_tunnels = None
        self._tunnel_encapsulation = None
        self._enabled = None
        self._l2vpn_tcp_mss_clamping = None
        self._l2vpn_service_id = None
        self.discriminator = None
        self.transport_tunnels = transport_tunnels
        if tunnel_encapsulation is not None:
            self.tunnel_encapsulation = tunnel_encapsulation
        if enabled is not None:
            self.enabled = enabled
        if l2vpn_tcp_mss_clamping is not None:
            self.l2vpn_tcp_mss_clamping = l2vpn_tcp_mss_clamping
        self.l2vpn_service_id = l2vpn_service_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def transport_tunnels(self):
        """Gets the transport_tunnels of this L2VpnSession.  # noqa: E501

        List of transport tunnels for redundancy.  # noqa: E501

        :return: The transport_tunnels of this L2VpnSession.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._transport_tunnels

    @transport_tunnels.setter
    def transport_tunnels(self, transport_tunnels):
        """Sets the transport_tunnels of this L2VpnSession.

        List of transport tunnels for redundancy.  # noqa: E501

        :param transport_tunnels: The transport_tunnels of this L2VpnSession.  # noqa: E501
        :type: list[ResourceReference]
        """
        if transport_tunnels is None:
            raise ValueError("Invalid value for `transport_tunnels`, must not be `None`")  # noqa: E501

        self._transport_tunnels = transport_tunnels

    @property
    def tunnel_encapsulation(self):
        """Gets the tunnel_encapsulation of this L2VpnSession.  # noqa: E501


        :return: The tunnel_encapsulation of this L2VpnSession.  # noqa: E501
        :rtype: L2VpnTunnelEncapsulation
        """
        return self._tunnel_encapsulation

    @tunnel_encapsulation.setter
    def tunnel_encapsulation(self, tunnel_encapsulation):
        """Sets the tunnel_encapsulation of this L2VpnSession.


        :param tunnel_encapsulation: The tunnel_encapsulation of this L2VpnSession.  # noqa: E501
        :type: L2VpnTunnelEncapsulation
        """

        self._tunnel_encapsulation = tunnel_encapsulation

    @property
    def enabled(self):
        """Gets the enabled of this L2VpnSession.  # noqa: E501

        Enable to extend all the associated logical switches.  # noqa: E501

        :return: The enabled of this L2VpnSession.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this L2VpnSession.

        Enable to extend all the associated logical switches.  # noqa: E501

        :param enabled: The enabled of this L2VpnSession.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def l2vpn_tcp_mss_clamping(self):
        """Gets the l2vpn_tcp_mss_clamping of this L2VpnSession.  # noqa: E501


        :return: The l2vpn_tcp_mss_clamping of this L2VpnSession.  # noqa: E501
        :rtype: L2VpnTcpMssClamping
        """
        return self._l2vpn_tcp_mss_clamping

    @l2vpn_tcp_mss_clamping.setter
    def l2vpn_tcp_mss_clamping(self, l2vpn_tcp_mss_clamping):
        """Sets the l2vpn_tcp_mss_clamping of this L2VpnSession.


        :param l2vpn_tcp_mss_clamping: The l2vpn_tcp_mss_clamping of this L2VpnSession.  # noqa: E501
        :type: L2VpnTcpMssClamping
        """

        self._l2vpn_tcp_mss_clamping = l2vpn_tcp_mss_clamping

    @property
    def l2vpn_service_id(self):
        """Gets the l2vpn_service_id of this L2VpnSession.  # noqa: E501

        L2VPN service id  # noqa: E501

        :return: The l2vpn_service_id of this L2VpnSession.  # noqa: E501
        :rtype: str
        """
        return self._l2vpn_service_id

    @l2vpn_service_id.setter
    def l2vpn_service_id(self, l2vpn_service_id):
        """Sets the l2vpn_service_id of this L2VpnSession.

        L2VPN service id  # noqa: E501

        :param l2vpn_service_id: The l2vpn_service_id of this L2VpnSession.  # noqa: E501
        :type: str
        """
        if l2vpn_service_id is None:
            raise ValueError("Invalid value for `l2vpn_service_id`, must not be `None`")  # noqa: E501

        self._l2vpn_service_id = l2vpn_service_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VpnSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VpnSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
