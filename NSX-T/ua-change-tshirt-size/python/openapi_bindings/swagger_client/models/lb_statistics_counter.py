# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LbStatisticsCounter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_ip_persistence_entry_size': 'int',
        'packets_out': 'int',
        'dropped_packets_by_access_list': 'int',
        'bytes_out_rate': 'float',
        'total_sessions': 'int',
        'http_request_rate': 'float',
        'bytes_out': 'int',
        'packets_in_rate': 'float',
        'bytes_in_rate': 'float',
        'current_sessions': 'int',
        'max_sessions': 'int',
        'packets_out_rate': 'float',
        'http_requests': 'int',
        'bytes_in': 'int',
        'current_session_rate': 'float',
        'dropped_sessions_by_lbrule_action': 'int',
        'packets_in': 'int'
    }

    attribute_map = {
        'source_ip_persistence_entry_size': 'source_ip_persistence_entry_size',
        'packets_out': 'packets_out',
        'dropped_packets_by_access_list': 'dropped_packets_by_access_list',
        'bytes_out_rate': 'bytes_out_rate',
        'total_sessions': 'total_sessions',
        'http_request_rate': 'http_request_rate',
        'bytes_out': 'bytes_out',
        'packets_in_rate': 'packets_in_rate',
        'bytes_in_rate': 'bytes_in_rate',
        'current_sessions': 'current_sessions',
        'max_sessions': 'max_sessions',
        'packets_out_rate': 'packets_out_rate',
        'http_requests': 'http_requests',
        'bytes_in': 'bytes_in',
        'current_session_rate': 'current_session_rate',
        'dropped_sessions_by_lbrule_action': 'dropped_sessions_by_lbrule_action',
        'packets_in': 'packets_in'
    }

    def __init__(self, source_ip_persistence_entry_size=None, packets_out=None, dropped_packets_by_access_list=None, bytes_out_rate=None, total_sessions=None, http_request_rate=None, bytes_out=None, packets_in_rate=None, bytes_in_rate=None, current_sessions=None, max_sessions=None, packets_out_rate=None, http_requests=None, bytes_in=None, current_session_rate=None, dropped_sessions_by_lbrule_action=None, packets_in=None):  # noqa: E501
        """LbStatisticsCounter - a model defined in Swagger"""  # noqa: E501
        self._source_ip_persistence_entry_size = None
        self._packets_out = None
        self._dropped_packets_by_access_list = None
        self._bytes_out_rate = None
        self._total_sessions = None
        self._http_request_rate = None
        self._bytes_out = None
        self._packets_in_rate = None
        self._bytes_in_rate = None
        self._current_sessions = None
        self._max_sessions = None
        self._packets_out_rate = None
        self._http_requests = None
        self._bytes_in = None
        self._current_session_rate = None
        self._dropped_sessions_by_lbrule_action = None
        self._packets_in = None
        self.discriminator = None
        if source_ip_persistence_entry_size is not None:
            self.source_ip_persistence_entry_size = source_ip_persistence_entry_size
        if packets_out is not None:
            self.packets_out = packets_out
        if dropped_packets_by_access_list is not None:
            self.dropped_packets_by_access_list = dropped_packets_by_access_list
        if bytes_out_rate is not None:
            self.bytes_out_rate = bytes_out_rate
        self.total_sessions = total_sessions
        if http_request_rate is not None:
            self.http_request_rate = http_request_rate
        self.bytes_out = bytes_out
        if packets_in_rate is not None:
            self.packets_in_rate = packets_in_rate
        if bytes_in_rate is not None:
            self.bytes_in_rate = bytes_in_rate
        self.current_sessions = current_sessions
        self.max_sessions = max_sessions
        if packets_out_rate is not None:
            self.packets_out_rate = packets_out_rate
        if http_requests is not None:
            self.http_requests = http_requests
        self.bytes_in = bytes_in
        if current_session_rate is not None:
            self.current_session_rate = current_session_rate
        if dropped_sessions_by_lbrule_action is not None:
            self.dropped_sessions_by_lbrule_action = dropped_sessions_by_lbrule_action
        if packets_in is not None:
            self.packets_in = packets_in

    @property
    def source_ip_persistence_entry_size(self):
        """Gets the source_ip_persistence_entry_size of this LbStatisticsCounter.  # noqa: E501

        Number of source IP persistence entries  # noqa: E501

        :return: The source_ip_persistence_entry_size of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._source_ip_persistence_entry_size

    @source_ip_persistence_entry_size.setter
    def source_ip_persistence_entry_size(self, source_ip_persistence_entry_size):
        """Sets the source_ip_persistence_entry_size of this LbStatisticsCounter.

        Number of source IP persistence entries  # noqa: E501

        :param source_ip_persistence_entry_size: The source_ip_persistence_entry_size of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._source_ip_persistence_entry_size = source_ip_persistence_entry_size

    @property
    def packets_out(self):
        """Gets the packets_out of this LbStatisticsCounter.  # noqa: E501

        Number of packets out  # noqa: E501

        :return: The packets_out of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._packets_out

    @packets_out.setter
    def packets_out(self, packets_out):
        """Sets the packets_out of this LbStatisticsCounter.

        Number of packets out  # noqa: E501

        :param packets_out: The packets_out of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._packets_out = packets_out

    @property
    def dropped_packets_by_access_list(self):
        """Gets the dropped_packets_by_access_list of this LbStatisticsCounter.  # noqa: E501

        The total number of dropped TCP SYN or UDP packets by access list control.   # noqa: E501

        :return: The dropped_packets_by_access_list of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._dropped_packets_by_access_list

    @dropped_packets_by_access_list.setter
    def dropped_packets_by_access_list(self, dropped_packets_by_access_list):
        """Sets the dropped_packets_by_access_list of this LbStatisticsCounter.

        The total number of dropped TCP SYN or UDP packets by access list control.   # noqa: E501

        :param dropped_packets_by_access_list: The dropped_packets_by_access_list of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._dropped_packets_by_access_list = dropped_packets_by_access_list

    @property
    def bytes_out_rate(self):
        """Gets the bytes_out_rate of this LbStatisticsCounter.  # noqa: E501

        The average number of outbound bytes per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The bytes_out_rate of this LbStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._bytes_out_rate

    @bytes_out_rate.setter
    def bytes_out_rate(self, bytes_out_rate):
        """Sets the bytes_out_rate of this LbStatisticsCounter.

        The average number of outbound bytes per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param bytes_out_rate: The bytes_out_rate of this LbStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._bytes_out_rate = bytes_out_rate

    @property
    def total_sessions(self):
        """Gets the total_sessions of this LbStatisticsCounter.  # noqa: E501

        Number of total sessions  # noqa: E501

        :return: The total_sessions of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._total_sessions

    @total_sessions.setter
    def total_sessions(self, total_sessions):
        """Sets the total_sessions of this LbStatisticsCounter.

        Number of total sessions  # noqa: E501

        :param total_sessions: The total_sessions of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """
        if total_sessions is None:
            raise ValueError("Invalid value for `total_sessions`, must not be `None`")  # noqa: E501

        self._total_sessions = total_sessions

    @property
    def http_request_rate(self):
        """Gets the http_request_rate of this LbStatisticsCounter.  # noqa: E501

        The average number of http requests per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The http_request_rate of this LbStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._http_request_rate

    @http_request_rate.setter
    def http_request_rate(self, http_request_rate):
        """Sets the http_request_rate of this LbStatisticsCounter.

        The average number of http requests per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param http_request_rate: The http_request_rate of this LbStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._http_request_rate = http_request_rate

    @property
    def bytes_out(self):
        """Gets the bytes_out of this LbStatisticsCounter.  # noqa: E501

        Number of bytes out  # noqa: E501

        :return: The bytes_out of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._bytes_out

    @bytes_out.setter
    def bytes_out(self, bytes_out):
        """Sets the bytes_out of this LbStatisticsCounter.

        Number of bytes out  # noqa: E501

        :param bytes_out: The bytes_out of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """
        if bytes_out is None:
            raise ValueError("Invalid value for `bytes_out`, must not be `None`")  # noqa: E501

        self._bytes_out = bytes_out

    @property
    def packets_in_rate(self):
        """Gets the packets_in_rate of this LbStatisticsCounter.  # noqa: E501

        The average number of inbound packets per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The packets_in_rate of this LbStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._packets_in_rate

    @packets_in_rate.setter
    def packets_in_rate(self, packets_in_rate):
        """Sets the packets_in_rate of this LbStatisticsCounter.

        The average number of inbound packets per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param packets_in_rate: The packets_in_rate of this LbStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._packets_in_rate = packets_in_rate

    @property
    def bytes_in_rate(self):
        """Gets the bytes_in_rate of this LbStatisticsCounter.  # noqa: E501

        The average number of inbound bytes per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The bytes_in_rate of this LbStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._bytes_in_rate

    @bytes_in_rate.setter
    def bytes_in_rate(self, bytes_in_rate):
        """Sets the bytes_in_rate of this LbStatisticsCounter.

        The average number of inbound bytes per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param bytes_in_rate: The bytes_in_rate of this LbStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._bytes_in_rate = bytes_in_rate

    @property
    def current_sessions(self):
        """Gets the current_sessions of this LbStatisticsCounter.  # noqa: E501

        Number of current sessions  # noqa: E501

        :return: The current_sessions of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._current_sessions

    @current_sessions.setter
    def current_sessions(self, current_sessions):
        """Sets the current_sessions of this LbStatisticsCounter.

        Number of current sessions  # noqa: E501

        :param current_sessions: The current_sessions of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """
        if current_sessions is None:
            raise ValueError("Invalid value for `current_sessions`, must not be `None`")  # noqa: E501

        self._current_sessions = current_sessions

    @property
    def max_sessions(self):
        """Gets the max_sessions of this LbStatisticsCounter.  # noqa: E501

        Number of maximum sessions  # noqa: E501

        :return: The max_sessions of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._max_sessions

    @max_sessions.setter
    def max_sessions(self, max_sessions):
        """Sets the max_sessions of this LbStatisticsCounter.

        Number of maximum sessions  # noqa: E501

        :param max_sessions: The max_sessions of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """
        if max_sessions is None:
            raise ValueError("Invalid value for `max_sessions`, must not be `None`")  # noqa: E501

        self._max_sessions = max_sessions

    @property
    def packets_out_rate(self):
        """Gets the packets_out_rate of this LbStatisticsCounter.  # noqa: E501

        The average number of outbound packets per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The packets_out_rate of this LbStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._packets_out_rate

    @packets_out_rate.setter
    def packets_out_rate(self, packets_out_rate):
        """Sets the packets_out_rate of this LbStatisticsCounter.

        The average number of outbound packets per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param packets_out_rate: The packets_out_rate of this LbStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._packets_out_rate = packets_out_rate

    @property
    def http_requests(self):
        """Gets the http_requests of this LbStatisticsCounter.  # noqa: E501

        The total number of http requests.  # noqa: E501

        :return: The http_requests of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._http_requests

    @http_requests.setter
    def http_requests(self, http_requests):
        """Sets the http_requests of this LbStatisticsCounter.

        The total number of http requests.  # noqa: E501

        :param http_requests: The http_requests of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._http_requests = http_requests

    @property
    def bytes_in(self):
        """Gets the bytes_in of this LbStatisticsCounter.  # noqa: E501

        Number of bytes in  # noqa: E501

        :return: The bytes_in of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._bytes_in

    @bytes_in.setter
    def bytes_in(self, bytes_in):
        """Sets the bytes_in of this LbStatisticsCounter.

        Number of bytes in  # noqa: E501

        :param bytes_in: The bytes_in of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """
        if bytes_in is None:
            raise ValueError("Invalid value for `bytes_in`, must not be `None`")  # noqa: E501

        self._bytes_in = bytes_in

    @property
    def current_session_rate(self):
        """Gets the current_session_rate of this LbStatisticsCounter.  # noqa: E501

        The average number of current sessions per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :return: The current_session_rate of this LbStatisticsCounter.  # noqa: E501
        :rtype: float
        """
        return self._current_session_rate

    @current_session_rate.setter
    def current_session_rate(self, current_session_rate):
        """Sets the current_session_rate of this LbStatisticsCounter.

        The average number of current sessions per second, the number is averaged over the last 5 one-second intervals.   # noqa: E501

        :param current_session_rate: The current_session_rate of this LbStatisticsCounter.  # noqa: E501
        :type: float
        """

        self._current_session_rate = current_session_rate

    @property
    def dropped_sessions_by_lbrule_action(self):
        """Gets the dropped_sessions_by_lbrule_action of this LbStatisticsCounter.  # noqa: E501

        The total number of dropped sessions by LB rule action.   # noqa: E501

        :return: The dropped_sessions_by_lbrule_action of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._dropped_sessions_by_lbrule_action

    @dropped_sessions_by_lbrule_action.setter
    def dropped_sessions_by_lbrule_action(self, dropped_sessions_by_lbrule_action):
        """Sets the dropped_sessions_by_lbrule_action of this LbStatisticsCounter.

        The total number of dropped sessions by LB rule action.   # noqa: E501

        :param dropped_sessions_by_lbrule_action: The dropped_sessions_by_lbrule_action of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._dropped_sessions_by_lbrule_action = dropped_sessions_by_lbrule_action

    @property
    def packets_in(self):
        """Gets the packets_in of this LbStatisticsCounter.  # noqa: E501

        Number of packets in  # noqa: E501

        :return: The packets_in of this LbStatisticsCounter.  # noqa: E501
        :rtype: int
        """
        return self._packets_in

    @packets_in.setter
    def packets_in(self, packets_in):
        """Sets the packets_in of this LbStatisticsCounter.

        Number of packets in  # noqa: E501

        :param packets_in: The packets_in of this LbStatisticsCounter.  # noqa: E501
        :type: int
        """

        self._packets_in = packets_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbStatisticsCounter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbStatisticsCounter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
