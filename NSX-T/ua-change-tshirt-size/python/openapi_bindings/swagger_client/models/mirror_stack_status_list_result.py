# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.list_result import ListResult  # noqa: F401,E501

class MirrorStackStatusListResult(ListResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall_status': 'str',
        'results': 'list[TnNodeStackSpanStatus]'
    }
    if hasattr(ListResult, "swagger_types"):
        swagger_types.update(ListResult.swagger_types)

    attribute_map = {
        'overall_status': 'overall_status',
        'results': 'results'
    }
    if hasattr(ListResult, "attribute_map"):
        attribute_map.update(ListResult.attribute_map)

    def __init__(self, overall_status=None, results=None, *args, **kwargs):  # noqa: E501
        """MirrorStackStatusListResult - a model defined in Swagger"""  # noqa: E501
        self._overall_status = None
        self._results = None
        self.discriminator = None
        self.overall_status = overall_status
        self.results = results
        ListResult.__init__(self, *args, **kwargs)

    @property
    def overall_status(self):
        """Gets the overall_status of this MirrorStackStatusListResult.  # noqa: E501

        SUCCESS if all the TN's stack status are SUCCESS, FAILED if some of the TN's stack status are FAILED.   # noqa: E501

        :return: The overall_status of this MirrorStackStatusListResult.  # noqa: E501
        :rtype: str
        """
        return self._overall_status

    @overall_status.setter
    def overall_status(self, overall_status):
        """Sets the overall_status of this MirrorStackStatusListResult.

        SUCCESS if all the TN's stack status are SUCCESS, FAILED if some of the TN's stack status are FAILED.   # noqa: E501

        :param overall_status: The overall_status of this MirrorStackStatusListResult.  # noqa: E501
        :type: str
        """
        if overall_status is None:
            raise ValueError("Invalid value for `overall_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "SUCCESS", "FAILED"]  # noqa: E501
        if overall_status not in allowed_values:
            raise ValueError(
                "Invalid value for `overall_status` ({0}), must be one of {1}"  # noqa: E501
                .format(overall_status, allowed_values)
            )

        self._overall_status = overall_status

    @property
    def results(self):
        """Gets the results of this MirrorStackStatusListResult.  # noqa: E501

        List all TN nodes which spaned in remote L3 mirror session mirror stack health status detailed info, including mirror stack status, vmknic status, TN node ID, TN node name and last updated status timestamp.   # noqa: E501

        :return: The results of this MirrorStackStatusListResult.  # noqa: E501
        :rtype: list[TnNodeStackSpanStatus]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this MirrorStackStatusListResult.

        List all TN nodes which spaned in remote L3 mirror session mirror stack health status detailed info, including mirror stack status, vmknic status, TN node ID, TN node name and last updated status timestamp.   # noqa: E501

        :param results: The results of this MirrorStackStatusListResult.  # noqa: E501
        :type: list[TnNodeStackSpanStatus]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MirrorStackStatusListResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MirrorStackStatusListResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
