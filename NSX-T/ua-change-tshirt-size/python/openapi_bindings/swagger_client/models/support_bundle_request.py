# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupportBundleRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remote_file_server': 'SupportBundleRemoteFileServer',
        'nodes': 'list[str]',
        'content_filters': 'list[str]',
        'log_age_limit': 'int'
    }

    attribute_map = {
        'remote_file_server': 'remote_file_server',
        'nodes': 'nodes',
        'content_filters': 'content_filters',
        'log_age_limit': 'log_age_limit'
    }

    def __init__(self, remote_file_server=None, nodes=None, content_filters=None, log_age_limit=None):  # noqa: E501
        """SupportBundleRequest - a model defined in Swagger"""  # noqa: E501
        self._remote_file_server = None
        self._nodes = None
        self._content_filters = None
        self._log_age_limit = None
        self.discriminator = None
        if remote_file_server is not None:
            self.remote_file_server = remote_file_server
        self.nodes = nodes
        if content_filters is not None:
            self.content_filters = content_filters
        if log_age_limit is not None:
            self.log_age_limit = log_age_limit

    @property
    def remote_file_server(self):
        """Gets the remote_file_server of this SupportBundleRequest.  # noqa: E501


        :return: The remote_file_server of this SupportBundleRequest.  # noqa: E501
        :rtype: SupportBundleRemoteFileServer
        """
        return self._remote_file_server

    @remote_file_server.setter
    def remote_file_server(self, remote_file_server):
        """Sets the remote_file_server of this SupportBundleRequest.


        :param remote_file_server: The remote_file_server of this SupportBundleRequest.  # noqa: E501
        :type: SupportBundleRemoteFileServer
        """

        self._remote_file_server = remote_file_server

    @property
    def nodes(self):
        """Gets the nodes of this SupportBundleRequest.  # noqa: E501

        List of cluster/fabric node UUIDs processed in specified order  # noqa: E501

        :return: The nodes of this SupportBundleRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this SupportBundleRequest.

        List of cluster/fabric node UUIDs processed in specified order  # noqa: E501

        :param nodes: The nodes of this SupportBundleRequest.  # noqa: E501
        :type: list[str]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def content_filters(self):
        """Gets the content_filters of this SupportBundleRequest.  # noqa: E501

        Bundle should include content of specified type  # noqa: E501

        :return: The content_filters of this SupportBundleRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._content_filters

    @content_filters.setter
    def content_filters(self, content_filters):
        """Sets the content_filters of this SupportBundleRequest.

        Bundle should include content of specified type  # noqa: E501

        :param content_filters: The content_filters of this SupportBundleRequest.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ALL", "DEFAULT"]  # noqa: E501
        if not set(content_filters).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `content_filters` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(content_filters) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._content_filters = content_filters

    @property
    def log_age_limit(self):
        """Gets the log_age_limit of this SupportBundleRequest.  # noqa: E501

        Include log files with modified times not past the age limit in days  # noqa: E501

        :return: The log_age_limit of this SupportBundleRequest.  # noqa: E501
        :rtype: int
        """
        return self._log_age_limit

    @log_age_limit.setter
    def log_age_limit(self, log_age_limit):
        """Sets the log_age_limit of this SupportBundleRequest.

        Include log files with modified times not past the age limit in days  # noqa: E501

        :param log_age_limit: The log_age_limit of this SupportBundleRequest.  # noqa: E501
        :type: int
        """

        self._log_age_limit = log_age_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportBundleRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportBundleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
