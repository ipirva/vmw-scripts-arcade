# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationDataInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_type': 'str',
        'file_location': 'str',
        'is_present': 'bool'
    }

    attribute_map = {
        'file_type': 'file_type',
        'file_location': 'file_location',
        'is_present': 'is_present'
    }

    def __init__(self, file_type=None, file_location=None, is_present=None):  # noqa: E501
        """MigrationDataInfo - a model defined in Swagger"""  # noqa: E501
        self._file_type = None
        self._file_location = None
        self._is_present = None
        self.discriminator = None
        if file_type is not None:
            self.file_type = file_type
        if file_location is not None:
            self.file_location = file_location
        if is_present is not None:
            self.is_present = is_present

    @property
    def file_type(self):
        """Gets the file_type of this MigrationDataInfo.  # noqa: E501

        Type of the Migration data file for which info is requested.  # noqa: E501

        :return: The file_type of this MigrationDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this MigrationDataInfo.

        Type of the Migration data file for which info is requested.  # noqa: E501

        :param file_type: The file_type of this MigrationDataInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["VRA_INPUT"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"  # noqa: E501
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def file_location(self):
        """Gets the file_location of this MigrationDataInfo.  # noqa: E501

        Absolute location of the file.  # noqa: E501

        :return: The file_location of this MigrationDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this MigrationDataInfo.

        Absolute location of the file.  # noqa: E501

        :param file_location: The file_location of this MigrationDataInfo.  # noqa: E501
        :type: str
        """

        self._file_location = file_location

    @property
    def is_present(self):
        """Gets the is_present of this MigrationDataInfo.  # noqa: E501

        Indicates if the file is present.  # noqa: E501

        :return: The is_present of this MigrationDataInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_present

    @is_present.setter
    def is_present(self, is_present):
        """Sets the is_present of this MigrationDataInfo.

        Indicates if the file is present.  # noqa: E501

        :param is_present: The is_present of this MigrationDataInfo.  # noqa: E501
        :type: bool
        """

        self._is_present = is_present

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationDataInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationDataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
