# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RAConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'router_lifetime': 'int',
        'hop_limit': 'int',
        'ra_interval': 'int',
        'prefix_preferred_time': 'int',
        'prefix_lifetime': 'int'
    }

    attribute_map = {
        'router_lifetime': 'router_lifetime',
        'hop_limit': 'hop_limit',
        'ra_interval': 'ra_interval',
        'prefix_preferred_time': 'prefix_preferred_time',
        'prefix_lifetime': 'prefix_lifetime'
    }

    def __init__(self, router_lifetime=1800, hop_limit=64, ra_interval=600, prefix_preferred_time=604800, prefix_lifetime=2592000):  # noqa: E501
        """RAConfig - a model defined in Swagger"""  # noqa: E501
        self._router_lifetime = None
        self._hop_limit = None
        self._ra_interval = None
        self._prefix_preferred_time = None
        self._prefix_lifetime = None
        self.discriminator = None
        if router_lifetime is not None:
            self.router_lifetime = router_lifetime
        if hop_limit is not None:
            self.hop_limit = hop_limit
        if ra_interval is not None:
            self.ra_interval = ra_interval
        if prefix_preferred_time is not None:
            self.prefix_preferred_time = prefix_preferred_time
        if prefix_lifetime is not None:
            self.prefix_lifetime = prefix_lifetime

    @property
    def router_lifetime(self):
        """Gets the router_lifetime of this RAConfig.  # noqa: E501

        Router lifetime value in seconds. A value of 0 indicates the router is not a default router for the receiving end. Any other value in this field specifies the lifetime, in seconds, associated with this router as a default router.   # noqa: E501

        :return: The router_lifetime of this RAConfig.  # noqa: E501
        :rtype: int
        """
        return self._router_lifetime

    @router_lifetime.setter
    def router_lifetime(self, router_lifetime):
        """Sets the router_lifetime of this RAConfig.

        Router lifetime value in seconds. A value of 0 indicates the router is not a default router for the receiving end. Any other value in this field specifies the lifetime, in seconds, associated with this router as a default router.   # noqa: E501

        :param router_lifetime: The router_lifetime of this RAConfig.  # noqa: E501
        :type: int
        """

        self._router_lifetime = router_lifetime

    @property
    def hop_limit(self):
        """Gets the hop_limit of this RAConfig.  # noqa: E501

        The maximum number of hops through which packets can pass before being discarded.   # noqa: E501

        :return: The hop_limit of this RAConfig.  # noqa: E501
        :rtype: int
        """
        return self._hop_limit

    @hop_limit.setter
    def hop_limit(self, hop_limit):
        """Sets the hop_limit of this RAConfig.

        The maximum number of hops through which packets can pass before being discarded.   # noqa: E501

        :param hop_limit: The hop_limit of this RAConfig.  # noqa: E501
        :type: int
        """

        self._hop_limit = hop_limit

    @property
    def ra_interval(self):
        """Gets the ra_interval of this RAConfig.  # noqa: E501

        Interval between 2 Router advertisement in seconds.   # noqa: E501

        :return: The ra_interval of this RAConfig.  # noqa: E501
        :rtype: int
        """
        return self._ra_interval

    @ra_interval.setter
    def ra_interval(self, ra_interval):
        """Sets the ra_interval of this RAConfig.

        Interval between 2 Router advertisement in seconds.   # noqa: E501

        :param ra_interval: The ra_interval of this RAConfig.  # noqa: E501
        :type: int
        """

        self._ra_interval = ra_interval

    @property
    def prefix_preferred_time(self):
        """Gets the prefix_preferred_time of this RAConfig.  # noqa: E501

        The time interval in seconds, in which the prefix is advertised as preferred.   # noqa: E501

        :return: The prefix_preferred_time of this RAConfig.  # noqa: E501
        :rtype: int
        """
        return self._prefix_preferred_time

    @prefix_preferred_time.setter
    def prefix_preferred_time(self, prefix_preferred_time):
        """Sets the prefix_preferred_time of this RAConfig.

        The time interval in seconds, in which the prefix is advertised as preferred.   # noqa: E501

        :param prefix_preferred_time: The prefix_preferred_time of this RAConfig.  # noqa: E501
        :type: int
        """

        self._prefix_preferred_time = prefix_preferred_time

    @property
    def prefix_lifetime(self):
        """Gets the prefix_lifetime of this RAConfig.  # noqa: E501

        The time interval in seconds, in which the prefix is advertised as valid.   # noqa: E501

        :return: The prefix_lifetime of this RAConfig.  # noqa: E501
        :rtype: int
        """
        return self._prefix_lifetime

    @prefix_lifetime.setter
    def prefix_lifetime(self, prefix_lifetime):
        """Sets the prefix_lifetime of this RAConfig.

        The time interval in seconds, in which the prefix is advertised as valid.   # noqa: E501

        :param prefix_lifetime: The prefix_lifetime of this RAConfig.  # noqa: E501
        :type: int
        """

        self._prefix_lifetime = prefix_lifetime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RAConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RAConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
