# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2ForwarderRemoteMacs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_timestamp': 'int',
        'logical_switch_id': 'str',
        'remote_macs_per_site': 'list[L2ForwarderRemoteMacsPerSite]',
        'inter_site_forwarder_status': 'list[L2ForwarderStatusPerNode]'
    }

    attribute_map = {
        'last_update_timestamp': 'last_update_timestamp',
        'logical_switch_id': 'logical_switch_id',
        'remote_macs_per_site': 'remote_macs_per_site',
        'inter_site_forwarder_status': 'inter_site_forwarder_status'
    }

    def __init__(self, last_update_timestamp=None, logical_switch_id=None, remote_macs_per_site=None, inter_site_forwarder_status=None):  # noqa: E501
        """L2ForwarderRemoteMacs - a model defined in Swagger"""  # noqa: E501
        self._last_update_timestamp = None
        self._logical_switch_id = None
        self._remote_macs_per_site = None
        self._inter_site_forwarder_status = None
        self.discriminator = None
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if logical_switch_id is not None:
            self.logical_switch_id = logical_switch_id
        if remote_macs_per_site is not None:
            self.remote_macs_per_site = remote_macs_per_site
        if inter_site_forwarder_status is not None:
            self.inter_site_forwarder_status = inter_site_forwarder_status

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this L2ForwarderRemoteMacs.  # noqa: E501

        Timestamp when the l2 forwarder remote mac addresses was last updated.   # noqa: E501

        :return: The last_update_timestamp of this L2ForwarderRemoteMacs.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this L2ForwarderRemoteMacs.

        Timestamp when the l2 forwarder remote mac addresses was last updated.   # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this L2ForwarderRemoteMacs.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def logical_switch_id(self):
        """Gets the logical_switch_id of this L2ForwarderRemoteMacs.  # noqa: E501

        Logical switch id on which the L2 forwarder is created.   # noqa: E501

        :return: The logical_switch_id of this L2ForwarderRemoteMacs.  # noqa: E501
        :rtype: str
        """
        return self._logical_switch_id

    @logical_switch_id.setter
    def logical_switch_id(self, logical_switch_id):
        """Sets the logical_switch_id of this L2ForwarderRemoteMacs.

        Logical switch id on which the L2 forwarder is created.   # noqa: E501

        :param logical_switch_id: The logical_switch_id of this L2ForwarderRemoteMacs.  # noqa: E501
        :type: str
        """

        self._logical_switch_id = logical_switch_id

    @property
    def remote_macs_per_site(self):
        """Gets the remote_macs_per_site of this L2ForwarderRemoteMacs.  # noqa: E501

        L2 forwarder remote mac addresses per site for logical switch.   # noqa: E501

        :return: The remote_macs_per_site of this L2ForwarderRemoteMacs.  # noqa: E501
        :rtype: list[L2ForwarderRemoteMacsPerSite]
        """
        return self._remote_macs_per_site

    @remote_macs_per_site.setter
    def remote_macs_per_site(self, remote_macs_per_site):
        """Sets the remote_macs_per_site of this L2ForwarderRemoteMacs.

        L2 forwarder remote mac addresses per site for logical switch.   # noqa: E501

        :param remote_macs_per_site: The remote_macs_per_site of this L2ForwarderRemoteMacs.  # noqa: E501
        :type: list[L2ForwarderRemoteMacsPerSite]
        """

        self._remote_macs_per_site = remote_macs_per_site

    @property
    def inter_site_forwarder_status(self):
        """Gets the inter_site_forwarder_status of this L2ForwarderRemoteMacs.  # noqa: E501

        Inter-site forwarder status per node.  # noqa: E501

        :return: The inter_site_forwarder_status of this L2ForwarderRemoteMacs.  # noqa: E501
        :rtype: list[L2ForwarderStatusPerNode]
        """
        return self._inter_site_forwarder_status

    @inter_site_forwarder_status.setter
    def inter_site_forwarder_status(self, inter_site_forwarder_status):
        """Sets the inter_site_forwarder_status of this L2ForwarderRemoteMacs.

        Inter-site forwarder status per node.  # noqa: E501

        :param inter_site_forwarder_status: The inter_site_forwarder_status of this L2ForwarderRemoteMacs.  # noqa: E501
        :type: list[L2ForwarderStatusPerNode]
        """

        self._inter_site_forwarder_status = inter_site_forwarder_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2ForwarderRemoteMacs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2ForwarderRemoteMacs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
