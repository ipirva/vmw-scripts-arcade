# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_ssl_profile import LbSslProfile  # noqa: F401,E501

class LbServerSslProfile(LbSslProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_cache_enabled': 'bool',
        'is_fips': 'bool',
        'cipher_group_label': 'str',
        'is_secure': 'bool',
        'ciphers': 'list[str]',
        'protocols': 'list[str]'
    }
    if hasattr(LbSslProfile, "swagger_types"):
        swagger_types.update(LbSslProfile.swagger_types)

    attribute_map = {
        'session_cache_enabled': 'session_cache_enabled',
        'is_fips': 'is_fips',
        'cipher_group_label': 'cipher_group_label',
        'is_secure': 'is_secure',
        'ciphers': 'ciphers',
        'protocols': 'protocols'
    }
    if hasattr(LbSslProfile, "attribute_map"):
        attribute_map.update(LbSslProfile.attribute_map)

    def __init__(self, session_cache_enabled=True, is_fips=None, cipher_group_label=None, is_secure=None, ciphers=None, protocols=None, *args, **kwargs):  # noqa: E501
        """LbServerSslProfile - a model defined in Swagger"""  # noqa: E501
        self._session_cache_enabled = None
        self._is_fips = None
        self._cipher_group_label = None
        self._is_secure = None
        self._ciphers = None
        self._protocols = None
        self.discriminator = None
        if session_cache_enabled is not None:
            self.session_cache_enabled = session_cache_enabled
        if is_fips is not None:
            self.is_fips = is_fips
        if cipher_group_label is not None:
            self.cipher_group_label = cipher_group_label
        if is_secure is not None:
            self.is_secure = is_secure
        if ciphers is not None:
            self.ciphers = ciphers
        if protocols is not None:
            self.protocols = protocols
        LbSslProfile.__init__(self, *args, **kwargs)

    @property
    def session_cache_enabled(self):
        """Gets the session_cache_enabled of this LbServerSslProfile.  # noqa: E501

        SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.   # noqa: E501

        :return: The session_cache_enabled of this LbServerSslProfile.  # noqa: E501
        :rtype: bool
        """
        return self._session_cache_enabled

    @session_cache_enabled.setter
    def session_cache_enabled(self, session_cache_enabled):
        """Sets the session_cache_enabled of this LbServerSslProfile.

        SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.   # noqa: E501

        :param session_cache_enabled: The session_cache_enabled of this LbServerSslProfile.  # noqa: E501
        :type: bool
        """

        self._session_cache_enabled = session_cache_enabled

    @property
    def is_fips(self):
        """Gets the is_fips of this LbServerSslProfile.  # noqa: E501

        This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant.   # noqa: E501

        :return: The is_fips of this LbServerSslProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_fips

    @is_fips.setter
    def is_fips(self, is_fips):
        """Sets the is_fips of this LbServerSslProfile.

        This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant.   # noqa: E501

        :param is_fips: The is_fips of this LbServerSslProfile.  # noqa: E501
        :type: bool
        """

        self._is_fips = is_fips

    @property
    def cipher_group_label(self):
        """Gets the cipher_group_label of this LbServerSslProfile.  # noqa: E501

        It is a label of cipher group which is mostly consumed by GUI.   # noqa: E501

        :return: The cipher_group_label of this LbServerSslProfile.  # noqa: E501
        :rtype: str
        """
        return self._cipher_group_label

    @cipher_group_label.setter
    def cipher_group_label(self, cipher_group_label):
        """Sets the cipher_group_label of this LbServerSslProfile.

        It is a label of cipher group which is mostly consumed by GUI.   # noqa: E501

        :param cipher_group_label: The cipher_group_label of this LbServerSslProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["BALANCED", "HIGH_SECURITY", "HIGH_COMPATIBILITY", "CUSTOM"]  # noqa: E501
        if cipher_group_label not in allowed_values:
            raise ValueError(
                "Invalid value for `cipher_group_label` ({0}), must be one of {1}"  # noqa: E501
                .format(cipher_group_label, allowed_values)
            )

        self._cipher_group_label = cipher_group_label

    @property
    def is_secure(self):
        """Gets the is_secure of this LbServerSslProfile.  # noqa: E501

        This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.   # noqa: E501

        :return: The is_secure of this LbServerSslProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_secure

    @is_secure.setter
    def is_secure(self, is_secure):
        """Sets the is_secure of this LbServerSslProfile.

        This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.   # noqa: E501

        :param is_secure: The is_secure of this LbServerSslProfile.  # noqa: E501
        :type: bool
        """

        self._is_secure = is_secure

    @property
    def ciphers(self):
        """Gets the ciphers of this LbServerSslProfile.  # noqa: E501

        supported SSL cipher list to client side  # noqa: E501

        :return: The ciphers of this LbServerSslProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._ciphers

    @ciphers.setter
    def ciphers(self, ciphers):
        """Sets the ciphers of this LbServerSslProfile.

        supported SSL cipher list to client side  # noqa: E501

        :param ciphers: The ciphers of this LbServerSslProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_3DES_EDE_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "TLS_RSA_WITH_AES_128_CBC_SHA256", "TLS_RSA_WITH_AES_128_GCM_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384"]  # noqa: E501
        if not set(ciphers).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `ciphers` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(ciphers) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._ciphers = ciphers

    @property
    def protocols(self):
        """Gets the protocols of this LbServerSslProfile.  # noqa: E501

        SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.   # noqa: E501

        :return: The protocols of this LbServerSslProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this LbServerSslProfile.

        SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.   # noqa: E501

        :param protocols: The protocols of this LbServerSslProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SSL_V2", "SSL_V3", "TLS_V1", "TLS_V1_1", "TLS_V1_2"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbServerSslProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbServerSslProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
