# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class NSProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nsprofile_attribute': 'list[NSAttributes]',
        'is_valid': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'nsprofile_attribute': 'nsprofile_attribute',
        'is_valid': 'is_valid'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, nsprofile_attribute=None, is_valid=True, *args, **kwargs):  # noqa: E501
        """NSProfile - a model defined in Swagger"""  # noqa: E501
        self._nsprofile_attribute = None
        self._is_valid = None
        self.discriminator = None
        self.nsprofile_attribute = nsprofile_attribute
        if is_valid is not None:
            self.is_valid = is_valid
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def nsprofile_attribute(self):
        """Gets the nsprofile_attribute of this NSProfile.  # noqa: E501

        Reference to the encapsulating object of attributes/sub-attributes for NSProfile.   # noqa: E501

        :return: The nsprofile_attribute of this NSProfile.  # noqa: E501
        :rtype: list[NSAttributes]
        """
        return self._nsprofile_attribute

    @nsprofile_attribute.setter
    def nsprofile_attribute(self, nsprofile_attribute):
        """Sets the nsprofile_attribute of this NSProfile.

        Reference to the encapsulating object of attributes/sub-attributes for NSProfile.   # noqa: E501

        :param nsprofile_attribute: The nsprofile_attribute of this NSProfile.  # noqa: E501
        :type: list[NSAttributes]
        """
        if nsprofile_attribute is None:
            raise ValueError("Invalid value for `nsprofile_attribute`, must not be `None`")  # noqa: E501

        self._nsprofile_attribute = nsprofile_attribute

    @property
    def is_valid(self):
        """Gets the is_valid of this NSProfile.  # noqa: E501

        If set to false, the NSProfile has some app ids which are unsupported. Those were allowed to be added in previous releases but in testing in later phases found that those app ids could not be detected.   # noqa: E501

        :return: The is_valid of this NSProfile.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this NSProfile.

        If set to false, the NSProfile has some app ids which are unsupported. Those were allowed to be added in previous releases but in testing in later phases found that those app ids could not be detected.   # noqa: E501

        :param is_valid: The is_valid of this NSProfile.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NSProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NSProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
