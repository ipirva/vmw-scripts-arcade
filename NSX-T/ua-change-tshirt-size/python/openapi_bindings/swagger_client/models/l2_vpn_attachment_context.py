# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.attachment_context import AttachmentContext  # noqa: F401,E501

class L2VpnAttachmentContext(AttachmentContext):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local_egress_ip': 'list[str]',
        'tunnel_id': 'int'
    }
    if hasattr(AttachmentContext, "swagger_types"):
        swagger_types.update(AttachmentContext.swagger_types)

    attribute_map = {
        'local_egress_ip': 'local_egress_ip',
        'tunnel_id': 'tunnel_id'
    }
    if hasattr(AttachmentContext, "attribute_map"):
        attribute_map.update(AttachmentContext.attribute_map)

    def __init__(self, local_egress_ip=None, tunnel_id=None, *args, **kwargs):  # noqa: E501
        """L2VpnAttachmentContext - a model defined in Swagger"""  # noqa: E501
        self._local_egress_ip = None
        self._tunnel_id = None
        self.discriminator = None
        if local_egress_ip is not None:
            self.local_egress_ip = local_egress_ip
        self.tunnel_id = tunnel_id
        AttachmentContext.__init__(self, *args, **kwargs)

    @property
    def local_egress_ip(self):
        """Gets the local_egress_ip of this L2VpnAttachmentContext.  # noqa: E501

        List of local egress IP addresses, used for local egress optimization.   # noqa: E501

        :return: The local_egress_ip of this L2VpnAttachmentContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_egress_ip

    @local_egress_ip.setter
    def local_egress_ip(self, local_egress_ip):
        """Sets the local_egress_ip of this L2VpnAttachmentContext.

        List of local egress IP addresses, used for local egress optimization.   # noqa: E501

        :param local_egress_ip: The local_egress_ip of this L2VpnAttachmentContext.  # noqa: E501
        :type: list[str]
        """

        self._local_egress_ip = local_egress_ip

    @property
    def tunnel_id(self):
        """Gets the tunnel_id of this L2VpnAttachmentContext.  # noqa: E501

        Tunnel Id to uniquely identify the extension.  # noqa: E501

        :return: The tunnel_id of this L2VpnAttachmentContext.  # noqa: E501
        :rtype: int
        """
        return self._tunnel_id

    @tunnel_id.setter
    def tunnel_id(self, tunnel_id):
        """Sets the tunnel_id of this L2VpnAttachmentContext.

        Tunnel Id to uniquely identify the extension.  # noqa: E501

        :param tunnel_id: The tunnel_id of this L2VpnAttachmentContext.  # noqa: E501
        :type: int
        """
        if tunnel_id is None:
            raise ValueError("Invalid value for `tunnel_id`, must not be `None`")  # noqa: E501

        self._tunnel_id = tunnel_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VpnAttachmentContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VpnAttachmentContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
