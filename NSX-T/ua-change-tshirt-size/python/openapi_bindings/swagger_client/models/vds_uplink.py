# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VdsUplink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vds_uplink_name': 'str',
        'uplink_name': 'str',
        'vds_lag_name': 'str'
    }

    attribute_map = {
        'vds_uplink_name': 'vds_uplink_name',
        'uplink_name': 'uplink_name',
        'vds_lag_name': 'vds_lag_name'
    }

    def __init__(self, vds_uplink_name=None, uplink_name=None, vds_lag_name=None):  # noqa: E501
        """VdsUplink - a model defined in Swagger"""  # noqa: E501
        self._vds_uplink_name = None
        self._uplink_name = None
        self._vds_lag_name = None
        self.discriminator = None
        if vds_uplink_name is not None:
            self.vds_uplink_name = vds_uplink_name
        self.uplink_name = uplink_name
        if vds_lag_name is not None:
            self.vds_lag_name = vds_lag_name

    @property
    def vds_uplink_name(self):
        """Gets the vds_uplink_name of this VdsUplink.  # noqa: E501

        Uplink name of VDS that is connected to Physical NIC on a host from vSphere.  # noqa: E501

        :return: The vds_uplink_name of this VdsUplink.  # noqa: E501
        :rtype: str
        """
        return self._vds_uplink_name

    @vds_uplink_name.setter
    def vds_uplink_name(self, vds_uplink_name):
        """Sets the vds_uplink_name of this VdsUplink.

        Uplink name of VDS that is connected to Physical NIC on a host from vSphere.  # noqa: E501

        :param vds_uplink_name: The vds_uplink_name of this VdsUplink.  # noqa: E501
        :type: str
        """

        self._vds_uplink_name = vds_uplink_name

    @property
    def uplink_name(self):
        """Gets the uplink_name of this VdsUplink.  # noqa: E501

        This name is from UplinkHostSwitch profile that is associated with the HostSwitch specified in TransportNode or TransportNodeProfile configuration. This name will be used as an alias to either VDS uplink or lag in other configuration.  # noqa: E501

        :return: The uplink_name of this VdsUplink.  # noqa: E501
        :rtype: str
        """
        return self._uplink_name

    @uplink_name.setter
    def uplink_name(self, uplink_name):
        """Sets the uplink_name of this VdsUplink.

        This name is from UplinkHostSwitch profile that is associated with the HostSwitch specified in TransportNode or TransportNodeProfile configuration. This name will be used as an alias to either VDS uplink or lag in other configuration.  # noqa: E501

        :param uplink_name: The uplink_name of this VdsUplink.  # noqa: E501
        :type: str
        """
        if uplink_name is None:
            raise ValueError("Invalid value for `uplink_name`, must not be `None`")  # noqa: E501

        self._uplink_name = uplink_name

    @property
    def vds_lag_name(self):
        """Gets the vds_lag_name of this VdsUplink.  # noqa: E501

        LAG name that is connected to Physical NIC on a host from vSphere.  # noqa: E501

        :return: The vds_lag_name of this VdsUplink.  # noqa: E501
        :rtype: str
        """
        return self._vds_lag_name

    @vds_lag_name.setter
    def vds_lag_name(self, vds_lag_name):
        """Sets the vds_lag_name of this VdsUplink.

        LAG name that is connected to Physical NIC on a host from vSphere.  # noqa: E501

        :param vds_lag_name: The vds_lag_name of this VdsUplink.  # noqa: E501
        :type: str
        """

        self._vds_lag_name = vds_lag_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VdsUplink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VdsUplink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
