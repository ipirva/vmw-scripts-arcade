# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class PBRStats(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'packet_count': 'int',
        'byte_count': 'int',
        'rule_id': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'packet_count': 'packet_count',
        'byte_count': 'byte_count',
        'rule_id': 'rule_id'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, packet_count=None, byte_count=None, rule_id=None, *args, **kwargs):  # noqa: E501
        """PBRStats - a model defined in Swagger"""  # noqa: E501
        self._packet_count = None
        self._byte_count = None
        self._rule_id = None
        self.discriminator = None
        if packet_count is not None:
            self.packet_count = packet_count
        if byte_count is not None:
            self.byte_count = byte_count
        if rule_id is not None:
            self.rule_id = rule_id
        Resource.__init__(self, *args, **kwargs)

    @property
    def packet_count(self):
        """Gets the packet_count of this PBRStats.  # noqa: E501

        Aggregated number of packets processed by the rule.  # noqa: E501

        :return: The packet_count of this PBRStats.  # noqa: E501
        :rtype: int
        """
        return self._packet_count

    @packet_count.setter
    def packet_count(self, packet_count):
        """Sets the packet_count of this PBRStats.

        Aggregated number of packets processed by the rule.  # noqa: E501

        :param packet_count: The packet_count of this PBRStats.  # noqa: E501
        :type: int
        """

        self._packet_count = packet_count

    @property
    def byte_count(self):
        """Gets the byte_count of this PBRStats.  # noqa: E501

        Aggregated number of bytes processed by the rule.  # noqa: E501

        :return: The byte_count of this PBRStats.  # noqa: E501
        :rtype: int
        """
        return self._byte_count

    @byte_count.setter
    def byte_count(self, byte_count):
        """Sets the byte_count of this PBRStats.

        Aggregated number of bytes processed by the rule.  # noqa: E501

        :param byte_count: The byte_count of this PBRStats.  # noqa: E501
        :type: int
        """

        self._byte_count = byte_count

    @property
    def rule_id(self):
        """Gets the rule_id of this PBRStats.  # noqa: E501

        Rule Identifier of the PBR rule. This is a globally unique number.  # noqa: E501

        :return: The rule_id of this PBRStats.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this PBRStats.

        Rule Identifier of the PBR rule. This is a globally unique number.  # noqa: E501

        :param rule_id: The rule_id of this PBRStats.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PBRStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PBRStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
