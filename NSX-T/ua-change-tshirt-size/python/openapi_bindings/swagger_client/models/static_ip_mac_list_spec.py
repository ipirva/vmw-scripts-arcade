# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.ip_assignment_spec import IpAssignmentSpec  # noqa: F401,E501

class StaticIpMacListSpec(IpAssignmentSpec):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnet_mask': 'str',
        'ip_mac_list': 'list[IpMacPair]',
        'default_gateway': 'str'
    }
    if hasattr(IpAssignmentSpec, "swagger_types"):
        swagger_types.update(IpAssignmentSpec.swagger_types)

    attribute_map = {
        'subnet_mask': 'subnet_mask',
        'ip_mac_list': 'ip_mac_list',
        'default_gateway': 'default_gateway'
    }
    if hasattr(IpAssignmentSpec, "attribute_map"):
        attribute_map.update(IpAssignmentSpec.attribute_map)

    def __init__(self, subnet_mask=None, ip_mac_list=None, default_gateway=None, *args, **kwargs):  # noqa: E501
        """StaticIpMacListSpec - a model defined in Swagger"""  # noqa: E501
        self._subnet_mask = None
        self._ip_mac_list = None
        self._default_gateway = None
        self.discriminator = None
        self.subnet_mask = subnet_mask
        self.ip_mac_list = ip_mac_list
        self.default_gateway = default_gateway
        IpAssignmentSpec.__init__(self, *args, **kwargs)

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this StaticIpMacListSpec.  # noqa: E501

        Subnet mask  # noqa: E501

        :return: The subnet_mask of this StaticIpMacListSpec.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this StaticIpMacListSpec.

        Subnet mask  # noqa: E501

        :param subnet_mask: The subnet_mask of this StaticIpMacListSpec.  # noqa: E501
        :type: str
        """
        if subnet_mask is None:
            raise ValueError("Invalid value for `subnet_mask`, must not be `None`")  # noqa: E501

        self._subnet_mask = subnet_mask

    @property
    def ip_mac_list(self):
        """Gets the ip_mac_list of this StaticIpMacListSpec.  # noqa: E501

        List of IPs and MACs for transport node host switch virtual tunnel endpoints  # noqa: E501

        :return: The ip_mac_list of this StaticIpMacListSpec.  # noqa: E501
        :rtype: list[IpMacPair]
        """
        return self._ip_mac_list

    @ip_mac_list.setter
    def ip_mac_list(self, ip_mac_list):
        """Sets the ip_mac_list of this StaticIpMacListSpec.

        List of IPs and MACs for transport node host switch virtual tunnel endpoints  # noqa: E501

        :param ip_mac_list: The ip_mac_list of this StaticIpMacListSpec.  # noqa: E501
        :type: list[IpMacPair]
        """
        if ip_mac_list is None:
            raise ValueError("Invalid value for `ip_mac_list`, must not be `None`")  # noqa: E501

        self._ip_mac_list = ip_mac_list

    @property
    def default_gateway(self):
        """Gets the default_gateway of this StaticIpMacListSpec.  # noqa: E501

        Gateway IP  # noqa: E501

        :return: The default_gateway of this StaticIpMacListSpec.  # noqa: E501
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this StaticIpMacListSpec.

        Gateway IP  # noqa: E501

        :param default_gateway: The default_gateway of this StaticIpMacListSpec.  # noqa: E501
        :type: str
        """
        if default_gateway is None:
            raise ValueError("Invalid value for `default_gateway`, must not be `None`")  # noqa: E501

        self._default_gateway = default_gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StaticIpMacListSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaticIpMacListSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
