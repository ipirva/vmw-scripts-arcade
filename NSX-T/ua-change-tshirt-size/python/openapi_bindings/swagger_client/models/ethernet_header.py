# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EthernetHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dst_mac': 'str',
        'eth_type': 'int',
        'src_mac': 'str'
    }

    attribute_map = {
        'dst_mac': 'dst_mac',
        'eth_type': 'eth_type',
        'src_mac': 'src_mac'
    }

    def __init__(self, dst_mac=None, eth_type=2048, src_mac=None):  # noqa: E501
        """EthernetHeader - a model defined in Swagger"""  # noqa: E501
        self._dst_mac = None
        self._eth_type = None
        self._src_mac = None
        self.discriminator = None
        if dst_mac is not None:
            self.dst_mac = dst_mac
        if eth_type is not None:
            self.eth_type = eth_type
        if src_mac is not None:
            self.src_mac = src_mac

    @property
    def dst_mac(self):
        """Gets the dst_mac of this EthernetHeader.  # noqa: E501

        The destination MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.   # noqa: E501

        :return: The dst_mac of this EthernetHeader.  # noqa: E501
        :rtype: str
        """
        return self._dst_mac

    @dst_mac.setter
    def dst_mac(self, dst_mac):
        """Sets the dst_mac of this EthernetHeader.

        The destination MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.   # noqa: E501

        :param dst_mac: The dst_mac of this EthernetHeader.  # noqa: E501
        :type: str
        """

        self._dst_mac = dst_mac

    @property
    def eth_type(self):
        """Gets the eth_type of this EthernetHeader.  # noqa: E501

        This field defaults to IPv4.  # noqa: E501

        :return: The eth_type of this EthernetHeader.  # noqa: E501
        :rtype: int
        """
        return self._eth_type

    @eth_type.setter
    def eth_type(self, eth_type):
        """Sets the eth_type of this EthernetHeader.

        This field defaults to IPv4.  # noqa: E501

        :param eth_type: The eth_type of this EthernetHeader.  # noqa: E501
        :type: int
        """

        self._eth_type = eth_type

    @property
    def src_mac(self):
        """Gets the src_mac of this EthernetHeader.  # noqa: E501

        The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.   # noqa: E501

        :return: The src_mac of this EthernetHeader.  # noqa: E501
        :rtype: str
        """
        return self._src_mac

    @src_mac.setter
    def src_mac(self, src_mac):
        """Sets the src_mac of this EthernetHeader.

        The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.   # noqa: E501

        :param src_mac: The src_mac of this EthernetHeader.  # noqa: E501
        :type: str
        """

        self._src_mac = src_mac

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EthernetHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EthernetHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
