# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.ns_service_element import NSServiceElement  # noqa: F401,E501

class L4PortSetNSService(NSServiceElement):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination_ports': 'list[str]',
        'l4_protocol': 'str',
        'source_ports': 'list[str]'
    }
    if hasattr(NSServiceElement, "swagger_types"):
        swagger_types.update(NSServiceElement.swagger_types)

    attribute_map = {
        'destination_ports': 'destination_ports',
        'l4_protocol': 'l4_protocol',
        'source_ports': 'source_ports'
    }
    if hasattr(NSServiceElement, "attribute_map"):
        attribute_map.update(NSServiceElement.attribute_map)

    def __init__(self, destination_ports=None, l4_protocol=None, source_ports=None, *args, **kwargs):  # noqa: E501
        """L4PortSetNSService - a model defined in Swagger"""  # noqa: E501
        self._destination_ports = None
        self._l4_protocol = None
        self._source_ports = None
        self.discriminator = None
        if destination_ports is not None:
            self.destination_ports = destination_ports
        self.l4_protocol = l4_protocol
        if source_ports is not None:
            self.source_ports = source_ports
        NSServiceElement.__init__(self, *args, **kwargs)

    @property
    def destination_ports(self):
        """Gets the destination_ports of this L4PortSetNSService.  # noqa: E501

        Number of values should not exceed 15, ranges count as 2 values.   # noqa: E501

        :return: The destination_ports of this L4PortSetNSService.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_ports

    @destination_ports.setter
    def destination_ports(self, destination_ports):
        """Sets the destination_ports of this L4PortSetNSService.

        Number of values should not exceed 15, ranges count as 2 values.   # noqa: E501

        :param destination_ports: The destination_ports of this L4PortSetNSService.  # noqa: E501
        :type: list[str]
        """

        self._destination_ports = destination_ports

    @property
    def l4_protocol(self):
        """Gets the l4_protocol of this L4PortSetNSService.  # noqa: E501


        :return: The l4_protocol of this L4PortSetNSService.  # noqa: E501
        :rtype: str
        """
        return self._l4_protocol

    @l4_protocol.setter
    def l4_protocol(self, l4_protocol):
        """Sets the l4_protocol of this L4PortSetNSService.


        :param l4_protocol: The l4_protocol of this L4PortSetNSService.  # noqa: E501
        :type: str
        """
        if l4_protocol is None:
            raise ValueError("Invalid value for `l4_protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if l4_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `l4_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(l4_protocol, allowed_values)
            )

        self._l4_protocol = l4_protocol

    @property
    def source_ports(self):
        """Gets the source_ports of this L4PortSetNSService.  # noqa: E501

        Number of values should not exceed 15, ranges count as 2 values.   # noqa: E501

        :return: The source_ports of this L4PortSetNSService.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_ports

    @source_ports.setter
    def source_ports(self, source_ports):
        """Sets the source_ports of this L4PortSetNSService.

        Number of values should not exceed 15, ranges count as 2 values.   # noqa: E501

        :param source_ports: The source_ports of this L4PortSetNSService.  # noqa: E501
        :type: list[str]
        """

        self._source_ports = source_ports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L4PortSetNSService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L4PortSetNSService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
