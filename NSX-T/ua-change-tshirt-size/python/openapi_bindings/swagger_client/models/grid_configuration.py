# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.widget_configuration import WidgetConfiguration  # noqa: F401,E501

class GridConfiguration(WidgetConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_size': 'int',
        'row_list_fields': 'list[RowListField]',
        'columns': 'list[ColumnItem]'
    }
    if hasattr(WidgetConfiguration, "swagger_types"):
        swagger_types.update(WidgetConfiguration.swagger_types)

    attribute_map = {
        'page_size': 'page_size',
        'row_list_fields': 'row_list_fields',
        'columns': 'columns'
    }
    if hasattr(WidgetConfiguration, "attribute_map"):
        attribute_map.update(WidgetConfiguration.attribute_map)

    def __init__(self, page_size=30, row_list_fields=None, columns=None, *args, **kwargs):  # noqa: E501
        """GridConfiguration - a model defined in Swagger"""  # noqa: E501
        self._page_size = None
        self._row_list_fields = None
        self._columns = None
        self.discriminator = None
        if page_size is not None:
            self.page_size = page_size
        self.row_list_fields = row_list_fields
        self.columns = columns
        WidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def page_size(self):
        """Gets the page_size of this GridConfiguration.  # noqa: E501

        Number of records per page. page_size will be effective only when the urls provided in the datasource support paging.  # noqa: E501

        :return: The page_size of this GridConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this GridConfiguration.

        Number of records per page. page_size will be effective only when the urls provided in the datasource support paging.  # noqa: E501

        :param page_size: The page_size of this GridConfiguration.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def row_list_fields(self):
        """Gets the row_list_fields of this GridConfiguration.  # noqa: E501

        Rows of grid or table are formed from the list of objects returned by a row list field.  # noqa: E501

        :return: The row_list_fields of this GridConfiguration.  # noqa: E501
        :rtype: list[RowListField]
        """
        return self._row_list_fields

    @row_list_fields.setter
    def row_list_fields(self, row_list_fields):
        """Sets the row_list_fields of this GridConfiguration.

        Rows of grid or table are formed from the list of objects returned by a row list field.  # noqa: E501

        :param row_list_fields: The row_list_fields of this GridConfiguration.  # noqa: E501
        :type: list[RowListField]
        """
        if row_list_fields is None:
            raise ValueError("Invalid value for `row_list_fields`, must not be `None`")  # noqa: E501

        self._row_list_fields = row_list_fields

    @property
    def columns(self):
        """Gets the columns of this GridConfiguration.  # noqa: E501

        Array of columns of a Grid widget  # noqa: E501

        :return: The columns of this GridConfiguration.  # noqa: E501
        :rtype: list[ColumnItem]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this GridConfiguration.

        Array of columns of a Grid widget  # noqa: E501

        :param columns: The columns of this GridConfiguration.  # noqa: E501
        :type: list[ColumnItem]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GridConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GridConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
