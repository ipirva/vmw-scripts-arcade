# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class LbService(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_log_enabled': 'bool',
        'attachment': 'ResourceReference',
        'error_log_level': 'str',
        'virtual_server_ids': 'list[str]',
        'relax_scale_validation': 'bool',
        'enabled': 'bool',
        'size': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'access_log_enabled': 'access_log_enabled',
        'attachment': 'attachment',
        'error_log_level': 'error_log_level',
        'virtual_server_ids': 'virtual_server_ids',
        'relax_scale_validation': 'relax_scale_validation',
        'enabled': 'enabled',
        'size': 'size'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, access_log_enabled=None, attachment=None, error_log_level='INFO', virtual_server_ids=None, relax_scale_validation=False, enabled=True, size='SMALL', *args, **kwargs):  # noqa: E501
        """LbService - a model defined in Swagger"""  # noqa: E501
        self._access_log_enabled = None
        self._attachment = None
        self._error_log_level = None
        self._virtual_server_ids = None
        self._relax_scale_validation = None
        self._enabled = None
        self._size = None
        self.discriminator = None
        if access_log_enabled is not None:
            self.access_log_enabled = access_log_enabled
        if attachment is not None:
            self.attachment = attachment
        if error_log_level is not None:
            self.error_log_level = error_log_level
        if virtual_server_ids is not None:
            self.virtual_server_ids = virtual_server_ids
        if relax_scale_validation is not None:
            self.relax_scale_validation = relax_scale_validation
        if enabled is not None:
            self.enabled = enabled
        if size is not None:
            self.size = size
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def access_log_enabled(self):
        """Gets the access_log_enabled of this LbService.  # noqa: E501

        Whether access log is enabled  # noqa: E501

        :return: The access_log_enabled of this LbService.  # noqa: E501
        :rtype: bool
        """
        return self._access_log_enabled

    @access_log_enabled.setter
    def access_log_enabled(self, access_log_enabled):
        """Sets the access_log_enabled of this LbService.

        Whether access log is enabled  # noqa: E501

        :param access_log_enabled: The access_log_enabled of this LbService.  # noqa: E501
        :type: bool
        """

        self._access_log_enabled = access_log_enabled

    @property
    def attachment(self):
        """Gets the attachment of this LbService.  # noqa: E501


        :return: The attachment of this LbService.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this LbService.


        :param attachment: The attachment of this LbService.  # noqa: E501
        :type: ResourceReference
        """

        self._attachment = attachment

    @property
    def error_log_level(self):
        """Gets the error_log_level of this LbService.  # noqa: E501

        Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.   # noqa: E501

        :return: The error_log_level of this LbService.  # noqa: E501
        :rtype: str
        """
        return self._error_log_level

    @error_log_level.setter
    def error_log_level(self, error_log_level):
        """Sets the error_log_level of this LbService.

        Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.   # noqa: E501

        :param error_log_level: The error_log_level of this LbService.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"]  # noqa: E501
        if error_log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `error_log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(error_log_level, allowed_values)
            )

        self._error_log_level = error_log_level

    @property
    def virtual_server_ids(self):
        """Gets the virtual_server_ids of this LbService.  # noqa: E501

        virtual servers can be associated to LbService(which is similar to physical/virtual load balancer), Lb virtual servers, pools and other entities could be defined independently, the virtual server identifier list here would be used to maintain the relationship of LbService and other Lb entities.   # noqa: E501

        :return: The virtual_server_ids of this LbService.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_server_ids

    @virtual_server_ids.setter
    def virtual_server_ids(self, virtual_server_ids):
        """Sets the virtual_server_ids of this LbService.

        virtual servers can be associated to LbService(which is similar to physical/virtual load balancer), Lb virtual servers, pools and other entities could be defined independently, the virtual server identifier list here would be used to maintain the relationship of LbService and other Lb entities.   # noqa: E501

        :param virtual_server_ids: The virtual_server_ids of this LbService.  # noqa: E501
        :type: list[str]
        """

        self._virtual_server_ids = virtual_server_ids

    @property
    def relax_scale_validation(self):
        """Gets the relax_scale_validation of this LbService.  # noqa: E501

        If relax_scale_validation is true, the scale validations for virtual servers/pools/pool members/rules are relaxed for load balancer service. When load balancer service is deployed on edge nodes, the scale of virtual servers/pools/pool members for the load balancer service should not exceed the scale number of the largest load balancer size which could be configured on a certain edge form factor. For example, the largest load balancer size supported on a MEDIUM edge node is MEDIUM. So one SMALL load balancer deployed on MEDIUM edge nodes can support the scale number of MEDIUM load balancer. It is not recommended to enable active monitors if relax_scale_validation is true due to performance consideration. If relax_scale_validation is false, scale numbers should be validated for load balancer service.   # noqa: E501

        :return: The relax_scale_validation of this LbService.  # noqa: E501
        :rtype: bool
        """
        return self._relax_scale_validation

    @relax_scale_validation.setter
    def relax_scale_validation(self, relax_scale_validation):
        """Sets the relax_scale_validation of this LbService.

        If relax_scale_validation is true, the scale validations for virtual servers/pools/pool members/rules are relaxed for load balancer service. When load balancer service is deployed on edge nodes, the scale of virtual servers/pools/pool members for the load balancer service should not exceed the scale number of the largest load balancer size which could be configured on a certain edge form factor. For example, the largest load balancer size supported on a MEDIUM edge node is MEDIUM. So one SMALL load balancer deployed on MEDIUM edge nodes can support the scale number of MEDIUM load balancer. It is not recommended to enable active monitors if relax_scale_validation is true due to performance consideration. If relax_scale_validation is false, scale numbers should be validated for load balancer service.   # noqa: E501

        :param relax_scale_validation: The relax_scale_validation of this LbService.  # noqa: E501
        :type: bool
        """

        self._relax_scale_validation = relax_scale_validation

    @property
    def enabled(self):
        """Gets the enabled of this LbService.  # noqa: E501

        Whether the load balancer service is enabled  # noqa: E501

        :return: The enabled of this LbService.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LbService.

        Whether the load balancer service is enabled  # noqa: E501

        :param enabled: The enabled of this LbService.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def size(self):
        """Gets the size of this LbService.  # noqa: E501

        The size of load balancer service  # noqa: E501

        :return: The size of this LbService.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LbService.

        The size of load balancer service  # noqa: E501

        :param size: The size of this LbService.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL", "MEDIUM", "LARGE", "XLARGE", "DLB"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"  # noqa: E501
                .format(size, allowed_values)
            )

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
