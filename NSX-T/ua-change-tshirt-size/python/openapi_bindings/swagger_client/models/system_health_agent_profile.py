# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class SystemHealthAgentProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'plugin_id': 'str',
        'config': 'str',
        'type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'enabled': 'enabled',
        'plugin_id': 'plugin_id',
        'config': 'config',
        'type': 'type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, enabled=None, plugin_id=None, config=None, type=None, *args, **kwargs):  # noqa: E501
        """SystemHealthAgentProfile - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._plugin_id = None
        self._config = None
        self._type = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        self.plugin_id = plugin_id
        self.config = config
        if type is not None:
            self.type = type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def enabled(self):
        """Gets the enabled of this SystemHealthAgentProfile.  # noqa: E501

        The on-off switch of System Health Agent  # noqa: E501

        :return: The enabled of this SystemHealthAgentProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SystemHealthAgentProfile.

        The on-off switch of System Health Agent  # noqa: E501

        :param enabled: The enabled of this SystemHealthAgentProfile.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def plugin_id(self):
        """Gets the plugin_id of this SystemHealthAgentProfile.  # noqa: E501

        The id of System Health Agent plugin  # noqa: E501

        :return: The plugin_id of this SystemHealthAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this SystemHealthAgentProfile.

        The id of System Health Agent plugin  # noqa: E501

        :param plugin_id: The plugin_id of this SystemHealthAgentProfile.  # noqa: E501
        :type: str
        """
        if plugin_id is None:
            raise ValueError("Invalid value for `plugin_id`, must not be `None`")  # noqa: E501

        self._plugin_id = plugin_id

    @property
    def config(self):
        """Gets the config of this SystemHealthAgentProfile.  # noqa: E501

        The config content of System Health Agent  # noqa: E501

        :return: The config of this SystemHealthAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this SystemHealthAgentProfile.

        The config content of System Health Agent  # noqa: E501

        :param config: The config of this SystemHealthAgentProfile.  # noqa: E501
        :type: str
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def type(self):
        """Gets the type of this SystemHealthAgentProfile.  # noqa: E501

        The type of System Health Agent. The System Health Agent plugin associated with given plugin id has already defined the profile type. So the backend can obtain the type by the plugin definition directly. Mark this field as optional. If need to check the type value by given plugin id, please call /systemhealth/plugins/<plugin-id>.   # noqa: E501

        :return: The type of this SystemHealthAgentProfile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemHealthAgentProfile.

        The type of System Health Agent. The System Health Agent plugin associated with given plugin id has already defined the profile type. So the backend can obtain the type by the plugin definition directly. Mark this field as optional. If need to check the type value by given plugin id, please call /systemhealth/plugins/<plugin-id>.   # noqa: E501

        :param type: The type of this SystemHealthAgentProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPUTE", "STORAGE", "NETWORK", "HYPERBUS", "NCP", "NODEAGENT", "VSAN", "TNAGENT", "UPLINK"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemHealthAgentProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemHealthAgentProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
