# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.transport_zone_profile import TransportZoneProfile  # noqa: F401,E501

class BfdHealthMonitoringProfile(TransportZoneProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'probe_interval': 'int',
        'latency_enabled': 'bool',
        'enabled': 'bool'
    }
    if hasattr(TransportZoneProfile, "swagger_types"):
        swagger_types.update(TransportZoneProfile.swagger_types)

    attribute_map = {
        'probe_interval': 'probe_interval',
        'latency_enabled': 'latency_enabled',
        'enabled': 'enabled'
    }
    if hasattr(TransportZoneProfile, "attribute_map"):
        attribute_map.update(TransportZoneProfile.attribute_map)

    def __init__(self, probe_interval=1000, latency_enabled=None, enabled=None, *args, **kwargs):  # noqa: E501
        """BfdHealthMonitoringProfile - a model defined in Swagger"""  # noqa: E501
        self._probe_interval = None
        self._latency_enabled = None
        self._enabled = None
        self.discriminator = None
        if probe_interval is not None:
            self.probe_interval = probe_interval
        if latency_enabled is not None:
            self.latency_enabled = latency_enabled
        self.enabled = enabled
        TransportZoneProfile.__init__(self, *args, **kwargs)

    @property
    def probe_interval(self):
        """Gets the probe_interval of this BfdHealthMonitoringProfile.  # noqa: E501

        The time interval (in millisec) between probe packets for tunnels between transport nodes.  # noqa: E501

        :return: The probe_interval of this BfdHealthMonitoringProfile.  # noqa: E501
        :rtype: int
        """
        return self._probe_interval

    @probe_interval.setter
    def probe_interval(self, probe_interval):
        """Sets the probe_interval of this BfdHealthMonitoringProfile.

        The time interval (in millisec) between probe packets for tunnels between transport nodes.  # noqa: E501

        :param probe_interval: The probe_interval of this BfdHealthMonitoringProfile.  # noqa: E501
        :type: int
        """

        self._probe_interval = probe_interval

    @property
    def latency_enabled(self):
        """Gets the latency_enabled of this BfdHealthMonitoringProfile.  # noqa: E501

        The flag is to turn on/off latency. A POST or PUT request with \"latency_enabled\" true will enable NSX to send the networking latency data to thrid-party monitoring tools like vRNI.  # noqa: E501

        :return: The latency_enabled of this BfdHealthMonitoringProfile.  # noqa: E501
        :rtype: bool
        """
        return self._latency_enabled

    @latency_enabled.setter
    def latency_enabled(self, latency_enabled):
        """Sets the latency_enabled of this BfdHealthMonitoringProfile.

        The flag is to turn on/off latency. A POST or PUT request with \"latency_enabled\" true will enable NSX to send the networking latency data to thrid-party monitoring tools like vRNI.  # noqa: E501

        :param latency_enabled: The latency_enabled of this BfdHealthMonitoringProfile.  # noqa: E501
        :type: bool
        """

        self._latency_enabled = latency_enabled

    @property
    def enabled(self):
        """Gets the enabled of this BfdHealthMonitoringProfile.  # noqa: E501

        Whether the heartbeat is enabled. A POST or PUT request with \"enabled\" false (with no probe intervals) will set (POST) or reset (PUT) the probe_interval to their default value.  # noqa: E501

        :return: The enabled of this BfdHealthMonitoringProfile.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BfdHealthMonitoringProfile.

        Whether the heartbeat is enabled. A POST or PUT request with \"enabled\" false (with no probe intervals) will set (POST) or reset (PUT) the probe_interval to their default value.  # noqa: E501

        :param enabled: The enabled of this BfdHealthMonitoringProfile.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BfdHealthMonitoringProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BfdHealthMonitoringProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
