# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class MonitoringEvent(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_threshold_fixed': 'bool',
        'event_false_snmp_oid': 'str',
        'description_on_clear': 'str',
        'event_type': 'str',
        'recommended_action': 'str',
        'severity': 'str',
        'sensitivity': 'int',
        'is_disabled': 'bool',
        'suppress_alarm': 'bool',
        'summary': 'str',
        'feature_display_name': 'str',
        'entity_resource_type': 'str',
        'feature_name': 'str',
        'threshold': 'int',
        'suppress_snmp_trap': 'bool',
        'event_type_display_name': 'str',
        'is_sensitivity_fixed': 'bool',
        'event_true_snmp_oid': 'str',
        'id': 'str',
        'node_types': 'list[str]',
        'description': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'is_threshold_fixed': 'is_threshold_fixed',
        'event_false_snmp_oid': 'event_false_snmp_oid',
        'description_on_clear': 'description_on_clear',
        'event_type': 'event_type',
        'recommended_action': 'recommended_action',
        'severity': 'severity',
        'sensitivity': 'sensitivity',
        'is_disabled': 'is_disabled',
        'suppress_alarm': 'suppress_alarm',
        'summary': 'summary',
        'feature_display_name': 'feature_display_name',
        'entity_resource_type': 'entity_resource_type',
        'feature_name': 'feature_name',
        'threshold': 'threshold',
        'suppress_snmp_trap': 'suppress_snmp_trap',
        'event_type_display_name': 'event_type_display_name',
        'is_sensitivity_fixed': 'is_sensitivity_fixed',
        'event_true_snmp_oid': 'event_true_snmp_oid',
        'id': 'id',
        'node_types': 'node_types',
        'description': 'description'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, is_threshold_fixed=None, event_false_snmp_oid=None, description_on_clear=None, event_type=None, recommended_action=None, severity=None, sensitivity=None, is_disabled=False, suppress_alarm=False, summary=None, feature_display_name=None, entity_resource_type=None, feature_name=None, threshold=None, suppress_snmp_trap=False, event_type_display_name=None, is_sensitivity_fixed=None, event_true_snmp_oid=None, id=None, node_types=None, description=None, *args, **kwargs):  # noqa: E501
        """MonitoringEvent - a model defined in Swagger"""  # noqa: E501
        self._is_threshold_fixed = None
        self._event_false_snmp_oid = None
        self._description_on_clear = None
        self._event_type = None
        self._recommended_action = None
        self._severity = None
        self._sensitivity = None
        self._is_disabled = None
        self._suppress_alarm = None
        self._summary = None
        self._feature_display_name = None
        self._entity_resource_type = None
        self._feature_name = None
        self._threshold = None
        self._suppress_snmp_trap = None
        self._event_type_display_name = None
        self._is_sensitivity_fixed = None
        self._event_true_snmp_oid = None
        self._id = None
        self._node_types = None
        self._description = None
        self.discriminator = None
        if is_threshold_fixed is not None:
            self.is_threshold_fixed = is_threshold_fixed
        if event_false_snmp_oid is not None:
            self.event_false_snmp_oid = event_false_snmp_oid
        if description_on_clear is not None:
            self.description_on_clear = description_on_clear
        if event_type is not None:
            self.event_type = event_type
        if recommended_action is not None:
            self.recommended_action = recommended_action
        if severity is not None:
            self.severity = severity
        self.sensitivity = sensitivity
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if suppress_alarm is not None:
            self.suppress_alarm = suppress_alarm
        if summary is not None:
            self.summary = summary
        if feature_display_name is not None:
            self.feature_display_name = feature_display_name
        if entity_resource_type is not None:
            self.entity_resource_type = entity_resource_type
        if feature_name is not None:
            self.feature_name = feature_name
        self.threshold = threshold
        if suppress_snmp_trap is not None:
            self.suppress_snmp_trap = suppress_snmp_trap
        if event_type_display_name is not None:
            self.event_type_display_name = event_type_display_name
        if is_sensitivity_fixed is not None:
            self.is_sensitivity_fixed = is_sensitivity_fixed
        if event_true_snmp_oid is not None:
            self.event_true_snmp_oid = event_true_snmp_oid
        if id is not None:
            self.id = id
        if node_types is not None:
            self.node_types = node_types
        if description is not None:
            self.description = description
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def is_threshold_fixed(self):
        """Gets the is_threshold_fixed of this MonitoringEvent.  # noqa: E501

        Indicates if the threshold property is configurable via the API.   # noqa: E501

        :return: The is_threshold_fixed of this MonitoringEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_threshold_fixed

    @is_threshold_fixed.setter
    def is_threshold_fixed(self, is_threshold_fixed):
        """Sets the is_threshold_fixed of this MonitoringEvent.

        Indicates if the threshold property is configurable via the API.   # noqa: E501

        :param is_threshold_fixed: The is_threshold_fixed of this MonitoringEvent.  # noqa: E501
        :type: bool
        """

        self._is_threshold_fixed = is_threshold_fixed

    @property
    def event_false_snmp_oid(self):
        """Gets the event_false_snmp_oid of this MonitoringEvent.  # noqa: E501

        Optional field containing OID for SNMP trap sent when Event instance is False. This value is null if suppress_snmp_trap or suppress_clear_oid is True.   # noqa: E501

        :return: The event_false_snmp_oid of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_false_snmp_oid

    @event_false_snmp_oid.setter
    def event_false_snmp_oid(self, event_false_snmp_oid):
        """Sets the event_false_snmp_oid of this MonitoringEvent.

        Optional field containing OID for SNMP trap sent when Event instance is False. This value is null if suppress_snmp_trap or suppress_clear_oid is True.   # noqa: E501

        :param event_false_snmp_oid: The event_false_snmp_oid of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._event_false_snmp_oid = event_false_snmp_oid

    @property
    def description_on_clear(self):
        """Gets the description_on_clear of this MonitoringEvent.  # noqa: E501

        Description of Event when an Event instance transitions from True to False.   # noqa: E501

        :return: The description_on_clear of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._description_on_clear

    @description_on_clear.setter
    def description_on_clear(self, description_on_clear):
        """Sets the description_on_clear of this MonitoringEvent.

        Description of Event when an Event instance transitions from True to False.   # noqa: E501

        :param description_on_clear: The description_on_clear of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._description_on_clear = description_on_clear

    @property
    def event_type(self):
        """Gets the event_type of this MonitoringEvent.  # noqa: E501

        Name of Event, e.g. manager_cpu_usage_high, certificate_expired.   # noqa: E501

        :return: The event_type of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this MonitoringEvent.

        Name of Event, e.g. manager_cpu_usage_high, certificate_expired.   # noqa: E501

        :param event_type: The event_type of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def recommended_action(self):
        """Gets the recommended_action of this MonitoringEvent.  # noqa: E501

        Recommended action for the alarm condition.   # noqa: E501

        :return: The recommended_action of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._recommended_action

    @recommended_action.setter
    def recommended_action(self, recommended_action):
        """Sets the recommended_action of this MonitoringEvent.

        Recommended action for the alarm condition.   # noqa: E501

        :param recommended_action: The recommended_action of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._recommended_action = recommended_action

    @property
    def severity(self):
        """Gets the severity of this MonitoringEvent.  # noqa: E501

        Severity of the Event.Can be one of - CRITICAL, HIGH, MEDIUM, LOW.   # noqa: E501

        :return: The severity of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this MonitoringEvent.

        Severity of the Event.Can be one of - CRITICAL, HIGH, MEDIUM, LOW.   # noqa: E501

        :param severity: The severity of this MonitoringEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRITICAL", "HIGH", "MEDIUM", "LOW"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def sensitivity(self):
        """Gets the sensitivity of this MonitoringEvent.  # noqa: E501

        Percentage of samples to consider and used in combination with threshold when determining whether an Event instance status is True or False. Event evaluation uses sampling to determine Event instance status. A higher sensitivity value specifies that more samples are used to ensure accuracy and ignore infrequent or rare spikes in sampled data.   # noqa: E501

        :return: The sensitivity of this MonitoringEvent.  # noqa: E501
        :rtype: int
        """
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity):
        """Sets the sensitivity of this MonitoringEvent.

        Percentage of samples to consider and used in combination with threshold when determining whether an Event instance status is True or False. Event evaluation uses sampling to determine Event instance status. A higher sensitivity value specifies that more samples are used to ensure accuracy and ignore infrequent or rare spikes in sampled data.   # noqa: E501

        :param sensitivity: The sensitivity of this MonitoringEvent.  # noqa: E501
        :type: int
        """
        if sensitivity is None:
            raise ValueError("Invalid value for `sensitivity`, must not be `None`")  # noqa: E501

        self._sensitivity = sensitivity

    @property
    def is_disabled(self):
        """Gets the is_disabled of this MonitoringEvent.  # noqa: E501

        Flag to indicate whether sampling for this Event is off or on.   # noqa: E501

        :return: The is_disabled of this MonitoringEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this MonitoringEvent.

        Flag to indicate whether sampling for this Event is off or on.   # noqa: E501

        :param is_disabled: The is_disabled of this MonitoringEvent.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def suppress_alarm(self):
        """Gets the suppress_alarm of this MonitoringEvent.  # noqa: E501

        Flag to suppress Alarm generation. Alarms are not generated for this Event when this is set to True.   # noqa: E501

        :return: The suppress_alarm of this MonitoringEvent.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_alarm

    @suppress_alarm.setter
    def suppress_alarm(self, suppress_alarm):
        """Sets the suppress_alarm of this MonitoringEvent.

        Flag to suppress Alarm generation. Alarms are not generated for this Event when this is set to True.   # noqa: E501

        :param suppress_alarm: The suppress_alarm of this MonitoringEvent.  # noqa: E501
        :type: bool
        """

        self._suppress_alarm = suppress_alarm

    @property
    def summary(self):
        """Gets the summary of this MonitoringEvent.  # noqa: E501

        Summary description of the event.   # noqa: E501

        :return: The summary of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this MonitoringEvent.

        Summary description of the event.   # noqa: E501

        :param summary: The summary of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def feature_display_name(self):
        """Gets the feature_display_name of this MonitoringEvent.  # noqa: E501

        Display name of feature defining this Event.   # noqa: E501

        :return: The feature_display_name of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._feature_display_name

    @feature_display_name.setter
    def feature_display_name(self, feature_display_name):
        """Sets the feature_display_name of this MonitoringEvent.

        Display name of feature defining this Event.   # noqa: E501

        :param feature_display_name: The feature_display_name of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._feature_display_name = feature_display_name

    @property
    def entity_resource_type(self):
        """Gets the entity_resource_type of this MonitoringEvent.  # noqa: E501

        Resource Type of entity where this event is applicable eg. LogicalSwitch, LogicalPort etc.   # noqa: E501

        :return: The entity_resource_type of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._entity_resource_type

    @entity_resource_type.setter
    def entity_resource_type(self, entity_resource_type):
        """Sets the entity_resource_type of this MonitoringEvent.

        Resource Type of entity where this event is applicable eg. LogicalSwitch, LogicalPort etc.   # noqa: E501

        :param entity_resource_type: The entity_resource_type of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._entity_resource_type = entity_resource_type

    @property
    def feature_name(self):
        """Gets the feature_name of this MonitoringEvent.  # noqa: E501

        Feature defining this Event, e.g. manager_health, certificates.   # noqa: E501

        :return: The feature_name of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this MonitoringEvent.

        Feature defining this Event, e.g. manager_health, certificates.   # noqa: E501

        :param feature_name: The feature_name of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._feature_name = feature_name

    @property
    def threshold(self):
        """Gets the threshold of this MonitoringEvent.  # noqa: E501

        Threshold to determine if a single sample is True. For example, if the configured threshold is 95% and the current CPU sample is 99%, then the current sample is considered True.   # noqa: E501

        :return: The threshold of this MonitoringEvent.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MonitoringEvent.

        Threshold to determine if a single sample is True. For example, if the configured threshold is 95% and the current CPU sample is 99%, then the current sample is considered True.   # noqa: E501

        :param threshold: The threshold of this MonitoringEvent.  # noqa: E501
        :type: int
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501

        self._threshold = threshold

    @property
    def suppress_snmp_trap(self):
        """Gets the suppress_snmp_trap of this MonitoringEvent.  # noqa: E501

        Flag to suppress SNMP trap generation. SNMP traps are not sent for this Event when this is set to True.   # noqa: E501

        :return: The suppress_snmp_trap of this MonitoringEvent.  # noqa: E501
        :rtype: bool
        """
        return self._suppress_snmp_trap

    @suppress_snmp_trap.setter
    def suppress_snmp_trap(self, suppress_snmp_trap):
        """Sets the suppress_snmp_trap of this MonitoringEvent.

        Flag to suppress SNMP trap generation. SNMP traps are not sent for this Event when this is set to True.   # noqa: E501

        :param suppress_snmp_trap: The suppress_snmp_trap of this MonitoringEvent.  # noqa: E501
        :type: bool
        """

        self._suppress_snmp_trap = suppress_snmp_trap

    @property
    def event_type_display_name(self):
        """Gets the event_type_display_name of this MonitoringEvent.  # noqa: E501

        Display name of Event type.   # noqa: E501

        :return: The event_type_display_name of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type_display_name

    @event_type_display_name.setter
    def event_type_display_name(self, event_type_display_name):
        """Sets the event_type_display_name of this MonitoringEvent.

        Display name of Event type.   # noqa: E501

        :param event_type_display_name: The event_type_display_name of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._event_type_display_name = event_type_display_name

    @property
    def is_sensitivity_fixed(self):
        """Gets the is_sensitivity_fixed of this MonitoringEvent.  # noqa: E501

        Indicates if the sensitivity property is configurable via the API.   # noqa: E501

        :return: The is_sensitivity_fixed of this MonitoringEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_sensitivity_fixed

    @is_sensitivity_fixed.setter
    def is_sensitivity_fixed(self, is_sensitivity_fixed):
        """Sets the is_sensitivity_fixed of this MonitoringEvent.

        Indicates if the sensitivity property is configurable via the API.   # noqa: E501

        :param is_sensitivity_fixed: The is_sensitivity_fixed of this MonitoringEvent.  # noqa: E501
        :type: bool
        """

        self._is_sensitivity_fixed = is_sensitivity_fixed

    @property
    def event_true_snmp_oid(self):
        """Gets the event_true_snmp_oid of this MonitoringEvent.  # noqa: E501

        Optional field containing OID for SNMP trap sent when Event instance is True. This value is null if suppress_snmp_trap is True.   # noqa: E501

        :return: The event_true_snmp_oid of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_true_snmp_oid

    @event_true_snmp_oid.setter
    def event_true_snmp_oid(self, event_true_snmp_oid):
        """Sets the event_true_snmp_oid of this MonitoringEvent.

        Optional field containing OID for SNMP trap sent when Event instance is True. This value is null if suppress_snmp_trap is True.   # noqa: E501

        :param event_true_snmp_oid: The event_true_snmp_oid of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._event_true_snmp_oid = event_true_snmp_oid

    @property
    def id(self):
        """Gets the id of this MonitoringEvent.  # noqa: E501

        Unique identifier in the form of feature_name.event_type.   # noqa: E501

        :return: The id of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MonitoringEvent.

        Unique identifier in the form of feature_name.event_type.   # noqa: E501

        :param id: The id of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def node_types(self):
        """Gets the node_types of this MonitoringEvent.  # noqa: E501

        Array identifying the nodes on which this Event is applicable. Can be one or more of the following values - nsx_public_cloud_gateway, nsx_edge, nsx_esx, nsx_kvm, nsx_manager.   # noqa: E501

        :return: The node_types of this MonitoringEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this MonitoringEvent.

        Array identifying the nodes on which this Event is applicable. Can be one or more of the following values - nsx_public_cloud_gateway, nsx_edge, nsx_esx, nsx_kvm, nsx_manager.   # noqa: E501

        :param node_types: The node_types of this MonitoringEvent.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["nsx_autonomous_edge", "nsx_bms", "nsx_edge", "nsx_esx", "nsx_global_manager", "nsx_intelligence", "nsx_kvm", "nsx_manager", "nsx_public_cloud_gateway"]  # noqa: E501
        if not set(node_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `node_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(node_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._node_types = node_types

    @property
    def description(self):
        """Gets the description of this MonitoringEvent.  # noqa: E501

        Detailed description of the event.   # noqa: E501

        :return: The description of this MonitoringEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MonitoringEvent.

        Detailed description of the event.   # noqa: E501

        :param description: The description of this MonitoringEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
