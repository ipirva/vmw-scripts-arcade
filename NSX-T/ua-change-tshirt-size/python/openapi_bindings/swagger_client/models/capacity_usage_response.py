# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class CapacityUsageResponse(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capacity_usage': 'list[CapacityDashboardUsage]',
        'meta_info': 'object',
        'unreported_usage_types': 'list[str]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'capacity_usage': 'capacity_usage',
        'meta_info': 'meta_info',
        'unreported_usage_types': 'unreported_usage_types'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, capacity_usage=None, meta_info=None, unreported_usage_types=None, *args, **kwargs):  # noqa: E501
        """CapacityUsageResponse - a model defined in Swagger"""  # noqa: E501
        self._capacity_usage = None
        self._meta_info = None
        self._unreported_usage_types = None
        self.discriminator = None
        self.capacity_usage = capacity_usage
        self.meta_info = meta_info
        if unreported_usage_types is not None:
            self.unreported_usage_types = unreported_usage_types
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def capacity_usage(self):
        """Gets the capacity_usage of this CapacityUsageResponse.  # noqa: E501

        List of capacity usage for NSX Objects  # noqa: E501

        :return: The capacity_usage of this CapacityUsageResponse.  # noqa: E501
        :rtype: list[CapacityDashboardUsage]
        """
        return self._capacity_usage

    @capacity_usage.setter
    def capacity_usage(self, capacity_usage):
        """Sets the capacity_usage of this CapacityUsageResponse.

        List of capacity usage for NSX Objects  # noqa: E501

        :param capacity_usage: The capacity_usage of this CapacityUsageResponse.  # noqa: E501
        :type: list[CapacityDashboardUsage]
        """
        if capacity_usage is None:
            raise ValueError("Invalid value for `capacity_usage`, must not be `None`")  # noqa: E501

        self._capacity_usage = capacity_usage

    @property
    def meta_info(self):
        """Gets the meta_info of this CapacityUsageResponse.  # noqa: E501

        Meta data for capacity usage statistics  # noqa: E501

        :return: The meta_info of this CapacityUsageResponse.  # noqa: E501
        :rtype: object
        """
        return self._meta_info

    @meta_info.setter
    def meta_info(self, meta_info):
        """Sets the meta_info of this CapacityUsageResponse.

        Meta data for capacity usage statistics  # noqa: E501

        :param meta_info: The meta_info of this CapacityUsageResponse.  # noqa: E501
        :type: object
        """
        if meta_info is None:
            raise ValueError("Invalid value for `meta_info`, must not be `None`")  # noqa: E501

        self._meta_info = meta_info

    @property
    def unreported_usage_types(self):
        """Gets the unreported_usage_types of this CapacityUsageResponse.  # noqa: E501

        Types for which usage data was not reported  # noqa: E501

        :return: The unreported_usage_types of this CapacityUsageResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._unreported_usage_types

    @unreported_usage_types.setter
    def unreported_usage_types(self, unreported_usage_types):
        """Sets the unreported_usage_types of this CapacityUsageResponse.

        Types for which usage data was not reported  # noqa: E501

        :param unreported_usage_types: The unreported_usage_types of this CapacityUsageResponse.  # noqa: E501
        :type: list[str]
        """

        self._unreported_usage_types = unreported_usage_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CapacityUsageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CapacityUsageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
