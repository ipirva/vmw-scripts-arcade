# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdvertiseRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'rule_filter': 'AdvertisementRuleFilter',
        'display_name': 'str',
        'networks': 'list[str]',
        'description': 'str'
    }

    attribute_map = {
        'action': 'action',
        'rule_filter': 'rule_filter',
        'display_name': 'display_name',
        'networks': 'networks',
        'description': 'description'
    }

    def __init__(self, action='ALLOW', rule_filter=None, display_name=None, networks=None, description=None):  # noqa: E501
        """AdvertiseRule - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._rule_filter = None
        self._display_name = None
        self._networks = None
        self._description = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if rule_filter is not None:
            self.rule_filter = rule_filter
        if display_name is not None:
            self.display_name = display_name
        self.networks = networks
        if description is not None:
            self.description = description

    @property
    def action(self):
        """Gets the action of this AdvertiseRule.  # noqa: E501

        ALLOW action enables the advertisment and DENY action disables the advertisement of a filtered routes to the connected TIER0 router.  # noqa: E501

        :return: The action of this AdvertiseRule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AdvertiseRule.

        ALLOW action enables the advertisment and DENY action disables the advertisement of a filtered routes to the connected TIER0 router.  # noqa: E501

        :param action: The action of this AdvertiseRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["DENY", "ALLOW"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def rule_filter(self):
        """Gets the rule_filter of this AdvertiseRule.  # noqa: E501


        :return: The rule_filter of this AdvertiseRule.  # noqa: E501
        :rtype: AdvertisementRuleFilter
        """
        return self._rule_filter

    @rule_filter.setter
    def rule_filter(self, rule_filter):
        """Sets the rule_filter of this AdvertiseRule.


        :param rule_filter: The rule_filter of this AdvertiseRule.  # noqa: E501
        :type: AdvertisementRuleFilter
        """

        self._rule_filter = rule_filter

    @property
    def display_name(self):
        """Gets the display_name of this AdvertiseRule.  # noqa: E501

        Display name  # noqa: E501

        :return: The display_name of this AdvertiseRule.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AdvertiseRule.

        Display name  # noqa: E501

        :param display_name: The display_name of this AdvertiseRule.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def networks(self):
        """Gets the networks of this AdvertiseRule.  # noqa: E501

        network(CIDR) to be routed  # noqa: E501

        :return: The networks of this AdvertiseRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this AdvertiseRule.

        network(CIDR) to be routed  # noqa: E501

        :param networks: The networks of this AdvertiseRule.  # noqa: E501
        :type: list[str]
        """
        if networks is None:
            raise ValueError("Invalid value for `networks`, must not be `None`")  # noqa: E501

        self._networks = networks

    @property
    def description(self):
        """Gets the description of this AdvertiseRule.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this AdvertiseRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdvertiseRule.

        Description  # noqa: E501

        :param description: The description of this AdvertiseRule.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvertiseRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvertiseRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
