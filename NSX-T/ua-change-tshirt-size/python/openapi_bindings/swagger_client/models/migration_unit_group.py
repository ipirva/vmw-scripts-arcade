# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class MigrationUnitGroup(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'migration_unit_count': 'int',
        'migration_units': 'list[MigrationUnit]',
        'enabled': 'bool',
        'type': 'str',
        'parallel': 'bool',
        'extended_configuration': 'list[KeyValuePair]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'migration_unit_count': 'migration_unit_count',
        'migration_units': 'migration_units',
        'enabled': 'enabled',
        'type': 'type',
        'parallel': 'parallel',
        'extended_configuration': 'extended_configuration'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, migration_unit_count=None, migration_units=None, enabled=True, type=None, parallel=True, extended_configuration=None, *args, **kwargs):  # noqa: E501
        """MigrationUnitGroup - a model defined in Swagger"""  # noqa: E501
        self._migration_unit_count = None
        self._migration_units = None
        self._enabled = None
        self._type = None
        self._parallel = None
        self._extended_configuration = None
        self.discriminator = None
        if migration_unit_count is not None:
            self.migration_unit_count = migration_unit_count
        if migration_units is not None:
            self.migration_units = migration_units
        if enabled is not None:
            self.enabled = enabled
        self.type = type
        if parallel is not None:
            self.parallel = parallel
        if extended_configuration is not None:
            self.extended_configuration = extended_configuration
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def migration_unit_count(self):
        """Gets the migration_unit_count of this MigrationUnitGroup.  # noqa: E501

        Number of migration units in the group  # noqa: E501

        :return: The migration_unit_count of this MigrationUnitGroup.  # noqa: E501
        :rtype: int
        """
        return self._migration_unit_count

    @migration_unit_count.setter
    def migration_unit_count(self, migration_unit_count):
        """Sets the migration_unit_count of this MigrationUnitGroup.

        Number of migration units in the group  # noqa: E501

        :param migration_unit_count: The migration_unit_count of this MigrationUnitGroup.  # noqa: E501
        :type: int
        """

        self._migration_unit_count = migration_unit_count

    @property
    def migration_units(self):
        """Gets the migration_units of this MigrationUnitGroup.  # noqa: E501

        List of migration units in the group  # noqa: E501

        :return: The migration_units of this MigrationUnitGroup.  # noqa: E501
        :rtype: list[MigrationUnit]
        """
        return self._migration_units

    @migration_units.setter
    def migration_units(self, migration_units):
        """Sets the migration_units of this MigrationUnitGroup.

        List of migration units in the group  # noqa: E501

        :param migration_units: The migration_units of this MigrationUnitGroup.  # noqa: E501
        :type: list[MigrationUnit]
        """

        self._migration_units = migration_units

    @property
    def enabled(self):
        """Gets the enabled of this MigrationUnitGroup.  # noqa: E501

        Flag to indicate whether migration of this group is enabled or not  # noqa: E501

        :return: The enabled of this MigrationUnitGroup.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MigrationUnitGroup.

        Flag to indicate whether migration of this group is enabled or not  # noqa: E501

        :param enabled: The enabled of this MigrationUnitGroup.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def type(self):
        """Gets the type of this MigrationUnitGroup.  # noqa: E501

        Component type  # noqa: E501

        :return: The type of this MigrationUnitGroup.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MigrationUnitGroup.

        Component type  # noqa: E501

        :param type: The type of this MigrationUnitGroup.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def parallel(self):
        """Gets the parallel of this MigrationUnitGroup.  # noqa: E501

        Migration method to specify whether the migration is to be performed in parallel or serially  # noqa: E501

        :return: The parallel of this MigrationUnitGroup.  # noqa: E501
        :rtype: bool
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this MigrationUnitGroup.

        Migration method to specify whether the migration is to be performed in parallel or serially  # noqa: E501

        :param parallel: The parallel of this MigrationUnitGroup.  # noqa: E501
        :type: bool
        """

        self._parallel = parallel

    @property
    def extended_configuration(self):
        """Gets the extended_configuration of this MigrationUnitGroup.  # noqa: E501

        Extended configuration for the group  # noqa: E501

        :return: The extended_configuration of this MigrationUnitGroup.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._extended_configuration

    @extended_configuration.setter
    def extended_configuration(self, extended_configuration):
        """Sets the extended_configuration of this MigrationUnitGroup.

        Extended configuration for the group  # noqa: E501

        :param extended_configuration: The extended_configuration of this MigrationUnitGroup.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._extended_configuration = extended_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationUnitGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationUnitGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
