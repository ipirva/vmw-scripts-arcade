# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.csv_record import CsvRecord  # noqa: F401,E501

class LogicalRouterRouteCsvRecord(CsvRecord):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lr_component_id': 'str',
        'next_hop': 'str',
        'lr_component_type': 'str',
        'network': 'str',
        'route_type': 'str',
        'logical_router_port_id': 'str',
        'admin_distance': 'int'
    }
    if hasattr(CsvRecord, "swagger_types"):
        swagger_types.update(CsvRecord.swagger_types)

    attribute_map = {
        'lr_component_id': 'lr_component_id',
        'next_hop': 'next_hop',
        'lr_component_type': 'lr_component_type',
        'network': 'network',
        'route_type': 'route_type',
        'logical_router_port_id': 'logical_router_port_id',
        'admin_distance': 'admin_distance'
    }
    if hasattr(CsvRecord, "attribute_map"):
        attribute_map.update(CsvRecord.attribute_map)

    def __init__(self, lr_component_id=None, next_hop=None, lr_component_type=None, network=None, route_type=None, logical_router_port_id=None, admin_distance=None, *args, **kwargs):  # noqa: E501
        """LogicalRouterRouteCsvRecord - a model defined in Swagger"""  # noqa: E501
        self._lr_component_id = None
        self._next_hop = None
        self._lr_component_type = None
        self._network = None
        self._route_type = None
        self._logical_router_port_id = None
        self._admin_distance = None
        self.discriminator = None
        if lr_component_id is not None:
            self.lr_component_id = lr_component_id
        if next_hop is not None:
            self.next_hop = next_hop
        if lr_component_type is not None:
            self.lr_component_type = lr_component_type
        self.network = network
        self.route_type = route_type
        if logical_router_port_id is not None:
            self.logical_router_port_id = logical_router_port_id
        if admin_distance is not None:
            self.admin_distance = admin_distance
        CsvRecord.__init__(self, *args, **kwargs)

    @property
    def lr_component_id(self):
        """Gets the lr_component_id of this LogicalRouterRouteCsvRecord.  # noqa: E501

        Logical router component(Service Router/Distributed Router) id  # noqa: E501

        :return: The lr_component_id of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._lr_component_id

    @lr_component_id.setter
    def lr_component_id(self, lr_component_id):
        """Sets the lr_component_id of this LogicalRouterRouteCsvRecord.

        Logical router component(Service Router/Distributed Router) id  # noqa: E501

        :param lr_component_id: The lr_component_id of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: str
        """

        self._lr_component_id = lr_component_id

    @property
    def next_hop(self):
        """Gets the next_hop of this LogicalRouterRouteCsvRecord.  # noqa: E501

        The IP of the next hop  # noqa: E501

        :return: The next_hop of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this LogicalRouterRouteCsvRecord.

        The IP of the next hop  # noqa: E501

        :param next_hop: The next_hop of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def lr_component_type(self):
        """Gets the lr_component_type of this LogicalRouterRouteCsvRecord.  # noqa: E501

        Logical router component(Service Router/Distributed Router) type  # noqa: E501

        :return: The lr_component_type of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._lr_component_type

    @lr_component_type.setter
    def lr_component_type(self, lr_component_type):
        """Sets the lr_component_type of this LogicalRouterRouteCsvRecord.

        Logical router component(Service Router/Distributed Router) type  # noqa: E501

        :param lr_component_type: The lr_component_type of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: str
        """

        self._lr_component_type = lr_component_type

    @property
    def network(self):
        """Gets the network of this LogicalRouterRouteCsvRecord.  # noqa: E501

        CIDR network address  # noqa: E501

        :return: The network of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this LogicalRouterRouteCsvRecord.

        CIDR network address  # noqa: E501

        :param network: The network of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def route_type(self):
        """Gets the route_type of this LogicalRouterRouteCsvRecord.  # noqa: E501

        Route type (USER, CONNECTED, NSX_INTERNAL,..)  # noqa: E501

        :return: The route_type of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this LogicalRouterRouteCsvRecord.

        Route type (USER, CONNECTED, NSX_INTERNAL,..)  # noqa: E501

        :param route_type: The route_type of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: str
        """
        if route_type is None:
            raise ValueError("Invalid value for `route_type`, must not be `None`")  # noqa: E501

        self._route_type = route_type

    @property
    def logical_router_port_id(self):
        """Gets the logical_router_port_id of this LogicalRouterRouteCsvRecord.  # noqa: E501

        The id of the logical router port which is used as the next hop  # noqa: E501

        :return: The logical_router_port_id of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_port_id

    @logical_router_port_id.setter
    def logical_router_port_id(self, logical_router_port_id):
        """Sets the logical_router_port_id of this LogicalRouterRouteCsvRecord.

        The id of the logical router port which is used as the next hop  # noqa: E501

        :param logical_router_port_id: The logical_router_port_id of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: str
        """

        self._logical_router_port_id = logical_router_port_id

    @property
    def admin_distance(self):
        """Gets the admin_distance of this LogicalRouterRouteCsvRecord.  # noqa: E501

        The admin distance of the next hop  # noqa: E501

        :return: The admin_distance of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :rtype: int
        """
        return self._admin_distance

    @admin_distance.setter
    def admin_distance(self, admin_distance):
        """Sets the admin_distance of this LogicalRouterRouteCsvRecord.

        The admin distance of the next hop  # noqa: E501

        :param admin_distance: The admin_distance of this LogicalRouterRouteCsvRecord.  # noqa: E501
        :type: int
        """

        self._admin_distance = admin_distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalRouterRouteCsvRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalRouterRouteCsvRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
