# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HealthCheckResultPerUplink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uplink_name': 'str',
        'vlan_and_mtu_allowed': 'list[HealthCheckVlanRange]',
        'vlan_disallowed': 'list[HealthCheckVlanRange]',
        'mtu_disallowed': 'list[HealthCheckVlanRange]'
    }

    attribute_map = {
        'uplink_name': 'uplink_name',
        'vlan_and_mtu_allowed': 'vlan_and_mtu_allowed',
        'vlan_disallowed': 'vlan_disallowed',
        'mtu_disallowed': 'mtu_disallowed'
    }

    def __init__(self, uplink_name=None, vlan_and_mtu_allowed=None, vlan_disallowed=None, mtu_disallowed=None):  # noqa: E501
        """HealthCheckResultPerUplink - a model defined in Swagger"""  # noqa: E501
        self._uplink_name = None
        self._vlan_and_mtu_allowed = None
        self._vlan_disallowed = None
        self._mtu_disallowed = None
        self.discriminator = None
        if uplink_name is not None:
            self.uplink_name = uplink_name
        if vlan_and_mtu_allowed is not None:
            self.vlan_and_mtu_allowed = vlan_and_mtu_allowed
        if vlan_disallowed is not None:
            self.vlan_disallowed = vlan_disallowed
        if mtu_disallowed is not None:
            self.mtu_disallowed = mtu_disallowed

    @property
    def uplink_name(self):
        """Gets the uplink_name of this HealthCheckResultPerUplink.  # noqa: E501

        Name of the uplink.  # noqa: E501

        :return: The uplink_name of this HealthCheckResultPerUplink.  # noqa: E501
        :rtype: str
        """
        return self._uplink_name

    @uplink_name.setter
    def uplink_name(self, uplink_name):
        """Sets the uplink_name of this HealthCheckResultPerUplink.

        Name of the uplink.  # noqa: E501

        :param uplink_name: The uplink_name of this HealthCheckResultPerUplink.  # noqa: E501
        :type: str
        """

        self._uplink_name = uplink_name

    @property
    def vlan_and_mtu_allowed(self):
        """Gets the vlan_and_mtu_allowed of this HealthCheckResultPerUplink.  # noqa: E501

        List of VLAN ID ranges which are allowed by VLAN and MTU settings.   # noqa: E501

        :return: The vlan_and_mtu_allowed of this HealthCheckResultPerUplink.  # noqa: E501
        :rtype: list[HealthCheckVlanRange]
        """
        return self._vlan_and_mtu_allowed

    @vlan_and_mtu_allowed.setter
    def vlan_and_mtu_allowed(self, vlan_and_mtu_allowed):
        """Sets the vlan_and_mtu_allowed of this HealthCheckResultPerUplink.

        List of VLAN ID ranges which are allowed by VLAN and MTU settings.   # noqa: E501

        :param vlan_and_mtu_allowed: The vlan_and_mtu_allowed of this HealthCheckResultPerUplink.  # noqa: E501
        :type: list[HealthCheckVlanRange]
        """

        self._vlan_and_mtu_allowed = vlan_and_mtu_allowed

    @property
    def vlan_disallowed(self):
        """Gets the vlan_disallowed of this HealthCheckResultPerUplink.  # noqa: E501

        List of VLAN ID ranges which may be disallowed by VLAN settings.   # noqa: E501

        :return: The vlan_disallowed of this HealthCheckResultPerUplink.  # noqa: E501
        :rtype: list[HealthCheckVlanRange]
        """
        return self._vlan_disallowed

    @vlan_disallowed.setter
    def vlan_disallowed(self, vlan_disallowed):
        """Sets the vlan_disallowed of this HealthCheckResultPerUplink.

        List of VLAN ID ranges which may be disallowed by VLAN settings.   # noqa: E501

        :param vlan_disallowed: The vlan_disallowed of this HealthCheckResultPerUplink.  # noqa: E501
        :type: list[HealthCheckVlanRange]
        """

        self._vlan_disallowed = vlan_disallowed

    @property
    def mtu_disallowed(self):
        """Gets the mtu_disallowed of this HealthCheckResultPerUplink.  # noqa: E501

        List of VLAN ID ranges which are allowed by VLAN settings but may be disallowed by MTU settings.   # noqa: E501

        :return: The mtu_disallowed of this HealthCheckResultPerUplink.  # noqa: E501
        :rtype: list[HealthCheckVlanRange]
        """
        return self._mtu_disallowed

    @mtu_disallowed.setter
    def mtu_disallowed(self, mtu_disallowed):
        """Sets the mtu_disallowed of this HealthCheckResultPerUplink.

        List of VLAN ID ranges which are allowed by VLAN settings but may be disallowed by MTU settings.   # noqa: E501

        :param mtu_disallowed: The mtu_disallowed of this HealthCheckResultPerUplink.  # noqa: E501
        :type: list[HealthCheckVlanRange]
        """

        self._mtu_disallowed = mtu_disallowed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthCheckResultPerUplink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheckResultPerUplink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
