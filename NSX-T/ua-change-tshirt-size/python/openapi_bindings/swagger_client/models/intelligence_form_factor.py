# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntelligenceFormFactor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vcpu': 'int',
        'disk': 'int',
        'type': 'str',
        'memory': 'int'
    }

    attribute_map = {
        'vcpu': 'vcpu',
        'disk': 'disk',
        'type': 'type',
        'memory': 'memory'
    }

    def __init__(self, vcpu=None, disk=None, type=None, memory=None):  # noqa: E501
        """IntelligenceFormFactor - a model defined in Swagger"""  # noqa: E501
        self._vcpu = None
        self._disk = None
        self._type = None
        self._memory = None
        self.discriminator = None
        if vcpu is not None:
            self.vcpu = vcpu
        if disk is not None:
            self.disk = disk
        if type is not None:
            self.type = type
        if memory is not None:
            self.memory = memory

    @property
    def vcpu(self):
        """Gets the vcpu of this IntelligenceFormFactor.  # noqa: E501

        Number of virtual cpus on the Intelligence nodes  # noqa: E501

        :return: The vcpu of this IntelligenceFormFactor.  # noqa: E501
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this IntelligenceFormFactor.

        Number of virtual cpus on the Intelligence nodes  # noqa: E501

        :param vcpu: The vcpu of this IntelligenceFormFactor.  # noqa: E501
        :type: int
        """

        self._vcpu = vcpu

    @property
    def disk(self):
        """Gets the disk of this IntelligenceFormFactor.  # noqa: E501

        Disk size of the Intelligence nodes in GBs.  # noqa: E501

        :return: The disk of this IntelligenceFormFactor.  # noqa: E501
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this IntelligenceFormFactor.

        Disk size of the Intelligence nodes in GBs.  # noqa: E501

        :param disk: The disk of this IntelligenceFormFactor.  # noqa: E501
        :type: int
        """

        self._disk = disk

    @property
    def type(self):
        """Gets the type of this IntelligenceFormFactor.  # noqa: E501

        NSX Intelligence node form factor type   # noqa: E501

        :return: The type of this IntelligenceFormFactor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IntelligenceFormFactor.

        NSX Intelligence node form factor type   # noqa: E501

        :param type: The type of this IntelligenceFormFactor.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL", "LARGE", "EXTRA_LARGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def memory(self):
        """Gets the memory of this IntelligenceFormFactor.  # noqa: E501

        Memory size of the Intelligence nodes in GBs  # noqa: E501

        :return: The memory of this IntelligenceFormFactor.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this IntelligenceFormFactor.

        Memory size of the Intelligence nodes in GBs  # noqa: E501

        :param memory: The memory of this IntelligenceFormFactor.  # noqa: E501
        :type: int
        """

        self._memory = memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntelligenceFormFactor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntelligenceFormFactor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
