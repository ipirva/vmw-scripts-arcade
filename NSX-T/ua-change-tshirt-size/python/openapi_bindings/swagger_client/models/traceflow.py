# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class Traceflow(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_state': 'str',
        'logical_counters': 'TraceflowObservationCounters',
        'timeout': 'int',
        'result_overflowed': 'bool',
        'lport_id': 'str',
        'counters': 'TraceflowObservationCounters',
        'request_status': 'str',
        'analysis': 'list[str]',
        'id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'operation_state': 'operation_state',
        'logical_counters': 'logical_counters',
        'timeout': 'timeout',
        'result_overflowed': 'result_overflowed',
        'lport_id': 'lport_id',
        'counters': 'counters',
        'request_status': 'request_status',
        'analysis': 'analysis',
        'id': 'id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, operation_state=None, logical_counters=None, timeout=None, result_overflowed=None, lport_id=None, counters=None, request_status=None, analysis=None, id=None, *args, **kwargs):  # noqa: E501
        """Traceflow - a model defined in Swagger"""  # noqa: E501
        self._operation_state = None
        self._logical_counters = None
        self._timeout = None
        self._result_overflowed = None
        self._lport_id = None
        self._counters = None
        self._request_status = None
        self._analysis = None
        self._id = None
        self.discriminator = None
        if operation_state is not None:
            self.operation_state = operation_state
        if logical_counters is not None:
            self.logical_counters = logical_counters
        if timeout is not None:
            self.timeout = timeout
        if result_overflowed is not None:
            self.result_overflowed = result_overflowed
        if lport_id is not None:
            self.lport_id = lport_id
        if counters is not None:
            self.counters = counters
        if request_status is not None:
            self.request_status = request_status
        if analysis is not None:
            self.analysis = analysis
        if id is not None:
            self.id = id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def operation_state(self):
        """Gets the operation_state of this Traceflow.  # noqa: E501

        Represents the traceflow operation state  # noqa: E501

        :return: The operation_state of this Traceflow.  # noqa: E501
        :rtype: str
        """
        return self._operation_state

    @operation_state.setter
    def operation_state(self, operation_state):
        """Sets the operation_state of this Traceflow.

        Represents the traceflow operation state  # noqa: E501

        :param operation_state: The operation_state of this Traceflow.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "FINISHED", "FAILED"]  # noqa: E501
        if operation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_state` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_state, allowed_values)
            )

        self._operation_state = operation_state

    @property
    def logical_counters(self):
        """Gets the logical_counters of this Traceflow.  # noqa: E501


        :return: The logical_counters of this Traceflow.  # noqa: E501
        :rtype: TraceflowObservationCounters
        """
        return self._logical_counters

    @logical_counters.setter
    def logical_counters(self, logical_counters):
        """Sets the logical_counters of this Traceflow.


        :param logical_counters: The logical_counters of this Traceflow.  # noqa: E501
        :type: TraceflowObservationCounters
        """

        self._logical_counters = logical_counters

    @property
    def timeout(self):
        """Gets the timeout of this Traceflow.  # noqa: E501

        Maximum time (in ms) the management plane will be waiting for this traceflow round.  # noqa: E501

        :return: The timeout of this Traceflow.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Traceflow.

        Maximum time (in ms) the management plane will be waiting for this traceflow round.  # noqa: E501

        :param timeout: The timeout of this Traceflow.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def result_overflowed(self):
        """Gets the result_overflowed of this Traceflow.  # noqa: E501

        A flag, when set true, indicates some observations were deleted from the result set.  # noqa: E501

        :return: The result_overflowed of this Traceflow.  # noqa: E501
        :rtype: bool
        """
        return self._result_overflowed

    @result_overflowed.setter
    def result_overflowed(self, result_overflowed):
        """Sets the result_overflowed of this Traceflow.

        A flag, when set true, indicates some observations were deleted from the result set.  # noqa: E501

        :param result_overflowed: The result_overflowed of this Traceflow.  # noqa: E501
        :type: bool
        """

        self._result_overflowed = result_overflowed

    @property
    def lport_id(self):
        """Gets the lport_id of this Traceflow.  # noqa: E501

        id of the source logical port used for injecting the traceflow packet  # noqa: E501

        :return: The lport_id of this Traceflow.  # noqa: E501
        :rtype: str
        """
        return self._lport_id

    @lport_id.setter
    def lport_id(self, lport_id):
        """Sets the lport_id of this Traceflow.

        id of the source logical port used for injecting the traceflow packet  # noqa: E501

        :param lport_id: The lport_id of this Traceflow.  # noqa: E501
        :type: str
        """

        self._lport_id = lport_id

    @property
    def counters(self):
        """Gets the counters of this Traceflow.  # noqa: E501


        :return: The counters of this Traceflow.  # noqa: E501
        :rtype: TraceflowObservationCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this Traceflow.


        :param counters: The counters of this Traceflow.  # noqa: E501
        :type: TraceflowObservationCounters
        """

        self._counters = counters

    @property
    def request_status(self):
        """Gets the request_status of this Traceflow.  # noqa: E501

        The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.  # noqa: E501

        :return: The request_status of this Traceflow.  # noqa: E501
        :rtype: str
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status):
        """Sets the request_status of this Traceflow.

        The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.  # noqa: E501

        :param request_status: The request_status of this Traceflow.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "TIMEOUT", "SOURCE_PORT_NOT_FOUND", "DATA_PATH_NOT_READY", "CONNECTION_ERROR", "UNKNOWN"]  # noqa: E501
        if request_status not in allowed_values:
            raise ValueError(
                "Invalid value for `request_status` ({0}), must be one of {1}"  # noqa: E501
                .format(request_status, allowed_values)
            )

        self._request_status = request_status

    @property
    def analysis(self):
        """Gets the analysis of this Traceflow.  # noqa: E501

        Traceflow result analysis notes  # noqa: E501

        :return: The analysis of this Traceflow.  # noqa: E501
        :rtype: list[str]
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this Traceflow.

        Traceflow result analysis notes  # noqa: E501

        :param analysis: The analysis of this Traceflow.  # noqa: E501
        :type: list[str]
        """

        self._analysis = analysis

    @property
    def id(self):
        """Gets the id of this Traceflow.  # noqa: E501

        The id of the traceflow round  # noqa: E501

        :return: The id of this Traceflow.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Traceflow.

        The id of the traceflow round  # noqa: E501

        :param id: The id of this Traceflow.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Traceflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Traceflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
