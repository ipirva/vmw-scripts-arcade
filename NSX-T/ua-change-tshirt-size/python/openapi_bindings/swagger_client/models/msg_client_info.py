# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MsgClientInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'software_version': 'str',
        'account_name': 'str',
        'certificate': 'str',
        'shared_secret': 'str'
    }

    attribute_map = {
        'software_version': 'software_version',
        'account_name': 'account_name',
        'certificate': 'certificate',
        'shared_secret': 'shared_secret'
    }

    def __init__(self, software_version=None, account_name=None, certificate=None, shared_secret=None):  # noqa: E501
        """MsgClientInfo - a model defined in Swagger"""  # noqa: E501
        self._software_version = None
        self._account_name = None
        self._certificate = None
        self._shared_secret = None
        self.discriminator = None
        if software_version is not None:
            self.software_version = software_version
        if account_name is not None:
            self.account_name = account_name
        if certificate is not None:
            self.certificate = certificate
        if shared_secret is not None:
            self.shared_secret = shared_secret

    @property
    def software_version(self):
        """Gets the software_version of this MsgClientInfo.  # noqa: E501

        Software version of the node.  # noqa: E501

        :return: The software_version of this MsgClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this MsgClientInfo.

        Software version of the node.  # noqa: E501

        :param software_version: The software_version of this MsgClientInfo.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def account_name(self):
        """Gets the account_name of this MsgClientInfo.  # noqa: E501

        Account name for the messaging client. Identifies the client on the management plane message bus.  # noqa: E501

        :return: The account_name of this MsgClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this MsgClientInfo.

        Account name for the messaging client. Identifies the client on the management plane message bus.  # noqa: E501

        :param account_name: The account_name of this MsgClientInfo.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def certificate(self):
        """Gets the certificate of this MsgClientInfo.  # noqa: E501

        Messaging client's certificate. Used to authenticate to the control plane messaging endpoint.  # noqa: E501

        :return: The certificate of this MsgClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this MsgClientInfo.

        Messaging client's certificate. Used to authenticate to the control plane messaging endpoint.  # noqa: E501

        :param certificate: The certificate of this MsgClientInfo.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def shared_secret(self):
        """Gets the shared_secret of this MsgClientInfo.  # noqa: E501

        Messaging client's secret. Used to authenticate to the management plane messaging broker.  # noqa: E501

        :return: The shared_secret of this MsgClientInfo.  # noqa: E501
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this MsgClientInfo.

        Messaging client's secret. Used to authenticate to the management plane messaging broker.  # noqa: E501

        :param shared_secret: The shared_secret of this MsgClientInfo.  # noqa: E501
        :type: str
        """

        self._shared_secret = shared_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MsgClientInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsgClientInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
