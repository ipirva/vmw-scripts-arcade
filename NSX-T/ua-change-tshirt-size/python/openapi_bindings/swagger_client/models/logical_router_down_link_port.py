# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.logical_router_port import LogicalRouterPort  # noqa: F401,E501

class LogicalRouterDownLinkPort(LogicalRouterPort):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnets': 'list[IPSubnet]',
        'linked_logical_switch_port_id': 'ResourceReference',
        'ndra_profile_id': 'str',
        'mac_address': 'str',
        'urpf_mode': 'str',
        'routing_policies': 'list[RoutingPolicy]',
        'enable_multicast': 'bool',
        'ndra_prefix_config': 'list[NDRAPrefixConfig]'
    }
    if hasattr(LogicalRouterPort, "swagger_types"):
        swagger_types.update(LogicalRouterPort.swagger_types)

    attribute_map = {
        'subnets': 'subnets',
        'linked_logical_switch_port_id': 'linked_logical_switch_port_id',
        'ndra_profile_id': 'ndra_profile_id',
        'mac_address': 'mac_address',
        'urpf_mode': 'urpf_mode',
        'routing_policies': 'routing_policies',
        'enable_multicast': 'enable_multicast',
        'ndra_prefix_config': 'ndra_prefix_config'
    }
    if hasattr(LogicalRouterPort, "attribute_map"):
        attribute_map.update(LogicalRouterPort.attribute_map)

    def __init__(self, subnets=None, linked_logical_switch_port_id=None, ndra_profile_id=None, mac_address=None, urpf_mode='STRICT', routing_policies=None, enable_multicast=None, ndra_prefix_config=None, *args, **kwargs):  # noqa: E501
        """LogicalRouterDownLinkPort - a model defined in Swagger"""  # noqa: E501
        self._subnets = None
        self._linked_logical_switch_port_id = None
        self._ndra_profile_id = None
        self._mac_address = None
        self._urpf_mode = None
        self._routing_policies = None
        self._enable_multicast = None
        self._ndra_prefix_config = None
        self.discriminator = None
        self.subnets = subnets
        if linked_logical_switch_port_id is not None:
            self.linked_logical_switch_port_id = linked_logical_switch_port_id
        if ndra_profile_id is not None:
            self.ndra_profile_id = ndra_profile_id
        if mac_address is not None:
            self.mac_address = mac_address
        if urpf_mode is not None:
            self.urpf_mode = urpf_mode
        if routing_policies is not None:
            self.routing_policies = routing_policies
        if enable_multicast is not None:
            self.enable_multicast = enable_multicast
        if ndra_prefix_config is not None:
            self.ndra_prefix_config = ndra_prefix_config
        LogicalRouterPort.__init__(self, *args, **kwargs)

    @property
    def subnets(self):
        """Gets the subnets of this LogicalRouterDownLinkPort.  # noqa: E501

        Logical router port subnets  # noqa: E501

        :return: The subnets of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: list[IPSubnet]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this LogicalRouterDownLinkPort.

        Logical router port subnets  # noqa: E501

        :param subnets: The subnets of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: list[IPSubnet]
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")  # noqa: E501

        self._subnets = subnets

    @property
    def linked_logical_switch_port_id(self):
        """Gets the linked_logical_switch_port_id of this LogicalRouterDownLinkPort.  # noqa: E501


        :return: The linked_logical_switch_port_id of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._linked_logical_switch_port_id

    @linked_logical_switch_port_id.setter
    def linked_logical_switch_port_id(self, linked_logical_switch_port_id):
        """Sets the linked_logical_switch_port_id of this LogicalRouterDownLinkPort.


        :param linked_logical_switch_port_id: The linked_logical_switch_port_id of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: ResourceReference
        """

        self._linked_logical_switch_port_id = linked_logical_switch_port_id

    @property
    def ndra_profile_id(self):
        """Gets the ndra_profile_id of this LogicalRouterDownLinkPort.  # noqa: E501

        Identifier of Neighbor Discovery Router Advertisement profile associated with port. When NDRA profile id is associated at both the port level and logical router level, the profile id specified at port level takes the precedence.   # noqa: E501

        :return: The ndra_profile_id of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: str
        """
        return self._ndra_profile_id

    @ndra_profile_id.setter
    def ndra_profile_id(self, ndra_profile_id):
        """Sets the ndra_profile_id of this LogicalRouterDownLinkPort.

        Identifier of Neighbor Discovery Router Advertisement profile associated with port. When NDRA profile id is associated at both the port level and logical router level, the profile id specified at port level takes the precedence.   # noqa: E501

        :param ndra_profile_id: The ndra_profile_id of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: str
        """

        self._ndra_profile_id = ndra_profile_id

    @property
    def mac_address(self):
        """Gets the mac_address of this LogicalRouterDownLinkPort.  # noqa: E501

        MAC address  # noqa: E501

        :return: The mac_address of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this LogicalRouterDownLinkPort.

        MAC address  # noqa: E501

        :param mac_address: The mac_address of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def urpf_mode(self):
        """Gets the urpf_mode of this LogicalRouterDownLinkPort.  # noqa: E501

        Unicast Reverse Path Forwarding mode  # noqa: E501

        :return: The urpf_mode of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: str
        """
        return self._urpf_mode

    @urpf_mode.setter
    def urpf_mode(self, urpf_mode):
        """Sets the urpf_mode of this LogicalRouterDownLinkPort.

        Unicast Reverse Path Forwarding mode  # noqa: E501

        :param urpf_mode: The urpf_mode of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "STRICT"]  # noqa: E501
        if urpf_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `urpf_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(urpf_mode, allowed_values)
            )

        self._urpf_mode = urpf_mode

    @property
    def routing_policies(self):
        """Gets the routing_policies of this LogicalRouterDownLinkPort.  # noqa: E501

        Routing policies used to specify how the traffic, which matches the policy routes, will be processed.   # noqa: E501

        :return: The routing_policies of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: list[RoutingPolicy]
        """
        return self._routing_policies

    @routing_policies.setter
    def routing_policies(self, routing_policies):
        """Sets the routing_policies of this LogicalRouterDownLinkPort.

        Routing policies used to specify how the traffic, which matches the policy routes, will be processed.   # noqa: E501

        :param routing_policies: The routing_policies of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: list[RoutingPolicy]
        """

        self._routing_policies = routing_policies

    @property
    def enable_multicast(self):
        """Gets the enable_multicast of this LogicalRouterDownLinkPort.  # noqa: E501

        If this flag is set to true - it will enable multicast on the downlink interface. If this flag is set to false - it will disable multicast on the downlink interface. This is supported only on Tier0 downlinks. Default value for Tier0 downlink will be true.   # noqa: E501

        :return: The enable_multicast of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: bool
        """
        return self._enable_multicast

    @enable_multicast.setter
    def enable_multicast(self, enable_multicast):
        """Sets the enable_multicast of this LogicalRouterDownLinkPort.

        If this flag is set to true - it will enable multicast on the downlink interface. If this flag is set to false - it will disable multicast on the downlink interface. This is supported only on Tier0 downlinks. Default value for Tier0 downlink will be true.   # noqa: E501

        :param enable_multicast: The enable_multicast of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: bool
        """

        self._enable_multicast = enable_multicast

    @property
    def ndra_prefix_config(self):
        """Gets the ndra_prefix_config of this LogicalRouterDownLinkPort.  # noqa: E501

        Configuration to override the neighbor discovery router advertisement prefix time parameters at the subnet level. Note that users are allowed to override the prefix time only for IPv6 subnets which are configured on the port.   # noqa: E501

        :return: The ndra_prefix_config of this LogicalRouterDownLinkPort.  # noqa: E501
        :rtype: list[NDRAPrefixConfig]
        """
        return self._ndra_prefix_config

    @ndra_prefix_config.setter
    def ndra_prefix_config(self, ndra_prefix_config):
        """Sets the ndra_prefix_config of this LogicalRouterDownLinkPort.

        Configuration to override the neighbor discovery router advertisement prefix time parameters at the subnet level. Note that users are allowed to override the prefix time only for IPv6 subnets which are configured on the port.   # noqa: E501

        :param ndra_prefix_config: The ndra_prefix_config of this LogicalRouterDownLinkPort.  # noqa: E501
        :type: list[NDRAPrefixConfig]
        """

        self._ndra_prefix_config = ndra_prefix_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalRouterDownLinkPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalRouterDownLinkPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
