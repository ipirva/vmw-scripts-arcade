# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VIPSubnet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prefix_length': 'int',
        'active_vip_addresses': 'list[str]'
    }

    attribute_map = {
        'prefix_length': 'prefix_length',
        'active_vip_addresses': 'active_vip_addresses'
    }

    def __init__(self, prefix_length=None, active_vip_addresses=None):  # noqa: E501
        """VIPSubnet - a model defined in Swagger"""  # noqa: E501
        self._prefix_length = None
        self._active_vip_addresses = None
        self.discriminator = None
        self.prefix_length = prefix_length
        self.active_vip_addresses = active_vip_addresses

    @property
    def prefix_length(self):
        """Gets the prefix_length of this VIPSubnet.  # noqa: E501

        Subnet Prefix Length  # noqa: E501

        :return: The prefix_length of this VIPSubnet.  # noqa: E501
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this VIPSubnet.

        Subnet Prefix Length  # noqa: E501

        :param prefix_length: The prefix_length of this VIPSubnet.  # noqa: E501
        :type: int
        """
        if prefix_length is None:
            raise ValueError("Invalid value for `prefix_length`, must not be `None`")  # noqa: E501

        self._prefix_length = prefix_length

    @property
    def active_vip_addresses(self):
        """Gets the active_vip_addresses of this VIPSubnet.  # noqa: E501

        Array of IP address subnets which will be used as floating IP addresses. | These IPs will move and will be owned by Active node.  # noqa: E501

        :return: The active_vip_addresses of this VIPSubnet.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_vip_addresses

    @active_vip_addresses.setter
    def active_vip_addresses(self, active_vip_addresses):
        """Sets the active_vip_addresses of this VIPSubnet.

        Array of IP address subnets which will be used as floating IP addresses. | These IPs will move and will be owned by Active node.  # noqa: E501

        :param active_vip_addresses: The active_vip_addresses of this VIPSubnet.  # noqa: E501
        :type: list[str]
        """
        if active_vip_addresses is None:
            raise ValueError("Invalid value for `active_vip_addresses`, must not be `None`")  # noqa: E501

        self._active_vip_addresses = active_vip_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VIPSubnet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VIPSubnet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
