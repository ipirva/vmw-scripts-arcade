# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.directory_domain import DirectoryDomain  # noqa: F401,E501

class DirectoryAdDomain(DirectoryDomain):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_distinguished_name': 'str',
        'sync_settings': 'DirectoryDomainSyncSettings',
        'netbios_name': 'str',
        'selective_sync_settings': 'SelectiveSyncSettings'
    }
    if hasattr(DirectoryDomain, "swagger_types"):
        swagger_types.update(DirectoryDomain.swagger_types)

    attribute_map = {
        'base_distinguished_name': 'base_distinguished_name',
        'sync_settings': 'sync_settings',
        'netbios_name': 'netbios_name',
        'selective_sync_settings': 'selective_sync_settings'
    }
    if hasattr(DirectoryDomain, "attribute_map"):
        attribute_map.update(DirectoryDomain.attribute_map)

    def __init__(self, base_distinguished_name=None, sync_settings=None, netbios_name=None, selective_sync_settings=None, *args, **kwargs):  # noqa: E501
        """DirectoryAdDomain - a model defined in Swagger"""  # noqa: E501
        self._base_distinguished_name = None
        self._sync_settings = None
        self._netbios_name = None
        self._selective_sync_settings = None
        self.discriminator = None
        self.base_distinguished_name = base_distinguished_name
        if sync_settings is not None:
            self.sync_settings = sync_settings
        self.netbios_name = netbios_name
        if selective_sync_settings is not None:
            self.selective_sync_settings = selective_sync_settings
        DirectoryDomain.__init__(self, *args, **kwargs)

    @property
    def base_distinguished_name(self):
        """Gets the base_distinguished_name of this DirectoryAdDomain.  # noqa: E501

        Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.  # noqa: E501

        :return: The base_distinguished_name of this DirectoryAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._base_distinguished_name

    @base_distinguished_name.setter
    def base_distinguished_name(self, base_distinguished_name):
        """Sets the base_distinguished_name of this DirectoryAdDomain.

        Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.  # noqa: E501

        :param base_distinguished_name: The base_distinguished_name of this DirectoryAdDomain.  # noqa: E501
        :type: str
        """
        if base_distinguished_name is None:
            raise ValueError("Invalid value for `base_distinguished_name`, must not be `None`")  # noqa: E501

        self._base_distinguished_name = base_distinguished_name

    @property
    def sync_settings(self):
        """Gets the sync_settings of this DirectoryAdDomain.  # noqa: E501


        :return: The sync_settings of this DirectoryAdDomain.  # noqa: E501
        :rtype: DirectoryDomainSyncSettings
        """
        return self._sync_settings

    @sync_settings.setter
    def sync_settings(self, sync_settings):
        """Sets the sync_settings of this DirectoryAdDomain.


        :param sync_settings: The sync_settings of this DirectoryAdDomain.  # noqa: E501
        :type: DirectoryDomainSyncSettings
        """

        self._sync_settings = sync_settings

    @property
    def netbios_name(self):
        """Gets the netbios_name of this DirectoryAdDomain.  # noqa: E501

        NetBIOS names can contain all alphanumeric characters except for the certain disallowed characters. Names can contain a period, but names cannot start with a period. NetBIOS is similar to DNS in that it can serve as a directory service, but more limited as it has no provisions for a name hierarchy and names are limited to 15 characters. The netbios name is case insensitive and is stored in upper case regardless of input case.  # noqa: E501

        :return: The netbios_name of this DirectoryAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._netbios_name

    @netbios_name.setter
    def netbios_name(self, netbios_name):
        """Sets the netbios_name of this DirectoryAdDomain.

        NetBIOS names can contain all alphanumeric characters except for the certain disallowed characters. Names can contain a period, but names cannot start with a period. NetBIOS is similar to DNS in that it can serve as a directory service, but more limited as it has no provisions for a name hierarchy and names are limited to 15 characters. The netbios name is case insensitive and is stored in upper case regardless of input case.  # noqa: E501

        :param netbios_name: The netbios_name of this DirectoryAdDomain.  # noqa: E501
        :type: str
        """
        if netbios_name is None:
            raise ValueError("Invalid value for `netbios_name`, must not be `None`")  # noqa: E501

        self._netbios_name = netbios_name

    @property
    def selective_sync_settings(self):
        """Gets the selective_sync_settings of this DirectoryAdDomain.  # noqa: E501


        :return: The selective_sync_settings of this DirectoryAdDomain.  # noqa: E501
        :rtype: SelectiveSyncSettings
        """
        return self._selective_sync_settings

    @selective_sync_settings.setter
    def selective_sync_settings(self, selective_sync_settings):
        """Sets the selective_sync_settings of this DirectoryAdDomain.


        :param selective_sync_settings: The selective_sync_settings of this DirectoryAdDomain.  # noqa: E501
        :type: SelectiveSyncSettings
        """

        self._selective_sync_settings = selective_sync_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryAdDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryAdDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
