# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.virtual_switch import VirtualSwitch  # noqa: F401,E501

class DistributedVirtualSwitch(VirtualSwitch):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discovered_nodes': 'list[DiscoveredNode]',
        'uplink_portgroup': 'DistributedVirtualPortgroup',
        'uuid': 'str',
        'origin_properties': 'list[KeyValuePair]',
        'lacp_group_configs': 'list[LacpGroupConfigInfo]',
        'uplink_port_names': 'list[str]'
    }
    if hasattr(VirtualSwitch, "swagger_types"):
        swagger_types.update(VirtualSwitch.swagger_types)

    attribute_map = {
        'discovered_nodes': 'discovered_nodes',
        'uplink_portgroup': 'uplink_portgroup',
        'uuid': 'uuid',
        'origin_properties': 'origin_properties',
        'lacp_group_configs': 'lacp_group_configs',
        'uplink_port_names': 'uplink_port_names'
    }
    if hasattr(VirtualSwitch, "attribute_map"):
        attribute_map.update(VirtualSwitch.attribute_map)

    def __init__(self, discovered_nodes=None, uplink_portgroup=None, uuid=None, origin_properties=None, lacp_group_configs=None, uplink_port_names=None, *args, **kwargs):  # noqa: E501
        """DistributedVirtualSwitch - a model defined in Swagger"""  # noqa: E501
        self._discovered_nodes = None
        self._uplink_portgroup = None
        self._uuid = None
        self._origin_properties = None
        self._lacp_group_configs = None
        self._uplink_port_names = None
        self.discriminator = None
        if discovered_nodes is not None:
            self.discovered_nodes = discovered_nodes
        if uplink_portgroup is not None:
            self.uplink_portgroup = uplink_portgroup
        if uuid is not None:
            self.uuid = uuid
        if origin_properties is not None:
            self.origin_properties = origin_properties
        if lacp_group_configs is not None:
            self.lacp_group_configs = lacp_group_configs
        if uplink_port_names is not None:
            self.uplink_port_names = uplink_port_names
        VirtualSwitch.__init__(self, *args, **kwargs)

    @property
    def discovered_nodes(self):
        """Gets the discovered_nodes of this DistributedVirtualSwitch.  # noqa: E501

        Array of discovered nodes connected to this switch.  # noqa: E501

        :return: The discovered_nodes of this DistributedVirtualSwitch.  # noqa: E501
        :rtype: list[DiscoveredNode]
        """
        return self._discovered_nodes

    @discovered_nodes.setter
    def discovered_nodes(self, discovered_nodes):
        """Sets the discovered_nodes of this DistributedVirtualSwitch.

        Array of discovered nodes connected to this switch.  # noqa: E501

        :param discovered_nodes: The discovered_nodes of this DistributedVirtualSwitch.  # noqa: E501
        :type: list[DiscoveredNode]
        """

        self._discovered_nodes = discovered_nodes

    @property
    def uplink_portgroup(self):
        """Gets the uplink_portgroup of this DistributedVirtualSwitch.  # noqa: E501


        :return: The uplink_portgroup of this DistributedVirtualSwitch.  # noqa: E501
        :rtype: DistributedVirtualPortgroup
        """
        return self._uplink_portgroup

    @uplink_portgroup.setter
    def uplink_portgroup(self, uplink_portgroup):
        """Sets the uplink_portgroup of this DistributedVirtualSwitch.


        :param uplink_portgroup: The uplink_portgroup of this DistributedVirtualSwitch.  # noqa: E501
        :type: DistributedVirtualPortgroup
        """

        self._uplink_portgroup = uplink_portgroup

    @property
    def uuid(self):
        """Gets the uuid of this DistributedVirtualSwitch.  # noqa: E501

        UUID of the switch  # noqa: E501

        :return: The uuid of this DistributedVirtualSwitch.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DistributedVirtualSwitch.

        UUID of the switch  # noqa: E501

        :param uuid: The uuid of this DistributedVirtualSwitch.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def origin_properties(self):
        """Gets the origin_properties of this DistributedVirtualSwitch.  # noqa: E501

        Key-Value map of additional properties of switch  # noqa: E501

        :return: The origin_properties of this DistributedVirtualSwitch.  # noqa: E501
        :rtype: list[KeyValuePair]
        """
        return self._origin_properties

    @origin_properties.setter
    def origin_properties(self, origin_properties):
        """Sets the origin_properties of this DistributedVirtualSwitch.

        Key-Value map of additional properties of switch  # noqa: E501

        :param origin_properties: The origin_properties of this DistributedVirtualSwitch.  # noqa: E501
        :type: list[KeyValuePair]
        """

        self._origin_properties = origin_properties

    @property
    def lacp_group_configs(self):
        """Gets the lacp_group_configs of this DistributedVirtualSwitch.  # noqa: E501

        It contains information about VMware specific multiple dynamic LACP groups.   # noqa: E501

        :return: The lacp_group_configs of this DistributedVirtualSwitch.  # noqa: E501
        :rtype: list[LacpGroupConfigInfo]
        """
        return self._lacp_group_configs

    @lacp_group_configs.setter
    def lacp_group_configs(self, lacp_group_configs):
        """Sets the lacp_group_configs of this DistributedVirtualSwitch.

        It contains information about VMware specific multiple dynamic LACP groups.   # noqa: E501

        :param lacp_group_configs: The lacp_group_configs of this DistributedVirtualSwitch.  # noqa: E501
        :type: list[LacpGroupConfigInfo]
        """

        self._lacp_group_configs = lacp_group_configs

    @property
    def uplink_port_names(self):
        """Gets the uplink_port_names of this DistributedVirtualSwitch.  # noqa: E501

        The uniform name of uplink ports on each host.  # noqa: E501

        :return: The uplink_port_names of this DistributedVirtualSwitch.  # noqa: E501
        :rtype: list[str]
        """
        return self._uplink_port_names

    @uplink_port_names.setter
    def uplink_port_names(self, uplink_port_names):
        """Sets the uplink_port_names of this DistributedVirtualSwitch.

        The uniform name of uplink ports on each host.  # noqa: E501

        :param uplink_port_names: The uplink_port_names of this DistributedVirtualSwitch.  # noqa: E501
        :type: list[str]
        """

        self._uplink_port_names = uplink_port_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributedVirtualSwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributedVirtualSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
