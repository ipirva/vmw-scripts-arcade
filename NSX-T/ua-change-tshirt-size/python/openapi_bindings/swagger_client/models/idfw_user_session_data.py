# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdfwUserSessionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'user_session_id': 'int',
        'vm_ext_id': 'str',
        'id': 'str',
        'login_time': 'int',
        'user_name': 'str',
        'logout_time': 'int',
        'domain_name': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'user_session_id': 'user_session_id',
        'vm_ext_id': 'vm_ext_id',
        'id': 'id',
        'login_time': 'login_time',
        'user_name': 'user_name',
        'logout_time': 'logout_time',
        'domain_name': 'domain_name'
    }

    def __init__(self, user_id=None, user_session_id=None, vm_ext_id=None, id=None, login_time=None, user_name=None, logout_time=None, domain_name=None):  # noqa: E501
        """IdfwUserSessionData - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._user_session_id = None
        self._vm_ext_id = None
        self._id = None
        self._login_time = None
        self._user_name = None
        self._logout_time = None
        self._domain_name = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        self.user_session_id = user_session_id
        if vm_ext_id is not None:
            self.vm_ext_id = vm_ext_id
        if id is not None:
            self.id = id
        self.login_time = login_time
        self.user_name = user_name
        if logout_time is not None:
            self.logout_time = logout_time
        self.domain_name = domain_name

    @property
    def user_id(self):
        """Gets the user_id of this IdfwUserSessionData.  # noqa: E501

        AD user ID (may not exist).  # noqa: E501

        :return: The user_id of this IdfwUserSessionData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this IdfwUserSessionData.

        AD user ID (may not exist).  # noqa: E501

        :param user_id: The user_id of this IdfwUserSessionData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_session_id(self):
        """Gets the user_session_id of this IdfwUserSessionData.  # noqa: E501

        User session ID.  This also indicates whether this is VDI / RDSH.  # noqa: E501

        :return: The user_session_id of this IdfwUserSessionData.  # noqa: E501
        :rtype: int
        """
        return self._user_session_id

    @user_session_id.setter
    def user_session_id(self, user_session_id):
        """Sets the user_session_id of this IdfwUserSessionData.

        User session ID.  This also indicates whether this is VDI / RDSH.  # noqa: E501

        :param user_session_id: The user_session_id of this IdfwUserSessionData.  # noqa: E501
        :type: int
        """
        if user_session_id is None:
            raise ValueError("Invalid value for `user_session_id`, must not be `None`")  # noqa: E501

        self._user_session_id = user_session_id

    @property
    def vm_ext_id(self):
        """Gets the vm_ext_id of this IdfwUserSessionData.  # noqa: E501

        Virtual machine (external ID or BIOS UUID) where login/logout events occurred.  # noqa: E501

        :return: The vm_ext_id of this IdfwUserSessionData.  # noqa: E501
        :rtype: str
        """
        return self._vm_ext_id

    @vm_ext_id.setter
    def vm_ext_id(self, vm_ext_id):
        """Sets the vm_ext_id of this IdfwUserSessionData.

        Virtual machine (external ID or BIOS UUID) where login/logout events occurred.  # noqa: E501

        :param vm_ext_id: The vm_ext_id of this IdfwUserSessionData.  # noqa: E501
        :type: str
        """

        self._vm_ext_id = vm_ext_id

    @property
    def id(self):
        """Gets the id of this IdfwUserSessionData.  # noqa: E501

        Identifier of user session data.  # noqa: E501

        :return: The id of this IdfwUserSessionData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdfwUserSessionData.

        Identifier of user session data.  # noqa: E501

        :param id: The id of this IdfwUserSessionData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def login_time(self):
        """Gets the login_time of this IdfwUserSessionData.  # noqa: E501

        Login time.  # noqa: E501

        :return: The login_time of this IdfwUserSessionData.  # noqa: E501
        :rtype: int
        """
        return self._login_time

    @login_time.setter
    def login_time(self, login_time):
        """Sets the login_time of this IdfwUserSessionData.

        Login time.  # noqa: E501

        :param login_time: The login_time of this IdfwUserSessionData.  # noqa: E501
        :type: int
        """
        if login_time is None:
            raise ValueError("Invalid value for `login_time`, must not be `None`")  # noqa: E501

        self._login_time = login_time

    @property
    def user_name(self):
        """Gets the user_name of this IdfwUserSessionData.  # noqa: E501

        AD user name.  # noqa: E501

        :return: The user_name of this IdfwUserSessionData.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this IdfwUserSessionData.

        AD user name.  # noqa: E501

        :param user_name: The user_name of this IdfwUserSessionData.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def logout_time(self):
        """Gets the logout_time of this IdfwUserSessionData.  # noqa: E501

        Logout time if applicable.  An active user session has no logout time. Non-active user session is stored (up to last 5 most recent entries) per VM and per user.   # noqa: E501

        :return: The logout_time of this IdfwUserSessionData.  # noqa: E501
        :rtype: int
        """
        return self._logout_time

    @logout_time.setter
    def logout_time(self, logout_time):
        """Sets the logout_time of this IdfwUserSessionData.

        Logout time if applicable.  An active user session has no logout time. Non-active user session is stored (up to last 5 most recent entries) per VM and per user.   # noqa: E501

        :param logout_time: The logout_time of this IdfwUserSessionData.  # noqa: E501
        :type: int
        """

        self._logout_time = logout_time

    @property
    def domain_name(self):
        """Gets the domain_name of this IdfwUserSessionData.  # noqa: E501

        AD Domain of user.  # noqa: E501

        :return: The domain_name of this IdfwUserSessionData.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this IdfwUserSessionData.

        AD Domain of user.  # noqa: E501

        :param domain_name: The domain_name of this IdfwUserSessionData.  # noqa: E501
        :type: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdfwUserSessionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdfwUserSessionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
