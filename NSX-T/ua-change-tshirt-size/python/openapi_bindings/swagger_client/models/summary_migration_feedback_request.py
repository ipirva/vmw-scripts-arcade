# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SummaryMigrationFeedbackRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resolved': 'bool',
        'v_object_name': 'str',
        'rejected': 'bool',
        'v_object_id': 'str',
        'resolution': 'str',
        'id': 'str',
        'object_id': 'str',
        'details': 'str'
    }

    attribute_map = {
        'resolved': 'resolved',
        'v_object_name': 'v_object_name',
        'rejected': 'rejected',
        'v_object_id': 'v_object_id',
        'resolution': 'resolution',
        'id': 'id',
        'object_id': 'object_id',
        'details': 'details'
    }

    def __init__(self, resolved=None, v_object_name=None, rejected=None, v_object_id=None, resolution=None, id=None, object_id=None, details=None):  # noqa: E501
        """SummaryMigrationFeedbackRequest - a model defined in Swagger"""  # noqa: E501
        self._resolved = None
        self._v_object_name = None
        self._rejected = None
        self._v_object_id = None
        self._resolution = None
        self._id = None
        self._object_id = None
        self._details = None
        self.discriminator = None
        if resolved is not None:
            self.resolved = resolved
        if v_object_name is not None:
            self.v_object_name = v_object_name
        if rejected is not None:
            self.rejected = rejected
        if v_object_id is not None:
            self.v_object_id = v_object_id
        if resolution is not None:
            self.resolution = resolution
        if id is not None:
            self.id = id
        if object_id is not None:
            self.object_id = object_id
        if details is not None:
            self.details = details

    @property
    def resolved(self):
        """Gets the resolved of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Indicates if a valid response already exist for this feedback request.  # noqa: E501

        :return: The resolved of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this SummaryMigrationFeedbackRequest.

        Indicates if a valid response already exist for this feedback request.  # noqa: E501

        :param resolved: The resolved of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: bool
        """

        self._resolved = resolved

    @property
    def v_object_name(self):
        """Gets the v_object_name of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Name of this object in the source NSX endpoint.  # noqa: E501

        :return: The v_object_name of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._v_object_name

    @v_object_name.setter
    def v_object_name(self, v_object_name):
        """Sets the v_object_name of this SummaryMigrationFeedbackRequest.

        Name of this object in the source NSX endpoint.  # noqa: E501

        :param v_object_name: The v_object_name of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._v_object_name = v_object_name

    @property
    def rejected(self):
        """Gets the rejected of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Indicates if previous response was invalid. Please provide a valid response.  # noqa: E501

        :return: The rejected of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this SummaryMigrationFeedbackRequest.

        Indicates if previous response was invalid. Please provide a valid response.  # noqa: E501

        :param rejected: The rejected of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: bool
        """

        self._rejected = rejected

    @property
    def v_object_id(self):
        """Gets the v_object_id of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Identifier for this object in the source NSX endpoint.  # noqa: E501

        :return: The v_object_id of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._v_object_id

    @v_object_id.setter
    def v_object_id(self, v_object_id):
        """Sets the v_object_id of this SummaryMigrationFeedbackRequest.

        Identifier for this object in the source NSX endpoint.  # noqa: E501

        :param v_object_id: The v_object_id of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._v_object_id = v_object_id

    @property
    def resolution(self):
        """Gets the resolution of this SummaryMigrationFeedbackRequest.  # noqa: E501

        If the feedback request was resolved earlier, provides details about the previous resolution.  # noqa: E501

        :return: The resolution of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this SummaryMigrationFeedbackRequest.

        If the feedback request was resolved earlier, provides details about the previous resolution.  # noqa: E501

        :param resolution: The resolution of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def id(self):
        """Gets the id of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Identifier of the feedback request.  # noqa: E501

        :return: The id of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SummaryMigrationFeedbackRequest.

        Identifier of the feedback request.  # noqa: E501

        :param id: The id of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object_id(self):
        """Gets the object_id of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Identifier of the object for which feedback is requested.  # noqa: E501

        :return: The object_id of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this SummaryMigrationFeedbackRequest.

        Identifier of the object for which feedback is requested.  # noqa: E501

        :param object_id: The object_id of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def details(self):
        """Gets the details of this SummaryMigrationFeedbackRequest.  # noqa: E501

        Details about this specific feedback request.  # noqa: E501

        :return: The details of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SummaryMigrationFeedbackRequest.

        Details about this specific feedback request.  # noqa: E501

        :param details: The details of this SummaryMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryMigrationFeedbackRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryMigrationFeedbackRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
