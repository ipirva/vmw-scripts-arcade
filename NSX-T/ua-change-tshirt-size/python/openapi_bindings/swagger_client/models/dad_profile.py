# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class DADProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wait_time': 'int',
        'ns_retries': 'int',
        'dad_mode': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'wait_time': 'wait_time',
        'ns_retries': 'ns_retries',
        'dad_mode': 'dad_mode'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, wait_time=1, ns_retries=3, dad_mode='LOOSE', *args, **kwargs):  # noqa: E501
        """DADProfile - a model defined in Swagger"""  # noqa: E501
        self._wait_time = None
        self._ns_retries = None
        self._dad_mode = None
        self.discriminator = None
        if wait_time is not None:
            self.wait_time = wait_time
        if ns_retries is not None:
            self.ns_retries = ns_retries
        if dad_mode is not None:
            self.dad_mode = dad_mode
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def wait_time(self):
        """Gets the wait_time of this DADProfile.  # noqa: E501

        The time duration in seconds, to wait for Neighbor advertisement after sending the Neighbor solicitation message.   # noqa: E501

        :return: The wait_time of this DADProfile.  # noqa: E501
        :rtype: int
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this DADProfile.

        The time duration in seconds, to wait for Neighbor advertisement after sending the Neighbor solicitation message.   # noqa: E501

        :param wait_time: The wait_time of this DADProfile.  # noqa: E501
        :type: int
        """

        self._wait_time = wait_time

    @property
    def ns_retries(self):
        """Gets the ns_retries of this DADProfile.  # noqa: E501

        Number of Neighbor solicitation packets generated before completing the Duplicate address detection process.   # noqa: E501

        :return: The ns_retries of this DADProfile.  # noqa: E501
        :rtype: int
        """
        return self._ns_retries

    @ns_retries.setter
    def ns_retries(self, ns_retries):
        """Sets the ns_retries of this DADProfile.

        Number of Neighbor solicitation packets generated before completing the Duplicate address detection process.   # noqa: E501

        :param ns_retries: The ns_retries of this DADProfile.  # noqa: E501
        :type: int
        """

        self._ns_retries = ns_retries

    @property
    def dad_mode(self):
        """Gets the dad_mode of this DADProfile.  # noqa: E501

        DAD Mode  # noqa: E501

        :return: The dad_mode of this DADProfile.  # noqa: E501
        :rtype: str
        """
        return self._dad_mode

    @dad_mode.setter
    def dad_mode(self, dad_mode):
        """Sets the dad_mode of this DADProfile.

        DAD Mode  # noqa: E501

        :param dad_mode: The dad_mode of this DADProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOOSE", "STRICT"]  # noqa: E501
        if dad_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `dad_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(dad_mode, allowed_values)
            )

        self._dad_mode = dad_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DADProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DADProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
