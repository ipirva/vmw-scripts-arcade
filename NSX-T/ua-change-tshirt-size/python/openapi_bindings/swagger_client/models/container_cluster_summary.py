# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ContainerClusterSummary(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_name': 'str',
        'status': 'str',
        'type': 'str',
        'detail': 'str',
        'cluster_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'cluster_name': 'cluster_name',
        'status': 'status',
        'type': 'type',
        'detail': 'detail',
        'cluster_id': 'cluster_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, cluster_name=None, status=None, type=None, detail=None, cluster_id=None, *args, **kwargs):  # noqa: E501
        """ContainerClusterSummary - a model defined in Swagger"""  # noqa: E501
        self._cluster_name = None
        self._status = None
        self._type = None
        self._detail = None
        self._cluster_id = None
        self.discriminator = None
        self.cluster_name = cluster_name
        self.status = status
        if type is not None:
            self.type = type
        if detail is not None:
            self.detail = detail
        if cluster_id is not None:
            self.cluster_id = cluster_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ContainerClusterSummary.  # noqa: E501

        Display the container cluster name  # noqa: E501

        :return: The cluster_name of this ContainerClusterSummary.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ContainerClusterSummary.

        Display the container cluster name  # noqa: E501

        :param cluster_name: The cluster_name of this ContainerClusterSummary.  # noqa: E501
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def status(self):
        """Gets the status of this ContainerClusterSummary.  # noqa: E501

        Display the container cluster status.  # noqa: E501

        :return: The status of this ContainerClusterSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContainerClusterSummary.

        Display the container cluster status.  # noqa: E501

        :param status: The status of this ContainerClusterSummary.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "HEALTHY", "DOWN", "DEGRADED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this ContainerClusterSummary.  # noqa: E501

        Container cluster type.  # noqa: E501

        :return: The type of this ContainerClusterSummary.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContainerClusterSummary.

        Container cluster type.  # noqa: E501

        :param type: The type of this ContainerClusterSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["PAS", "PKS", "Kubernetes", "Openshift", "WCP", "Other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def detail(self):
        """Gets the detail of this ContainerClusterSummary.  # noqa: E501

        Detail information on status.  # noqa: E501

        :return: The detail of this ContainerClusterSummary.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ContainerClusterSummary.

        Detail information on status.  # noqa: E501

        :param detail: The detail of this ContainerClusterSummary.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ContainerClusterSummary.  # noqa: E501

        Identifier of the container cluster.  # noqa: E501

        :return: The cluster_id of this ContainerClusterSummary.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ContainerClusterSummary.

        Identifier of the container cluster.  # noqa: E501

        :param cluster_id: The cluster_id of this ContainerClusterSummary.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerClusterSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerClusterSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
