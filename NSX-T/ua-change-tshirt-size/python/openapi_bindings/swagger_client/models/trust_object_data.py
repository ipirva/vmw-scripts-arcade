# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class TrustObjectData(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_algo': 'str',
        'private_key': 'str',
        'passphrase': 'str',
        'pem_encoded': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'key_algo': 'key_algo',
        'private_key': 'private_key',
        'passphrase': 'passphrase',
        'pem_encoded': 'pem_encoded'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, key_algo=None, private_key=None, passphrase=None, pem_encoded=None, *args, **kwargs):  # noqa: E501
        """TrustObjectData - a model defined in Swagger"""  # noqa: E501
        self._key_algo = None
        self._private_key = None
        self._passphrase = None
        self._pem_encoded = None
        self.discriminator = None
        if key_algo is not None:
            self.key_algo = key_algo
        if private_key is not None:
            self.private_key = private_key
        if passphrase is not None:
            self.passphrase = passphrase
        self.pem_encoded = pem_encoded
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def key_algo(self):
        """Gets the key_algo of this TrustObjectData.  # noqa: E501

        Key algorithm contained in this certificate.  # noqa: E501

        :return: The key_algo of this TrustObjectData.  # noqa: E501
        :rtype: str
        """
        return self._key_algo

    @key_algo.setter
    def key_algo(self, key_algo):
        """Sets the key_algo of this TrustObjectData.

        Key algorithm contained in this certificate.  # noqa: E501

        :param key_algo: The key_algo of this TrustObjectData.  # noqa: E501
        :type: str
        """

        self._key_algo = key_algo

    @property
    def private_key(self):
        """Gets the private_key of this TrustObjectData.  # noqa: E501

        Private key data.  # noqa: E501

        :return: The private_key of this TrustObjectData.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this TrustObjectData.

        Private key data.  # noqa: E501

        :param private_key: The private_key of this TrustObjectData.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def passphrase(self):
        """Gets the passphrase of this TrustObjectData.  # noqa: E501

        Password for private key encryption.  # noqa: E501

        :return: The passphrase of this TrustObjectData.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this TrustObjectData.

        Password for private key encryption.  # noqa: E501

        :param passphrase: The passphrase of this TrustObjectData.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    @property
    def pem_encoded(self):
        """Gets the pem_encoded of this TrustObjectData.  # noqa: E501

        PEM encoded certificate data.  # noqa: E501

        :return: The pem_encoded of this TrustObjectData.  # noqa: E501
        :rtype: str
        """
        return self._pem_encoded

    @pem_encoded.setter
    def pem_encoded(self, pem_encoded):
        """Sets the pem_encoded of this TrustObjectData.

        PEM encoded certificate data.  # noqa: E501

        :param pem_encoded: The pem_encoded of this TrustObjectData.  # noqa: E501
        :type: str
        """
        if pem_encoded is None:
            raise ValueError("Invalid value for `pem_encoded`, must not be `None`")  # noqa: E501

        self._pem_encoded = pem_encoded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrustObjectData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrustObjectData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
