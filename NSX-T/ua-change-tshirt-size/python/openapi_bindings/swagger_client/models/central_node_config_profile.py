# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class CentralNodeConfigProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'syslog': 'SyslogProperties',
        'timezone': 'str',
        'snmp': 'SnmpProperties',
        'ntp': 'NtpProperties'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'syslog': 'syslog',
        'timezone': 'timezone',
        'snmp': 'snmp',
        'ntp': 'ntp'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, syslog=None, timezone=None, snmp=None, ntp=None, *args, **kwargs):  # noqa: E501
        """CentralNodeConfigProfile - a model defined in Swagger"""  # noqa: E501
        self._syslog = None
        self._timezone = None
        self._snmp = None
        self._ntp = None
        self.discriminator = None
        if syslog is not None:
            self.syslog = syslog
        if timezone is not None:
            self.timezone = timezone
        if snmp is not None:
            self.snmp = snmp
        if ntp is not None:
            self.ntp = ntp
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def syslog(self):
        """Gets the syslog of this CentralNodeConfigProfile.  # noqa: E501


        :return: The syslog of this CentralNodeConfigProfile.  # noqa: E501
        :rtype: SyslogProperties
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """Sets the syslog of this CentralNodeConfigProfile.


        :param syslog: The syslog of this CentralNodeConfigProfile.  # noqa: E501
        :type: SyslogProperties
        """

        self._syslog = syslog

    @property
    def timezone(self):
        """Gets the timezone of this CentralNodeConfigProfile.  # noqa: E501

        Timezone to be set for NSX nodes. Only timezone strings listed in the Time Zone database (https://www.iana.org/time-zones) are allowed.  # noqa: E501

        :return: The timezone of this CentralNodeConfigProfile.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CentralNodeConfigProfile.

        Timezone to be set for NSX nodes. Only timezone strings listed in the Time Zone database (https://www.iana.org/time-zones) are allowed.  # noqa: E501

        :param timezone: The timezone of this CentralNodeConfigProfile.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def snmp(self):
        """Gets the snmp of this CentralNodeConfigProfile.  # noqa: E501


        :return: The snmp of this CentralNodeConfigProfile.  # noqa: E501
        :rtype: SnmpProperties
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this CentralNodeConfigProfile.


        :param snmp: The snmp of this CentralNodeConfigProfile.  # noqa: E501
        :type: SnmpProperties
        """

        self._snmp = snmp

    @property
    def ntp(self):
        """Gets the ntp of this CentralNodeConfigProfile.  # noqa: E501


        :return: The ntp of this CentralNodeConfigProfile.  # noqa: E501
        :rtype: NtpProperties
        """
        return self._ntp

    @ntp.setter
    def ntp(self, ntp):
        """Sets the ntp of this CentralNodeConfigProfile.


        :param ntp: The ntp of this CentralNodeConfigProfile.  # noqa: E501
        :type: NtpProperties
        """

        self._ntp = ntp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CentralNodeConfigProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CentralNodeConfigProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
