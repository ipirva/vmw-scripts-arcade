# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class TransportNodeProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_switch_spec': 'HostSwitchSpec',
        'ignore_overridden_hosts': 'bool',
        'transport_zone_endpoints': 'list[TransportZoneEndPoint]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'host_switch_spec': 'host_switch_spec',
        'ignore_overridden_hosts': 'ignore_overridden_hosts',
        'transport_zone_endpoints': 'transport_zone_endpoints'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, host_switch_spec=None, ignore_overridden_hosts=False, transport_zone_endpoints=None, *args, **kwargs):  # noqa: E501
        """TransportNodeProfile - a model defined in Swagger"""  # noqa: E501
        self._host_switch_spec = None
        self._ignore_overridden_hosts = None
        self._transport_zone_endpoints = None
        self.discriminator = None
        if host_switch_spec is not None:
            self.host_switch_spec = host_switch_spec
        if ignore_overridden_hosts is not None:
            self.ignore_overridden_hosts = ignore_overridden_hosts
        if transport_zone_endpoints is not None:
            self.transport_zone_endpoints = transport_zone_endpoints
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def host_switch_spec(self):
        """Gets the host_switch_spec of this TransportNodeProfile.  # noqa: E501


        :return: The host_switch_spec of this TransportNodeProfile.  # noqa: E501
        :rtype: HostSwitchSpec
        """
        return self._host_switch_spec

    @host_switch_spec.setter
    def host_switch_spec(self, host_switch_spec):
        """Sets the host_switch_spec of this TransportNodeProfile.


        :param host_switch_spec: The host_switch_spec of this TransportNodeProfile.  # noqa: E501
        :type: HostSwitchSpec
        """

        self._host_switch_spec = host_switch_spec

    @property
    def ignore_overridden_hosts(self):
        """Gets the ignore_overridden_hosts of this TransportNodeProfile.  # noqa: E501

        Transport Node Profiles specify the configuration that is applied to all hosts in a cluster. The user has the ability to update the configuration on individual hosts within a cluster which will cause the host configuration to differ from the Transport Node Profile and results in the host to be marked as overridden. If a Transport Node Profile is edited or a new Transport Node Profile is applied on a Transport Node Collection, by default, the host configuration will be overwritten with the Transport Node Profile configuration and the overridden flag will be reset to false. This flag should be used when hosts that are set as overridden should not adopt the Transport Node Profile configuration when it is being updated or a new one is applied to the Transport Node Collection. In other words, when this flag is set to the default value of false and configuration is applied at the cluster level, the configuration will be applied on all hosts regardless if overridden or not. When this flag is set to true, all hosts that are set as overridden, i.e., have been updated invidivually, will be ignored and the cluster-level configuration will not be applied. Note, Transport Node Profiles can be applied on multiple clusters. This field will dictate the behavior followed by all clusters using this Transport Node Profile.   # noqa: E501

        :return: The ignore_overridden_hosts of this TransportNodeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_overridden_hosts

    @ignore_overridden_hosts.setter
    def ignore_overridden_hosts(self, ignore_overridden_hosts):
        """Sets the ignore_overridden_hosts of this TransportNodeProfile.

        Transport Node Profiles specify the configuration that is applied to all hosts in a cluster. The user has the ability to update the configuration on individual hosts within a cluster which will cause the host configuration to differ from the Transport Node Profile and results in the host to be marked as overridden. If a Transport Node Profile is edited or a new Transport Node Profile is applied on a Transport Node Collection, by default, the host configuration will be overwritten with the Transport Node Profile configuration and the overridden flag will be reset to false. This flag should be used when hosts that are set as overridden should not adopt the Transport Node Profile configuration when it is being updated or a new one is applied to the Transport Node Collection. In other words, when this flag is set to the default value of false and configuration is applied at the cluster level, the configuration will be applied on all hosts regardless if overridden or not. When this flag is set to true, all hosts that are set as overridden, i.e., have been updated invidivually, will be ignored and the cluster-level configuration will not be applied. Note, Transport Node Profiles can be applied on multiple clusters. This field will dictate the behavior followed by all clusters using this Transport Node Profile.   # noqa: E501

        :param ignore_overridden_hosts: The ignore_overridden_hosts of this TransportNodeProfile.  # noqa: E501
        :type: bool
        """

        self._ignore_overridden_hosts = ignore_overridden_hosts

    @property
    def transport_zone_endpoints(self):
        """Gets the transport_zone_endpoints of this TransportNodeProfile.  # noqa: E501

        This is deprecated. TransportZoneEndPoints should be specified per host switch at StandardHostSwitch through Transport Node or Transport Node Profile configuration. This will ONLY include the TransportZoneEndpoints that were were specified here during the TransportNode configuration. If TransportZoneEndpoints are specified directly in {$ref: StandardHostSwitch}, such TransportZoneEndpoints will not be populated here.   # noqa: E501

        :return: The transport_zone_endpoints of this TransportNodeProfile.  # noqa: E501
        :rtype: list[TransportZoneEndPoint]
        """
        return self._transport_zone_endpoints

    @transport_zone_endpoints.setter
    def transport_zone_endpoints(self, transport_zone_endpoints):
        """Sets the transport_zone_endpoints of this TransportNodeProfile.

        This is deprecated. TransportZoneEndPoints should be specified per host switch at StandardHostSwitch through Transport Node or Transport Node Profile configuration. This will ONLY include the TransportZoneEndpoints that were were specified here during the TransportNode configuration. If TransportZoneEndpoints are specified directly in {$ref: StandardHostSwitch}, such TransportZoneEndpoints will not be populated here.   # noqa: E501

        :param transport_zone_endpoints: The transport_zone_endpoints of this TransportNodeProfile.  # noqa: E501
        :type: list[TransportZoneEndPoint]
        """

        self._transport_zone_endpoints = transport_zone_endpoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportNodeProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportNodeProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
