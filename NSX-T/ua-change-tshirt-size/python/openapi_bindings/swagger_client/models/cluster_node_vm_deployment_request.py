# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterNodeVMDeploymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_config': 'ClusterNodeVMDeploymentConfig',
        'vm_id': 'str',
        'user_settings': 'NodeUserSettings',
        'roles': 'list[str]',
        'form_factor': 'str'
    }

    attribute_map = {
        'deployment_config': 'deployment_config',
        'vm_id': 'vm_id',
        'user_settings': 'user_settings',
        'roles': 'roles',
        'form_factor': 'form_factor'
    }

    def __init__(self, deployment_config=None, vm_id=None, user_settings=None, roles=None, form_factor='MEDIUM'):  # noqa: E501
        """ClusterNodeVMDeploymentRequest - a model defined in Swagger"""  # noqa: E501
        self._deployment_config = None
        self._vm_id = None
        self._user_settings = None
        self._roles = None
        self._form_factor = None
        self.discriminator = None
        self.deployment_config = deployment_config
        if vm_id is not None:
            self.vm_id = vm_id
        if user_settings is not None:
            self.user_settings = user_settings
        self.roles = roles
        if form_factor is not None:
            self.form_factor = form_factor

    @property
    def deployment_config(self):
        """Gets the deployment_config of this ClusterNodeVMDeploymentRequest.  # noqa: E501


        :return: The deployment_config of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :rtype: ClusterNodeVMDeploymentConfig
        """
        return self._deployment_config

    @deployment_config.setter
    def deployment_config(self, deployment_config):
        """Sets the deployment_config of this ClusterNodeVMDeploymentRequest.


        :param deployment_config: The deployment_config of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :type: ClusterNodeVMDeploymentConfig
        """
        if deployment_config is None:
            raise ValueError("Invalid value for `deployment_config`, must not be `None`")  # noqa: E501

        self._deployment_config = deployment_config

    @property
    def vm_id(self):
        """Gets the vm_id of this ClusterNodeVMDeploymentRequest.  # noqa: E501

        ID of the VM maintained internally and used to recognize it. Note: This is automatically generated and cannot be modified.   # noqa: E501

        :return: The vm_id of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this ClusterNodeVMDeploymentRequest.

        ID of the VM maintained internally and used to recognize it. Note: This is automatically generated and cannot be modified.   # noqa: E501

        :param vm_id: The vm_id of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :type: str
        """

        self._vm_id = vm_id

    @property
    def user_settings(self):
        """Gets the user_settings of this ClusterNodeVMDeploymentRequest.  # noqa: E501


        :return: The user_settings of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :rtype: NodeUserSettings
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this ClusterNodeVMDeploymentRequest.


        :param user_settings: The user_settings of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :type: NodeUserSettings
        """

        self._user_settings = user_settings

    @property
    def roles(self):
        """Gets the roles of this ClusterNodeVMDeploymentRequest.  # noqa: E501

        List of cluster node role (or roles) which the VM should take on. They specify what type (or types) of cluster node which the new VM should act as. Currently both CONTROLLER and MANAGER must be provided, since this permutation is the only one supported now.   # noqa: E501

        :return: The roles of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ClusterNodeVMDeploymentRequest.

        List of cluster node role (or roles) which the VM should take on. They specify what type (or types) of cluster node which the new VM should act as. Currently both CONTROLLER and MANAGER must be provided, since this permutation is the only one supported now.   # noqa: E501

        :param roles: The roles of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :type: list[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501
        allowed_values = ["CONTROLLER", "MANAGER"]  # noqa: E501
        if not set(roles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def form_factor(self):
        """Gets the form_factor of this ClusterNodeVMDeploymentRequest.  # noqa: E501

        Specifies the desired \"size\" of the VM   # noqa: E501

        :return: The form_factor of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this ClusterNodeVMDeploymentRequest.

        Specifies the desired \"size\" of the VM   # noqa: E501

        :param form_factor: The form_factor of this ClusterNodeVMDeploymentRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMALL", "MEDIUM", "LARGE"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"  # noqa: E501
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterNodeVMDeploymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterNodeVMDeploymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
