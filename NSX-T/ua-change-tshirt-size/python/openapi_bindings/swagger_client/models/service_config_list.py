# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceConfigList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_configs': 'list[ServiceConfig]'
    }

    attribute_map = {
        'service_configs': 'service_configs'
    }

    def __init__(self, service_configs=None):  # noqa: E501
        """ServiceConfigList - a model defined in Swagger"""  # noqa: E501
        self._service_configs = None
        self.discriminator = None
        self.service_configs = service_configs

    @property
    def service_configs(self):
        """Gets the service_configs of this ServiceConfigList.  # noqa: E501

        An Array of ServiceConfig objects containing details of profiles to be applied, entities on which these profiles will be applied and precedence.   # noqa: E501

        :return: The service_configs of this ServiceConfigList.  # noqa: E501
        :rtype: list[ServiceConfig]
        """
        return self._service_configs

    @service_configs.setter
    def service_configs(self, service_configs):
        """Sets the service_configs of this ServiceConfigList.

        An Array of ServiceConfig objects containing details of profiles to be applied, entities on which these profiles will be applied and precedence.   # noqa: E501

        :param service_configs: The service_configs of this ServiceConfigList.  # noqa: E501
        :type: list[ServiceConfig]
        """
        if service_configs is None:
            raise ValueError("Invalid value for `service_configs`, must not be `None`")  # noqa: E501

        self._service_configs = service_configs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceConfigList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceConfigList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
