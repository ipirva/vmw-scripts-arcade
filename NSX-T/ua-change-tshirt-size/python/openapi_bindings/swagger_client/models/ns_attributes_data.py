# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class NSAttributesData(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datatype': 'str',
        'attribute_source': 'str',
        'value': 'list[str]',
        'key': 'str',
        'description': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'datatype': 'datatype',
        'attribute_source': 'attribute_source',
        'value': 'value',
        'key': 'key',
        'description': 'description'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, datatype=None, attribute_source=None, value=None, key=None, description=None, *args, **kwargs):  # noqa: E501
        """NSAttributesData - a model defined in Swagger"""  # noqa: E501
        self._datatype = None
        self._attribute_source = None
        self._value = None
        self._key = None
        self._description = None
        self.discriminator = None
        self.datatype = datatype
        if attribute_source is not None:
            self.attribute_source = attribute_source
        self.value = value
        self.key = key
        if description is not None:
            self.description = description
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def datatype(self):
        """Gets the datatype of this NSAttributesData.  # noqa: E501

        Data type of attribute/sub attribute key  # noqa: E501

        :return: The datatype of this NSAttributesData.  # noqa: E501
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this NSAttributesData.

        Data type of attribute/sub attribute key  # noqa: E501

        :param datatype: The datatype of this NSAttributesData.  # noqa: E501
        :type: str
        """
        if datatype is None:
            raise ValueError("Invalid value for `datatype`, must not be `None`")  # noqa: E501
        allowed_values = ["STRING"]  # noqa: E501
        if datatype not in allowed_values:
            raise ValueError(
                "Invalid value for `datatype` ({0}), must be one of {1}"  # noqa: E501
                .format(datatype, allowed_values)
            )

        self._datatype = datatype

    @property
    def attribute_source(self):
        """Gets the attribute_source of this NSAttributesData.  # noqa: E501

        Attribute is predefined or custom  # noqa: E501

        :return: The attribute_source of this NSAttributesData.  # noqa: E501
        :rtype: str
        """
        return self._attribute_source

    @attribute_source.setter
    def attribute_source(self, attribute_source):
        """Sets the attribute_source of this NSAttributesData.

        Attribute is predefined or custom  # noqa: E501

        :param attribute_source: The attribute_source of this NSAttributesData.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "CUSTOM"]  # noqa: E501
        if attribute_source not in allowed_values:
            raise ValueError(
                "Invalid value for `attribute_source` ({0}), must be one of {1}"  # noqa: E501
                .format(attribute_source, allowed_values)
            )

        self._attribute_source = attribute_source

    @property
    def value(self):
        """Gets the value of this NSAttributesData.  # noqa: E501

        Multiple attribute/sub attribute values can be specified as elements of array.   # noqa: E501

        :return: The value of this NSAttributesData.  # noqa: E501
        :rtype: list[str]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NSAttributesData.

        Multiple attribute/sub attribute values can be specified as elements of array.   # noqa: E501

        :param value: The value of this NSAttributesData.  # noqa: E501
        :type: list[str]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def key(self):
        """Gets the key of this NSAttributesData.  # noqa: E501

        NSProfile attribute/sub attribute keys.   # noqa: E501

        :return: The key of this NSAttributesData.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NSAttributesData.

        NSProfile attribute/sub attribute keys.   # noqa: E501

        :param key: The key of this NSAttributesData.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def description(self):
        """Gets the description of this NSAttributesData.  # noqa: E501

        Description for NSProfile attributes  # noqa: E501

        :return: The description of this NSAttributesData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NSAttributesData.

        Description for NSProfile attributes  # noqa: E501

        :param description: The description of this NSAttributesData.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NSAttributesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NSAttributesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
