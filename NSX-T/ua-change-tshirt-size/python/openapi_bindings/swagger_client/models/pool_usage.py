# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoolUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_ids': 'int',
        'allocated_ids': 'int',
        'free_ids': 'int'
    }

    attribute_map = {
        'total_ids': 'total_ids',
        'allocated_ids': 'allocated_ids',
        'free_ids': 'free_ids'
    }

    def __init__(self, total_ids=None, allocated_ids=None, free_ids=None):  # noqa: E501
        """PoolUsage - a model defined in Swagger"""  # noqa: E501
        self._total_ids = None
        self._allocated_ids = None
        self._free_ids = None
        self.discriminator = None
        if total_ids is not None:
            self.total_ids = total_ids
        if allocated_ids is not None:
            self.allocated_ids = allocated_ids
        if free_ids is not None:
            self.free_ids = free_ids

    @property
    def total_ids(self):
        """Gets the total_ids of this PoolUsage.  # noqa: E501

        Total number of IDs in a pool  # noqa: E501

        :return: The total_ids of this PoolUsage.  # noqa: E501
        :rtype: int
        """
        return self._total_ids

    @total_ids.setter
    def total_ids(self, total_ids):
        """Sets the total_ids of this PoolUsage.

        Total number of IDs in a pool  # noqa: E501

        :param total_ids: The total_ids of this PoolUsage.  # noqa: E501
        :type: int
        """

        self._total_ids = total_ids

    @property
    def allocated_ids(self):
        """Gets the allocated_ids of this PoolUsage.  # noqa: E501

        Total number of allocated IDs in a pool  # noqa: E501

        :return: The allocated_ids of this PoolUsage.  # noqa: E501
        :rtype: int
        """
        return self._allocated_ids

    @allocated_ids.setter
    def allocated_ids(self, allocated_ids):
        """Sets the allocated_ids of this PoolUsage.

        Total number of allocated IDs in a pool  # noqa: E501

        :param allocated_ids: The allocated_ids of this PoolUsage.  # noqa: E501
        :type: int
        """

        self._allocated_ids = allocated_ids

    @property
    def free_ids(self):
        """Gets the free_ids of this PoolUsage.  # noqa: E501

        Total number of free IDs in a pool  # noqa: E501

        :return: The free_ids of this PoolUsage.  # noqa: E501
        :rtype: int
        """
        return self._free_ids

    @free_ids.setter
    def free_ids(self, free_ids):
        """Sets the free_ids of this PoolUsage.

        Total number of free IDs in a pool  # noqa: E501

        :param free_ids: The free_ids of this PoolUsage.  # noqa: E501
        :type: int
        """

        self._free_ids = free_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoolUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
