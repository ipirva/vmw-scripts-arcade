# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeTransportNodeDatapathMemoryUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'highest_datapath_mem_pool_usage': 'float',
        'datapath_mem_pools_usage': 'list[EdgeTransportNodeDatapathMemoryPoolUsage]',
        'datapath_heap_usage': 'float',
        'highest_datapath_mem_pool_usage_names': 'list[str]'
    }

    attribute_map = {
        'highest_datapath_mem_pool_usage': 'highest_datapath_mem_pool_usage',
        'datapath_mem_pools_usage': 'datapath_mem_pools_usage',
        'datapath_heap_usage': 'datapath_heap_usage',
        'highest_datapath_mem_pool_usage_names': 'highest_datapath_mem_pool_usage_names'
    }

    def __init__(self, highest_datapath_mem_pool_usage=None, datapath_mem_pools_usage=None, datapath_heap_usage=None, highest_datapath_mem_pool_usage_names=None):  # noqa: E501
        """EdgeTransportNodeDatapathMemoryUsage - a model defined in Swagger"""  # noqa: E501
        self._highest_datapath_mem_pool_usage = None
        self._datapath_mem_pools_usage = None
        self._datapath_heap_usage = None
        self._highest_datapath_mem_pool_usage_names = None
        self.discriminator = None
        if highest_datapath_mem_pool_usage is not None:
            self.highest_datapath_mem_pool_usage = highest_datapath_mem_pool_usage
        if datapath_mem_pools_usage is not None:
            self.datapath_mem_pools_usage = datapath_mem_pools_usage
        if datapath_heap_usage is not None:
            self.datapath_heap_usage = datapath_heap_usage
        if highest_datapath_mem_pool_usage_names is not None:
            self.highest_datapath_mem_pool_usage_names = highest_datapath_mem_pool_usage_names

    @property
    def highest_datapath_mem_pool_usage(self):
        """Gets the highest_datapath_mem_pool_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501

        Highest percentage usage value among datapath memory pools.  # noqa: E501

        :return: The highest_datapath_mem_pool_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :rtype: float
        """
        return self._highest_datapath_mem_pool_usage

    @highest_datapath_mem_pool_usage.setter
    def highest_datapath_mem_pool_usage(self, highest_datapath_mem_pool_usage):
        """Sets the highest_datapath_mem_pool_usage of this EdgeTransportNodeDatapathMemoryUsage.

        Highest percentage usage value among datapath memory pools.  # noqa: E501

        :param highest_datapath_mem_pool_usage: The highest_datapath_mem_pool_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :type: float
        """

        self._highest_datapath_mem_pool_usage = highest_datapath_mem_pool_usage

    @property
    def datapath_mem_pools_usage(self):
        """Gets the datapath_mem_pools_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501


        :return: The datapath_mem_pools_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :rtype: list[EdgeTransportNodeDatapathMemoryPoolUsage]
        """
        return self._datapath_mem_pools_usage

    @datapath_mem_pools_usage.setter
    def datapath_mem_pools_usage(self, datapath_mem_pools_usage):
        """Sets the datapath_mem_pools_usage of this EdgeTransportNodeDatapathMemoryUsage.


        :param datapath_mem_pools_usage: The datapath_mem_pools_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :type: list[EdgeTransportNodeDatapathMemoryPoolUsage]
        """

        self._datapath_mem_pools_usage = datapath_mem_pools_usage

    @property
    def datapath_heap_usage(self):
        """Gets the datapath_heap_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501

        Percentage of heap memory in use.  # noqa: E501

        :return: The datapath_heap_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :rtype: float
        """
        return self._datapath_heap_usage

    @datapath_heap_usage.setter
    def datapath_heap_usage(self, datapath_heap_usage):
        """Sets the datapath_heap_usage of this EdgeTransportNodeDatapathMemoryUsage.

        Percentage of heap memory in use.  # noqa: E501

        :param datapath_heap_usage: The datapath_heap_usage of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :type: float
        """

        self._datapath_heap_usage = datapath_heap_usage

    @property
    def highest_datapath_mem_pool_usage_names(self):
        """Gets the highest_datapath_mem_pool_usage_names of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501


        :return: The highest_datapath_mem_pool_usage_names of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :rtype: list[str]
        """
        return self._highest_datapath_mem_pool_usage_names

    @highest_datapath_mem_pool_usage_names.setter
    def highest_datapath_mem_pool_usage_names(self, highest_datapath_mem_pool_usage_names):
        """Sets the highest_datapath_mem_pool_usage_names of this EdgeTransportNodeDatapathMemoryUsage.


        :param highest_datapath_mem_pool_usage_names: The highest_datapath_mem_pool_usage_names of this EdgeTransportNodeDatapathMemoryUsage.  # noqa: E501
        :type: list[str]
        """

        self._highest_datapath_mem_pool_usage_names = highest_datapath_mem_pool_usage_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeTransportNodeDatapathMemoryUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeTransportNodeDatapathMemoryUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
