# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClusterRestoreStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'GlobalRestoreStatus',
        'step': 'RestoreStep',
        'endpoints': 'list[ResourceLink]',
        'total_steps': 'int',
        'restore_start_time': 'int',
        'restore_end_time': 'int',
        'backup_timestamp': 'int',
        'id': 'str',
        'instructions': 'list[InstructionInfo]'
    }

    attribute_map = {
        'status': 'status',
        'step': 'step',
        'endpoints': 'endpoints',
        'total_steps': 'total_steps',
        'restore_start_time': 'restore_start_time',
        'restore_end_time': 'restore_end_time',
        'backup_timestamp': 'backup_timestamp',
        'id': 'id',
        'instructions': 'instructions'
    }

    def __init__(self, status=None, step=None, endpoints=None, total_steps=None, restore_start_time=None, restore_end_time=None, backup_timestamp=None, id=None, instructions=None):  # noqa: E501
        """ClusterRestoreStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._step = None
        self._endpoints = None
        self._total_steps = None
        self._restore_start_time = None
        self._restore_end_time = None
        self._backup_timestamp = None
        self._id = None
        self._instructions = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if step is not None:
            self.step = step
        if endpoints is not None:
            self.endpoints = endpoints
        if total_steps is not None:
            self.total_steps = total_steps
        if restore_start_time is not None:
            self.restore_start_time = restore_start_time
        if restore_end_time is not None:
            self.restore_end_time = restore_end_time
        if backup_timestamp is not None:
            self.backup_timestamp = backup_timestamp
        if id is not None:
            self.id = id
        if instructions is not None:
            self.instructions = instructions

    @property
    def status(self):
        """Gets the status of this ClusterRestoreStatus.  # noqa: E501


        :return: The status of this ClusterRestoreStatus.  # noqa: E501
        :rtype: GlobalRestoreStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterRestoreStatus.


        :param status: The status of this ClusterRestoreStatus.  # noqa: E501
        :type: GlobalRestoreStatus
        """

        self._status = status

    @property
    def step(self):
        """Gets the step of this ClusterRestoreStatus.  # noqa: E501


        :return: The step of this ClusterRestoreStatus.  # noqa: E501
        :rtype: RestoreStep
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this ClusterRestoreStatus.


        :param step: The step of this ClusterRestoreStatus.  # noqa: E501
        :type: RestoreStep
        """

        self._step = step

    @property
    def endpoints(self):
        """Gets the endpoints of this ClusterRestoreStatus.  # noqa: E501

        The list of allowed endpoints, based on the current state of the restore process   # noqa: E501

        :return: The endpoints of this ClusterRestoreStatus.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ClusterRestoreStatus.

        The list of allowed endpoints, based on the current state of the restore process   # noqa: E501

        :param endpoints: The endpoints of this ClusterRestoreStatus.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._endpoints = endpoints

    @property
    def total_steps(self):
        """Gets the total_steps of this ClusterRestoreStatus.  # noqa: E501

        Total number of steps in the entire restore process  # noqa: E501

        :return: The total_steps of this ClusterRestoreStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_steps

    @total_steps.setter
    def total_steps(self, total_steps):
        """Sets the total_steps of this ClusterRestoreStatus.

        Total number of steps in the entire restore process  # noqa: E501

        :param total_steps: The total_steps of this ClusterRestoreStatus.  # noqa: E501
        :type: int
        """

        self._total_steps = total_steps

    @property
    def restore_start_time(self):
        """Gets the restore_start_time of this ClusterRestoreStatus.  # noqa: E501

        Timestamp when restore was started in epoch millisecond  # noqa: E501

        :return: The restore_start_time of this ClusterRestoreStatus.  # noqa: E501
        :rtype: int
        """
        return self._restore_start_time

    @restore_start_time.setter
    def restore_start_time(self, restore_start_time):
        """Sets the restore_start_time of this ClusterRestoreStatus.

        Timestamp when restore was started in epoch millisecond  # noqa: E501

        :param restore_start_time: The restore_start_time of this ClusterRestoreStatus.  # noqa: E501
        :type: int
        """

        self._restore_start_time = restore_start_time

    @property
    def restore_end_time(self):
        """Gets the restore_end_time of this ClusterRestoreStatus.  # noqa: E501

        Timestamp when restore was completed in epoch millisecond  # noqa: E501

        :return: The restore_end_time of this ClusterRestoreStatus.  # noqa: E501
        :rtype: int
        """
        return self._restore_end_time

    @restore_end_time.setter
    def restore_end_time(self, restore_end_time):
        """Sets the restore_end_time of this ClusterRestoreStatus.

        Timestamp when restore was completed in epoch millisecond  # noqa: E501

        :param restore_end_time: The restore_end_time of this ClusterRestoreStatus.  # noqa: E501
        :type: int
        """

        self._restore_end_time = restore_end_time

    @property
    def backup_timestamp(self):
        """Gets the backup_timestamp of this ClusterRestoreStatus.  # noqa: E501

        Timestamp when backup was initiated in epoch millisecond  # noqa: E501

        :return: The backup_timestamp of this ClusterRestoreStatus.  # noqa: E501
        :rtype: int
        """
        return self._backup_timestamp

    @backup_timestamp.setter
    def backup_timestamp(self, backup_timestamp):
        """Sets the backup_timestamp of this ClusterRestoreStatus.

        Timestamp when backup was initiated in epoch millisecond  # noqa: E501

        :param backup_timestamp: The backup_timestamp of this ClusterRestoreStatus.  # noqa: E501
        :type: int
        """

        self._backup_timestamp = backup_timestamp

    @property
    def id(self):
        """Gets the id of this ClusterRestoreStatus.  # noqa: E501

        Unique id for backup request  # noqa: E501

        :return: The id of this ClusterRestoreStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterRestoreStatus.

        Unique id for backup request  # noqa: E501

        :param id: The id of this ClusterRestoreStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instructions(self):
        """Gets the instructions of this ClusterRestoreStatus.  # noqa: E501

        Instructions for users to reconcile Restore operations  # noqa: E501

        :return: The instructions of this ClusterRestoreStatus.  # noqa: E501
        :rtype: list[InstructionInfo]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this ClusterRestoreStatus.

        Instructions for users to reconcile Restore operations  # noqa: E501

        :param instructions: The instructions of this ClusterRestoreStatus.  # noqa: E501
        :type: list[InstructionInfo]
        """

        self._instructions = instructions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterRestoreStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterRestoreStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
