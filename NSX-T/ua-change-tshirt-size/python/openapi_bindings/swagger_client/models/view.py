# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class View(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_roles': 'str',
        'display_name': 'str',
        'exclude_roles': 'str',
        'weight': 'int',
        'widgets': 'list[WidgetItem]',
        'shared': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'include_roles': 'include_roles',
        'display_name': 'display_name',
        'exclude_roles': 'exclude_roles',
        'weight': 'weight',
        'widgets': 'widgets',
        'shared': 'shared'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, include_roles=None, display_name=None, exclude_roles=None, weight=10000, widgets=None, shared=False, *args, **kwargs):  # noqa: E501
        """View - a model defined in Swagger"""  # noqa: E501
        self._include_roles = None
        self._display_name = None
        self._exclude_roles = None
        self._weight = None
        self._widgets = None
        self._shared = None
        self.discriminator = None
        if include_roles is not None:
            self.include_roles = include_roles
        self.display_name = display_name
        if exclude_roles is not None:
            self.exclude_roles = exclude_roles
        if weight is not None:
            self.weight = weight
        self.widgets = widgets
        if shared is not None:
            self.shared = shared
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def include_roles(self):
        """Gets the include_roles of this View.  # noqa: E501

        Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.  # noqa: E501

        :return: The include_roles of this View.  # noqa: E501
        :rtype: str
        """
        return self._include_roles

    @include_roles.setter
    def include_roles(self, include_roles):
        """Sets the include_roles of this View.

        Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.  # noqa: E501

        :param include_roles: The include_roles of this View.  # noqa: E501
        :type: str
        """

        self._include_roles = include_roles

    @property
    def display_name(self):
        """Gets the display_name of this View.  # noqa: E501

        Title of the widget.  # noqa: E501

        :return: The display_name of this View.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this View.

        Title of the widget.  # noqa: E501

        :param display_name: The display_name of this View.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def exclude_roles(self):
        """Gets the exclude_roles of this View.  # noqa: E501

        Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.  # noqa: E501

        :return: The exclude_roles of this View.  # noqa: E501
        :rtype: str
        """
        return self._exclude_roles

    @exclude_roles.setter
    def exclude_roles(self, exclude_roles):
        """Sets the exclude_roles of this View.

        Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.  # noqa: E501

        :param exclude_roles: The exclude_roles of this View.  # noqa: E501
        :type: str
        """

        self._exclude_roles = exclude_roles

    @property
    def weight(self):
        """Gets the weight of this View.  # noqa: E501

        Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order.  # noqa: E501

        :return: The weight of this View.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this View.

        Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order.  # noqa: E501

        :param weight: The weight of this View.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def widgets(self):
        """Gets the widgets of this View.  # noqa: E501

        Array of widgets that are part of the view.  # noqa: E501

        :return: The widgets of this View.  # noqa: E501
        :rtype: list[WidgetItem]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this View.

        Array of widgets that are part of the view.  # noqa: E501

        :param widgets: The widgets of this View.  # noqa: E501
        :type: list[WidgetItem]
        """
        if widgets is None:
            raise ValueError("Invalid value for `widgets`, must not be `None`")  # noqa: E501

        self._widgets = widgets

    @property
    def shared(self):
        """Gets the shared of this View.  # noqa: E501

        Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.  # noqa: E501

        :return: The shared of this View.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this View.

        Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.  # noqa: E501

        :param shared: The shared of this View.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(View, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, View):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
