# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.csv_record import CsvRecord  # noqa: F401,E501

class BgpNeighborRouteDetailsCsvRecord(CsvRecord):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'med': 'int',
        'network': 'str',
        'weight': 'int',
        'transport_node_id': 'str',
        'as_path': 'str',
        'next_hop': 'str',
        'logical_router_id': 'str',
        'local_pref': 'int',
        'source_address': 'str',
        'neighbor_id': 'str',
        'neighbor_address': 'str'
    }
    if hasattr(CsvRecord, "swagger_types"):
        swagger_types.update(CsvRecord.swagger_types)

    attribute_map = {
        'med': 'med',
        'network': 'network',
        'weight': 'weight',
        'transport_node_id': 'transport_node_id',
        'as_path': 'as_path',
        'next_hop': 'next_hop',
        'logical_router_id': 'logical_router_id',
        'local_pref': 'local_pref',
        'source_address': 'source_address',
        'neighbor_id': 'neighbor_id',
        'neighbor_address': 'neighbor_address'
    }
    if hasattr(CsvRecord, "attribute_map"):
        attribute_map.update(CsvRecord.attribute_map)

    def __init__(self, med=None, network=None, weight=None, transport_node_id=None, as_path=None, next_hop=None, logical_router_id=None, local_pref=None, source_address=None, neighbor_id=None, neighbor_address=None, *args, **kwargs):  # noqa: E501
        """BgpNeighborRouteDetailsCsvRecord - a model defined in Swagger"""  # noqa: E501
        self._med = None
        self._network = None
        self._weight = None
        self._transport_node_id = None
        self._as_path = None
        self._next_hop = None
        self._logical_router_id = None
        self._local_pref = None
        self._source_address = None
        self._neighbor_id = None
        self._neighbor_address = None
        self.discriminator = None
        if med is not None:
            self.med = med
        if network is not None:
            self.network = network
        if weight is not None:
            self.weight = weight
        if transport_node_id is not None:
            self.transport_node_id = transport_node_id
        if as_path is not None:
            self.as_path = as_path
        if next_hop is not None:
            self.next_hop = next_hop
        if logical_router_id is not None:
            self.logical_router_id = logical_router_id
        if local_pref is not None:
            self.local_pref = local_pref
        if source_address is not None:
            self.source_address = source_address
        if neighbor_id is not None:
            self.neighbor_id = neighbor_id
        if neighbor_address is not None:
            self.neighbor_address = neighbor_address
        CsvRecord.__init__(self, *args, **kwargs)

    @property
    def med(self):
        """Gets the med of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP Multi Exit Discriminator attribute.  # noqa: E501

        :return: The med of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: int
        """
        return self._med

    @med.setter
    def med(self, med):
        """Sets the med of this BgpNeighborRouteDetailsCsvRecord.

        BGP Multi Exit Discriminator attribute.  # noqa: E501

        :param med: The med of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: int
        """

        self._med = med

    @property
    def network(self):
        """Gets the network of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        CIDR network address.  # noqa: E501

        :return: The network of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this BgpNeighborRouteDetailsCsvRecord.

        CIDR network address.  # noqa: E501

        :param network: The network of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def weight(self):
        """Gets the weight of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP Weight attribute.  # noqa: E501

        :return: The weight of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this BgpNeighborRouteDetailsCsvRecord.

        BGP Weight attribute.  # noqa: E501

        :param weight: The weight of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def transport_node_id(self):
        """Gets the transport_node_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        Transport node id  # noqa: E501

        :return: The transport_node_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_id

    @transport_node_id.setter
    def transport_node_id(self, transport_node_id):
        """Sets the transport_node_id of this BgpNeighborRouteDetailsCsvRecord.

        Transport node id  # noqa: E501

        :param transport_node_id: The transport_node_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._transport_node_id = transport_node_id

    @property
    def as_path(self):
        """Gets the as_path of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP AS path attribute.  # noqa: E501

        :return: The as_path of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._as_path

    @as_path.setter
    def as_path(self, as_path):
        """Sets the as_path of this BgpNeighborRouteDetailsCsvRecord.

        BGP AS path attribute.  # noqa: E501

        :param as_path: The as_path of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._as_path = as_path

    @property
    def next_hop(self):
        """Gets the next_hop of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        Next hop IP address.  # noqa: E501

        :return: The next_hop of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this BgpNeighborRouteDetailsCsvRecord.

        Next hop IP address.  # noqa: E501

        :param next_hop: The next_hop of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        Logical router id  # noqa: E501

        :return: The logical_router_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this BgpNeighborRouteDetailsCsvRecord.

        Logical router id  # noqa: E501

        :param logical_router_id: The logical_router_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._logical_router_id = logical_router_id

    @property
    def local_pref(self):
        """Gets the local_pref of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP Local Preference attribute.  # noqa: E501

        :return: The local_pref of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: int
        """
        return self._local_pref

    @local_pref.setter
    def local_pref(self, local_pref):
        """Sets the local_pref of this BgpNeighborRouteDetailsCsvRecord.

        BGP Local Preference attribute.  # noqa: E501

        :param local_pref: The local_pref of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: int
        """

        self._local_pref = local_pref

    @property
    def source_address(self):
        """Gets the source_address of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP neighbor source address.  # noqa: E501

        :return: The source_address of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this BgpNeighborRouteDetailsCsvRecord.

        BGP neighbor source address.  # noqa: E501

        :param source_address: The source_address of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def neighbor_id(self):
        """Gets the neighbor_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP neighbor id  # noqa: E501

        :return: The neighbor_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_id

    @neighbor_id.setter
    def neighbor_id(self, neighbor_id):
        """Sets the neighbor_id of this BgpNeighborRouteDetailsCsvRecord.

        BGP neighbor id  # noqa: E501

        :param neighbor_id: The neighbor_id of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._neighbor_id = neighbor_id

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501

        BGP neighbor peer IP address.  # noqa: E501

        :return: The neighbor_address of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this BgpNeighborRouteDetailsCsvRecord.

        BGP neighbor peer IP address.  # noqa: E501

        :param neighbor_address: The neighbor_address of this BgpNeighborRouteDetailsCsvRecord.  # noqa: E501
        :type: str
        """

        self._neighbor_address = neighbor_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpNeighborRouteDetailsCsvRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighborRouteDetailsCsvRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
