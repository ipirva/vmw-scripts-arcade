# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.list_result import ListResult  # noqa: F401,E501

class SelectiveSyncSettings(ListResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'selected_org_units': 'list[str]'
    }
    if hasattr(ListResult, "swagger_types"):
        swagger_types.update(ListResult.swagger_types)

    attribute_map = {
        'enabled': 'enabled',
        'selected_org_units': 'selected_org_units'
    }
    if hasattr(ListResult, "attribute_map"):
        attribute_map.update(ListResult.attribute_map)

    def __init__(self, enabled=None, selected_org_units=None, *args, **kwargs):  # noqa: E501
        """SelectiveSyncSettings - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._selected_org_units = None
        self.discriminator = None
        self.enabled = enabled
        if selected_org_units is not None:
            self.selected_org_units = selected_org_units
        ListResult.__init__(self, *args, **kwargs)

    @property
    def enabled(self):
        """Gets the enabled of this SelectiveSyncSettings.  # noqa: E501

        Enable or disable SelectiveSync  # noqa: E501

        :return: The enabled of this SelectiveSyncSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SelectiveSyncSettings.

        Enable or disable SelectiveSync  # noqa: E501

        :param enabled: The enabled of this SelectiveSyncSettings.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def selected_org_units(self):
        """Gets the selected_org_units of this SelectiveSyncSettings.  # noqa: E501

        If SelectiveSync is enabled, this contains 1 or more OrgUnits, which NSX will synchronize with in LDAP server. The full distiguished name (DN) should be used for OrgUnit. If SelectiveSync is disabled, do not define this or specify an empty list.   # noqa: E501

        :return: The selected_org_units of this SelectiveSyncSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._selected_org_units

    @selected_org_units.setter
    def selected_org_units(self, selected_org_units):
        """Sets the selected_org_units of this SelectiveSyncSettings.

        If SelectiveSync is enabled, this contains 1 or more OrgUnits, which NSX will synchronize with in LDAP server. The full distiguished name (DN) should be used for OrgUnit. If SelectiveSync is disabled, do not define this or specify an empty list.   # noqa: E501

        :param selected_org_units: The selected_org_units of this SelectiveSyncSettings.  # noqa: E501
        :type: list[str]
        """

        self._selected_org_units = selected_org_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SelectiveSyncSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SelectiveSyncSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
