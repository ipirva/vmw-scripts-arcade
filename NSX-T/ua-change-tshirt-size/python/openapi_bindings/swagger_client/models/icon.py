# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Icon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'placement': 'str',
        'type': 'str',
        'tooltip': 'list[Tooltip]'
    }

    attribute_map = {
        'placement': 'placement',
        'type': 'type',
        'tooltip': 'tooltip'
    }

    def __init__(self, placement='PRE', type=None, tooltip=None):  # noqa: E501
        """Icon - a model defined in Swagger"""  # noqa: E501
        self._placement = None
        self._type = None
        self._tooltip = None
        self.discriminator = None
        if placement is not None:
            self.placement = placement
        if type is not None:
            self.type = type
        if tooltip is not None:
            self.tooltip = tooltip

    @property
    def placement(self):
        """Gets the placement of this Icon.  # noqa: E501

        If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.  # noqa: E501

        :return: The placement of this Icon.  # noqa: E501
        :rtype: str
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this Icon.

        If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.  # noqa: E501

        :param placement: The placement of this Icon.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRE", "POST"]  # noqa: E501
        if placement not in allowed_values:
            raise ValueError(
                "Invalid value for `placement` ({0}), must be one of {1}"  # noqa: E501
                .format(placement, allowed_values)
            )

        self._placement = placement

    @property
    def type(self):
        """Gets the type of this Icon.  # noqa: E501

        Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.  # noqa: E501

        :return: The type of this Icon.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Icon.

        Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.  # noqa: E501

        :param type: The type of this Icon.  # noqa: E501
        :type: str
        """
        allowed_values = ["ERROR", "WARNING", "INFO", "INPROGRESS", "SUCCESS", "DETAIL", "NOT_AVAILABLE", "SECURITY", "NETWORKING", "LOAD_BALANCER", "VPN", "DOMAIN", "GROUP", "DISTRIBUTED_FIREWALL", "NETWORKING_TIER0", "NETWORKING_TIER1", "SEGMENT", "SYSTEM", "SYSTEM_FABRIC", "SYSTEM_BACKUPRESTORE", "INVENTORY_GROUPS", "SECURITY_DFW"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def tooltip(self):
        """Gets the tooltip of this Icon.  # noqa: E501

        Multi-line text to be shown on tooltip while hovering over the icon.  # noqa: E501

        :return: The tooltip of this Icon.  # noqa: E501
        :rtype: list[Tooltip]
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this Icon.

        Multi-line text to be shown on tooltip while hovering over the icon.  # noqa: E501

        :param tooltip: The tooltip of this Icon.  # noqa: E501
        :type: list[Tooltip]
        """

        self._tooltip = tooltip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Icon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Icon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
