# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ManagementPlaneBaseNodeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'mgmt_cluster_listen_ip_address': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'mgmt_cluster_listen_ip_address': 'mgmt_cluster_listen_ip_address'
    }

    def __init__(self, uuid=None, mgmt_cluster_listen_ip_address=None):  # noqa: E501
        """ManagementPlaneBaseNodeInfo - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._mgmt_cluster_listen_ip_address = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if mgmt_cluster_listen_ip_address is not None:
            self.mgmt_cluster_listen_ip_address = mgmt_cluster_listen_ip_address

    @property
    def uuid(self):
        """Gets the uuid of this ManagementPlaneBaseNodeInfo.  # noqa: E501

        Management plane node UUID  # noqa: E501

        :return: The uuid of this ManagementPlaneBaseNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ManagementPlaneBaseNodeInfo.

        Management plane node UUID  # noqa: E501

        :param uuid: The uuid of this ManagementPlaneBaseNodeInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def mgmt_cluster_listen_ip_address(self):
        """Gets the mgmt_cluster_listen_ip_address of this ManagementPlaneBaseNodeInfo.  # noqa: E501

        The IP address of MP node  # noqa: E501

        :return: The mgmt_cluster_listen_ip_address of this ManagementPlaneBaseNodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_cluster_listen_ip_address

    @mgmt_cluster_listen_ip_address.setter
    def mgmt_cluster_listen_ip_address(self, mgmt_cluster_listen_ip_address):
        """Sets the mgmt_cluster_listen_ip_address of this ManagementPlaneBaseNodeInfo.

        The IP address of MP node  # noqa: E501

        :param mgmt_cluster_listen_ip_address: The mgmt_cluster_listen_ip_address of this ManagementPlaneBaseNodeInfo.  # noqa: E501
        :type: str
        """

        self._mgmt_cluster_listen_ip_address = mgmt_cluster_listen_ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagementPlaneBaseNodeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementPlaneBaseNodeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
