# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DirectoryDomainSyncStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prev_sync_status': 'str',
        'avg_full_sync_time': 'int',
        'prev_sync_type': 'str',
        'num_full_sync': 'int',
        'current_state_begin_time': 'int',
        'avg_delta_sync_time': 'int',
        'prev_sync_error': 'str',
        'current_state': 'str',
        'num_delta_sync': 'int',
        'prev_sync_end_time': 'int'
    }

    attribute_map = {
        'prev_sync_status': 'prev_sync_status',
        'avg_full_sync_time': 'avg_full_sync_time',
        'prev_sync_type': 'prev_sync_type',
        'num_full_sync': 'num_full_sync',
        'current_state_begin_time': 'current_state_begin_time',
        'avg_delta_sync_time': 'avg_delta_sync_time',
        'prev_sync_error': 'prev_sync_error',
        'current_state': 'current_state',
        'num_delta_sync': 'num_delta_sync',
        'prev_sync_end_time': 'prev_sync_end_time'
    }

    def __init__(self, prev_sync_status=None, avg_full_sync_time=None, prev_sync_type=None, num_full_sync=None, current_state_begin_time=None, avg_delta_sync_time=None, prev_sync_error=None, current_state=None, num_delta_sync=None, prev_sync_end_time=None):  # noqa: E501
        """DirectoryDomainSyncStats - a model defined in Swagger"""  # noqa: E501
        self._prev_sync_status = None
        self._avg_full_sync_time = None
        self._prev_sync_type = None
        self._num_full_sync = None
        self._current_state_begin_time = None
        self._avg_delta_sync_time = None
        self._prev_sync_error = None
        self._current_state = None
        self._num_delta_sync = None
        self._prev_sync_end_time = None
        self.discriminator = None
        if prev_sync_status is not None:
            self.prev_sync_status = prev_sync_status
        if avg_full_sync_time is not None:
            self.avg_full_sync_time = avg_full_sync_time
        if prev_sync_type is not None:
            self.prev_sync_type = prev_sync_type
        if num_full_sync is not None:
            self.num_full_sync = num_full_sync
        if current_state_begin_time is not None:
            self.current_state_begin_time = current_state_begin_time
        if avg_delta_sync_time is not None:
            self.avg_delta_sync_time = avg_delta_sync_time
        if prev_sync_error is not None:
            self.prev_sync_error = prev_sync_error
        if current_state is not None:
            self.current_state = current_state
        if num_delta_sync is not None:
            self.num_delta_sync = num_delta_sync
        if prev_sync_end_time is not None:
            self.prev_sync_end_time = prev_sync_end_time

    @property
    def prev_sync_status(self):
        """Gets the prev_sync_status of this DirectoryDomainSyncStats.  # noqa: E501

        Directory domain previous sync status. It could be one of the following two states.  # noqa: E501

        :return: The prev_sync_status of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: str
        """
        return self._prev_sync_status

    @prev_sync_status.setter
    def prev_sync_status(self, prev_sync_status):
        """Sets the prev_sync_status of this DirectoryDomainSyncStats.

        Directory domain previous sync status. It could be one of the following two states.  # noqa: E501

        :param prev_sync_status: The prev_sync_status of this DirectoryDomainSyncStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILURE", "UNKNOWN"]  # noqa: E501
        if prev_sync_status not in allowed_values:
            raise ValueError(
                "Invalid value for `prev_sync_status` ({0}), must be one of {1}"  # noqa: E501
                .format(prev_sync_status, allowed_values)
            )

        self._prev_sync_status = prev_sync_status

    @property
    def avg_full_sync_time(self):
        """Gets the avg_full_sync_time of this DirectoryDomainSyncStats.  # noqa: E501

        All the historical full sync are counted in calculating the average full sync time in milliseconds.  # noqa: E501

        :return: The avg_full_sync_time of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: int
        """
        return self._avg_full_sync_time

    @avg_full_sync_time.setter
    def avg_full_sync_time(self, avg_full_sync_time):
        """Sets the avg_full_sync_time of this DirectoryDomainSyncStats.

        All the historical full sync are counted in calculating the average full sync time in milliseconds.  # noqa: E501

        :param avg_full_sync_time: The avg_full_sync_time of this DirectoryDomainSyncStats.  # noqa: E501
        :type: int
        """

        self._avg_full_sync_time = avg_full_sync_time

    @property
    def prev_sync_type(self):
        """Gets the prev_sync_type of this DirectoryDomainSyncStats.  # noqa: E501

        Directory domain previous sync type. It could be one of the following five states. Right after the directory domain is configured, this field is set to IDLE.  # noqa: E501

        :return: The prev_sync_type of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: str
        """
        return self._prev_sync_type

    @prev_sync_type.setter
    def prev_sync_type(self, prev_sync_type):
        """Sets the prev_sync_type of this DirectoryDomainSyncStats.

        Directory domain previous sync type. It could be one of the following five states. Right after the directory domain is configured, this field is set to IDLE.  # noqa: E501

        :param prev_sync_type: The prev_sync_type of this DirectoryDomainSyncStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["IDLE", "FULL_SYNC", "DELTA_SYNC", "SELECTIVE_FULL_SYNC", "SELECTIVE_DELTA_SYNC"]  # noqa: E501
        if prev_sync_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prev_sync_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prev_sync_type, allowed_values)
            )

        self._prev_sync_type = prev_sync_type

    @property
    def num_full_sync(self):
        """Gets the num_full_sync of this DirectoryDomainSyncStats.  # noqa: E501

        number of successful historical full sync initiated either by system or by API request.  # noqa: E501

        :return: The num_full_sync of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: int
        """
        return self._num_full_sync

    @num_full_sync.setter
    def num_full_sync(self, num_full_sync):
        """Sets the num_full_sync of this DirectoryDomainSyncStats.

        number of successful historical full sync initiated either by system or by API request.  # noqa: E501

        :param num_full_sync: The num_full_sync of this DirectoryDomainSyncStats.  # noqa: E501
        :type: int
        """

        self._num_full_sync = num_full_sync

    @property
    def current_state_begin_time(self):
        """Gets the current_state_begin_time of this DirectoryDomainSyncStats.  # noqa: E501

        Since what time the current state has begun. The time is expressed in millisecond epoch time.  # noqa: E501

        :return: The current_state_begin_time of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: int
        """
        return self._current_state_begin_time

    @current_state_begin_time.setter
    def current_state_begin_time(self, current_state_begin_time):
        """Sets the current_state_begin_time of this DirectoryDomainSyncStats.

        Since what time the current state has begun. The time is expressed in millisecond epoch time.  # noqa: E501

        :param current_state_begin_time: The current_state_begin_time of this DirectoryDomainSyncStats.  # noqa: E501
        :type: int
        """

        self._current_state_begin_time = current_state_begin_time

    @property
    def avg_delta_sync_time(self):
        """Gets the avg_delta_sync_time of this DirectoryDomainSyncStats.  # noqa: E501

        All the historical delta sync are counted in calculating the average delta sync time in milliseconds.  # noqa: E501

        :return: The avg_delta_sync_time of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: int
        """
        return self._avg_delta_sync_time

    @avg_delta_sync_time.setter
    def avg_delta_sync_time(self, avg_delta_sync_time):
        """Sets the avg_delta_sync_time of this DirectoryDomainSyncStats.

        All the historical delta sync are counted in calculating the average delta sync time in milliseconds.  # noqa: E501

        :param avg_delta_sync_time: The avg_delta_sync_time of this DirectoryDomainSyncStats.  # noqa: E501
        :type: int
        """

        self._avg_delta_sync_time = avg_delta_sync_time

    @property
    def prev_sync_error(self):
        """Gets the prev_sync_error of this DirectoryDomainSyncStats.  # noqa: E501

        Directory domain previous sync status error if last status was failure.  # noqa: E501

        :return: The prev_sync_error of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: str
        """
        return self._prev_sync_error

    @prev_sync_error.setter
    def prev_sync_error(self, prev_sync_error):
        """Sets the prev_sync_error of this DirectoryDomainSyncStats.

        Directory domain previous sync status error if last status was failure.  # noqa: E501

        :param prev_sync_error: The prev_sync_error of this DirectoryDomainSyncStats.  # noqa: E501
        :type: str
        """

        self._prev_sync_error = prev_sync_error

    @property
    def current_state(self):
        """Gets the current_state of this DirectoryDomainSyncStats.  # noqa: E501

        Current running state of the directory domain in synchronization life cycle. It could be one of the following five states. SELECTIVE_FULL_SYNC and SELECTIVE_DELTA_SYNC are sync states for selective sync.  # noqa: E501

        :return: The current_state of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this DirectoryDomainSyncStats.

        Current running state of the directory domain in synchronization life cycle. It could be one of the following five states. SELECTIVE_FULL_SYNC and SELECTIVE_DELTA_SYNC are sync states for selective sync.  # noqa: E501

        :param current_state: The current_state of this DirectoryDomainSyncStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["IDLE", "FULL_SYNC", "DELTA_SYNC", "SELECTIVE_FULL_SYNC", "SELECTIVE_DELTA_SYNC"]  # noqa: E501
        if current_state not in allowed_values:
            raise ValueError(
                "Invalid value for `current_state` ({0}), must be one of {1}"  # noqa: E501
                .format(current_state, allowed_values)
            )

        self._current_state = current_state

    @property
    def num_delta_sync(self):
        """Gets the num_delta_sync of this DirectoryDomainSyncStats.  # noqa: E501

        number of successful historical delta sync initiated either by system or by API request.  # noqa: E501

        :return: The num_delta_sync of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: int
        """
        return self._num_delta_sync

    @num_delta_sync.setter
    def num_delta_sync(self, num_delta_sync):
        """Sets the num_delta_sync of this DirectoryDomainSyncStats.

        number of successful historical delta sync initiated either by system or by API request.  # noqa: E501

        :param num_delta_sync: The num_delta_sync of this DirectoryDomainSyncStats.  # noqa: E501
        :type: int
        """

        self._num_delta_sync = num_delta_sync

    @property
    def prev_sync_end_time(self):
        """Gets the prev_sync_end_time of this DirectoryDomainSyncStats.  # noqa: E501

        Directory domain previous sync ending time expressed in millisecond epoch time.  # noqa: E501

        :return: The prev_sync_end_time of this DirectoryDomainSyncStats.  # noqa: E501
        :rtype: int
        """
        return self._prev_sync_end_time

    @prev_sync_end_time.setter
    def prev_sync_end_time(self, prev_sync_end_time):
        """Sets the prev_sync_end_time of this DirectoryDomainSyncStats.

        Directory domain previous sync ending time expressed in millisecond epoch time.  # noqa: E501

        :param prev_sync_end_time: The prev_sync_end_time of this DirectoryDomainSyncStats.  # noqa: E501
        :type: int
        """

        self._prev_sync_end_time = prev_sync_end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryDomainSyncStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryDomainSyncStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
