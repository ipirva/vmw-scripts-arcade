# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeNodeSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'search_domains': 'list[str]',
        'dns_servers': 'list[str]',
        'syslog_servers': 'list[SyslogConfiguration]',
        'ntp_servers': 'list[str]',
        'hostname': 'str',
        'enable_ssh': 'bool',
        'allow_ssh_root_login': 'bool'
    }

    attribute_map = {
        'search_domains': 'search_domains',
        'dns_servers': 'dns_servers',
        'syslog_servers': 'syslog_servers',
        'ntp_servers': 'ntp_servers',
        'hostname': 'hostname',
        'enable_ssh': 'enable_ssh',
        'allow_ssh_root_login': 'allow_ssh_root_login'
    }

    def __init__(self, search_domains=None, dns_servers=None, syslog_servers=None, ntp_servers=None, hostname=None, enable_ssh=False, allow_ssh_root_login=False):  # noqa: E501
        """EdgeNodeSettings - a model defined in Swagger"""  # noqa: E501
        self._search_domains = None
        self._dns_servers = None
        self._syslog_servers = None
        self._ntp_servers = None
        self._hostname = None
        self._enable_ssh = None
        self._allow_ssh_root_login = None
        self.discriminator = None
        if search_domains is not None:
            self.search_domains = search_domains
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if syslog_servers is not None:
            self.syslog_servers = syslog_servers
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if hostname is not None:
            self.hostname = hostname
        if enable_ssh is not None:
            self.enable_ssh = enable_ssh
        if allow_ssh_root_login is not None:
            self.allow_ssh_root_login = allow_ssh_root_login

    @property
    def search_domains(self):
        """Gets the search_domains of this EdgeNodeSettings.  # noqa: E501

        List of domain names that are used to complete unqualified host names.   # noqa: E501

        :return: The search_domains of this EdgeNodeSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_domains

    @search_domains.setter
    def search_domains(self, search_domains):
        """Sets the search_domains of this EdgeNodeSettings.

        List of domain names that are used to complete unqualified host names.   # noqa: E501

        :param search_domains: The search_domains of this EdgeNodeSettings.  # noqa: E501
        :type: list[str]
        """

        self._search_domains = search_domains

    @property
    def dns_servers(self):
        """Gets the dns_servers of this EdgeNodeSettings.  # noqa: E501

        List of DNS servers.   # noqa: E501

        :return: The dns_servers of this EdgeNodeSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this EdgeNodeSettings.

        List of DNS servers.   # noqa: E501

        :param dns_servers: The dns_servers of this EdgeNodeSettings.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def syslog_servers(self):
        """Gets the syslog_servers of this EdgeNodeSettings.  # noqa: E501

        List of Syslog server configuration.   # noqa: E501

        :return: The syslog_servers of this EdgeNodeSettings.  # noqa: E501
        :rtype: list[SyslogConfiguration]
        """
        return self._syslog_servers

    @syslog_servers.setter
    def syslog_servers(self, syslog_servers):
        """Sets the syslog_servers of this EdgeNodeSettings.

        List of Syslog server configuration.   # noqa: E501

        :param syslog_servers: The syslog_servers of this EdgeNodeSettings.  # noqa: E501
        :type: list[SyslogConfiguration]
        """

        self._syslog_servers = syslog_servers

    @property
    def ntp_servers(self):
        """Gets the ntp_servers of this EdgeNodeSettings.  # noqa: E501

        List of NTP servers.   # noqa: E501

        :return: The ntp_servers of this EdgeNodeSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_servers

    @ntp_servers.setter
    def ntp_servers(self, ntp_servers):
        """Sets the ntp_servers of this EdgeNodeSettings.

        List of NTP servers.   # noqa: E501

        :param ntp_servers: The ntp_servers of this EdgeNodeSettings.  # noqa: E501
        :type: list[str]
        """

        self._ntp_servers = ntp_servers

    @property
    def hostname(self):
        """Gets the hostname of this EdgeNodeSettings.  # noqa: E501

        Host name or FQDN for edge node.  # noqa: E501

        :return: The hostname of this EdgeNodeSettings.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this EdgeNodeSettings.

        Host name or FQDN for edge node.  # noqa: E501

        :param hostname: The hostname of this EdgeNodeSettings.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def enable_ssh(self):
        """Gets the enable_ssh of this EdgeNodeSettings.  # noqa: E501

        Enabling SSH service is not recommended for security reasons.   # noqa: E501

        :return: The enable_ssh of this EdgeNodeSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssh

    @enable_ssh.setter
    def enable_ssh(self, enable_ssh):
        """Sets the enable_ssh of this EdgeNodeSettings.

        Enabling SSH service is not recommended for security reasons.   # noqa: E501

        :param enable_ssh: The enable_ssh of this EdgeNodeSettings.  # noqa: E501
        :type: bool
        """

        self._enable_ssh = enable_ssh

    @property
    def allow_ssh_root_login(self):
        """Gets the allow_ssh_root_login of this EdgeNodeSettings.  # noqa: E501

        Allowing root SSH logins is not recommended for security reasons. Edit of this property is not supported when updating transport node. Use the CLI to change this property.   # noqa: E501

        :return: The allow_ssh_root_login of this EdgeNodeSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ssh_root_login

    @allow_ssh_root_login.setter
    def allow_ssh_root_login(self, allow_ssh_root_login):
        """Sets the allow_ssh_root_login of this EdgeNodeSettings.

        Allowing root SSH logins is not recommended for security reasons. Edit of this property is not supported when updating transport node. Use the CLI to change this property.   # noqa: E501

        :param allow_ssh_root_login: The allow_ssh_root_login of this EdgeNodeSettings.  # noqa: E501
        :type: bool
        """

        self._allow_ssh_root_login = allow_ssh_root_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeNodeSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeNodeSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
