# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2ForwarderRemoteMacsPerSite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remote_standby_ips': 'list[str]',
        'rtep_group_id': 'int',
        'remote_site': 'ResourceReference',
        'remote_active_ips': 'list[str]',
        'remote_mac_addresses': 'list[str]'
    }

    attribute_map = {
        'remote_standby_ips': 'remote_standby_ips',
        'rtep_group_id': 'rtep_group_id',
        'remote_site': 'remote_site',
        'remote_active_ips': 'remote_active_ips',
        'remote_mac_addresses': 'remote_mac_addresses'
    }

    def __init__(self, remote_standby_ips=None, rtep_group_id=None, remote_site=None, remote_active_ips=None, remote_mac_addresses=None):  # noqa: E501
        """L2ForwarderRemoteMacsPerSite - a model defined in Swagger"""  # noqa: E501
        self._remote_standby_ips = None
        self._rtep_group_id = None
        self._remote_site = None
        self._remote_active_ips = None
        self._remote_mac_addresses = None
        self.discriminator = None
        if remote_standby_ips is not None:
            self.remote_standby_ips = remote_standby_ips
        if rtep_group_id is not None:
            self.rtep_group_id = rtep_group_id
        if remote_site is not None:
            self.remote_site = remote_site
        if remote_active_ips is not None:
            self.remote_active_ips = remote_active_ips
        if remote_mac_addresses is not None:
            self.remote_mac_addresses = remote_mac_addresses

    @property
    def remote_standby_ips(self):
        """Gets the remote_standby_ips of this L2ForwarderRemoteMacsPerSite.  # noqa: E501

        Remote standby IP addresses.  # noqa: E501

        :return: The remote_standby_ips of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :rtype: list[str]
        """
        return self._remote_standby_ips

    @remote_standby_ips.setter
    def remote_standby_ips(self, remote_standby_ips):
        """Sets the remote_standby_ips of this L2ForwarderRemoteMacsPerSite.

        Remote standby IP addresses.  # noqa: E501

        :param remote_standby_ips: The remote_standby_ips of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :type: list[str]
        """

        self._remote_standby_ips = remote_standby_ips

    @property
    def rtep_group_id(self):
        """Gets the rtep_group_id of this L2ForwarderRemoteMacsPerSite.  # noqa: E501

        32 bit unique RTEP group id of the logical switch per site.   # noqa: E501

        :return: The rtep_group_id of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :rtype: int
        """
        return self._rtep_group_id

    @rtep_group_id.setter
    def rtep_group_id(self, rtep_group_id):
        """Sets the rtep_group_id of this L2ForwarderRemoteMacsPerSite.

        32 bit unique RTEP group id of the logical switch per site.   # noqa: E501

        :param rtep_group_id: The rtep_group_id of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :type: int
        """

        self._rtep_group_id = rtep_group_id

    @property
    def remote_site(self):
        """Gets the remote_site of this L2ForwarderRemoteMacsPerSite.  # noqa: E501


        :return: The remote_site of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._remote_site

    @remote_site.setter
    def remote_site(self, remote_site):
        """Sets the remote_site of this L2ForwarderRemoteMacsPerSite.


        :param remote_site: The remote_site of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :type: ResourceReference
        """

        self._remote_site = remote_site

    @property
    def remote_active_ips(self):
        """Gets the remote_active_ips of this L2ForwarderRemoteMacsPerSite.  # noqa: E501

        Remote active IP addresses.  # noqa: E501

        :return: The remote_active_ips of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :rtype: list[str]
        """
        return self._remote_active_ips

    @remote_active_ips.setter
    def remote_active_ips(self, remote_active_ips):
        """Sets the remote_active_ips of this L2ForwarderRemoteMacsPerSite.

        Remote active IP addresses.  # noqa: E501

        :param remote_active_ips: The remote_active_ips of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :type: list[str]
        """

        self._remote_active_ips = remote_active_ips

    @property
    def remote_mac_addresses(self):
        """Gets the remote_mac_addresses of this L2ForwarderRemoteMacsPerSite.  # noqa: E501

        Remote mac addresses.  # noqa: E501

        :return: The remote_mac_addresses of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :rtype: list[str]
        """
        return self._remote_mac_addresses

    @remote_mac_addresses.setter
    def remote_mac_addresses(self, remote_mac_addresses):
        """Sets the remote_mac_addresses of this L2ForwarderRemoteMacsPerSite.

        Remote mac addresses.  # noqa: E501

        :param remote_mac_addresses: The remote_mac_addresses of this L2ForwarderRemoteMacsPerSite.  # noqa: E501
        :type: list[str]
        """

        self._remote_mac_addresses = remote_mac_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2ForwarderRemoteMacsPerSite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2ForwarderRemoteMacsPerSite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
