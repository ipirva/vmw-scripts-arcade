# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate_sha256_thumbprint': 'str',
        'certificate': 'str',
        'entities_hosted': 'list[HostedEntityInfo]',
        'ip_address': 'str',
        'fqdn': 'str',
        'service_endpoint_uuid': 'str',
        'port': 'int'
    }

    attribute_map = {
        'certificate_sha256_thumbprint': 'certificate_sha256_thumbprint',
        'certificate': 'certificate',
        'entities_hosted': 'entities_hosted',
        'ip_address': 'ip_address',
        'fqdn': 'fqdn',
        'service_endpoint_uuid': 'service_endpoint_uuid',
        'port': 'port'
    }

    def __init__(self, certificate_sha256_thumbprint=None, certificate=None, entities_hosted=None, ip_address=None, fqdn=None, service_endpoint_uuid=None, port=None):  # noqa: E501
        """ServiceEndpoint - a model defined in Swagger"""  # noqa: E501
        self._certificate_sha256_thumbprint = None
        self._certificate = None
        self._entities_hosted = None
        self._ip_address = None
        self._fqdn = None
        self._service_endpoint_uuid = None
        self._port = None
        self.discriminator = None
        if certificate_sha256_thumbprint is not None:
            self.certificate_sha256_thumbprint = certificate_sha256_thumbprint
        if certificate is not None:
            self.certificate = certificate
        if entities_hosted is not None:
            self.entities_hosted = entities_hosted
        self.ip_address = ip_address
        if fqdn is not None:
            self.fqdn = fqdn
        if service_endpoint_uuid is not None:
            self.service_endpoint_uuid = service_endpoint_uuid
        self.port = port

    @property
    def certificate_sha256_thumbprint(self):
        """Gets the certificate_sha256_thumbprint of this ServiceEndpoint.  # noqa: E501


        :return: The certificate_sha256_thumbprint of this ServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._certificate_sha256_thumbprint

    @certificate_sha256_thumbprint.setter
    def certificate_sha256_thumbprint(self, certificate_sha256_thumbprint):
        """Sets the certificate_sha256_thumbprint of this ServiceEndpoint.


        :param certificate_sha256_thumbprint: The certificate_sha256_thumbprint of this ServiceEndpoint.  # noqa: E501
        :type: str
        """

        self._certificate_sha256_thumbprint = certificate_sha256_thumbprint

    @property
    def certificate(self):
        """Gets the certificate of this ServiceEndpoint.  # noqa: E501

        Certificate or certificate chain  # noqa: E501

        :return: The certificate of this ServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ServiceEndpoint.

        Certificate or certificate chain  # noqa: E501

        :param certificate: The certificate of this ServiceEndpoint.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def entities_hosted(self):
        """Gets the entities_hosted of this ServiceEndpoint.  # noqa: E501

        List of entities hosted on accessible through the service endpoint  # noqa: E501

        :return: The entities_hosted of this ServiceEndpoint.  # noqa: E501
        :rtype: list[HostedEntityInfo]
        """
        return self._entities_hosted

    @entities_hosted.setter
    def entities_hosted(self, entities_hosted):
        """Sets the entities_hosted of this ServiceEndpoint.

        List of entities hosted on accessible through the service endpoint  # noqa: E501

        :param entities_hosted: The entities_hosted of this ServiceEndpoint.  # noqa: E501
        :type: list[HostedEntityInfo]
        """

        self._entities_hosted = entities_hosted

    @property
    def ip_address(self):
        """Gets the ip_address of this ServiceEndpoint.  # noqa: E501

        IPv4 or IPv6 address  # noqa: E501

        :return: The ip_address of this ServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ServiceEndpoint.

        IPv4 or IPv6 address  # noqa: E501

        :param ip_address: The ip_address of this ServiceEndpoint.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def fqdn(self):
        """Gets the fqdn of this ServiceEndpoint.  # noqa: E501


        :return: The fqdn of this ServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ServiceEndpoint.


        :param fqdn: The fqdn of this ServiceEndpoint.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def service_endpoint_uuid(self):
        """Gets the service_endpoint_uuid of this ServiceEndpoint.  # noqa: E501

        Unique identifier of this service endpoint  # noqa: E501

        :return: The service_endpoint_uuid of this ServiceEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._service_endpoint_uuid

    @service_endpoint_uuid.setter
    def service_endpoint_uuid(self, service_endpoint_uuid):
        """Sets the service_endpoint_uuid of this ServiceEndpoint.

        Unique identifier of this service endpoint  # noqa: E501

        :param service_endpoint_uuid: The service_endpoint_uuid of this ServiceEndpoint.  # noqa: E501
        :type: str
        """

        self._service_endpoint_uuid = service_endpoint_uuid

    @property
    def port(self):
        """Gets the port of this ServiceEndpoint.  # noqa: E501


        :return: The port of this ServiceEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ServiceEndpoint.


        :param port: The port of this ServiceEndpoint.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
