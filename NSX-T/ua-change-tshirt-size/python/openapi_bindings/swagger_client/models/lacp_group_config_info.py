# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LacpGroupConfigInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'name': 'str',
        'uplink_port_keys': 'list[str]',
        'load_balance_algorithm': 'str',
        'uplink_num': 'int',
        'uplink_names': 'list[str]',
        'mode': 'str'
    }

    attribute_map = {
        'key': 'key',
        'name': 'name',
        'uplink_port_keys': 'uplink_port_keys',
        'load_balance_algorithm': 'load_balance_algorithm',
        'uplink_num': 'uplink_num',
        'uplink_names': 'uplink_names',
        'mode': 'mode'
    }

    def __init__(self, key=None, name=None, uplink_port_keys=None, load_balance_algorithm=None, uplink_num=None, uplink_names=None, mode=None):  # noqa: E501
        """LacpGroupConfigInfo - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._name = None
        self._uplink_port_keys = None
        self._load_balance_algorithm = None
        self._uplink_num = None
        self._uplink_names = None
        self._mode = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if uplink_port_keys is not None:
            self.uplink_port_keys = uplink_port_keys
        if load_balance_algorithm is not None:
            self.load_balance_algorithm = load_balance_algorithm
        if uplink_num is not None:
            self.uplink_num = uplink_num
        if uplink_names is not None:
            self.uplink_names = uplink_names
        if mode is not None:
            self.mode = mode

    @property
    def key(self):
        """Gets the key of this LacpGroupConfigInfo.  # noqa: E501

        The key represents the identifier for the group that is unique across VC.   # noqa: E501

        :return: The key of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this LacpGroupConfigInfo.

        The key represents the identifier for the group that is unique across VC.   # noqa: E501

        :param key: The key of this LacpGroupConfigInfo.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this LacpGroupConfigInfo.  # noqa: E501

        The display name of the LACP group.  # noqa: E501

        :return: The name of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LacpGroupConfigInfo.

        The display name of the LACP group.  # noqa: E501

        :param name: The name of this LacpGroupConfigInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uplink_port_keys(self):
        """Gets the uplink_port_keys of this LacpGroupConfigInfo.  # noqa: E501

        Keys for the uplink ports in the group. Each uplink port is assigned a key that is unique across VC.   # noqa: E501

        :return: The uplink_port_keys of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._uplink_port_keys

    @uplink_port_keys.setter
    def uplink_port_keys(self, uplink_port_keys):
        """Sets the uplink_port_keys of this LacpGroupConfigInfo.

        Keys for the uplink ports in the group. Each uplink port is assigned a key that is unique across VC.   # noqa: E501

        :param uplink_port_keys: The uplink_port_keys of this LacpGroupConfigInfo.  # noqa: E501
        :type: list[str]
        """

        self._uplink_port_keys = uplink_port_keys

    @property
    def load_balance_algorithm(self):
        """Gets the load_balance_algorithm of this LacpGroupConfigInfo.  # noqa: E501

        Load balance algorithm used in LACP group. The possible values are dictated by the values available in VC. Please refer VMwareDvsLacpLoadBalanceAlgorithm documentation for a full list of values. A few examples are srcDestIp where source and destination IP are considered, srcIp where only source IP is considered.   # noqa: E501

        :return: The load_balance_algorithm of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: str
        """
        return self._load_balance_algorithm

    @load_balance_algorithm.setter
    def load_balance_algorithm(self, load_balance_algorithm):
        """Sets the load_balance_algorithm of this LacpGroupConfigInfo.

        Load balance algorithm used in LACP group. The possible values are dictated by the values available in VC. Please refer VMwareDvsLacpLoadBalanceAlgorithm documentation for a full list of values. A few examples are srcDestIp where source and destination IP are considered, srcIp where only source IP is considered.   # noqa: E501

        :param load_balance_algorithm: The load_balance_algorithm of this LacpGroupConfigInfo.  # noqa: E501
        :type: str
        """

        self._load_balance_algorithm = load_balance_algorithm

    @property
    def uplink_num(self):
        """Gets the uplink_num of this LacpGroupConfigInfo.  # noqa: E501

        The number of uplink ports  # noqa: E501

        :return: The uplink_num of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._uplink_num

    @uplink_num.setter
    def uplink_num(self, uplink_num):
        """Sets the uplink_num of this LacpGroupConfigInfo.

        The number of uplink ports  # noqa: E501

        :param uplink_num: The uplink_num of this LacpGroupConfigInfo.  # noqa: E501
        :type: int
        """

        self._uplink_num = uplink_num

    @property
    def uplink_names(self):
        """Gets the uplink_names of this LacpGroupConfigInfo.  # noqa: E501

        Names for the uplink ports in the group.  # noqa: E501

        :return: The uplink_names of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._uplink_names

    @uplink_names.setter
    def uplink_names(self, uplink_names):
        """Sets the uplink_names of this LacpGroupConfigInfo.

        Names for the uplink ports in the group.  # noqa: E501

        :param uplink_names: The uplink_names of this LacpGroupConfigInfo.  # noqa: E501
        :type: list[str]
        """

        self._uplink_names = uplink_names

    @property
    def mode(self):
        """Gets the mode of this LacpGroupConfigInfo.  # noqa: E501

        The mode of LACP can be ACTIVE or PASSIVE. If the mode is ACTIVE, LACP is enabled unconditionally. If the mode is PASSIVE, LACP is enabled only if LACP device is detected.   # noqa: E501

        :return: The mode of this LacpGroupConfigInfo.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this LacpGroupConfigInfo.

        The mode of LACP can be ACTIVE or PASSIVE. If the mode is ACTIVE, LACP is enabled unconditionally. If the mode is PASSIVE, LACP is enabled only if LACP device is detected.   # noqa: E501

        :param mode: The mode of this LacpGroupConfigInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "PASSIVE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LacpGroupConfigInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LacpGroupConfigInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
