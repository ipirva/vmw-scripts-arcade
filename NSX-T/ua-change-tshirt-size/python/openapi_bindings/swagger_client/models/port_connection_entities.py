# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PortConnectionEntities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'containers': 'PortConnectionContainersEntities',
        'hypervisors': 'list[PortConnectionHypervisor]',
        'errors': 'list[PortConnectionError]',
        'logical_switches': 'list[PortConnectionLogicalSwitch]',
        'edge_node_groups': 'list[PortConnectionEdgeNodeGroup]',
        'routers': 'list[PortConnectionRouter]',
        'vms': 'list[VirtualMachine]',
        'tunnels': 'list[PortConnectionTunnel]',
        'physical_hosts': 'PortConnectionBMEntities'
    }

    attribute_map = {
        'containers': 'containers',
        'hypervisors': 'hypervisors',
        'errors': 'errors',
        'logical_switches': 'logical_switches',
        'edge_node_groups': 'edge_node_groups',
        'routers': 'routers',
        'vms': 'vms',
        'tunnels': 'tunnels',
        'physical_hosts': 'physical_hosts'
    }

    def __init__(self, containers=None, hypervisors=None, errors=None, logical_switches=None, edge_node_groups=None, routers=None, vms=None, tunnels=None, physical_hosts=None):  # noqa: E501
        """PortConnectionEntities - a model defined in Swagger"""  # noqa: E501
        self._containers = None
        self._hypervisors = None
        self._errors = None
        self._logical_switches = None
        self._edge_node_groups = None
        self._routers = None
        self._vms = None
        self._tunnels = None
        self._physical_hosts = None
        self.discriminator = None
        self.containers = containers
        self.hypervisors = hypervisors
        self.errors = errors
        self.logical_switches = logical_switches
        if edge_node_groups is not None:
            self.edge_node_groups = edge_node_groups
        if routers is not None:
            self.routers = routers
        self.vms = vms
        self.tunnels = tunnels
        if physical_hosts is not None:
            self.physical_hosts = physical_hosts

    @property
    def containers(self):
        """Gets the containers of this PortConnectionEntities.  # noqa: E501


        :return: The containers of this PortConnectionEntities.  # noqa: E501
        :rtype: PortConnectionContainersEntities
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this PortConnectionEntities.


        :param containers: The containers of this PortConnectionEntities.  # noqa: E501
        :type: PortConnectionContainersEntities
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def hypervisors(self):
        """Gets the hypervisors of this PortConnectionEntities.  # noqa: E501


        :return: The hypervisors of this PortConnectionEntities.  # noqa: E501
        :rtype: list[PortConnectionHypervisor]
        """
        return self._hypervisors

    @hypervisors.setter
    def hypervisors(self, hypervisors):
        """Sets the hypervisors of this PortConnectionEntities.


        :param hypervisors: The hypervisors of this PortConnectionEntities.  # noqa: E501
        :type: list[PortConnectionHypervisor]
        """
        if hypervisors is None:
            raise ValueError("Invalid value for `hypervisors`, must not be `None`")  # noqa: E501

        self._hypervisors = hypervisors

    @property
    def errors(self):
        """Gets the errors of this PortConnectionEntities.  # noqa: E501


        :return: The errors of this PortConnectionEntities.  # noqa: E501
        :rtype: list[PortConnectionError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this PortConnectionEntities.


        :param errors: The errors of this PortConnectionEntities.  # noqa: E501
        :type: list[PortConnectionError]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def logical_switches(self):
        """Gets the logical_switches of this PortConnectionEntities.  # noqa: E501


        :return: The logical_switches of this PortConnectionEntities.  # noqa: E501
        :rtype: list[PortConnectionLogicalSwitch]
        """
        return self._logical_switches

    @logical_switches.setter
    def logical_switches(self, logical_switches):
        """Sets the logical_switches of this PortConnectionEntities.


        :param logical_switches: The logical_switches of this PortConnectionEntities.  # noqa: E501
        :type: list[PortConnectionLogicalSwitch]
        """
        if logical_switches is None:
            raise ValueError("Invalid value for `logical_switches`, must not be `None`")  # noqa: E501

        self._logical_switches = logical_switches

    @property
    def edge_node_groups(self):
        """Gets the edge_node_groups of this PortConnectionEntities.  # noqa: E501


        :return: The edge_node_groups of this PortConnectionEntities.  # noqa: E501
        :rtype: list[PortConnectionEdgeNodeGroup]
        """
        return self._edge_node_groups

    @edge_node_groups.setter
    def edge_node_groups(self, edge_node_groups):
        """Sets the edge_node_groups of this PortConnectionEntities.


        :param edge_node_groups: The edge_node_groups of this PortConnectionEntities.  # noqa: E501
        :type: list[PortConnectionEdgeNodeGroup]
        """

        self._edge_node_groups = edge_node_groups

    @property
    def routers(self):
        """Gets the routers of this PortConnectionEntities.  # noqa: E501


        :return: The routers of this PortConnectionEntities.  # noqa: E501
        :rtype: list[PortConnectionRouter]
        """
        return self._routers

    @routers.setter
    def routers(self, routers):
        """Sets the routers of this PortConnectionEntities.


        :param routers: The routers of this PortConnectionEntities.  # noqa: E501
        :type: list[PortConnectionRouter]
        """

        self._routers = routers

    @property
    def vms(self):
        """Gets the vms of this PortConnectionEntities.  # noqa: E501


        :return: The vms of this PortConnectionEntities.  # noqa: E501
        :rtype: list[VirtualMachine]
        """
        return self._vms

    @vms.setter
    def vms(self, vms):
        """Sets the vms of this PortConnectionEntities.


        :param vms: The vms of this PortConnectionEntities.  # noqa: E501
        :type: list[VirtualMachine]
        """
        if vms is None:
            raise ValueError("Invalid value for `vms`, must not be `None`")  # noqa: E501

        self._vms = vms

    @property
    def tunnels(self):
        """Gets the tunnels of this PortConnectionEntities.  # noqa: E501


        :return: The tunnels of this PortConnectionEntities.  # noqa: E501
        :rtype: list[PortConnectionTunnel]
        """
        return self._tunnels

    @tunnels.setter
    def tunnels(self, tunnels):
        """Sets the tunnels of this PortConnectionEntities.


        :param tunnels: The tunnels of this PortConnectionEntities.  # noqa: E501
        :type: list[PortConnectionTunnel]
        """
        if tunnels is None:
            raise ValueError("Invalid value for `tunnels`, must not be `None`")  # noqa: E501

        self._tunnels = tunnels

    @property
    def physical_hosts(self):
        """Gets the physical_hosts of this PortConnectionEntities.  # noqa: E501


        :return: The physical_hosts of this PortConnectionEntities.  # noqa: E501
        :rtype: PortConnectionBMEntities
        """
        return self._physical_hosts

    @physical_hosts.setter
    def physical_hosts(self, physical_hosts):
        """Sets the physical_hosts of this PortConnectionEntities.


        :param physical_hosts: The physical_hosts of this PortConnectionEntities.  # noqa: E501
        :type: PortConnectionBMEntities
        """

        self._physical_hosts = physical_hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortConnectionEntities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortConnectionEntities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
