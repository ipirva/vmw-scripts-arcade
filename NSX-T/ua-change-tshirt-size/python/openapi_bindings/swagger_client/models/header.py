# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Header(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_alignment': 'str',
        'condition': 'str',
        'sub_headers': 'list[PropertyItem]'
    }

    attribute_map = {
        'content_alignment': 'content_alignment',
        'condition': 'condition',
        'sub_headers': 'sub_headers'
    }

    def __init__(self, content_alignment='RIGHT', condition=None, sub_headers=None):  # noqa: E501
        """Header - a model defined in Swagger"""  # noqa: E501
        self._content_alignment = None
        self._condition = None
        self._sub_headers = None
        self.discriminator = None
        if content_alignment is not None:
            self.content_alignment = content_alignment
        if condition is not None:
            self.condition = condition
        if sub_headers is not None:
            self.sub_headers = sub_headers

    @property
    def content_alignment(self):
        """Gets the content_alignment of this Header.  # noqa: E501

        Alignment of header labels.  # noqa: E501

        :return: The content_alignment of this Header.  # noqa: E501
        :rtype: str
        """
        return self._content_alignment

    @content_alignment.setter
    def content_alignment(self, content_alignment):
        """Sets the content_alignment of this Header.

        Alignment of header labels.  # noqa: E501

        :param content_alignment: The content_alignment of this Header.  # noqa: E501
        :type: str
        """
        allowed_values = ["LEFT", "RIGHT"]  # noqa: E501
        if content_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `content_alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(content_alignment, allowed_values)
            )

        self._content_alignment = content_alignment

    @property
    def condition(self):
        """Gets the condition of this Header.  # noqa: E501

        If the condition is met then the header will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :return: The condition of this Header.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Header.

        If the condition is met then the header will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :param condition: The condition of this Header.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def sub_headers(self):
        """Gets the sub_headers of this Header.  # noqa: E501

        An array of label-value properties.  # noqa: E501

        :return: The sub_headers of this Header.  # noqa: E501
        :rtype: list[PropertyItem]
        """
        return self._sub_headers

    @sub_headers.setter
    def sub_headers(self, sub_headers):
        """Sets the sub_headers of this Header.

        An array of label-value properties.  # noqa: E501

        :param sub_headers: The sub_headers of this Header.  # noqa: E501
        :type: list[PropertyItem]
        """

        self._sub_headers = sub_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Header, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Header):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
