# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PacketsDroppedBySecurity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spoof_guard_dropped': 'list[PacketTypeAndCounter]',
        'dhcp_server_dropped_ipv4': 'int',
        'dhcp_server_dropped_ipv6': 'int',
        'dhcp_client_dropped_ipv4': 'int',
        'bpdu_filter_dropped': 'int',
        'dhcp_client_dropped_ipv6': 'int'
    }

    attribute_map = {
        'spoof_guard_dropped': 'spoof_guard_dropped',
        'dhcp_server_dropped_ipv4': 'dhcp_server_dropped_ipv4',
        'dhcp_server_dropped_ipv6': 'dhcp_server_dropped_ipv6',
        'dhcp_client_dropped_ipv4': 'dhcp_client_dropped_ipv4',
        'bpdu_filter_dropped': 'bpdu_filter_dropped',
        'dhcp_client_dropped_ipv6': 'dhcp_client_dropped_ipv6'
    }

    def __init__(self, spoof_guard_dropped=None, dhcp_server_dropped_ipv4=None, dhcp_server_dropped_ipv6=None, dhcp_client_dropped_ipv4=None, bpdu_filter_dropped=None, dhcp_client_dropped_ipv6=None):  # noqa: E501
        """PacketsDroppedBySecurity - a model defined in Swagger"""  # noqa: E501
        self._spoof_guard_dropped = None
        self._dhcp_server_dropped_ipv4 = None
        self._dhcp_server_dropped_ipv6 = None
        self._dhcp_client_dropped_ipv4 = None
        self._bpdu_filter_dropped = None
        self._dhcp_client_dropped_ipv6 = None
        self.discriminator = None
        if spoof_guard_dropped is not None:
            self.spoof_guard_dropped = spoof_guard_dropped
        if dhcp_server_dropped_ipv4 is not None:
            self.dhcp_server_dropped_ipv4 = dhcp_server_dropped_ipv4
        if dhcp_server_dropped_ipv6 is not None:
            self.dhcp_server_dropped_ipv6 = dhcp_server_dropped_ipv6
        if dhcp_client_dropped_ipv4 is not None:
            self.dhcp_client_dropped_ipv4 = dhcp_client_dropped_ipv4
        if bpdu_filter_dropped is not None:
            self.bpdu_filter_dropped = bpdu_filter_dropped
        if dhcp_client_dropped_ipv6 is not None:
            self.dhcp_client_dropped_ipv6 = dhcp_client_dropped_ipv6

    @property
    def spoof_guard_dropped(self):
        """Gets the spoof_guard_dropped of this PacketsDroppedBySecurity.  # noqa: E501

        The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.  # noqa: E501

        :return: The spoof_guard_dropped of this PacketsDroppedBySecurity.  # noqa: E501
        :rtype: list[PacketTypeAndCounter]
        """
        return self._spoof_guard_dropped

    @spoof_guard_dropped.setter
    def spoof_guard_dropped(self, spoof_guard_dropped):
        """Sets the spoof_guard_dropped of this PacketsDroppedBySecurity.

        The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.  # noqa: E501

        :param spoof_guard_dropped: The spoof_guard_dropped of this PacketsDroppedBySecurity.  # noqa: E501
        :type: list[PacketTypeAndCounter]
        """

        self._spoof_guard_dropped = spoof_guard_dropped

    @property
    def dhcp_server_dropped_ipv4(self):
        """Gets the dhcp_server_dropped_ipv4 of this PacketsDroppedBySecurity.  # noqa: E501

        The number of IPv4 packets dropped by \"DHCP server block\".  # noqa: E501

        :return: The dhcp_server_dropped_ipv4 of this PacketsDroppedBySecurity.  # noqa: E501
        :rtype: int
        """
        return self._dhcp_server_dropped_ipv4

    @dhcp_server_dropped_ipv4.setter
    def dhcp_server_dropped_ipv4(self, dhcp_server_dropped_ipv4):
        """Sets the dhcp_server_dropped_ipv4 of this PacketsDroppedBySecurity.

        The number of IPv4 packets dropped by \"DHCP server block\".  # noqa: E501

        :param dhcp_server_dropped_ipv4: The dhcp_server_dropped_ipv4 of this PacketsDroppedBySecurity.  # noqa: E501
        :type: int
        """

        self._dhcp_server_dropped_ipv4 = dhcp_server_dropped_ipv4

    @property
    def dhcp_server_dropped_ipv6(self):
        """Gets the dhcp_server_dropped_ipv6 of this PacketsDroppedBySecurity.  # noqa: E501

        The number of IPv6 packets dropped by \"DHCP server block\".  # noqa: E501

        :return: The dhcp_server_dropped_ipv6 of this PacketsDroppedBySecurity.  # noqa: E501
        :rtype: int
        """
        return self._dhcp_server_dropped_ipv6

    @dhcp_server_dropped_ipv6.setter
    def dhcp_server_dropped_ipv6(self, dhcp_server_dropped_ipv6):
        """Sets the dhcp_server_dropped_ipv6 of this PacketsDroppedBySecurity.

        The number of IPv6 packets dropped by \"DHCP server block\".  # noqa: E501

        :param dhcp_server_dropped_ipv6: The dhcp_server_dropped_ipv6 of this PacketsDroppedBySecurity.  # noqa: E501
        :type: int
        """

        self._dhcp_server_dropped_ipv6 = dhcp_server_dropped_ipv6

    @property
    def dhcp_client_dropped_ipv4(self):
        """Gets the dhcp_client_dropped_ipv4 of this PacketsDroppedBySecurity.  # noqa: E501

        The number of IPv4 packets dropped by \"DHCP client block\".  # noqa: E501

        :return: The dhcp_client_dropped_ipv4 of this PacketsDroppedBySecurity.  # noqa: E501
        :rtype: int
        """
        return self._dhcp_client_dropped_ipv4

    @dhcp_client_dropped_ipv4.setter
    def dhcp_client_dropped_ipv4(self, dhcp_client_dropped_ipv4):
        """Sets the dhcp_client_dropped_ipv4 of this PacketsDroppedBySecurity.

        The number of IPv4 packets dropped by \"DHCP client block\".  # noqa: E501

        :param dhcp_client_dropped_ipv4: The dhcp_client_dropped_ipv4 of this PacketsDroppedBySecurity.  # noqa: E501
        :type: int
        """

        self._dhcp_client_dropped_ipv4 = dhcp_client_dropped_ipv4

    @property
    def bpdu_filter_dropped(self):
        """Gets the bpdu_filter_dropped of this PacketsDroppedBySecurity.  # noqa: E501

        The number of packets dropped by \"BPDU filter\".  # noqa: E501

        :return: The bpdu_filter_dropped of this PacketsDroppedBySecurity.  # noqa: E501
        :rtype: int
        """
        return self._bpdu_filter_dropped

    @bpdu_filter_dropped.setter
    def bpdu_filter_dropped(self, bpdu_filter_dropped):
        """Sets the bpdu_filter_dropped of this PacketsDroppedBySecurity.

        The number of packets dropped by \"BPDU filter\".  # noqa: E501

        :param bpdu_filter_dropped: The bpdu_filter_dropped of this PacketsDroppedBySecurity.  # noqa: E501
        :type: int
        """

        self._bpdu_filter_dropped = bpdu_filter_dropped

    @property
    def dhcp_client_dropped_ipv6(self):
        """Gets the dhcp_client_dropped_ipv6 of this PacketsDroppedBySecurity.  # noqa: E501

        The number of IPv6 packets dropped by \"DHCP client block\".  # noqa: E501

        :return: The dhcp_client_dropped_ipv6 of this PacketsDroppedBySecurity.  # noqa: E501
        :rtype: int
        """
        return self._dhcp_client_dropped_ipv6

    @dhcp_client_dropped_ipv6.setter
    def dhcp_client_dropped_ipv6(self, dhcp_client_dropped_ipv6):
        """Sets the dhcp_client_dropped_ipv6 of this PacketsDroppedBySecurity.

        The number of IPv6 packets dropped by \"DHCP client block\".  # noqa: E501

        :param dhcp_client_dropped_ipv6: The dhcp_client_dropped_ipv6 of this PacketsDroppedBySecurity.  # noqa: E501
        :type: int
        """

        self._dhcp_client_dropped_ipv6 = dhcp_client_dropped_ipv6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PacketsDroppedBySecurity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PacketsDroppedBySecurity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
