# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ManualHealthCheck(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transport_zone_id': 'str',
        'vlans': 'HealthCheckSpecVlans',
        'operation_status': 'str',
        'result': 'HealthCheckResult'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'transport_zone_id': 'transport_zone_id',
        'vlans': 'vlans',
        'operation_status': 'operation_status',
        'result': 'result'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, transport_zone_id=None, vlans=None, operation_status=None, result=None, *args, **kwargs):  # noqa: E501
        """ManualHealthCheck - a model defined in Swagger"""  # noqa: E501
        self._transport_zone_id = None
        self._vlans = None
        self._operation_status = None
        self._result = None
        self.discriminator = None
        self.transport_zone_id = transport_zone_id
        self.vlans = vlans
        if operation_status is not None:
            self.operation_status = operation_status
        if result is not None:
            self.result = result
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def transport_zone_id(self):
        """Gets the transport_zone_id of this ManualHealthCheck.  # noqa: E501

        The entity ID works as a filter param. Entity ID and entity type should   be both provided or not at a query.   # noqa: E501

        :return: The transport_zone_id of this ManualHealthCheck.  # noqa: E501
        :rtype: str
        """
        return self._transport_zone_id

    @transport_zone_id.setter
    def transport_zone_id(self, transport_zone_id):
        """Sets the transport_zone_id of this ManualHealthCheck.

        The entity ID works as a filter param. Entity ID and entity type should   be both provided or not at a query.   # noqa: E501

        :param transport_zone_id: The transport_zone_id of this ManualHealthCheck.  # noqa: E501
        :type: str
        """
        if transport_zone_id is None:
            raise ValueError("Invalid value for `transport_zone_id`, must not be `None`")  # noqa: E501

        self._transport_zone_id = transport_zone_id

    @property
    def vlans(self):
        """Gets the vlans of this ManualHealthCheck.  # noqa: E501


        :return: The vlans of this ManualHealthCheck.  # noqa: E501
        :rtype: HealthCheckSpecVlans
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """Sets the vlans of this ManualHealthCheck.


        :param vlans: The vlans of this ManualHealthCheck.  # noqa: E501
        :type: HealthCheckSpecVlans
        """
        if vlans is None:
            raise ValueError("Invalid value for `vlans`, must not be `None`")  # noqa: E501

        self._vlans = vlans

    @property
    def operation_status(self):
        """Gets the operation_status of this ManualHealthCheck.  # noqa: E501

        The operation status for health check   # noqa: E501

        :return: The operation_status of this ManualHealthCheck.  # noqa: E501
        :rtype: str
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this ManualHealthCheck.

        The operation status for health check   # noqa: E501

        :param operation_status: The operation_status of this ManualHealthCheck.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "FINISHED"]  # noqa: E501
        if operation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_status` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_status, allowed_values)
            )

        self._operation_status = operation_status

    @property
    def result(self):
        """Gets the result of this ManualHealthCheck.  # noqa: E501


        :return: The result of this ManualHealthCheck.  # noqa: E501
        :rtype: HealthCheckResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ManualHealthCheck.


        :param result: The result of this ManualHealthCheck.  # noqa: E501
        :type: HealthCheckResult
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManualHealthCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManualHealthCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
