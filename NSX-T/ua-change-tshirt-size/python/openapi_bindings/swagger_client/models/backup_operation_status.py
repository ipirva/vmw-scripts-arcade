# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BackupOperationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backup_id': 'str',
        'end_time': 'int',
        'success': 'bool',
        'start_time': 'int',
        'error_message': 'str',
        'error_code': 'str'
    }

    attribute_map = {
        'backup_id': 'backup_id',
        'end_time': 'end_time',
        'success': 'success',
        'start_time': 'start_time',
        'error_message': 'error_message',
        'error_code': 'error_code'
    }

    def __init__(self, backup_id=None, end_time=None, success=None, start_time=None, error_message=None, error_code=None):  # noqa: E501
        """BackupOperationStatus - a model defined in Swagger"""  # noqa: E501
        self._backup_id = None
        self._end_time = None
        self._success = None
        self._start_time = None
        self._error_message = None
        self._error_code = None
        self.discriminator = None
        self.backup_id = backup_id
        if end_time is not None:
            self.end_time = end_time
        self.success = success
        if start_time is not None:
            self.start_time = start_time
        if error_message is not None:
            self.error_message = error_message
        if error_code is not None:
            self.error_code = error_code

    @property
    def backup_id(self):
        """Gets the backup_id of this BackupOperationStatus.  # noqa: E501

        Unique identifier of a backup  # noqa: E501

        :return: The backup_id of this BackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this BackupOperationStatus.

        Unique identifier of a backup  # noqa: E501

        :param backup_id: The backup_id of this BackupOperationStatus.  # noqa: E501
        :type: str
        """
        if backup_id is None:
            raise ValueError("Invalid value for `backup_id`, must not be `None`")  # noqa: E501

        self._backup_id = backup_id

    @property
    def end_time(self):
        """Gets the end_time of this BackupOperationStatus.  # noqa: E501

        Time when operation was ended  # noqa: E501

        :return: The end_time of this BackupOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BackupOperationStatus.

        Time when operation was ended  # noqa: E501

        :param end_time: The end_time of this BackupOperationStatus.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def success(self):
        """Gets the success of this BackupOperationStatus.  # noqa: E501

        True if backup is successfully completed, else false  # noqa: E501

        :return: The success of this BackupOperationStatus.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this BackupOperationStatus.

        True if backup is successfully completed, else false  # noqa: E501

        :param success: The success of this BackupOperationStatus.  # noqa: E501
        :type: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")  # noqa: E501

        self._success = success

    @property
    def start_time(self):
        """Gets the start_time of this BackupOperationStatus.  # noqa: E501

        Time when operation was started  # noqa: E501

        :return: The start_time of this BackupOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackupOperationStatus.

        Time when operation was started  # noqa: E501

        :param start_time: The start_time of this BackupOperationStatus.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def error_message(self):
        """Gets the error_message of this BackupOperationStatus.  # noqa: E501

        Error code details  # noqa: E501

        :return: The error_message of this BackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BackupOperationStatus.

        Error code details  # noqa: E501

        :param error_message: The error_message of this BackupOperationStatus.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def error_code(self):
        """Gets the error_code of this BackupOperationStatus.  # noqa: E501

        Error code  # noqa: E501

        :return: The error_code of this BackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BackupOperationStatus.

        Error code  # noqa: E501

        :param error_code: The error_code of this BackupOperationStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["BACKUP_NOT_RUN_ON_MASTER", "BACKUP_SERVER_UNREACHABLE", "BACKUP_AUTHENTICATION_FAILURE", "BACKUP_PERMISSION_ERROR", "BACKUP_TIMEOUT", "BACKUP_BAD_FINGERPRINT", "BACKUP_GENERIC_ERROR"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BackupOperationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BackupOperationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
