# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.lb_active_monitor import LbActiveMonitor  # noqa: F401,E501

class LbHttpMonitor(LbActiveMonitor):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_status_codes': 'list[int]',
        'request_method': 'str',
        'request_body': 'str',
        'response_body': 'str',
        'request_url': 'str',
        'request_version': 'str',
        'request_headers': 'list[LbHttpRequestHeader]'
    }
    if hasattr(LbActiveMonitor, "swagger_types"):
        swagger_types.update(LbActiveMonitor.swagger_types)

    attribute_map = {
        'response_status_codes': 'response_status_codes',
        'request_method': 'request_method',
        'request_body': 'request_body',
        'response_body': 'response_body',
        'request_url': 'request_url',
        'request_version': 'request_version',
        'request_headers': 'request_headers'
    }
    if hasattr(LbActiveMonitor, "attribute_map"):
        attribute_map.update(LbActiveMonitor.attribute_map)

    def __init__(self, response_status_codes=None, request_method='GET', request_body=None, response_body=None, request_url=None, request_version='HTTP_VERSION_1_1', request_headers=None, *args, **kwargs):  # noqa: E501
        """LbHttpMonitor - a model defined in Swagger"""  # noqa: E501
        self._response_status_codes = None
        self._request_method = None
        self._request_body = None
        self._response_body = None
        self._request_url = None
        self._request_version = None
        self._request_headers = None
        self.discriminator = None
        if response_status_codes is not None:
            self.response_status_codes = response_status_codes
        if request_method is not None:
            self.request_method = request_method
        if request_body is not None:
            self.request_body = request_body
        if response_body is not None:
            self.response_body = response_body
        if request_url is not None:
            self.request_url = request_url
        if request_version is not None:
            self.request_version = request_version
        if request_headers is not None:
            self.request_headers = request_headers
        LbActiveMonitor.__init__(self, *args, **kwargs)

    @property
    def response_status_codes(self):
        """Gets the response_status_codes of this LbHttpMonitor.  # noqa: E501

        The HTTP response status code should be a valid HTTP status code.   # noqa: E501

        :return: The response_status_codes of this LbHttpMonitor.  # noqa: E501
        :rtype: list[int]
        """
        return self._response_status_codes

    @response_status_codes.setter
    def response_status_codes(self, response_status_codes):
        """Sets the response_status_codes of this LbHttpMonitor.

        The HTTP response status code should be a valid HTTP status code.   # noqa: E501

        :param response_status_codes: The response_status_codes of this LbHttpMonitor.  # noqa: E501
        :type: list[int]
        """

        self._response_status_codes = response_status_codes

    @property
    def request_method(self):
        """Gets the request_method of this LbHttpMonitor.  # noqa: E501

        the health check method for HTTP monitor type  # noqa: E501

        :return: The request_method of this LbHttpMonitor.  # noqa: E501
        :rtype: str
        """
        return self._request_method

    @request_method.setter
    def request_method(self, request_method):
        """Sets the request_method of this LbHttpMonitor.

        the health check method for HTTP monitor type  # noqa: E501

        :param request_method: The request_method of this LbHttpMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "OPTIONS", "POST", "HEAD", "PUT"]  # noqa: E501
        if request_method not in allowed_values:
            raise ValueError(
                "Invalid value for `request_method` ({0}), must be one of {1}"  # noqa: E501
                .format(request_method, allowed_values)
            )

        self._request_method = request_method

    @property
    def request_body(self):
        """Gets the request_body of this LbHttpMonitor.  # noqa: E501

        String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST.   # noqa: E501

        :return: The request_body of this LbHttpMonitor.  # noqa: E501
        :rtype: str
        """
        return self._request_body

    @request_body.setter
    def request_body(self, request_body):
        """Sets the request_body of this LbHttpMonitor.

        String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST.   # noqa: E501

        :param request_body: The request_body of this LbHttpMonitor.  # noqa: E501
        :type: str
        """

        self._request_body = request_body

    @property
    def response_body(self):
        """Gets the response_body of this LbHttpMonitor.  # noqa: E501

        If HTTP response body match string (regular expressions not supported) is specified (using LbHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful.   # noqa: E501

        :return: The response_body of this LbHttpMonitor.  # noqa: E501
        :rtype: str
        """
        return self._response_body

    @response_body.setter
    def response_body(self, response_body):
        """Sets the response_body of this LbHttpMonitor.

        If HTTP response body match string (regular expressions not supported) is specified (using LbHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful.   # noqa: E501

        :param response_body: The response_body of this LbHttpMonitor.  # noqa: E501
        :type: str
        """

        self._response_body = response_body

    @property
    def request_url(self):
        """Gets the request_url of this LbHttpMonitor.  # noqa: E501

        URL used for HTTP monitor  # noqa: E501

        :return: The request_url of this LbHttpMonitor.  # noqa: E501
        :rtype: str
        """
        return self._request_url

    @request_url.setter
    def request_url(self, request_url):
        """Sets the request_url of this LbHttpMonitor.

        URL used for HTTP monitor  # noqa: E501

        :param request_url: The request_url of this LbHttpMonitor.  # noqa: E501
        :type: str
        """

        self._request_url = request_url

    @property
    def request_version(self):
        """Gets the request_version of this LbHttpMonitor.  # noqa: E501

        HTTP request version  # noqa: E501

        :return: The request_version of this LbHttpMonitor.  # noqa: E501
        :rtype: str
        """
        return self._request_version

    @request_version.setter
    def request_version(self, request_version):
        """Sets the request_version of this LbHttpMonitor.

        HTTP request version  # noqa: E501

        :param request_version: The request_version of this LbHttpMonitor.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP_VERSION_1_0", "HTTP_VERSION_1_1"]  # noqa: E501
        if request_version not in allowed_values:
            raise ValueError(
                "Invalid value for `request_version` ({0}), must be one of {1}"  # noqa: E501
                .format(request_version, allowed_values)
            )

        self._request_version = request_version

    @property
    def request_headers(self):
        """Gets the request_headers of this LbHttpMonitor.  # noqa: E501

        Array of HTTP request headers  # noqa: E501

        :return: The request_headers of this LbHttpMonitor.  # noqa: E501
        :rtype: list[LbHttpRequestHeader]
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this LbHttpMonitor.

        Array of HTTP request headers  # noqa: E501

        :param request_headers: The request_headers of this LbHttpMonitor.  # noqa: E501
        :type: list[LbHttpRequestHeader]
        """

        self._request_headers = request_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbHttpMonitor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbHttpMonitor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
