# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.node import Node  # noqa: F401,E501

class HostNode(Node):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discovered_node_id': 'str',
        'managed_by_server': 'str',
        'host_credential': 'HostNodeLoginCredential',
        'os_version': 'str',
        'os_type': 'str',
        'windows_install_location': 'str',
        'maintenance_mode_state': 'str'
    }
    if hasattr(Node, "swagger_types"):
        swagger_types.update(Node.swagger_types)

    attribute_map = {
        'discovered_node_id': 'discovered_node_id',
        'managed_by_server': 'managed_by_server',
        'host_credential': 'host_credential',
        'os_version': 'os_version',
        'os_type': 'os_type',
        'windows_install_location': 'windows_install_location',
        'maintenance_mode_state': 'maintenance_mode_state'
    }
    if hasattr(Node, "attribute_map"):
        attribute_map.update(Node.attribute_map)

    def __init__(self, discovered_node_id=None, managed_by_server=None, host_credential=None, os_version=None, os_type=None, windows_install_location=None, maintenance_mode_state=None, *args, **kwargs):  # noqa: E501
        """HostNode - a model defined in Swagger"""  # noqa: E501
        self._discovered_node_id = None
        self._managed_by_server = None
        self._host_credential = None
        self._os_version = None
        self._os_type = None
        self._windows_install_location = None
        self._maintenance_mode_state = None
        self.discriminator = None
        if discovered_node_id is not None:
            self.discovered_node_id = discovered_node_id
        if managed_by_server is not None:
            self.managed_by_server = managed_by_server
        if host_credential is not None:
            self.host_credential = host_credential
        if os_version is not None:
            self.os_version = os_version
        self.os_type = os_type
        if windows_install_location is not None:
            self.windows_install_location = windows_install_location
        if maintenance_mode_state is not None:
            self.maintenance_mode_state = maintenance_mode_state
        Node.__init__(self, *args, **kwargs)

    @property
    def discovered_node_id(self):
        """Gets the discovered_node_id of this HostNode.  # noqa: E501

        Id of discovered node which was converted to create this node  # noqa: E501

        :return: The discovered_node_id of this HostNode.  # noqa: E501
        :rtype: str
        """
        return self._discovered_node_id

    @discovered_node_id.setter
    def discovered_node_id(self, discovered_node_id):
        """Sets the discovered_node_id of this HostNode.

        Id of discovered node which was converted to create this node  # noqa: E501

        :param discovered_node_id: The discovered_node_id of this HostNode.  # noqa: E501
        :type: str
        """

        self._discovered_node_id = discovered_node_id

    @property
    def managed_by_server(self):
        """Gets the managed_by_server of this HostNode.  # noqa: E501

        The id of the vCenter server managing the ESXi type HostNode  # noqa: E501

        :return: The managed_by_server of this HostNode.  # noqa: E501
        :rtype: str
        """
        return self._managed_by_server

    @managed_by_server.setter
    def managed_by_server(self, managed_by_server):
        """Sets the managed_by_server of this HostNode.

        The id of the vCenter server managing the ESXi type HostNode  # noqa: E501

        :param managed_by_server: The managed_by_server of this HostNode.  # noqa: E501
        :type: str
        """

        self._managed_by_server = managed_by_server

    @property
    def host_credential(self):
        """Gets the host_credential of this HostNode.  # noqa: E501


        :return: The host_credential of this HostNode.  # noqa: E501
        :rtype: HostNodeLoginCredential
        """
        return self._host_credential

    @host_credential.setter
    def host_credential(self, host_credential):
        """Sets the host_credential of this HostNode.


        :param host_credential: The host_credential of this HostNode.  # noqa: E501
        :type: HostNodeLoginCredential
        """

        self._host_credential = host_credential

    @property
    def os_version(self):
        """Gets the os_version of this HostNode.  # noqa: E501

        Version of the hypervisor operating system  # noqa: E501

        :return: The os_version of this HostNode.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this HostNode.

        Version of the hypervisor operating system  # noqa: E501

        :param os_version: The os_version of this HostNode.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def os_type(self):
        """Gets the os_type of this HostNode.  # noqa: E501

        Hypervisor type, for example ESXi or RHEL KVM  # noqa: E501

        :return: The os_type of this HostNode.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this HostNode.

        Hypervisor type, for example ESXi or RHEL KVM  # noqa: E501

        :param os_type: The os_type of this HostNode.  # noqa: E501
        :type: str
        """
        if os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ESXI", "RHELKVM", "RHELSERVER", "WINDOWSSERVER", "RHELCONTAINER", "UBUNTUKVM", "UBUNTUSERVER", "HYPERV", "CENTOSKVM", "CENTOSSERVER", "CENTOSCONTAINER", "SLESKVM", "SLESSERVER", "OELSERVER", "RHELSMARTNIC", "UBUNTUSMARTNIC"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"  # noqa: E501
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def windows_install_location(self):
        """Gets the windows_install_location of this HostNode.  # noqa: E501

        Specify an installation folder to install the NSX kernel modules for Windows Server. By default, it is C:\\Program Files\\VMware\\NSX\\.  # noqa: E501

        :return: The windows_install_location of this HostNode.  # noqa: E501
        :rtype: str
        """
        return self._windows_install_location

    @windows_install_location.setter
    def windows_install_location(self, windows_install_location):
        """Sets the windows_install_location of this HostNode.

        Specify an installation folder to install the NSX kernel modules for Windows Server. By default, it is C:\\Program Files\\VMware\\NSX\\.  # noqa: E501

        :param windows_install_location: The windows_install_location of this HostNode.  # noqa: E501
        :type: str
        """

        self._windows_install_location = windows_install_location

    @property
    def maintenance_mode_state(self):
        """Gets the maintenance_mode_state of this HostNode.  # noqa: E501

        Indicates host node's maintenance mode state. The state is ENTERING when a task to put the host in maintenance-mode is in progress.   # noqa: E501

        :return: The maintenance_mode_state of this HostNode.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode_state

    @maintenance_mode_state.setter
    def maintenance_mode_state(self, maintenance_mode_state):
        """Sets the maintenance_mode_state of this HostNode.

        Indicates host node's maintenance mode state. The state is ENTERING when a task to put the host in maintenance-mode is in progress.   # noqa: E501

        :param maintenance_mode_state: The maintenance_mode_state of this HostNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFF", "ENTERING", "ON"]  # noqa: E501
        if maintenance_mode_state not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_mode_state` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode_state, allowed_values)
            )

        self._maintenance_mode_state = maintenance_mode_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
