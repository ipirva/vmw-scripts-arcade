# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_service_profile import BaseServiceProfile  # noqa: F401,E501

class GiServiceProfile(BaseServiceProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor_template_key': 'str',
        'service_id': 'str',
        'vendor_template_id': 'str'
    }
    if hasattr(BaseServiceProfile, "swagger_types"):
        swagger_types.update(BaseServiceProfile.swagger_types)

    attribute_map = {
        'vendor_template_key': 'vendor_template_key',
        'service_id': 'service_id',
        'vendor_template_id': 'vendor_template_id'
    }
    if hasattr(BaseServiceProfile, "attribute_map"):
        attribute_map.update(BaseServiceProfile.attribute_map)

    def __init__(self, vendor_template_key=None, service_id=None, vendor_template_id=None, *args, **kwargs):  # noqa: E501
        """GiServiceProfile - a model defined in Swagger"""  # noqa: E501
        self._vendor_template_key = None
        self._service_id = None
        self._vendor_template_id = None
        self.discriminator = None
        if vendor_template_key is not None:
            self.vendor_template_key = vendor_template_key
        if service_id is not None:
            self.service_id = service_id
        self.vendor_template_id = vendor_template_id
        BaseServiceProfile.__init__(self, *args, **kwargs)

    @property
    def vendor_template_key(self):
        """Gets the vendor_template_key of this GiServiceProfile.  # noqa: E501

        Different VMs in data center can have Different protection levels as specified by administrator in the policy. The identifier for the policy with which the partner appliance identifies this policy. This identifier will be passed to the partner appliance at runtime to specify which protection level is applicable for the VM being protected.  # noqa: E501

        :return: The vendor_template_key of this GiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._vendor_template_key

    @vendor_template_key.setter
    def vendor_template_key(self, vendor_template_key):
        """Sets the vendor_template_key of this GiServiceProfile.

        Different VMs in data center can have Different protection levels as specified by administrator in the policy. The identifier for the policy with which the partner appliance identifies this policy. This identifier will be passed to the partner appliance at runtime to specify which protection level is applicable for the VM being protected.  # noqa: E501

        :param vendor_template_key: The vendor_template_key of this GiServiceProfile.  # noqa: E501
        :type: str
        """

        self._vendor_template_key = vendor_template_key

    @property
    def service_id(self):
        """Gets the service_id of this GiServiceProfile.  # noqa: E501

        The service to which the service profile belongs.  # noqa: E501

        :return: The service_id of this GiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this GiServiceProfile.

        The service to which the service profile belongs.  # noqa: E501

        :param service_id: The service_id of this GiServiceProfile.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def vendor_template_id(self):
        """Gets the vendor_template_id of this GiServiceProfile.  # noqa: E501

        ID of the vendor template, created by partner while registering the service.  # noqa: E501

        :return: The vendor_template_id of this GiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._vendor_template_id

    @vendor_template_id.setter
    def vendor_template_id(self, vendor_template_id):
        """Sets the vendor_template_id of this GiServiceProfile.

        ID of the vendor template, created by partner while registering the service.  # noqa: E501

        :param vendor_template_id: The vendor_template_id of this GiServiceProfile.  # noqa: E501
        :type: str
        """
        if vendor_template_id is None:
            raise ValueError("Invalid value for `vendor_template_id`, must not be `None`")  # noqa: E501

        self._vendor_template_id = vendor_template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiServiceProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiServiceProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
