# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.node_mode import NodeMode  # noqa: F401,E501

class SwitchingToVmcModeParameters(NodeMode):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sre_org': 'OrgInfo',
        'default_org_id': 'str',
        'ea_org': 'OrgInfo',
        'gss_org': 'OrgInfo',
        'proxy_host': 'str',
        'csp_time_drift': 'int',
        'sddc_id': 'str',
        'basic_auth_whitelist_ips': 'list[str]',
        'base_url': 'str',
        'proxy_port': 'int',
        'csp_org_uri': 'str',
        'csp_client_credential': 'Oauth2Credentials',
        'auth_code': 'Oauth2Credentials',
        'mode_change_only': 'bool',
        'csp_client_incoming_credentials': 'list[str]',
        'service_definition_id': 'str',
        'resource_type': 'str'
    }
    if hasattr(NodeMode, "swagger_types"):
        swagger_types.update(NodeMode.swagger_types)

    attribute_map = {
        'sre_org': 'sre_org',
        'default_org_id': 'default_org_id',
        'ea_org': 'ea_org',
        'gss_org': 'gss_org',
        'proxy_host': 'proxy_host',
        'csp_time_drift': 'csp_time_drift',
        'sddc_id': 'sddc_id',
        'basic_auth_whitelist_ips': 'basic_auth_whitelist_ips',
        'base_url': 'base_url',
        'proxy_port': 'proxy_port',
        'csp_org_uri': 'csp_org_uri',
        'csp_client_credential': 'csp_client_credential',
        'auth_code': 'auth_code',
        'mode_change_only': 'mode_change_only',
        'csp_client_incoming_credentials': 'csp_client_incoming_credentials',
        'service_definition_id': 'service_definition_id',
        'resource_type': 'resource_type'
    }
    if hasattr(NodeMode, "attribute_map"):
        attribute_map.update(NodeMode.attribute_map)

    def __init__(self, sre_org=None, default_org_id=None, ea_org=None, gss_org=None, proxy_host=None, csp_time_drift=None, sddc_id=None, basic_auth_whitelist_ips=None, base_url=None, proxy_port=None, csp_org_uri=None, csp_client_credential=None, auth_code=None, mode_change_only=None, csp_client_incoming_credentials=None, service_definition_id=None, resource_type='SwitchingToVmcModeParameters', *args, **kwargs):  # noqa: E501
        """SwitchingToVmcModeParameters - a model defined in Swagger"""  # noqa: E501
        self._sre_org = None
        self._default_org_id = None
        self._ea_org = None
        self._gss_org = None
        self._proxy_host = None
        self._csp_time_drift = None
        self._sddc_id = None
        self._basic_auth_whitelist_ips = None
        self._base_url = None
        self._proxy_port = None
        self._csp_org_uri = None
        self._csp_client_credential = None
        self._auth_code = None
        self._mode_change_only = None
        self._csp_client_incoming_credentials = None
        self._service_definition_id = None
        self._resource_type = None
        self.discriminator = None
        if sre_org is not None:
            self.sre_org = sre_org
        if default_org_id is not None:
            self.default_org_id = default_org_id
        if ea_org is not None:
            self.ea_org = ea_org
        if gss_org is not None:
            self.gss_org = gss_org
        if proxy_host is not None:
            self.proxy_host = proxy_host
        if csp_time_drift is not None:
            self.csp_time_drift = csp_time_drift
        if sddc_id is not None:
            self.sddc_id = sddc_id
        if basic_auth_whitelist_ips is not None:
            self.basic_auth_whitelist_ips = basic_auth_whitelist_ips
        if base_url is not None:
            self.base_url = base_url
        if proxy_port is not None:
            self.proxy_port = proxy_port
        if csp_org_uri is not None:
            self.csp_org_uri = csp_org_uri
        if csp_client_credential is not None:
            self.csp_client_credential = csp_client_credential
        if auth_code is not None:
            self.auth_code = auth_code
        if mode_change_only is not None:
            self.mode_change_only = mode_change_only
        if csp_client_incoming_credentials is not None:
            self.csp_client_incoming_credentials = csp_client_incoming_credentials
        if service_definition_id is not None:
            self.service_definition_id = service_definition_id
        if resource_type is not None:
            self.resource_type = resource_type
        NodeMode.__init__(self, *args, **kwargs)

    @property
    def sre_org(self):
        """Gets the sre_org of this SwitchingToVmcModeParameters.  # noqa: E501


        :return: The sre_org of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: OrgInfo
        """
        return self._sre_org

    @sre_org.setter
    def sre_org(self, sre_org):
        """Sets the sre_org of this SwitchingToVmcModeParameters.


        :param sre_org: The sre_org of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: OrgInfo
        """

        self._sre_org = sre_org

    @property
    def default_org_id(self):
        """Gets the default_org_id of this SwitchingToVmcModeParameters.  # noqa: E501

        Org ID of a Client - commonly UUID.  # noqa: E501

        :return: The default_org_id of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._default_org_id

    @default_org_id.setter
    def default_org_id(self, default_org_id):
        """Sets the default_org_id of this SwitchingToVmcModeParameters.

        Org ID of a Client - commonly UUID.  # noqa: E501

        :param default_org_id: The default_org_id of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """

        self._default_org_id = default_org_id

    @property
    def ea_org(self):
        """Gets the ea_org of this SwitchingToVmcModeParameters.  # noqa: E501


        :return: The ea_org of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: OrgInfo
        """
        return self._ea_org

    @ea_org.setter
    def ea_org(self, ea_org):
        """Sets the ea_org of this SwitchingToVmcModeParameters.


        :param ea_org: The ea_org of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: OrgInfo
        """

        self._ea_org = ea_org

    @property
    def gss_org(self):
        """Gets the gss_org of this SwitchingToVmcModeParameters.  # noqa: E501


        :return: The gss_org of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: OrgInfo
        """
        return self._gss_org

    @gss_org.setter
    def gss_org(self, gss_org):
        """Sets the gss_org of this SwitchingToVmcModeParameters.


        :param gss_org: The gss_org of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: OrgInfo
        """

        self._gss_org = gss_org

    @property
    def proxy_host(self):
        """Gets the proxy_host of this SwitchingToVmcModeParameters.  # noqa: E501

        IP/host of PoP (Point-of-Presence) HTTP proxy server  # noqa: E501

        :return: The proxy_host of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._proxy_host

    @proxy_host.setter
    def proxy_host(self, proxy_host):
        """Sets the proxy_host of this SwitchingToVmcModeParameters.

        IP/host of PoP (Point-of-Presence) HTTP proxy server  # noqa: E501

        :param proxy_host: The proxy_host of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """

        self._proxy_host = proxy_host

    @property
    def csp_time_drift(self):
        """Gets the csp_time_drift of this SwitchingToVmcModeParameters.  # noqa: E501

        CSP time drift in milliseconds  # noqa: E501

        :return: The csp_time_drift of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: int
        """
        return self._csp_time_drift

    @csp_time_drift.setter
    def csp_time_drift(self, csp_time_drift):
        """Sets the csp_time_drift of this SwitchingToVmcModeParameters.

        CSP time drift in milliseconds  # noqa: E501

        :param csp_time_drift: The csp_time_drift of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: int
        """

        self._csp_time_drift = csp_time_drift

    @property
    def sddc_id(self):
        """Gets the sddc_id of this SwitchingToVmcModeParameters.  # noqa: E501

        SDDC id  # noqa: E501

        :return: The sddc_id of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._sddc_id

    @sddc_id.setter
    def sddc_id(self, sddc_id):
        """Sets the sddc_id of this SwitchingToVmcModeParameters.

        SDDC id  # noqa: E501

        :param sddc_id: The sddc_id of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """

        self._sddc_id = sddc_id

    @property
    def basic_auth_whitelist_ips(self):
        """Gets the basic_auth_whitelist_ips of this SwitchingToVmcModeParameters.  # noqa: E501

        List of whitelist IPs for basic auth  # noqa: E501

        :return: The basic_auth_whitelist_ips of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._basic_auth_whitelist_ips

    @basic_auth_whitelist_ips.setter
    def basic_auth_whitelist_ips(self, basic_auth_whitelist_ips):
        """Sets the basic_auth_whitelist_ips of this SwitchingToVmcModeParameters.

        List of whitelist IPs for basic auth  # noqa: E501

        :param basic_auth_whitelist_ips: The basic_auth_whitelist_ips of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: list[str]
        """

        self._basic_auth_whitelist_ips = basic_auth_whitelist_ips

    @property
    def base_url(self):
        """Gets the base_url of this SwitchingToVmcModeParameters.  # noqa: E501

        Protocol and domain name (or IP address) of a CSP server, like \"https://console-stg.cloud.vmware.com\".  # noqa: E501

        :return: The base_url of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this SwitchingToVmcModeParameters.

        Protocol and domain name (or IP address) of a CSP server, like \"https://console-stg.cloud.vmware.com\".  # noqa: E501

        :param base_url: The base_url of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def proxy_port(self):
        """Gets the proxy_port of this SwitchingToVmcModeParameters.  # noqa: E501

        Port of PoP (Point-of-Presence) Http proxy server  # noqa: E501

        :return: The proxy_port of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: int
        """
        return self._proxy_port

    @proxy_port.setter
    def proxy_port(self, proxy_port):
        """Sets the proxy_port of this SwitchingToVmcModeParameters.

        Port of PoP (Point-of-Presence) Http proxy server  # noqa: E501

        :param proxy_port: The proxy_port of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: int
        """

        self._proxy_port = proxy_port

    @property
    def csp_org_uri(self):
        """Gets the csp_org_uri of this SwitchingToVmcModeParameters.  # noqa: E501

        Relative path on CSP server to the Org location. Can be \"/csp/gateway/am/api/orgs/\".  # noqa: E501

        :return: The csp_org_uri of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._csp_org_uri

    @csp_org_uri.setter
    def csp_org_uri(self, csp_org_uri):
        """Sets the csp_org_uri of this SwitchingToVmcModeParameters.

        Relative path on CSP server to the Org location. Can be \"/csp/gateway/am/api/orgs/\".  # noqa: E501

        :param csp_org_uri: The csp_org_uri of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """

        self._csp_org_uri = csp_org_uri

    @property
    def csp_client_credential(self):
        """Gets the csp_client_credential of this SwitchingToVmcModeParameters.  # noqa: E501


        :return: The csp_client_credential of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: Oauth2Credentials
        """
        return self._csp_client_credential

    @csp_client_credential.setter
    def csp_client_credential(self, csp_client_credential):
        """Sets the csp_client_credential of this SwitchingToVmcModeParameters.


        :param csp_client_credential: The csp_client_credential of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: Oauth2Credentials
        """

        self._csp_client_credential = csp_client_credential

    @property
    def auth_code(self):
        """Gets the auth_code of this SwitchingToVmcModeParameters.  # noqa: E501


        :return: The auth_code of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: Oauth2Credentials
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this SwitchingToVmcModeParameters.


        :param auth_code: The auth_code of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: Oauth2Credentials
        """

        self._auth_code = auth_code

    @property
    def mode_change_only(self):
        """Gets the mode_change_only of this SwitchingToVmcModeParameters.  # noqa: E501

        When this parameter is set to true, only a change of the node mode happens without any update to the auth properties. When this param is not set to true i.e. set to false or not provided, mode change and update to the auth properties will both happen.  # noqa: E501

        :return: The mode_change_only of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: bool
        """
        return self._mode_change_only

    @mode_change_only.setter
    def mode_change_only(self, mode_change_only):
        """Sets the mode_change_only of this SwitchingToVmcModeParameters.

        When this parameter is set to true, only a change of the node mode happens without any update to the auth properties. When this param is not set to true i.e. set to false or not provided, mode change and update to the auth properties will both happen.  # noqa: E501

        :param mode_change_only: The mode_change_only of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: bool
        """

        self._mode_change_only = mode_change_only

    @property
    def csp_client_incoming_credentials(self):
        """Gets the csp_client_incoming_credentials of this SwitchingToVmcModeParameters.  # noqa: E501

        List of incoming client IDs  # noqa: E501

        :return: The csp_client_incoming_credentials of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._csp_client_incoming_credentials

    @csp_client_incoming_credentials.setter
    def csp_client_incoming_credentials(self, csp_client_incoming_credentials):
        """Sets the csp_client_incoming_credentials of this SwitchingToVmcModeParameters.

        List of incoming client IDs  # noqa: E501

        :param csp_client_incoming_credentials: The csp_client_incoming_credentials of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: list[str]
        """

        self._csp_client_incoming_credentials = csp_client_incoming_credentials

    @property
    def service_definition_id(self):
        """Gets the service_definition_id of this SwitchingToVmcModeParameters.  # noqa: E501

        Service definition id  # noqa: E501

        :return: The service_definition_id of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._service_definition_id

    @service_definition_id.setter
    def service_definition_id(self, service_definition_id):
        """Sets the service_definition_id of this SwitchingToVmcModeParameters.

        Service definition id  # noqa: E501

        :param service_definition_id: The service_definition_id of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """

        self._service_definition_id = service_definition_id

    @property
    def resource_type(self):
        """Gets the resource_type of this SwitchingToVmcModeParameters.  # noqa: E501

        Node Mode type  # noqa: E501

        :return: The resource_type of this SwitchingToVmcModeParameters.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SwitchingToVmcModeParameters.

        Node Mode type  # noqa: E501

        :param resource_type: The resource_type of this SwitchingToVmcModeParameters.  # noqa: E501
        :type: str
        """
        allowed_values = ["SwitchingToVmcModeParameters"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwitchingToVmcModeParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwitchingToVmcModeParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
