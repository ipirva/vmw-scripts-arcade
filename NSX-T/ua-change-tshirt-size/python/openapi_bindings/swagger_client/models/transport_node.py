# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class TransportNode(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_switch_spec': 'HostSwitchSpec',
        'node_id': 'str',
        'node_deployment_info': 'Node',
        'maintenance_mode': 'str',
        'failure_domain_id': 'str',
        'remote_tunnel_endpoint': 'TransportNodeRemoteTunnelEndpointConfig',
        'is_overridden': 'bool',
        'transport_zone_endpoints': 'list[TransportZoneEndPoint]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'host_switch_spec': 'host_switch_spec',
        'node_id': 'node_id',
        'node_deployment_info': 'node_deployment_info',
        'maintenance_mode': 'maintenance_mode',
        'failure_domain_id': 'failure_domain_id',
        'remote_tunnel_endpoint': 'remote_tunnel_endpoint',
        'is_overridden': 'is_overridden',
        'transport_zone_endpoints': 'transport_zone_endpoints'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, host_switch_spec=None, node_id=None, node_deployment_info=None, maintenance_mode=None, failure_domain_id=None, remote_tunnel_endpoint=None, is_overridden=None, transport_zone_endpoints=None, *args, **kwargs):  # noqa: E501
        """TransportNode - a model defined in Swagger"""  # noqa: E501
        self._host_switch_spec = None
        self._node_id = None
        self._node_deployment_info = None
        self._maintenance_mode = None
        self._failure_domain_id = None
        self._remote_tunnel_endpoint = None
        self._is_overridden = None
        self._transport_zone_endpoints = None
        self.discriminator = None
        if host_switch_spec is not None:
            self.host_switch_spec = host_switch_spec
        if node_id is not None:
            self.node_id = node_id
        if node_deployment_info is not None:
            self.node_deployment_info = node_deployment_info
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if failure_domain_id is not None:
            self.failure_domain_id = failure_domain_id
        if remote_tunnel_endpoint is not None:
            self.remote_tunnel_endpoint = remote_tunnel_endpoint
        if is_overridden is not None:
            self.is_overridden = is_overridden
        if transport_zone_endpoints is not None:
            self.transport_zone_endpoints = transport_zone_endpoints
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def host_switch_spec(self):
        """Gets the host_switch_spec of this TransportNode.  # noqa: E501


        :return: The host_switch_spec of this TransportNode.  # noqa: E501
        :rtype: HostSwitchSpec
        """
        return self._host_switch_spec

    @host_switch_spec.setter
    def host_switch_spec(self, host_switch_spec):
        """Sets the host_switch_spec of this TransportNode.


        :param host_switch_spec: The host_switch_spec of this TransportNode.  # noqa: E501
        :type: HostSwitchSpec
        """

        self._host_switch_spec = host_switch_spec

    @property
    def node_id(self):
        """Gets the node_id of this TransportNode.  # noqa: E501

        Unique Id of the fabric node  # noqa: E501

        :return: The node_id of this TransportNode.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this TransportNode.

        Unique Id of the fabric node  # noqa: E501

        :param node_id: The node_id of this TransportNode.  # noqa: E501
        :type: str
        """

        self._node_id = node_id

    @property
    def node_deployment_info(self):
        """Gets the node_deployment_info of this TransportNode.  # noqa: E501


        :return: The node_deployment_info of this TransportNode.  # noqa: E501
        :rtype: Node
        """
        return self._node_deployment_info

    @node_deployment_info.setter
    def node_deployment_info(self, node_deployment_info):
        """Sets the node_deployment_info of this TransportNode.


        :param node_deployment_info: The node_deployment_info of this TransportNode.  # noqa: E501
        :type: Node
        """

        self._node_deployment_info = node_deployment_info

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this TransportNode.  # noqa: E501

        The property is read-only, used for querying result. User could update transport node maintenance mode by UpdateTransportNodeMaintenanceMode call.  # noqa: E501

        :return: The maintenance_mode of this TransportNode.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this TransportNode.

        The property is read-only, used for querying result. User could update transport node maintenance mode by UpdateTransportNodeMaintenanceMode call.  # noqa: E501

        :param maintenance_mode: The maintenance_mode of this TransportNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "FORCE_ENABLED", "DISABLED"]  # noqa: E501
        if maintenance_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode, allowed_values)
            )

        self._maintenance_mode = maintenance_mode

    @property
    def failure_domain_id(self):
        """Gets the failure_domain_id of this TransportNode.  # noqa: E501

        Set failure domain of edge transport node which will help in auto placement of TIER1 logical routers, DHCP Servers and MDProxies, if failure domain based allocation is enabled in edge cluster API. It is only supported for edge transport node and not for host transport node. In case failure domain is not set by user explicitly, it will be always assigned with default system created failure domain.   # noqa: E501

        :return: The failure_domain_id of this TransportNode.  # noqa: E501
        :rtype: str
        """
        return self._failure_domain_id

    @failure_domain_id.setter
    def failure_domain_id(self, failure_domain_id):
        """Sets the failure_domain_id of this TransportNode.

        Set failure domain of edge transport node which will help in auto placement of TIER1 logical routers, DHCP Servers and MDProxies, if failure domain based allocation is enabled in edge cluster API. It is only supported for edge transport node and not for host transport node. In case failure domain is not set by user explicitly, it will be always assigned with default system created failure domain.   # noqa: E501

        :param failure_domain_id: The failure_domain_id of this TransportNode.  # noqa: E501
        :type: str
        """

        self._failure_domain_id = failure_domain_id

    @property
    def remote_tunnel_endpoint(self):
        """Gets the remote_tunnel_endpoint of this TransportNode.  # noqa: E501


        :return: The remote_tunnel_endpoint of this TransportNode.  # noqa: E501
        :rtype: TransportNodeRemoteTunnelEndpointConfig
        """
        return self._remote_tunnel_endpoint

    @remote_tunnel_endpoint.setter
    def remote_tunnel_endpoint(self, remote_tunnel_endpoint):
        """Sets the remote_tunnel_endpoint of this TransportNode.


        :param remote_tunnel_endpoint: The remote_tunnel_endpoint of this TransportNode.  # noqa: E501
        :type: TransportNodeRemoteTunnelEndpointConfig
        """

        self._remote_tunnel_endpoint = remote_tunnel_endpoint

    @property
    def is_overridden(self):
        """Gets the is_overridden of this TransportNode.  # noqa: E501

        This flag is relevant to only those hosts which are part of a compute collection which has transport node profile (TNP) applied on it. If you change the transport node configuration and it is different than cluster level TNP then this flag will be set to true   # noqa: E501

        :return: The is_overridden of this TransportNode.  # noqa: E501
        :rtype: bool
        """
        return self._is_overridden

    @is_overridden.setter
    def is_overridden(self, is_overridden):
        """Sets the is_overridden of this TransportNode.

        This flag is relevant to only those hosts which are part of a compute collection which has transport node profile (TNP) applied on it. If you change the transport node configuration and it is different than cluster level TNP then this flag will be set to true   # noqa: E501

        :param is_overridden: The is_overridden of this TransportNode.  # noqa: E501
        :type: bool
        """

        self._is_overridden = is_overridden

    @property
    def transport_zone_endpoints(self):
        """Gets the transport_zone_endpoints of this TransportNode.  # noqa: E501

        This is deprecated. TransportZoneEndPoints should be specified per host switch at StandardHostSwitch through Transport Node or Transport Node Profile configuration. This will ONLY include the TransportZoneEndpoints that were were specified here during the TransportNode configuration. If TransportZoneEndpoints are specified directly in {$ref: StandardHostSwitch}, such TransportZoneEndpoints will not be populated here.   # noqa: E501

        :return: The transport_zone_endpoints of this TransportNode.  # noqa: E501
        :rtype: list[TransportZoneEndPoint]
        """
        return self._transport_zone_endpoints

    @transport_zone_endpoints.setter
    def transport_zone_endpoints(self, transport_zone_endpoints):
        """Sets the transport_zone_endpoints of this TransportNode.

        This is deprecated. TransportZoneEndPoints should be specified per host switch at StandardHostSwitch through Transport Node or Transport Node Profile configuration. This will ONLY include the TransportZoneEndpoints that were were specified here during the TransportNode configuration. If TransportZoneEndpoints are specified directly in {$ref: StandardHostSwitch}, such TransportZoneEndpoints will not be populated here.   # noqa: E501

        :param transport_zone_endpoints: The transport_zone_endpoints of this TransportNode.  # noqa: E501
        :type: list[TransportZoneEndPoint]
        """

        self._transport_zone_endpoints = transport_zone_endpoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
