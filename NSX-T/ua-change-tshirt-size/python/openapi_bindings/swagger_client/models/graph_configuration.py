# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.widget_configuration import WidgetConfiguration  # noqa: F401,E501

class GraphConfiguration(WidgetConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x_value_type': 'str',
        'graphs': 'list[GraphDefinition]',
        'axes': 'Axes',
        'navigation': 'str',
        'sub_type': 'str',
        'display_x_value': 'bool'
    }
    if hasattr(WidgetConfiguration, "swagger_types"):
        swagger_types.update(WidgetConfiguration.swagger_types)

    attribute_map = {
        'x_value_type': 'x_value_type',
        'graphs': 'graphs',
        'axes': 'axes',
        'navigation': 'navigation',
        'sub_type': 'sub_type',
        'display_x_value': 'display_x_value'
    }
    if hasattr(WidgetConfiguration, "attribute_map"):
        attribute_map.update(WidgetConfiguration.attribute_map)

    def __init__(self, x_value_type='string', graphs=None, axes=None, navigation=None, sub_type='BAR_GRAPH', display_x_value=False, *args, **kwargs):  # noqa: E501
        """GraphConfiguration - a model defined in Swagger"""  # noqa: E501
        self._x_value_type = None
        self._graphs = None
        self._axes = None
        self._navigation = None
        self._sub_type = None
        self._display_x_value = None
        self.discriminator = None
        if x_value_type is not None:
            self.x_value_type = x_value_type
        self.graphs = graphs
        if axes is not None:
            self.axes = axes
        if navigation is not None:
            self.navigation = navigation
        if sub_type is not None:
            self.sub_type = sub_type
        if display_x_value is not None:
            self.display_x_value = display_x_value
        WidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def x_value_type(self):
        """Gets the x_value_type of this GraphConfiguration.  # noqa: E501

        x value type.  # noqa: E501

        :return: The x_value_type of this GraphConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._x_value_type

    @x_value_type.setter
    def x_value_type(self, x_value_type):
        """Sets the x_value_type of this GraphConfiguration.

        x value type.  # noqa: E501

        :param x_value_type: The x_value_type of this GraphConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "number", "date"]  # noqa: E501
        if x_value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `x_value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(x_value_type, allowed_values)
            )

        self._x_value_type = x_value_type

    @property
    def graphs(self):
        """Gets the graphs of this GraphConfiguration.  # noqa: E501

        Graphs  # noqa: E501

        :return: The graphs of this GraphConfiguration.  # noqa: E501
        :rtype: list[GraphDefinition]
        """
        return self._graphs

    @graphs.setter
    def graphs(self, graphs):
        """Sets the graphs of this GraphConfiguration.

        Graphs  # noqa: E501

        :param graphs: The graphs of this GraphConfiguration.  # noqa: E501
        :type: list[GraphDefinition]
        """
        if graphs is None:
            raise ValueError("Invalid value for `graphs`, must not be `None`")  # noqa: E501

        self._graphs = graphs

    @property
    def axes(self):
        """Gets the axes of this GraphConfiguration.  # noqa: E501


        :return: The axes of this GraphConfiguration.  # noqa: E501
        :rtype: Axes
        """
        return self._axes

    @axes.setter
    def axes(self, axes):
        """Sets the axes of this GraphConfiguration.


        :param axes: The axes of this GraphConfiguration.  # noqa: E501
        :type: Axes
        """

        self._axes = axes

    @property
    def navigation(self):
        """Gets the navigation of this GraphConfiguration.  # noqa: E501

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :return: The navigation of this GraphConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this GraphConfiguration.

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :param navigation: The navigation of this GraphConfiguration.  # noqa: E501
        :type: str
        """

        self._navigation = navigation

    @property
    def sub_type(self):
        """Gets the sub_type of this GraphConfiguration.  # noqa: E501

        Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart  # noqa: E501

        :return: The sub_type of this GraphConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this GraphConfiguration.

        Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart  # noqa: E501

        :param sub_type: The sub_type of this GraphConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["LINE_GRAPH", "BAR_GRAPH", "STACKED_BAR_GRAPH"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def display_x_value(self):
        """Gets the display_x_value of this GraphConfiguration.  # noqa: E501

        If true, value of a point is shown as label on X axis. If false, value of point is not shown as label on X axis. false can be useful in situations where there are too many points and showing the X value as label can clutter the X axis.  # noqa: E501

        :return: The display_x_value of this GraphConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._display_x_value

    @display_x_value.setter
    def display_x_value(self, display_x_value):
        """Sets the display_x_value of this GraphConfiguration.

        If true, value of a point is shown as label on X axis. If false, value of point is not shown as label on X axis. false can be useful in situations where there are too many points and showing the X value as label can clutter the X axis.  # noqa: E501

        :param display_x_value: The display_x_value of this GraphConfiguration.  # noqa: E501
        :type: bool
        """

        self._display_x_value = display_x_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GraphConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
