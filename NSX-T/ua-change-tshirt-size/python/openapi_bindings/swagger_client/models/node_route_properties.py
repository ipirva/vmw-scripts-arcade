# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class NodeRouteProperties(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'src': 'str',
        'from_address': 'str',
        'proto': 'str',
        'route_type': 'str',
        'metric': 'str',
        'destination': 'str',
        'interface_id': 'str',
        'route_id': 'str',
        'netmask': 'str',
        'scope': 'str',
        'gateway': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'src': 'src',
        'from_address': 'from_address',
        'proto': 'proto',
        'route_type': 'route_type',
        'metric': 'metric',
        'destination': 'destination',
        'interface_id': 'interface_id',
        'route_id': 'route_id',
        'netmask': 'netmask',
        'scope': 'scope',
        'gateway': 'gateway'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, src=None, from_address=None, proto='boot', route_type=None, metric=None, destination=None, interface_id=None, route_id=None, netmask=None, scope=None, gateway=None, *args, **kwargs):  # noqa: E501
        """NodeRouteProperties - a model defined in Swagger"""  # noqa: E501
        self._src = None
        self._from_address = None
        self._proto = None
        self._route_type = None
        self._metric = None
        self._destination = None
        self._interface_id = None
        self._route_id = None
        self._netmask = None
        self._scope = None
        self._gateway = None
        self.discriminator = None
        if src is not None:
            self.src = src
        if from_address is not None:
            self.from_address = from_address
        if proto is not None:
            self.proto = proto
        self.route_type = route_type
        if metric is not None:
            self.metric = metric
        if destination is not None:
            self.destination = destination
        if interface_id is not None:
            self.interface_id = interface_id
        if route_id is not None:
            self.route_id = route_id
        if netmask is not None:
            self.netmask = netmask
        if scope is not None:
            self.scope = scope
        if gateway is not None:
            self.gateway = gateway
        Resource.__init__(self, *args, **kwargs)

    @property
    def src(self):
        """Gets the src of this NodeRouteProperties.  # noqa: E501

        Source address to prefer when sending to destinations of route  # noqa: E501

        :return: The src of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this NodeRouteProperties.

        Source address to prefer when sending to destinations of route  # noqa: E501

        :param src: The src of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._src = src

    @property
    def from_address(self):
        """Gets the from_address of this NodeRouteProperties.  # noqa: E501

        From address  # noqa: E501

        :return: The from_address of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this NodeRouteProperties.

        From address  # noqa: E501

        :param from_address: The from_address of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._from_address = from_address

    @property
    def proto(self):
        """Gets the proto of this NodeRouteProperties.  # noqa: E501

        Routing protocol identifier of route  # noqa: E501

        :return: The proto of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this NodeRouteProperties.

        Routing protocol identifier of route  # noqa: E501

        :param proto: The proto of this NodeRouteProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["unspec", "redirect", "kernel", "boot", "static", "gated", "ra", "mrt", "zebra", "bird", "dnrouted", "xorp", "ntk", "dhcp"]  # noqa: E501
        if proto not in allowed_values:
            raise ValueError(
                "Invalid value for `proto` ({0}), must be one of {1}"  # noqa: E501
                .format(proto, allowed_values)
            )

        self._proto = proto

    @property
    def route_type(self):
        """Gets the route_type of this NodeRouteProperties.  # noqa: E501

        Route type  # noqa: E501

        :return: The route_type of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this NodeRouteProperties.

        Route type  # noqa: E501

        :param route_type: The route_type of this NodeRouteProperties.  # noqa: E501
        :type: str
        """
        if route_type is None:
            raise ValueError("Invalid value for `route_type`, must not be `None`")  # noqa: E501
        allowed_values = ["default", "static", "blackhole", "prohibit", "throw", "unreachable"]  # noqa: E501
        if route_type not in allowed_values:
            raise ValueError(
                "Invalid value for `route_type` ({0}), must be one of {1}"  # noqa: E501
                .format(route_type, allowed_values)
            )

        self._route_type = route_type

    @property
    def metric(self):
        """Gets the metric of this NodeRouteProperties.  # noqa: E501

        Metric value of route  # noqa: E501

        :return: The metric of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this NodeRouteProperties.

        Metric value of route  # noqa: E501

        :param metric: The metric of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def destination(self):
        """Gets the destination of this NodeRouteProperties.  # noqa: E501

        Destination covered by route  # noqa: E501

        :return: The destination of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this NodeRouteProperties.

        Destination covered by route  # noqa: E501

        :param destination: The destination of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def interface_id(self):
        """Gets the interface_id of this NodeRouteProperties.  # noqa: E501

        Network interface id of route  # noqa: E501

        :return: The interface_id of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this NodeRouteProperties.

        Network interface id of route  # noqa: E501

        :param interface_id: The interface_id of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._interface_id = interface_id

    @property
    def route_id(self):
        """Gets the route_id of this NodeRouteProperties.  # noqa: E501

        Unique identifier for the route  # noqa: E501

        :return: The route_id of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id):
        """Sets the route_id of this NodeRouteProperties.

        Unique identifier for the route  # noqa: E501

        :param route_id: The route_id of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._route_id = route_id

    @property
    def netmask(self):
        """Gets the netmask of this NodeRouteProperties.  # noqa: E501

        Netmask of destination covered by route  # noqa: E501

        :return: The netmask of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this NodeRouteProperties.

        Netmask of destination covered by route  # noqa: E501

        :param netmask: The netmask of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def scope(self):
        """Gets the scope of this NodeRouteProperties.  # noqa: E501

        Scope of destinations covered by route  # noqa: E501

        :return: The scope of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NodeRouteProperties.

        Scope of destinations covered by route  # noqa: E501

        :param scope: The scope of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def gateway(self):
        """Gets the gateway of this NodeRouteProperties.  # noqa: E501

        Address of next hop  # noqa: E501

        :return: The gateway of this NodeRouteProperties.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NodeRouteProperties.

        Address of next hop  # noqa: E501

        :param gateway: The gateway of this NodeRouteProperties.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeRouteProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeRouteProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
