# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TraceResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        'logical_counters': 'TraceflowObservationCounters',
        'observations': 'list[TraceflowObservation]',
        'packet_id': 'str',
        'result_overflowed': 'bool',
        'analysis': 'list[str]',
        'counters': 'TraceflowObservationCounters'
    }

    attribute_map = {
        'direction': 'direction',
        'logical_counters': 'logical_counters',
        'observations': 'observations',
        'packet_id': 'packet_id',
        'result_overflowed': 'result_overflowed',
        'analysis': 'analysis',
        'counters': 'counters'
    }

    def __init__(self, direction=None, logical_counters=None, observations=None, packet_id=None, result_overflowed=None, analysis=None, counters=None):  # noqa: E501
        """TraceResult - a model defined in Swagger"""  # noqa: E501
        self._direction = None
        self._logical_counters = None
        self._observations = None
        self._packet_id = None
        self._result_overflowed = None
        self._analysis = None
        self._counters = None
        self.discriminator = None
        if direction is not None:
            self.direction = direction
        if logical_counters is not None:
            self.logical_counters = logical_counters
        if observations is not None:
            self.observations = observations
        if packet_id is not None:
            self.packet_id = packet_id
        if result_overflowed is not None:
            self.result_overflowed = result_overflowed
        if analysis is not None:
            self.analysis = analysis
        if counters is not None:
            self.counters = counters

    @property
    def direction(self):
        """Gets the direction of this TraceResult.  # noqa: E501

        Direction of a trace  # noqa: E501

        :return: The direction of this TraceResult.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this TraceResult.

        Direction of a trace  # noqa: E501

        :param direction: The direction of this TraceResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["FORWARD", "BACKWARD"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def logical_counters(self):
        """Gets the logical_counters of this TraceResult.  # noqa: E501


        :return: The logical_counters of this TraceResult.  # noqa: E501
        :rtype: TraceflowObservationCounters
        """
        return self._logical_counters

    @logical_counters.setter
    def logical_counters(self, logical_counters):
        """Sets the logical_counters of this TraceResult.


        :param logical_counters: The logical_counters of this TraceResult.  # noqa: E501
        :type: TraceflowObservationCounters
        """

        self._logical_counters = logical_counters

    @property
    def observations(self):
        """Gets the observations of this TraceResult.  # noqa: E501

        Trace observation list  # noqa: E501

        :return: The observations of this TraceResult.  # noqa: E501
        :rtype: list[TraceflowObservation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations):
        """Sets the observations of this TraceResult.

        Trace observation list  # noqa: E501

        :param observations: The observations of this TraceResult.  # noqa: E501
        :type: list[TraceflowObservation]
        """

        self._observations = observations

    @property
    def packet_id(self):
        """Gets the packet_id of this TraceResult.  # noqa: E501

        Packet ID in the session  # noqa: E501

        :return: The packet_id of this TraceResult.  # noqa: E501
        :rtype: str
        """
        return self._packet_id

    @packet_id.setter
    def packet_id(self, packet_id):
        """Sets the packet_id of this TraceResult.

        Packet ID in the session  # noqa: E501

        :param packet_id: The packet_id of this TraceResult.  # noqa: E501
        :type: str
        """

        self._packet_id = packet_id

    @property
    def result_overflowed(self):
        """Gets the result_overflowed of this TraceResult.  # noqa: E501

        Whether some observations were deleted from the result set  # noqa: E501

        :return: The result_overflowed of this TraceResult.  # noqa: E501
        :rtype: bool
        """
        return self._result_overflowed

    @result_overflowed.setter
    def result_overflowed(self, result_overflowed):
        """Sets the result_overflowed of this TraceResult.

        Whether some observations were deleted from the result set  # noqa: E501

        :param result_overflowed: The result_overflowed of this TraceResult.  # noqa: E501
        :type: bool
        """

        self._result_overflowed = result_overflowed

    @property
    def analysis(self):
        """Gets the analysis of this TraceResult.  # noqa: E501

        Trace action result analysis notes  # noqa: E501

        :return: The analysis of this TraceResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this TraceResult.

        Trace action result analysis notes  # noqa: E501

        :param analysis: The analysis of this TraceResult.  # noqa: E501
        :type: list[str]
        """

        self._analysis = analysis

    @property
    def counters(self):
        """Gets the counters of this TraceResult.  # noqa: E501


        :return: The counters of this TraceResult.  # noqa: E501
        :rtype: TraceflowObservationCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this TraceResult.


        :param counters: The counters of this TraceResult.  # noqa: E501
        :type: TraceflowObservationCounters
        """

        self._counters = counters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
