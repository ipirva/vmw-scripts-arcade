# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StructuredData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audit': 'str',
        'username': 'str',
        'ereq_id': 'str',
        'level': 'str',
        'comp': 'str',
        'error_code': 'str',
        's2comp': 'str',
        'req_id': 'str',
        'ent_id': 'str',
        'security': 'str',
        'subcomp': 'str'
    }

    attribute_map = {
        'audit': 'audit',
        'username': 'username',
        'ereq_id': 'ereq_id',
        'level': 'level',
        'comp': 'comp',
        'error_code': 'error_code',
        's2comp': 's2comp',
        'req_id': 'req_id',
        'ent_id': 'ent_id',
        'security': 'security',
        'subcomp': 'subcomp'
    }

    def __init__(self, audit=None, username=None, ereq_id=None, level=None, comp=None, error_code=None, s2comp=None, req_id=None, ent_id=None, security=None, subcomp=None):  # noqa: E501
        """StructuredData - a model defined in Swagger"""  # noqa: E501
        self._audit = None
        self._username = None
        self._ereq_id = None
        self._level = None
        self._comp = None
        self._error_code = None
        self._s2comp = None
        self._req_id = None
        self._ent_id = None
        self._security = None
        self._subcomp = None
        self.discriminator = None
        self.audit = audit
        if username is not None:
            self.username = username
        if ereq_id is not None:
            self.ereq_id = ereq_id
        if level is not None:
            self.level = level
        self.comp = comp
        if error_code is not None:
            self.error_code = error_code
        if s2comp is not None:
            self.s2comp = s2comp
        if req_id is not None:
            self.req_id = req_id
        if ent_id is not None:
            self.ent_id = ent_id
        if security is not None:
            self.security = security
        self.subcomp = subcomp

    @property
    def audit(self):
        """Gets the audit of this StructuredData.  # noqa: E501

        Audit flag of the log  # noqa: E501

        :return: The audit of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._audit

    @audit.setter
    def audit(self, audit):
        """Sets the audit of this StructuredData.

        Audit flag of the log  # noqa: E501

        :param audit: The audit of this StructuredData.  # noqa: E501
        :type: str
        """
        if audit is None:
            raise ValueError("Invalid value for `audit`, must not be `None`")  # noqa: E501

        self._audit = audit

    @property
    def username(self):
        """Gets the username of this StructuredData.  # noqa: E501

        Username value of the log  # noqa: E501

        :return: The username of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this StructuredData.

        Username value of the log  # noqa: E501

        :param username: The username of this StructuredData.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def ereq_id(self):
        """Gets the ereq_id of this StructuredData.  # noqa: E501

        External request Id value of the log  # noqa: E501

        :return: The ereq_id of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._ereq_id

    @ereq_id.setter
    def ereq_id(self, ereq_id):
        """Sets the ereq_id of this StructuredData.

        External request Id value of the log  # noqa: E501

        :param ereq_id: The ereq_id of this StructuredData.  # noqa: E501
        :type: str
        """

        self._ereq_id = ereq_id

    @property
    def level(self):
        """Gets the level of this StructuredData.  # noqa: E501

        Level value of the log  # noqa: E501

        :return: The level of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this StructuredData.

        Level value of the log  # noqa: E501

        :param level: The level of this StructuredData.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def comp(self):
        """Gets the comp of this StructuredData.  # noqa: E501

        Component value of the log  # noqa: E501

        :return: The comp of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._comp

    @comp.setter
    def comp(self, comp):
        """Sets the comp of this StructuredData.

        Component value of the log  # noqa: E501

        :param comp: The comp of this StructuredData.  # noqa: E501
        :type: str
        """
        if comp is None:
            raise ValueError("Invalid value for `comp`, must not be `None`")  # noqa: E501

        self._comp = comp

    @property
    def error_code(self):
        """Gets the error_code of this StructuredData.  # noqa: E501

        Error Code value of the log  # noqa: E501

        :return: The error_code of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this StructuredData.

        Error Code value of the log  # noqa: E501

        :param error_code: The error_code of this StructuredData.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def s2comp(self):
        """Gets the s2comp of this StructuredData.  # noqa: E501

        Sub-subcomponent value of the log  # noqa: E501

        :return: The s2comp of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._s2comp

    @s2comp.setter
    def s2comp(self, s2comp):
        """Sets the s2comp of this StructuredData.

        Sub-subcomponent value of the log  # noqa: E501

        :param s2comp: The s2comp of this StructuredData.  # noqa: E501
        :type: str
        """

        self._s2comp = s2comp

    @property
    def req_id(self):
        """Gets the req_id of this StructuredData.  # noqa: E501

        Request Id value of the log  # noqa: E501

        :return: The req_id of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._req_id

    @req_id.setter
    def req_id(self, req_id):
        """Sets the req_id of this StructuredData.

        Request Id value of the log  # noqa: E501

        :param req_id: The req_id of this StructuredData.  # noqa: E501
        :type: str
        """

        self._req_id = req_id

    @property
    def ent_id(self):
        """Gets the ent_id of this StructuredData.  # noqa: E501

        Entity Id value of the log  # noqa: E501

        :return: The ent_id of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._ent_id

    @ent_id.setter
    def ent_id(self, ent_id):
        """Sets the ent_id of this StructuredData.

        Entity Id value of the log  # noqa: E501

        :param ent_id: The ent_id of this StructuredData.  # noqa: E501
        :type: str
        """

        self._ent_id = ent_id

    @property
    def security(self):
        """Gets the security of this StructuredData.  # noqa: E501

        Security flag of the log  # noqa: E501

        :return: The security of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this StructuredData.

        Security flag of the log  # noqa: E501

        :param security: The security of this StructuredData.  # noqa: E501
        :type: str
        """

        self._security = security

    @property
    def subcomp(self):
        """Gets the subcomp of this StructuredData.  # noqa: E501

        Subcomponent value of the log  # noqa: E501

        :return: The subcomp of this StructuredData.  # noqa: E501
        :rtype: str
        """
        return self._subcomp

    @subcomp.setter
    def subcomp(self, subcomp):
        """Sets the subcomp of this StructuredData.

        Subcomponent value of the log  # noqa: E501

        :param subcomp: The subcomp of this StructuredData.  # noqa: E501
        :type: str
        """
        if subcomp is None:
            raise ValueError("Invalid value for `subcomp`, must not be `None`")  # noqa: E501

        self._subcomp = subcomp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StructuredData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StructuredData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
