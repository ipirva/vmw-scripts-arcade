# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class DirectoryLdapServer(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'host': 'str',
        'protocol': 'str',
        'thumbprint': 'str',
        'password': 'str',
        'domain_name': 'str',
        'port': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'username': 'username',
        'host': 'host',
        'protocol': 'protocol',
        'thumbprint': 'thumbprint',
        'password': 'password',
        'domain_name': 'domain_name',
        'port': 'port'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, username=None, host=None, protocol='LDAP', thumbprint=None, password=None, domain_name=None, port=389, *args, **kwargs):  # noqa: E501
        """DirectoryLdapServer - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._host = None
        self._protocol = None
        self._thumbprint = None
        self._password = None
        self._domain_name = None
        self._port = None
        self.discriminator = None
        if username is not None:
            self.username = username
        self.host = host
        if protocol is not None:
            self.protocol = protocol
        if thumbprint is not None:
            self.thumbprint = thumbprint
        if password is not None:
            self.password = password
        if domain_name is not None:
            self.domain_name = domain_name
        if port is not None:
            self.port = port
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def username(self):
        """Gets the username of this DirectoryLdapServer.  # noqa: E501

        Directory LDAP server connection user name.  # noqa: E501

        :return: The username of this DirectoryLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DirectoryLdapServer.

        Directory LDAP server connection user name.  # noqa: E501

        :param username: The username of this DirectoryLdapServer.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def host(self):
        """Gets the host of this DirectoryLdapServer.  # noqa: E501

        Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization.  # noqa: E501

        :return: The host of this DirectoryLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DirectoryLdapServer.

        Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization.  # noqa: E501

        :param host: The host of this DirectoryLdapServer.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def protocol(self):
        """Gets the protocol of this DirectoryLdapServer.  # noqa: E501

        Directory LDAP server connection protocol which is either LDAP or LDAPS.  # noqa: E501

        :return: The protocol of this DirectoryLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DirectoryLdapServer.

        Directory LDAP server connection protocol which is either LDAP or LDAPS.  # noqa: E501

        :param protocol: The protocol of this DirectoryLdapServer.  # noqa: E501
        :type: str
        """
        allowed_values = ["LDAP", "LDAPS"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def thumbprint(self):
        """Gets the thumbprint of this DirectoryLdapServer.  # noqa: E501

        Directory LDAP server certificate thumbprint used in secure LDAPS connection.  # noqa: E501

        :return: The thumbprint of this DirectoryLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this DirectoryLdapServer.

        Directory LDAP server certificate thumbprint used in secure LDAPS connection.  # noqa: E501

        :param thumbprint: The thumbprint of this DirectoryLdapServer.  # noqa: E501
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def password(self):
        """Gets the password of this DirectoryLdapServer.  # noqa: E501

        Directory LDAP server connection password.  # noqa: E501

        :return: The password of this DirectoryLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DirectoryLdapServer.

        Directory LDAP server connection password.  # noqa: E501

        :param password: The password of this DirectoryLdapServer.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def domain_name(self):
        """Gets the domain_name of this DirectoryLdapServer.  # noqa: E501

        Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.  # noqa: E501

        :return: The domain_name of this DirectoryLdapServer.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DirectoryLdapServer.

        Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.  # noqa: E501

        :param domain_name: The domain_name of this DirectoryLdapServer.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def port(self):
        """Gets the port of this DirectoryLdapServer.  # noqa: E501

        Directory LDAP server connection TCP/UDP port.  # noqa: E501

        :return: The port of this DirectoryLdapServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DirectoryLdapServer.

        Directory LDAP server connection TCP/UDP port.  # noqa: E501

        :param port: The port of this DirectoryLdapServer.  # noqa: E501
        :type: int
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryLdapServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryLdapServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
