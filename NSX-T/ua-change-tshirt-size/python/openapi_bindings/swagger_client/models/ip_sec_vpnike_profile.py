# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class IPSecVPNIKEProfile(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digest_algorithms': 'list[str]',
        'encryption_algorithms': 'list[str]',
        'dh_groups': 'list[str]',
        'sa_life_time': 'int',
        'ike_version': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'digest_algorithms': 'digest_algorithms',
        'encryption_algorithms': 'encryption_algorithms',
        'dh_groups': 'dh_groups',
        'sa_life_time': 'sa_life_time',
        'ike_version': 'ike_version'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, digest_algorithms=None, encryption_algorithms=None, dh_groups=None, sa_life_time=86400, ike_version='IKE_V2', *args, **kwargs):  # noqa: E501
        """IPSecVPNIKEProfile - a model defined in Swagger"""  # noqa: E501
        self._digest_algorithms = None
        self._encryption_algorithms = None
        self._dh_groups = None
        self._sa_life_time = None
        self._ike_version = None
        self.discriminator = None
        if digest_algorithms is not None:
            self.digest_algorithms = digest_algorithms
        if encryption_algorithms is not None:
            self.encryption_algorithms = encryption_algorithms
        if dh_groups is not None:
            self.dh_groups = dh_groups
        if sa_life_time is not None:
            self.sa_life_time = sa_life_time
        if ike_version is not None:
            self.ike_version = ike_version
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def digest_algorithms(self):
        """Gets the digest_algorithms of this IPSecVPNIKEProfile.  # noqa: E501

        Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.  # noqa: E501

        :return: The digest_algorithms of this IPSecVPNIKEProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._digest_algorithms

    @digest_algorithms.setter
    def digest_algorithms(self, digest_algorithms):
        """Sets the digest_algorithms of this IPSecVPNIKEProfile.

        Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.  # noqa: E501

        :param digest_algorithms: The digest_algorithms of this IPSecVPNIKEProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SHA1", "SHA2_256", "SHA2_384", "SHA2_512"]  # noqa: E501
        if not set(digest_algorithms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `digest_algorithms` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(digest_algorithms) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._digest_algorithms = digest_algorithms

    @property
    def encryption_algorithms(self):
        """Gets the encryption_algorithms of this IPSecVPNIKEProfile.  # noqa: E501

        Encryption algorithm is used during Internet Key Exchange(IKE) negotiation. Default is AES_128.  # noqa: E501

        :return: The encryption_algorithms of this IPSecVPNIKEProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._encryption_algorithms

    @encryption_algorithms.setter
    def encryption_algorithms(self, encryption_algorithms):
        """Sets the encryption_algorithms of this IPSecVPNIKEProfile.

        Encryption algorithm is used during Internet Key Exchange(IKE) negotiation. Default is AES_128.  # noqa: E501

        :param encryption_algorithms: The encryption_algorithms of this IPSecVPNIKEProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["AES_128", "AES_256", "AES_GCM_128", "AES_GCM_192", "AES_GCM_256"]  # noqa: E501
        if not set(encryption_algorithms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `encryption_algorithms` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(encryption_algorithms) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._encryption_algorithms = encryption_algorithms

    @property
    def dh_groups(self):
        """Gets the dh_groups of this IPSecVPNIKEProfile.  # noqa: E501

        Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.  # noqa: E501

        :return: The dh_groups of this IPSecVPNIKEProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._dh_groups

    @dh_groups.setter
    def dh_groups(self, dh_groups):
        """Sets the dh_groups of this IPSecVPNIKEProfile.

        Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.  # noqa: E501

        :param dh_groups: The dh_groups of this IPSecVPNIKEProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["GROUP2", "GROUP5", "GROUP14", "GROUP15", "GROUP16", "GROUP19", "GROUP20", "GROUP21"]  # noqa: E501
        if not set(dh_groups).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dh_groups` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(dh_groups) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._dh_groups = dh_groups

    @property
    def sa_life_time(self):
        """Gets the sa_life_time of this IPSecVPNIKEProfile.  # noqa: E501

        Life time for security association. Default is 86400 seconds (1 day).  # noqa: E501

        :return: The sa_life_time of this IPSecVPNIKEProfile.  # noqa: E501
        :rtype: int
        """
        return self._sa_life_time

    @sa_life_time.setter
    def sa_life_time(self, sa_life_time):
        """Sets the sa_life_time of this IPSecVPNIKEProfile.

        Life time for security association. Default is 86400 seconds (1 day).  # noqa: E501

        :param sa_life_time: The sa_life_time of this IPSecVPNIKEProfile.  # noqa: E501
        :type: int
        """

        self._sa_life_time = sa_life_time

    @property
    def ike_version(self):
        """Gets the ike_version of this IPSecVPNIKEProfile.  # noqa: E501

        IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.  # noqa: E501

        :return: The ike_version of this IPSecVPNIKEProfile.  # noqa: E501
        :rtype: str
        """
        return self._ike_version

    @ike_version.setter
    def ike_version(self, ike_version):
        """Sets the ike_version of this IPSecVPNIKEProfile.

        IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.  # noqa: E501

        :param ike_version: The ike_version of this IPSecVPNIKEProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["IKE_V1", "IKE_V2", "IKE_FLEX"]  # noqa: E501
        if ike_version not in allowed_values:
            raise ValueError(
                "Invalid value for `ike_version` ({0}), must be one of {1}"  # noqa: E501
                .format(ike_version, allowed_values)
            )

        self._ike_version = ike_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNIKEProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNIKEProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
