# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class DSSection(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stateful': 'bool',
        'is_default': 'bool',
        'applied_tos': 'list[ResourceReference]',
        'rule_count': 'int',
        'section_type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'stateful': 'stateful',
        'is_default': 'is_default',
        'applied_tos': 'applied_tos',
        'rule_count': 'rule_count',
        'section_type': 'section_type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, stateful=None, is_default=None, applied_tos=None, rule_count=None, section_type=None, *args, **kwargs):  # noqa: E501
        """DSSection - a model defined in Swagger"""  # noqa: E501
        self._stateful = None
        self._is_default = None
        self._applied_tos = None
        self._rule_count = None
        self._section_type = None
        self.discriminator = None
        self.stateful = stateful
        if is_default is not None:
            self.is_default = is_default
        if applied_tos is not None:
            self.applied_tos = applied_tos
        if rule_count is not None:
            self.rule_count = rule_count
        self.section_type = section_type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def stateful(self):
        """Gets the stateful of this DSSection.  # noqa: E501

        Stateful or Stateless nature of distributed service section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.  # noqa: E501

        :return: The stateful of this DSSection.  # noqa: E501
        :rtype: bool
        """
        return self._stateful

    @stateful.setter
    def stateful(self, stateful):
        """Sets the stateful of this DSSection.

        Stateful or Stateless nature of distributed service section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.  # noqa: E501

        :param stateful: The stateful of this DSSection.  # noqa: E501
        :type: bool
        """
        if stateful is None:
            raise ValueError("Invalid value for `stateful`, must not be `None`")  # noqa: E501

        self._stateful = stateful

    @property
    def is_default(self):
        """Gets the is_default of this DSSection.  # noqa: E501

        It is a boolean flag which reflects whether a distributed service section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.  # noqa: E501

        :return: The is_default of this DSSection.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DSSection.

        It is a boolean flag which reflects whether a distributed service section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.  # noqa: E501

        :param is_default: The is_default of this DSSection.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def applied_tos(self):
        """Gets the applied_tos of this DSSection.  # noqa: E501

        List of objects where the rules in this section will be enforced. This will take precedence over rule level appliedTo.  # noqa: E501

        :return: The applied_tos of this DSSection.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._applied_tos

    @applied_tos.setter
    def applied_tos(self, applied_tos):
        """Sets the applied_tos of this DSSection.

        List of objects where the rules in this section will be enforced. This will take precedence over rule level appliedTo.  # noqa: E501

        :param applied_tos: The applied_tos of this DSSection.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._applied_tos = applied_tos

    @property
    def rule_count(self):
        """Gets the rule_count of this DSSection.  # noqa: E501

        Number of rules in this section.  # noqa: E501

        :return: The rule_count of this DSSection.  # noqa: E501
        :rtype: int
        """
        return self._rule_count

    @rule_count.setter
    def rule_count(self, rule_count):
        """Sets the rule_count of this DSSection.

        Number of rules in this section.  # noqa: E501

        :param rule_count: The rule_count of this DSSection.  # noqa: E501
        :type: int
        """

        self._rule_count = rule_count

    @property
    def section_type(self):
        """Gets the section_type of this DSSection.  # noqa: E501

        Type of the rules which a section can contain. Only homogeneous sections are supported.  # noqa: E501

        :return: The section_type of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this DSSection.

        Type of the rules which a section can contain. Only homogeneous sections are supported.  # noqa: E501

        :param section_type: The section_type of this DSSection.  # noqa: E501
        :type: str
        """
        if section_type is None:
            raise ValueError("Invalid value for `section_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LAYER2", "LAYER3", "L3REDIRECT", "IDS"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"  # noqa: E501
                .format(section_type, allowed_values)
            )

        self._section_type = section_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DSSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
