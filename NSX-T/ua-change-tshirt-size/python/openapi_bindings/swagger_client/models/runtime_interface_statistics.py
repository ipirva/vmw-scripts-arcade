# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.si_aggregated_data_counter_ex import SIAggregatedDataCounterEx  # noqa: F401,E501

class RuntimeInterfaceStatistics(SIAggregatedDataCounterEx):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_timestamp': 'int',
        'interface_index': 'int'
    }
    if hasattr(SIAggregatedDataCounterEx, "swagger_types"):
        swagger_types.update(SIAggregatedDataCounterEx.swagger_types)

    attribute_map = {
        'last_update_timestamp': 'last_update_timestamp',
        'interface_index': 'interface_index'
    }
    if hasattr(SIAggregatedDataCounterEx, "attribute_map"):
        attribute_map.update(SIAggregatedDataCounterEx.attribute_map)

    def __init__(self, last_update_timestamp=None, interface_index=None, *args, **kwargs):  # noqa: E501
        """RuntimeInterfaceStatistics - a model defined in Swagger"""  # noqa: E501
        self._last_update_timestamp = None
        self._interface_index = None
        self.discriminator = None
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if interface_index is not None:
            self.interface_index = interface_index
        SIAggregatedDataCounterEx.__init__(self, *args, **kwargs)

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this RuntimeInterfaceStatistics.  # noqa: E501

        Timestamp when the data was last updated; unset if data source has never updated the data.  # noqa: E501

        :return: The last_update_timestamp of this RuntimeInterfaceStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this RuntimeInterfaceStatistics.

        Timestamp when the data was last updated; unset if data source has never updated the data.  # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this RuntimeInterfaceStatistics.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def interface_index(self):
        """Gets the interface_index of this RuntimeInterfaceStatistics.  # noqa: E501

        Index of the interface  # noqa: E501

        :return: The interface_index of this RuntimeInterfaceStatistics.  # noqa: E501
        :rtype: int
        """
        return self._interface_index

    @interface_index.setter
    def interface_index(self, interface_index):
        """Sets the interface_index of this RuntimeInterfaceStatistics.

        Index of the interface  # noqa: E501

        :param interface_index: The interface_index of this RuntimeInterfaceStatistics.  # noqa: E501
        :type: int
        """

        self._interface_index = interface_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuntimeInterfaceStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeInterfaceStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
