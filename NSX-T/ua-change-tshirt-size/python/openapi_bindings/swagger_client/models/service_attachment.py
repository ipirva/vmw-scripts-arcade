# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class ServiceAttachment(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logical_routers': 'list[ResourceReference]',
        'logical_switch': 'ResourceReference',
        'local_ips': 'list[IPInfo]',
        'service_port': 'ResourceReference',
        'deployed_to': 'ResourceReference',
        'attachment_status': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'logical_routers': 'logical_routers',
        'logical_switch': 'logical_switch',
        'local_ips': 'local_ips',
        'service_port': 'service_port',
        'deployed_to': 'deployed_to',
        'attachment_status': 'attachment_status'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, logical_routers=None, logical_switch=None, local_ips=None, service_port=None, deployed_to=None, attachment_status='UP', *args, **kwargs):  # noqa: E501
        """ServiceAttachment - a model defined in Swagger"""  # noqa: E501
        self._logical_routers = None
        self._logical_switch = None
        self._local_ips = None
        self._service_port = None
        self._deployed_to = None
        self._attachment_status = None
        self.discriminator = None
        if logical_routers is not None:
            self.logical_routers = logical_routers
        if logical_switch is not None:
            self.logical_switch = logical_switch
        if local_ips is not None:
            self.local_ips = local_ips
        if service_port is not None:
            self.service_port = service_port
        self.deployed_to = deployed_to
        if attachment_status is not None:
            self.attachment_status = attachment_status
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def logical_routers(self):
        """Gets the logical_routers of this ServiceAttachment.  # noqa: E501

        List of LogicalRouters to be connected to the ServicePlane logical switch via a ServiceLink.  # noqa: E501

        :return: The logical_routers of this ServiceAttachment.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._logical_routers

    @logical_routers.setter
    def logical_routers(self, logical_routers):
        """Sets the logical_routers of this ServiceAttachment.

        List of LogicalRouters to be connected to the ServicePlane logical switch via a ServiceLink.  # noqa: E501

        :param logical_routers: The logical_routers of this ServiceAttachment.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._logical_routers = logical_routers

    @property
    def logical_switch(self):
        """Gets the logical_switch of this ServiceAttachment.  # noqa: E501


        :return: The logical_switch of this ServiceAttachment.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._logical_switch

    @logical_switch.setter
    def logical_switch(self, logical_switch):
        """Sets the logical_switch of this ServiceAttachment.


        :param logical_switch: The logical_switch of this ServiceAttachment.  # noqa: E501
        :type: ResourceReference
        """

        self._logical_switch = logical_switch

    @property
    def local_ips(self):
        """Gets the local_ips of this ServiceAttachment.  # noqa: E501

        Local IPs associated with this Service Attachment.  # noqa: E501

        :return: The local_ips of this ServiceAttachment.  # noqa: E501
        :rtype: list[IPInfo]
        """
        return self._local_ips

    @local_ips.setter
    def local_ips(self, local_ips):
        """Sets the local_ips of this ServiceAttachment.

        Local IPs associated with this Service Attachment.  # noqa: E501

        :param local_ips: The local_ips of this ServiceAttachment.  # noqa: E501
        :type: list[IPInfo]
        """

        self._local_ips = local_ips

    @property
    def service_port(self):
        """Gets the service_port of this ServiceAttachment.  # noqa: E501


        :return: The service_port of this ServiceAttachment.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._service_port

    @service_port.setter
    def service_port(self, service_port):
        """Sets the service_port of this ServiceAttachment.


        :param service_port: The service_port of this ServiceAttachment.  # noqa: E501
        :type: ResourceReference
        """

        self._service_port = service_port

    @property
    def deployed_to(self):
        """Gets the deployed_to of this ServiceAttachment.  # noqa: E501


        :return: The deployed_to of this ServiceAttachment.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._deployed_to

    @deployed_to.setter
    def deployed_to(self, deployed_to):
        """Sets the deployed_to of this ServiceAttachment.


        :param deployed_to: The deployed_to of this ServiceAttachment.  # noqa: E501
        :type: ResourceReference
        """
        if deployed_to is None:
            raise ValueError("Invalid value for `deployed_to`, must not be `None`")  # noqa: E501

        self._deployed_to = deployed_to

    @property
    def attachment_status(self):
        """Gets the attachment_status of this ServiceAttachment.  # noqa: E501

        UP - A Service Attachment will have its Service Port - UP and with a configured IP address. DOWN - An Inactive ServiceAttachment has its Service Port - DOWN. It can be used to connect set of appliances that do not need to exchange traffic to/from/through the Edge node.  # noqa: E501

        :return: The attachment_status of this ServiceAttachment.  # noqa: E501
        :rtype: str
        """
        return self._attachment_status

    @attachment_status.setter
    def attachment_status(self, attachment_status):
        """Sets the attachment_status of this ServiceAttachment.

        UP - A Service Attachment will have its Service Port - UP and with a configured IP address. DOWN - An Inactive ServiceAttachment has its Service Port - DOWN. It can be used to connect set of appliances that do not need to exchange traffic to/from/through the Edge node.  # noqa: E501

        :param attachment_status: The attachment_status of this ServiceAttachment.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if attachment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `attachment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(attachment_status, allowed_values)
            )

        self._attachment_status = attachment_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceAttachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
