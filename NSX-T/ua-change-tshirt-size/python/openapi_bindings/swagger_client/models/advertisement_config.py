# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class AdvertisementConfig(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advertise_nsx_connected_routes': 'bool',
        'advertise_lb_vip': 'bool',
        'advertise_static_routes': 'bool',
        'logical_router_id': 'str',
        'advertise_dns_forwarder': 'bool',
        'advertise_nat_routes': 'bool',
        'advertise_ipsec_local_ip': 'bool',
        'enabled': 'bool',
        'advertise_lb_snat_ip': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'advertise_nsx_connected_routes': 'advertise_nsx_connected_routes',
        'advertise_lb_vip': 'advertise_lb_vip',
        'advertise_static_routes': 'advertise_static_routes',
        'logical_router_id': 'logical_router_id',
        'advertise_dns_forwarder': 'advertise_dns_forwarder',
        'advertise_nat_routes': 'advertise_nat_routes',
        'advertise_ipsec_local_ip': 'advertise_ipsec_local_ip',
        'enabled': 'enabled',
        'advertise_lb_snat_ip': 'advertise_lb_snat_ip'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, advertise_nsx_connected_routes=False, advertise_lb_vip=False, advertise_static_routes=False, logical_router_id=None, advertise_dns_forwarder=False, advertise_nat_routes=False, advertise_ipsec_local_ip=False, enabled=False, advertise_lb_snat_ip=False, *args, **kwargs):  # noqa: E501
        """AdvertisementConfig - a model defined in Swagger"""  # noqa: E501
        self._advertise_nsx_connected_routes = None
        self._advertise_lb_vip = None
        self._advertise_static_routes = None
        self._logical_router_id = None
        self._advertise_dns_forwarder = None
        self._advertise_nat_routes = None
        self._advertise_ipsec_local_ip = None
        self._enabled = None
        self._advertise_lb_snat_ip = None
        self.discriminator = None
        if advertise_nsx_connected_routes is not None:
            self.advertise_nsx_connected_routes = advertise_nsx_connected_routes
        if advertise_lb_vip is not None:
            self.advertise_lb_vip = advertise_lb_vip
        if advertise_static_routes is not None:
            self.advertise_static_routes = advertise_static_routes
        if logical_router_id is not None:
            self.logical_router_id = logical_router_id
        if advertise_dns_forwarder is not None:
            self.advertise_dns_forwarder = advertise_dns_forwarder
        if advertise_nat_routes is not None:
            self.advertise_nat_routes = advertise_nat_routes
        if advertise_ipsec_local_ip is not None:
            self.advertise_ipsec_local_ip = advertise_ipsec_local_ip
        if enabled is not None:
            self.enabled = enabled
        if advertise_lb_snat_ip is not None:
            self.advertise_lb_snat_ip = advertise_lb_snat_ip
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def advertise_nsx_connected_routes(self):
        """Gets the advertise_nsx_connected_routes of this AdvertisementConfig.  # noqa: E501

        Flag to advertise all connected routes  # noqa: E501

        :return: The advertise_nsx_connected_routes of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_nsx_connected_routes

    @advertise_nsx_connected_routes.setter
    def advertise_nsx_connected_routes(self, advertise_nsx_connected_routes):
        """Sets the advertise_nsx_connected_routes of this AdvertisementConfig.

        Flag to advertise all connected routes  # noqa: E501

        :param advertise_nsx_connected_routes: The advertise_nsx_connected_routes of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_nsx_connected_routes = advertise_nsx_connected_routes

    @property
    def advertise_lb_vip(self):
        """Gets the advertise_lb_vip of this AdvertisementConfig.  # noqa: E501

        Flag to advertise lb vip ips  # noqa: E501

        :return: The advertise_lb_vip of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_lb_vip

    @advertise_lb_vip.setter
    def advertise_lb_vip(self, advertise_lb_vip):
        """Sets the advertise_lb_vip of this AdvertisementConfig.

        Flag to advertise lb vip ips  # noqa: E501

        :param advertise_lb_vip: The advertise_lb_vip of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_lb_vip = advertise_lb_vip

    @property
    def advertise_static_routes(self):
        """Gets the advertise_static_routes of this AdvertisementConfig.  # noqa: E501

        Flag to advertise all static routes  # noqa: E501

        :return: The advertise_static_routes of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_static_routes

    @advertise_static_routes.setter
    def advertise_static_routes(self, advertise_static_routes):
        """Sets the advertise_static_routes of this AdvertisementConfig.

        Flag to advertise all static routes  # noqa: E501

        :param advertise_static_routes: The advertise_static_routes of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_static_routes = advertise_static_routes

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this AdvertisementConfig.  # noqa: E501

        TIER1 logical router id on which to enable this configuration  # noqa: E501

        :return: The logical_router_id of this AdvertisementConfig.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this AdvertisementConfig.

        TIER1 logical router id on which to enable this configuration  # noqa: E501

        :param logical_router_id: The logical_router_id of this AdvertisementConfig.  # noqa: E501
        :type: str
        """

        self._logical_router_id = logical_router_id

    @property
    def advertise_dns_forwarder(self):
        """Gets the advertise_dns_forwarder of this AdvertisementConfig.  # noqa: E501

        Flag to advertise all routes of dns forwarder listener ips and source ips  # noqa: E501

        :return: The advertise_dns_forwarder of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_dns_forwarder

    @advertise_dns_forwarder.setter
    def advertise_dns_forwarder(self, advertise_dns_forwarder):
        """Sets the advertise_dns_forwarder of this AdvertisementConfig.

        Flag to advertise all routes of dns forwarder listener ips and source ips  # noqa: E501

        :param advertise_dns_forwarder: The advertise_dns_forwarder of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_dns_forwarder = advertise_dns_forwarder

    @property
    def advertise_nat_routes(self):
        """Gets the advertise_nat_routes of this AdvertisementConfig.  # noqa: E501

        Flag to advertise all routes of nat  # noqa: E501

        :return: The advertise_nat_routes of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_nat_routes

    @advertise_nat_routes.setter
    def advertise_nat_routes(self, advertise_nat_routes):
        """Sets the advertise_nat_routes of this AdvertisementConfig.

        Flag to advertise all routes of nat  # noqa: E501

        :param advertise_nat_routes: The advertise_nat_routes of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_nat_routes = advertise_nat_routes

    @property
    def advertise_ipsec_local_ip(self):
        """Gets the advertise_ipsec_local_ip of this AdvertisementConfig.  # noqa: E501

        Flag to advertise all IPSec VPN local endpoint ips to linked TIER0 logical router  # noqa: E501

        :return: The advertise_ipsec_local_ip of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_ipsec_local_ip

    @advertise_ipsec_local_ip.setter
    def advertise_ipsec_local_ip(self, advertise_ipsec_local_ip):
        """Sets the advertise_ipsec_local_ip of this AdvertisementConfig.

        Flag to advertise all IPSec VPN local endpoint ips to linked TIER0 logical router  # noqa: E501

        :param advertise_ipsec_local_ip: The advertise_ipsec_local_ip of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_ipsec_local_ip = advertise_ipsec_local_ip

    @property
    def enabled(self):
        """Gets the enabled of this AdvertisementConfig.  # noqa: E501

        Flag to enable this configuration  # noqa: E501

        :return: The enabled of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AdvertisementConfig.

        Flag to enable this configuration  # noqa: E501

        :param enabled: The enabled of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def advertise_lb_snat_ip(self):
        """Gets the advertise_lb_snat_ip of this AdvertisementConfig.  # noqa: E501

        Flag to advertise all lb SNAT ips  # noqa: E501

        :return: The advertise_lb_snat_ip of this AdvertisementConfig.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_lb_snat_ip

    @advertise_lb_snat_ip.setter
    def advertise_lb_snat_ip(self, advertise_lb_snat_ip):
        """Sets the advertise_lb_snat_ip of this AdvertisementConfig.

        Flag to advertise all lb SNAT ips  # noqa: E501

        :param advertise_lb_snat_ip: The advertise_lb_snat_ip of this AdvertisementConfig.  # noqa: E501
        :type: bool
        """

        self._advertise_lb_snat_ip = advertise_lb_snat_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvertisementConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvertisementConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
