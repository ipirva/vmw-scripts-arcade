# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NvdsUpgradeTopology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nvds_id': 'str',
        'nvds_name': 'str',
        'compute_manager_topology': 'list[ComputeManagerTopology]'
    }

    attribute_map = {
        'nvds_id': 'nvds_id',
        'nvds_name': 'nvds_name',
        'compute_manager_topology': 'compute_manager_topology'
    }

    def __init__(self, nvds_id=None, nvds_name=None, compute_manager_topology=None):  # noqa: E501
        """NvdsUpgradeTopology - a model defined in Swagger"""  # noqa: E501
        self._nvds_id = None
        self._nvds_name = None
        self._compute_manager_topology = None
        self.discriminator = None
        self.nvds_id = nvds_id
        self.nvds_name = nvds_name
        self.compute_manager_topology = compute_manager_topology

    @property
    def nvds_id(self):
        """Gets the nvds_id of this NvdsUpgradeTopology.  # noqa: E501

        Identifier for a NVDS  # noqa: E501

        :return: The nvds_id of this NvdsUpgradeTopology.  # noqa: E501
        :rtype: str
        """
        return self._nvds_id

    @nvds_id.setter
    def nvds_id(self, nvds_id):
        """Sets the nvds_id of this NvdsUpgradeTopology.

        Identifier for a NVDS  # noqa: E501

        :param nvds_id: The nvds_id of this NvdsUpgradeTopology.  # noqa: E501
        :type: str
        """
        if nvds_id is None:
            raise ValueError("Invalid value for `nvds_id`, must not be `None`")  # noqa: E501

        self._nvds_id = nvds_id

    @property
    def nvds_name(self):
        """Gets the nvds_name of this NvdsUpgradeTopology.  # noqa: E501

        Name of a NVDS  # noqa: E501

        :return: The nvds_name of this NvdsUpgradeTopology.  # noqa: E501
        :rtype: str
        """
        return self._nvds_name

    @nvds_name.setter
    def nvds_name(self, nvds_name):
        """Sets the nvds_name of this NvdsUpgradeTopology.

        Name of a NVDS  # noqa: E501

        :param nvds_name: The nvds_name of this NvdsUpgradeTopology.  # noqa: E501
        :type: str
        """
        if nvds_name is None:
            raise ValueError("Invalid value for `nvds_name`, must not be `None`")  # noqa: E501

        self._nvds_name = nvds_name

    @property
    def compute_manager_topology(self):
        """Gets the compute_manager_topology of this NvdsUpgradeTopology.  # noqa: E501

        All resultant VDS mapping for a NVDS after the migration  # noqa: E501

        :return: The compute_manager_topology of this NvdsUpgradeTopology.  # noqa: E501
        :rtype: list[ComputeManagerTopology]
        """
        return self._compute_manager_topology

    @compute_manager_topology.setter
    def compute_manager_topology(self, compute_manager_topology):
        """Sets the compute_manager_topology of this NvdsUpgradeTopology.

        All resultant VDS mapping for a NVDS after the migration  # noqa: E501

        :param compute_manager_topology: The compute_manager_topology of this NvdsUpgradeTopology.  # noqa: E501
        :type: list[ComputeManagerTopology]
        """
        if compute_manager_topology is None:
            raise ValueError("Invalid value for `compute_manager_topology`, must not be `None`")  # noqa: E501

        self._compute_manager_topology = compute_manager_topology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NvdsUpgradeTopology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NvdsUpgradeTopology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
