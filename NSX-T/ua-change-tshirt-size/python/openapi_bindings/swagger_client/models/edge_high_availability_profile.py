# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.cluster_profile import ClusterProfile  # noqa: F401,E501

class EdgeHighAvailabilityProfile(ClusterProfile):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'standby_relocation_config': 'StandbyRelocationConfig',
        'bfd_declare_dead_multiple': 'int',
        'bfd_probe_interval': 'int',
        'bfd_allowed_hops': 'int'
    }
    if hasattr(ClusterProfile, "swagger_types"):
        swagger_types.update(ClusterProfile.swagger_types)

    attribute_map = {
        'standby_relocation_config': 'standby_relocation_config',
        'bfd_declare_dead_multiple': 'bfd_declare_dead_multiple',
        'bfd_probe_interval': 'bfd_probe_interval',
        'bfd_allowed_hops': 'bfd_allowed_hops'
    }
    if hasattr(ClusterProfile, "attribute_map"):
        attribute_map.update(ClusterProfile.attribute_map)

    def __init__(self, standby_relocation_config=None, bfd_declare_dead_multiple=3, bfd_probe_interval=500, bfd_allowed_hops=255, *args, **kwargs):  # noqa: E501
        """EdgeHighAvailabilityProfile - a model defined in Swagger"""  # noqa: E501
        self._standby_relocation_config = None
        self._bfd_declare_dead_multiple = None
        self._bfd_probe_interval = None
        self._bfd_allowed_hops = None
        self.discriminator = None
        if standby_relocation_config is not None:
            self.standby_relocation_config = standby_relocation_config
        if bfd_declare_dead_multiple is not None:
            self.bfd_declare_dead_multiple = bfd_declare_dead_multiple
        if bfd_probe_interval is not None:
            self.bfd_probe_interval = bfd_probe_interval
        if bfd_allowed_hops is not None:
            self.bfd_allowed_hops = bfd_allowed_hops
        ClusterProfile.__init__(self, *args, **kwargs)

    @property
    def standby_relocation_config(self):
        """Gets the standby_relocation_config of this EdgeHighAvailabilityProfile.  # noqa: E501


        :return: The standby_relocation_config of this EdgeHighAvailabilityProfile.  # noqa: E501
        :rtype: StandbyRelocationConfig
        """
        return self._standby_relocation_config

    @standby_relocation_config.setter
    def standby_relocation_config(self, standby_relocation_config):
        """Sets the standby_relocation_config of this EdgeHighAvailabilityProfile.


        :param standby_relocation_config: The standby_relocation_config of this EdgeHighAvailabilityProfile.  # noqa: E501
        :type: StandbyRelocationConfig
        """

        self._standby_relocation_config = standby_relocation_config

    @property
    def bfd_declare_dead_multiple(self):
        """Gets the bfd_declare_dead_multiple of this EdgeHighAvailabilityProfile.  # noqa: E501

        Number of times a packet is missed before BFD declares the neighbor down.  # noqa: E501

        :return: The bfd_declare_dead_multiple of this EdgeHighAvailabilityProfile.  # noqa: E501
        :rtype: int
        """
        return self._bfd_declare_dead_multiple

    @bfd_declare_dead_multiple.setter
    def bfd_declare_dead_multiple(self, bfd_declare_dead_multiple):
        """Sets the bfd_declare_dead_multiple of this EdgeHighAvailabilityProfile.

        Number of times a packet is missed before BFD declares the neighbor down.  # noqa: E501

        :param bfd_declare_dead_multiple: The bfd_declare_dead_multiple of this EdgeHighAvailabilityProfile.  # noqa: E501
        :type: int
        """

        self._bfd_declare_dead_multiple = bfd_declare_dead_multiple

    @property
    def bfd_probe_interval(self):
        """Gets the bfd_probe_interval of this EdgeHighAvailabilityProfile.  # noqa: E501

        the time interval (in millisec) between probe packets for heartbeat purpose  # noqa: E501

        :return: The bfd_probe_interval of this EdgeHighAvailabilityProfile.  # noqa: E501
        :rtype: int
        """
        return self._bfd_probe_interval

    @bfd_probe_interval.setter
    def bfd_probe_interval(self, bfd_probe_interval):
        """Sets the bfd_probe_interval of this EdgeHighAvailabilityProfile.

        the time interval (in millisec) between probe packets for heartbeat purpose  # noqa: E501

        :param bfd_probe_interval: The bfd_probe_interval of this EdgeHighAvailabilityProfile.  # noqa: E501
        :type: int
        """

        self._bfd_probe_interval = bfd_probe_interval

    @property
    def bfd_allowed_hops(self):
        """Gets the bfd_allowed_hops of this EdgeHighAvailabilityProfile.  # noqa: E501

        BFD allowed hops  # noqa: E501

        :return: The bfd_allowed_hops of this EdgeHighAvailabilityProfile.  # noqa: E501
        :rtype: int
        """
        return self._bfd_allowed_hops

    @bfd_allowed_hops.setter
    def bfd_allowed_hops(self, bfd_allowed_hops):
        """Sets the bfd_allowed_hops of this EdgeHighAvailabilityProfile.

        BFD allowed hops  # noqa: E501

        :param bfd_allowed_hops: The bfd_allowed_hops of this EdgeHighAvailabilityProfile.  # noqa: E501
        :type: int
        """

        self._bfd_allowed_hops = bfd_allowed_hops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeHighAvailabilityProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeHighAvailabilityProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
