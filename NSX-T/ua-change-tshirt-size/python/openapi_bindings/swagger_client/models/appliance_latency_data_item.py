# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplianceLatencyDataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'packet_transmitted': 'int',
        'destination_node_id': 'str',
        'destination_node_ip': 'str',
        'rtt_avg': 'float',
        'source_node_ip': 'str',
        'packet_loss_percent': 'str',
        'rtt_min': 'float',
        'rtt_max': 'float',
        'total_time': 'int',
        'packet_received': 'int',
        'destination_node_name': 'str',
        'rtt_mdev': 'float'
    }

    attribute_map = {
        'status': 'status',
        'packet_transmitted': 'packet_transmitted',
        'destination_node_id': 'destination_node_id',
        'destination_node_ip': 'destination_node_ip',
        'rtt_avg': 'rtt_avg',
        'source_node_ip': 'source_node_ip',
        'packet_loss_percent': 'packet_loss_percent',
        'rtt_min': 'rtt_min',
        'rtt_max': 'rtt_max',
        'total_time': 'total_time',
        'packet_received': 'packet_received',
        'destination_node_name': 'destination_node_name',
        'rtt_mdev': 'rtt_mdev'
    }

    def __init__(self, status=None, packet_transmitted=None, destination_node_id=None, destination_node_ip=None, rtt_avg=None, source_node_ip=None, packet_loss_percent=None, rtt_min=None, rtt_max=None, total_time=None, packet_received=None, destination_node_name=None, rtt_mdev=None):  # noqa: E501
        """ApplianceLatencyDataItem - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._packet_transmitted = None
        self._destination_node_id = None
        self._destination_node_ip = None
        self._rtt_avg = None
        self._source_node_ip = None
        self._packet_loss_percent = None
        self._rtt_min = None
        self._rtt_max = None
        self._total_time = None
        self._packet_received = None
        self._destination_node_name = None
        self._rtt_mdev = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if packet_transmitted is not None:
            self.packet_transmitted = packet_transmitted
        if destination_node_id is not None:
            self.destination_node_id = destination_node_id
        if destination_node_ip is not None:
            self.destination_node_ip = destination_node_ip
        if rtt_avg is not None:
            self.rtt_avg = rtt_avg
        if source_node_ip is not None:
            self.source_node_ip = source_node_ip
        if packet_loss_percent is not None:
            self.packet_loss_percent = packet_loss_percent
        if rtt_min is not None:
            self.rtt_min = rtt_min
        if rtt_max is not None:
            self.rtt_max = rtt_max
        if total_time is not None:
            self.total_time = total_time
        if packet_received is not None:
            self.packet_received = packet_received
        if destination_node_name is not None:
            self.destination_node_name = destination_node_name
        if rtt_mdev is not None:
            self.rtt_mdev = rtt_mdev

    @property
    def status(self):
        """Gets the status of this ApplianceLatencyDataItem.  # noqa: E501

        Display the connection status between source node and destination node.   # noqa: E501

        :return: The status of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplianceLatencyDataItem.

        Display the connection status between source node and destination node.   # noqa: E501

        :param status: The status of this ApplianceLatencyDataItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def packet_transmitted(self):
        """Gets the packet_transmitted of this ApplianceLatencyDataItem.  # noqa: E501

        Display the transmitted packets in Ping  # noqa: E501

        :return: The packet_transmitted of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: int
        """
        return self._packet_transmitted

    @packet_transmitted.setter
    def packet_transmitted(self, packet_transmitted):
        """Sets the packet_transmitted of this ApplianceLatencyDataItem.

        Display the transmitted packets in Ping  # noqa: E501

        :param packet_transmitted: The packet_transmitted of this ApplianceLatencyDataItem.  # noqa: E501
        :type: int
        """

        self._packet_transmitted = packet_transmitted

    @property
    def destination_node_id(self):
        """Gets the destination_node_id of this ApplianceLatencyDataItem.  # noqa: E501

        Display the appliance node id.  # noqa: E501

        :return: The destination_node_id of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: str
        """
        return self._destination_node_id

    @destination_node_id.setter
    def destination_node_id(self, destination_node_id):
        """Sets the destination_node_id of this ApplianceLatencyDataItem.

        Display the appliance node id.  # noqa: E501

        :param destination_node_id: The destination_node_id of this ApplianceLatencyDataItem.  # noqa: E501
        :type: str
        """

        self._destination_node_id = destination_node_id

    @property
    def destination_node_ip(self):
        """Gets the destination_node_ip of this ApplianceLatencyDataItem.  # noqa: E501

        Display the appliance node ip.  # noqa: E501

        :return: The destination_node_ip of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: str
        """
        return self._destination_node_ip

    @destination_node_ip.setter
    def destination_node_ip(self, destination_node_ip):
        """Sets the destination_node_ip of this ApplianceLatencyDataItem.

        Display the appliance node ip.  # noqa: E501

        :param destination_node_ip: The destination_node_ip of this ApplianceLatencyDataItem.  # noqa: E501
        :type: str
        """

        self._destination_node_ip = destination_node_ip

    @property
    def rtt_avg(self):
        """Gets the rtt_avg of this ApplianceLatencyDataItem.  # noqa: E501

        Display the average Round Trip Time in milliseconds.   # noqa: E501

        :return: The rtt_avg of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: float
        """
        return self._rtt_avg

    @rtt_avg.setter
    def rtt_avg(self, rtt_avg):
        """Sets the rtt_avg of this ApplianceLatencyDataItem.

        Display the average Round Trip Time in milliseconds.   # noqa: E501

        :param rtt_avg: The rtt_avg of this ApplianceLatencyDataItem.  # noqa: E501
        :type: float
        """

        self._rtt_avg = rtt_avg

    @property
    def source_node_ip(self):
        """Gets the source_node_ip of this ApplianceLatencyDataItem.  # noqa: E501

        Display the appliance node ip.  # noqa: E501

        :return: The source_node_ip of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: str
        """
        return self._source_node_ip

    @source_node_ip.setter
    def source_node_ip(self, source_node_ip):
        """Sets the source_node_ip of this ApplianceLatencyDataItem.

        Display the appliance node ip.  # noqa: E501

        :param source_node_ip: The source_node_ip of this ApplianceLatencyDataItem.  # noqa: E501
        :type: str
        """

        self._source_node_ip = source_node_ip

    @property
    def packet_loss_percent(self):
        """Gets the packet_loss_percent of this ApplianceLatencyDataItem.  # noqa: E501

        Display the percentage of lost packet.  # noqa: E501

        :return: The packet_loss_percent of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: str
        """
        return self._packet_loss_percent

    @packet_loss_percent.setter
    def packet_loss_percent(self, packet_loss_percent):
        """Sets the packet_loss_percent of this ApplianceLatencyDataItem.

        Display the percentage of lost packet.  # noqa: E501

        :param packet_loss_percent: The packet_loss_percent of this ApplianceLatencyDataItem.  # noqa: E501
        :type: str
        """

        self._packet_loss_percent = packet_loss_percent

    @property
    def rtt_min(self):
        """Gets the rtt_min of this ApplianceLatencyDataItem.  # noqa: E501

        Display the min Round Trip Time in milliseconds.   # noqa: E501

        :return: The rtt_min of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: float
        """
        return self._rtt_min

    @rtt_min.setter
    def rtt_min(self, rtt_min):
        """Sets the rtt_min of this ApplianceLatencyDataItem.

        Display the min Round Trip Time in milliseconds.   # noqa: E501

        :param rtt_min: The rtt_min of this ApplianceLatencyDataItem.  # noqa: E501
        :type: float
        """

        self._rtt_min = rtt_min

    @property
    def rtt_max(self):
        """Gets the rtt_max of this ApplianceLatencyDataItem.  # noqa: E501

        Display the max Round Trip Time in milliseconds.   # noqa: E501

        :return: The rtt_max of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: float
        """
        return self._rtt_max

    @rtt_max.setter
    def rtt_max(self, rtt_max):
        """Sets the rtt_max of this ApplianceLatencyDataItem.

        Display the max Round Trip Time in milliseconds.   # noqa: E501

        :param rtt_max: The rtt_max of this ApplianceLatencyDataItem.  # noqa: E501
        :type: float
        """

        self._rtt_max = rtt_max

    @property
    def total_time(self):
        """Gets the total_time of this ApplianceLatencyDataItem.  # noqa: E501

        Display the total time of sending and receiving packets in milliseconds.   # noqa: E501

        :return: The total_time of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this ApplianceLatencyDataItem.

        Display the total time of sending and receiving packets in milliseconds.   # noqa: E501

        :param total_time: The total_time of this ApplianceLatencyDataItem.  # noqa: E501
        :type: int
        """

        self._total_time = total_time

    @property
    def packet_received(self):
        """Gets the packet_received of this ApplianceLatencyDataItem.  # noqa: E501

        Display the received packets.  # noqa: E501

        :return: The packet_received of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: int
        """
        return self._packet_received

    @packet_received.setter
    def packet_received(self, packet_received):
        """Sets the packet_received of this ApplianceLatencyDataItem.

        Display the received packets.  # noqa: E501

        :param packet_received: The packet_received of this ApplianceLatencyDataItem.  # noqa: E501
        :type: int
        """

        self._packet_received = packet_received

    @property
    def destination_node_name(self):
        """Gets the destination_node_name of this ApplianceLatencyDataItem.  # noqa: E501

        Display the appliance node name.  # noqa: E501

        :return: The destination_node_name of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: str
        """
        return self._destination_node_name

    @destination_node_name.setter
    def destination_node_name(self, destination_node_name):
        """Sets the destination_node_name of this ApplianceLatencyDataItem.

        Display the appliance node name.  # noqa: E501

        :param destination_node_name: The destination_node_name of this ApplianceLatencyDataItem.  # noqa: E501
        :type: str
        """

        self._destination_node_name = destination_node_name

    @property
    def rtt_mdev(self):
        """Gets the rtt_mdev of this ApplianceLatencyDataItem.  # noqa: E501

        Display the mean Round Trip Time in milliseconds.   # noqa: E501

        :return: The rtt_mdev of this ApplianceLatencyDataItem.  # noqa: E501
        :rtype: float
        """
        return self._rtt_mdev

    @rtt_mdev.setter
    def rtt_mdev(self, rtt_mdev):
        """Sets the rtt_mdev of this ApplianceLatencyDataItem.

        Display the mean Round Trip Time in milliseconds.   # noqa: E501

        :param rtt_mdev: The rtt_mdev of this ApplianceLatencyDataItem.  # noqa: E501
        :type: float
        """

        self._rtt_mdev = rtt_mdev

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplianceLatencyDataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceLatencyDataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
