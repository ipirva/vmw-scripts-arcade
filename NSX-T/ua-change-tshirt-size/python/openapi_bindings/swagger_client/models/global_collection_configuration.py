# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class GlobalCollectionConfiguration(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modified_feature_stack_collection_configurations': 'FeatureStackCollectionConfigurationList',
        'is_data_collection_enabled': 'bool',
        'aggregated_data_collection_frequency': 'int'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'modified_feature_stack_collection_configurations': 'modified_feature_stack_collection_configurations',
        'is_data_collection_enabled': 'is_data_collection_enabled',
        'aggregated_data_collection_frequency': 'aggregated_data_collection_frequency'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, modified_feature_stack_collection_configurations=None, is_data_collection_enabled=None, aggregated_data_collection_frequency=None, *args, **kwargs):  # noqa: E501
        """GlobalCollectionConfiguration - a model defined in Swagger"""  # noqa: E501
        self._modified_feature_stack_collection_configurations = None
        self._is_data_collection_enabled = None
        self._aggregated_data_collection_frequency = None
        self.discriminator = None
        if modified_feature_stack_collection_configurations is not None:
            self.modified_feature_stack_collection_configurations = modified_feature_stack_collection_configurations
        self.is_data_collection_enabled = is_data_collection_enabled
        self.aggregated_data_collection_frequency = aggregated_data_collection_frequency
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def modified_feature_stack_collection_configurations(self):
        """Gets the modified_feature_stack_collection_configurations of this GlobalCollectionConfiguration.  # noqa: E501


        :return: The modified_feature_stack_collection_configurations of this GlobalCollectionConfiguration.  # noqa: E501
        :rtype: FeatureStackCollectionConfigurationList
        """
        return self._modified_feature_stack_collection_configurations

    @modified_feature_stack_collection_configurations.setter
    def modified_feature_stack_collection_configurations(self, modified_feature_stack_collection_configurations):
        """Sets the modified_feature_stack_collection_configurations of this GlobalCollectionConfiguration.


        :param modified_feature_stack_collection_configurations: The modified_feature_stack_collection_configurations of this GlobalCollectionConfiguration.  # noqa: E501
        :type: FeatureStackCollectionConfigurationList
        """

        self._modified_feature_stack_collection_configurations = modified_feature_stack_collection_configurations

    @property
    def is_data_collection_enabled(self):
        """Gets the is_data_collection_enabled of this GlobalCollectionConfiguration.  # noqa: E501

        Indicates whether data collection required by the aggregation service is enabled.  If false, no aggregation service data will be collected.  Changing this property will not affect the existing data collection frequency settings.  # noqa: E501

        :return: The is_data_collection_enabled of this GlobalCollectionConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_data_collection_enabled

    @is_data_collection_enabled.setter
    def is_data_collection_enabled(self, is_data_collection_enabled):
        """Sets the is_data_collection_enabled of this GlobalCollectionConfiguration.

        Indicates whether data collection required by the aggregation service is enabled.  If false, no aggregation service data will be collected.  Changing this property will not affect the existing data collection frequency settings.  # noqa: E501

        :param is_data_collection_enabled: The is_data_collection_enabled of this GlobalCollectionConfiguration.  # noqa: E501
        :type: bool
        """
        if is_data_collection_enabled is None:
            raise ValueError("Invalid value for `is_data_collection_enabled`, must not be `None`")  # noqa: E501

        self._is_data_collection_enabled = is_data_collection_enabled

    @property
    def aggregated_data_collection_frequency(self):
        """Gets the aggregated_data_collection_frequency of this GlobalCollectionConfiguration.  # noqa: E501

        The frequency in seconds at which data, which is subject to the aggregation function, is collected.  # noqa: E501

        :return: The aggregated_data_collection_frequency of this GlobalCollectionConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._aggregated_data_collection_frequency

    @aggregated_data_collection_frequency.setter
    def aggregated_data_collection_frequency(self, aggregated_data_collection_frequency):
        """Sets the aggregated_data_collection_frequency of this GlobalCollectionConfiguration.

        The frequency in seconds at which data, which is subject to the aggregation function, is collected.  # noqa: E501

        :param aggregated_data_collection_frequency: The aggregated_data_collection_frequency of this GlobalCollectionConfiguration.  # noqa: E501
        :type: int
        """
        if aggregated_data_collection_frequency is None:
            raise ValueError("Invalid value for `aggregated_data_collection_frequency`, must not be `None`")  # noqa: E501

        self._aggregated_data_collection_frequency = aggregated_data_collection_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalCollectionConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalCollectionConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
