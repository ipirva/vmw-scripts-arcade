# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.discovered_resource import DiscoveredResource  # noqa: F401,E501

class VirtualSwitch(DiscoveredResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cm_local_id': 'str',
        'external_id': 'str',
        'origin_type': 'str',
        'origin_id': 'str'
    }
    if hasattr(DiscoveredResource, "swagger_types"):
        swagger_types.update(DiscoveredResource.swagger_types)

    attribute_map = {
        'cm_local_id': 'cm_local_id',
        'external_id': 'external_id',
        'origin_type': 'origin_type',
        'origin_id': 'origin_id'
    }
    if hasattr(DiscoveredResource, "attribute_map"):
        attribute_map.update(DiscoveredResource.attribute_map)

    def __init__(self, cm_local_id=None, external_id=None, origin_type=None, origin_id=None, *args, **kwargs):  # noqa: E501
        """VirtualSwitch - a model defined in Swagger"""  # noqa: E501
        self._cm_local_id = None
        self._external_id = None
        self._origin_type = None
        self._origin_id = None
        self.discriminator = None
        if cm_local_id is not None:
            self.cm_local_id = cm_local_id
        if external_id is not None:
            self.external_id = external_id
        if origin_type is not None:
            self.origin_type = origin_type
        if origin_id is not None:
            self.origin_id = origin_id
        DiscoveredResource.__init__(self, *args, **kwargs)

    @property
    def cm_local_id(self):
        """Gets the cm_local_id of this VirtualSwitch.  # noqa: E501

        ID of the virtual switch in compute manager  # noqa: E501

        :return: The cm_local_id of this VirtualSwitch.  # noqa: E501
        :rtype: str
        """
        return self._cm_local_id

    @cm_local_id.setter
    def cm_local_id(self, cm_local_id):
        """Sets the cm_local_id of this VirtualSwitch.

        ID of the virtual switch in compute manager  # noqa: E501

        :param cm_local_id: The cm_local_id of this VirtualSwitch.  # noqa: E501
        :type: str
        """

        self._cm_local_id = cm_local_id

    @property
    def external_id(self):
        """Gets the external_id of this VirtualSwitch.  # noqa: E501

        External id of the virtual switch  # noqa: E501

        :return: The external_id of this VirtualSwitch.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VirtualSwitch.

        External id of the virtual switch  # noqa: E501

        :param external_id: The external_id of this VirtualSwitch.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def origin_type(self):
        """Gets the origin_type of this VirtualSwitch.  # noqa: E501

        Switch type like VmwareDistributedVirtualSwitch  # noqa: E501

        :return: The origin_type of this VirtualSwitch.  # noqa: E501
        :rtype: str
        """
        return self._origin_type

    @origin_type.setter
    def origin_type(self, origin_type):
        """Sets the origin_type of this VirtualSwitch.

        Switch type like VmwareDistributedVirtualSwitch  # noqa: E501

        :param origin_type: The origin_type of this VirtualSwitch.  # noqa: E501
        :type: str
        """

        self._origin_type = origin_type

    @property
    def origin_id(self):
        """Gets the origin_id of this VirtualSwitch.  # noqa: E501

        ID of the compute manager where this virtual switch is discovered.   # noqa: E501

        :return: The origin_id of this VirtualSwitch.  # noqa: E501
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this VirtualSwitch.

        ID of the compute manager where this virtual switch is discovered.   # noqa: E501

        :param origin_id: The origin_id of this VirtualSwitch.  # noqa: E501
        :type: str
        """

        self._origin_id = origin_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualSwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
