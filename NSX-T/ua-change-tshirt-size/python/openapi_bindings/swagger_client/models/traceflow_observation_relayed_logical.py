# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.traceflow_observation import TraceflowObservation  # noqa: F401,E501

class TraceflowObservationRelayedLogical(TraceflowObservation):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_type': 'str',
        'dst_server_address': 'str',
        'logical_comp_uuid': 'str',
        'relay_server_address': 'str'
    }
    if hasattr(TraceflowObservation, "swagger_types"):
        swagger_types.update(TraceflowObservation.swagger_types)

    attribute_map = {
        'message_type': 'message_type',
        'dst_server_address': 'dst_server_address',
        'logical_comp_uuid': 'logical_comp_uuid',
        'relay_server_address': 'relay_server_address'
    }
    if hasattr(TraceflowObservation, "attribute_map"):
        attribute_map.update(TraceflowObservation.attribute_map)

    def __init__(self, message_type='REQUEST', dst_server_address=None, logical_comp_uuid=None, relay_server_address=None, *args, **kwargs):  # noqa: E501
        """TraceflowObservationRelayedLogical - a model defined in Swagger"""  # noqa: E501
        self._message_type = None
        self._dst_server_address = None
        self._logical_comp_uuid = None
        self._relay_server_address = None
        self.discriminator = None
        if message_type is not None:
            self.message_type = message_type
        if dst_server_address is not None:
            self.dst_server_address = dst_server_address
        if logical_comp_uuid is not None:
            self.logical_comp_uuid = logical_comp_uuid
        if relay_server_address is not None:
            self.relay_server_address = relay_server_address
        TraceflowObservation.__init__(self, *args, **kwargs)

    @property
    def message_type(self):
        """Gets the message_type of this TraceflowObservationRelayedLogical.  # noqa: E501

        This field specified the message type of the relay service REQUEST - The relay service will relay a request message to the destination server REPLY - The relay service will relay a reply message to the client  # noqa: E501

        :return: The message_type of this TraceflowObservationRelayedLogical.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this TraceflowObservationRelayedLogical.

        This field specified the message type of the relay service REQUEST - The relay service will relay a request message to the destination server REPLY - The relay service will relay a reply message to the client  # noqa: E501

        :param message_type: The message_type of this TraceflowObservationRelayedLogical.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUEST", "REPLY"]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def dst_server_address(self):
        """Gets the dst_server_address of this TraceflowObservationRelayedLogical.  # noqa: E501

        This field specified the IP address of the destination which the packet will be relayed.  # noqa: E501

        :return: The dst_server_address of this TraceflowObservationRelayedLogical.  # noqa: E501
        :rtype: str
        """
        return self._dst_server_address

    @dst_server_address.setter
    def dst_server_address(self, dst_server_address):
        """Sets the dst_server_address of this TraceflowObservationRelayedLogical.

        This field specified the IP address of the destination which the packet will be relayed.  # noqa: E501

        :param dst_server_address: The dst_server_address of this TraceflowObservationRelayedLogical.  # noqa: E501
        :type: str
        """

        self._dst_server_address = dst_server_address

    @property
    def logical_comp_uuid(self):
        """Gets the logical_comp_uuid of this TraceflowObservationRelayedLogical.  # noqa: E501

        This field specified the logical component that relay service located.  # noqa: E501

        :return: The logical_comp_uuid of this TraceflowObservationRelayedLogical.  # noqa: E501
        :rtype: str
        """
        return self._logical_comp_uuid

    @logical_comp_uuid.setter
    def logical_comp_uuid(self, logical_comp_uuid):
        """Sets the logical_comp_uuid of this TraceflowObservationRelayedLogical.

        This field specified the logical component that relay service located.  # noqa: E501

        :param logical_comp_uuid: The logical_comp_uuid of this TraceflowObservationRelayedLogical.  # noqa: E501
        :type: str
        """

        self._logical_comp_uuid = logical_comp_uuid

    @property
    def relay_server_address(self):
        """Gets the relay_server_address of this TraceflowObservationRelayedLogical.  # noqa: E501

        This field specified the IP address of the relay service.  # noqa: E501

        :return: The relay_server_address of this TraceflowObservationRelayedLogical.  # noqa: E501
        :rtype: str
        """
        return self._relay_server_address

    @relay_server_address.setter
    def relay_server_address(self, relay_server_address):
        """Sets the relay_server_address of this TraceflowObservationRelayedLogical.

        This field specified the IP address of the relay service.  # noqa: E501

        :param relay_server_address: The relay_server_address of this TraceflowObservationRelayedLogical.  # noqa: E501
        :type: str
        """

        self._relay_server_address = relay_server_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceflowObservationRelayedLogical, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceflowObservationRelayedLogical):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
