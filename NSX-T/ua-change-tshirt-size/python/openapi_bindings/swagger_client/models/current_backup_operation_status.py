# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentBackupOperationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_step': 'str',
        'backup_id': 'str',
        'current_step_message': 'str',
        'end_time': 'int',
        'operation_type': 'str',
        'start_time': 'int'
    }

    attribute_map = {
        'current_step': 'current_step',
        'backup_id': 'backup_id',
        'current_step_message': 'current_step_message',
        'end_time': 'end_time',
        'operation_type': 'operation_type',
        'start_time': 'start_time'
    }

    def __init__(self, current_step=None, backup_id=None, current_step_message=None, end_time=None, operation_type=None, start_time=None):  # noqa: E501
        """CurrentBackupOperationStatus - a model defined in Swagger"""  # noqa: E501
        self._current_step = None
        self._backup_id = None
        self._current_step_message = None
        self._end_time = None
        self._operation_type = None
        self._start_time = None
        self.discriminator = None
        if current_step is not None:
            self.current_step = current_step
        if backup_id is not None:
            self.backup_id = backup_id
        if current_step_message is not None:
            self.current_step_message = current_step_message
        if end_time is not None:
            self.end_time = end_time
        self.operation_type = operation_type
        if start_time is not None:
            self.start_time = start_time

    @property
    def current_step(self):
        """Gets the current_step of this CurrentBackupOperationStatus.  # noqa: E501

        Current step of operation  # noqa: E501

        :return: The current_step of this CurrentBackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_step

    @current_step.setter
    def current_step(self, current_step):
        """Sets the current_step of this CurrentBackupOperationStatus.

        Current step of operation  # noqa: E501

        :param current_step: The current_step of this CurrentBackupOperationStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["BACKUP_CREATING_CLUSTER_BACKUP", "BACKUP_CREATING_NODE_BACKUP"]  # noqa: E501
        if current_step not in allowed_values:
            raise ValueError(
                "Invalid value for `current_step` ({0}), must be one of {1}"  # noqa: E501
                .format(current_step, allowed_values)
            )

        self._current_step = current_step

    @property
    def backup_id(self):
        """Gets the backup_id of this CurrentBackupOperationStatus.  # noqa: E501

        Unique identifier of current backup  # noqa: E501

        :return: The backup_id of this CurrentBackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this CurrentBackupOperationStatus.

        Unique identifier of current backup  # noqa: E501

        :param backup_id: The backup_id of this CurrentBackupOperationStatus.  # noqa: E501
        :type: str
        """

        self._backup_id = backup_id

    @property
    def current_step_message(self):
        """Gets the current_step_message of this CurrentBackupOperationStatus.  # noqa: E501

        Additional human-readable status information about current step  # noqa: E501

        :return: The current_step_message of this CurrentBackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._current_step_message

    @current_step_message.setter
    def current_step_message(self, current_step_message):
        """Sets the current_step_message of this CurrentBackupOperationStatus.

        Additional human-readable status information about current step  # noqa: E501

        :param current_step_message: The current_step_message of this CurrentBackupOperationStatus.  # noqa: E501
        :type: str
        """

        self._current_step_message = current_step_message

    @property
    def end_time(self):
        """Gets the end_time of this CurrentBackupOperationStatus.  # noqa: E501

        Time when operation is expected to end  # noqa: E501

        :return: The end_time of this CurrentBackupOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CurrentBackupOperationStatus.

        Time when operation is expected to end  # noqa: E501

        :param end_time: The end_time of this CurrentBackupOperationStatus.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def operation_type(self):
        """Gets the operation_type of this CurrentBackupOperationStatus.  # noqa: E501

        Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set.   # noqa: E501

        :return: The operation_type of this CurrentBackupOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this CurrentBackupOperationStatus.

        Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set.   # noqa: E501

        :param operation_type: The operation_type of this CurrentBackupOperationStatus.  # noqa: E501
        :type: str
        """
        if operation_type is None:
            raise ValueError("Invalid value for `operation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NONE", "BACKUP"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def start_time(self):
        """Gets the start_time of this CurrentBackupOperationStatus.  # noqa: E501

        Time when operation was started  # noqa: E501

        :return: The start_time of this CurrentBackupOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CurrentBackupOperationStatus.

        Time when operation was started  # noqa: E501

        :param start_time: The start_time of this CurrentBackupOperationStatus.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentBackupOperationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentBackupOperationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
