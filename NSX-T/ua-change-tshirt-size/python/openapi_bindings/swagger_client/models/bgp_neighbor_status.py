# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BgpNeighborStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_state': 'str',
        'messages_received': 'int',
        'keep_alive_interval': 'int',
        'neighbor_router_id': 'str',
        'total_out_prefix_count': 'int',
        'lr_component_id': 'str',
        'established_connection_count': 'int',
        'messages_sent': 'int',
        'time_since_established': 'int',
        'hold_time': 'int',
        'graceful_restart': 'bool',
        'graceful_restart_mode': 'str',
        'connection_drop_count': 'int',
        'remote_port': 'int',
        'total_in_prefix_count': 'int',
        'remote_site': 'ResourceReference',
        'transport_node': 'ResourceReference',
        'local_port': 'int',
        'remote_as_number': 'str',
        'announced_capabilities': 'list[str]',
        'negotiated_capability': 'list[str]',
        'address_families': 'list[BgpAddressFamily]',
        'source_address': 'str',
        'neighbor_address': 'str'
    }

    attribute_map = {
        'connection_state': 'connection_state',
        'messages_received': 'messages_received',
        'keep_alive_interval': 'keep_alive_interval',
        'neighbor_router_id': 'neighbor_router_id',
        'total_out_prefix_count': 'total_out_prefix_count',
        'lr_component_id': 'lr_component_id',
        'established_connection_count': 'established_connection_count',
        'messages_sent': 'messages_sent',
        'time_since_established': 'time_since_established',
        'hold_time': 'hold_time',
        'graceful_restart': 'graceful_restart',
        'graceful_restart_mode': 'graceful_restart_mode',
        'connection_drop_count': 'connection_drop_count',
        'remote_port': 'remote_port',
        'total_in_prefix_count': 'total_in_prefix_count',
        'remote_site': 'remote_site',
        'transport_node': 'transport_node',
        'local_port': 'local_port',
        'remote_as_number': 'remote_as_number',
        'announced_capabilities': 'announced_capabilities',
        'negotiated_capability': 'negotiated_capability',
        'address_families': 'address_families',
        'source_address': 'source_address',
        'neighbor_address': 'neighbor_address'
    }

    def __init__(self, connection_state=None, messages_received=None, keep_alive_interval=None, neighbor_router_id=None, total_out_prefix_count=None, lr_component_id=None, established_connection_count=None, messages_sent=None, time_since_established=None, hold_time=None, graceful_restart=None, graceful_restart_mode=None, connection_drop_count=None, remote_port=None, total_in_prefix_count=None, remote_site=None, transport_node=None, local_port=None, remote_as_number=None, announced_capabilities=None, negotiated_capability=None, address_families=None, source_address=None, neighbor_address=None):  # noqa: E501
        """BgpNeighborStatus - a model defined in Swagger"""  # noqa: E501
        self._connection_state = None
        self._messages_received = None
        self._keep_alive_interval = None
        self._neighbor_router_id = None
        self._total_out_prefix_count = None
        self._lr_component_id = None
        self._established_connection_count = None
        self._messages_sent = None
        self._time_since_established = None
        self._hold_time = None
        self._graceful_restart = None
        self._graceful_restart_mode = None
        self._connection_drop_count = None
        self._remote_port = None
        self._total_in_prefix_count = None
        self._remote_site = None
        self._transport_node = None
        self._local_port = None
        self._remote_as_number = None
        self._announced_capabilities = None
        self._negotiated_capability = None
        self._address_families = None
        self._source_address = None
        self._neighbor_address = None
        self.discriminator = None
        if connection_state is not None:
            self.connection_state = connection_state
        if messages_received is not None:
            self.messages_received = messages_received
        if keep_alive_interval is not None:
            self.keep_alive_interval = keep_alive_interval
        if neighbor_router_id is not None:
            self.neighbor_router_id = neighbor_router_id
        if total_out_prefix_count is not None:
            self.total_out_prefix_count = total_out_prefix_count
        if lr_component_id is not None:
            self.lr_component_id = lr_component_id
        if established_connection_count is not None:
            self.established_connection_count = established_connection_count
        if messages_sent is not None:
            self.messages_sent = messages_sent
        if time_since_established is not None:
            self.time_since_established = time_since_established
        if hold_time is not None:
            self.hold_time = hold_time
        if graceful_restart is not None:
            self.graceful_restart = graceful_restart
        if graceful_restart_mode is not None:
            self.graceful_restart_mode = graceful_restart_mode
        if connection_drop_count is not None:
            self.connection_drop_count = connection_drop_count
        if remote_port is not None:
            self.remote_port = remote_port
        if total_in_prefix_count is not None:
            self.total_in_prefix_count = total_in_prefix_count
        if remote_site is not None:
            self.remote_site = remote_site
        if transport_node is not None:
            self.transport_node = transport_node
        if local_port is not None:
            self.local_port = local_port
        if remote_as_number is not None:
            self.remote_as_number = remote_as_number
        if announced_capabilities is not None:
            self.announced_capabilities = announced_capabilities
        if negotiated_capability is not None:
            self.negotiated_capability = negotiated_capability
        if address_families is not None:
            self.address_families = address_families
        if source_address is not None:
            self.source_address = source_address
        if neighbor_address is not None:
            self.neighbor_address = neighbor_address

    @property
    def connection_state(self):
        """Gets the connection_state of this BgpNeighborStatus.  # noqa: E501

        Current state of the BGP session.  # noqa: E501

        :return: The connection_state of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this BgpNeighborStatus.

        Current state of the BGP session.  # noqa: E501

        :param connection_state: The connection_state of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "IDLE", "CONNECT", "ACTIVE", "OPEN_SENT", "OPEN_CONFIRM", "ESTABLISHED", "UNKNOWN"]  # noqa: E501
        if connection_state not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_state` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_state, allowed_values)
            )

        self._connection_state = connection_state

    @property
    def messages_received(self):
        """Gets the messages_received of this BgpNeighborStatus.  # noqa: E501

        Count of messages received from the neighbor  # noqa: E501

        :return: The messages_received of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._messages_received

    @messages_received.setter
    def messages_received(self, messages_received):
        """Sets the messages_received of this BgpNeighborStatus.

        Count of messages received from the neighbor  # noqa: E501

        :param messages_received: The messages_received of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._messages_received = messages_received

    @property
    def keep_alive_interval(self):
        """Gets the keep_alive_interval of this BgpNeighborStatus.  # noqa: E501

        Time in ms to wait for HELLO packet from BGP peer  # noqa: E501

        :return: The keep_alive_interval of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._keep_alive_interval

    @keep_alive_interval.setter
    def keep_alive_interval(self, keep_alive_interval):
        """Sets the keep_alive_interval of this BgpNeighborStatus.

        Time in ms to wait for HELLO packet from BGP peer  # noqa: E501

        :param keep_alive_interval: The keep_alive_interval of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._keep_alive_interval = keep_alive_interval

    @property
    def neighbor_router_id(self):
        """Gets the neighbor_router_id of this BgpNeighborStatus.  # noqa: E501

        Router ID of the BGP neighbor.  # noqa: E501

        :return: The neighbor_router_id of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_router_id

    @neighbor_router_id.setter
    def neighbor_router_id(self, neighbor_router_id):
        """Sets the neighbor_router_id of this BgpNeighborStatus.

        Router ID of the BGP neighbor.  # noqa: E501

        :param neighbor_router_id: The neighbor_router_id of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """

        self._neighbor_router_id = neighbor_router_id

    @property
    def total_out_prefix_count(self):
        """Gets the total_out_prefix_count of this BgpNeighborStatus.  # noqa: E501

        Sum of out prefixes counts across all address families.  # noqa: E501

        :return: The total_out_prefix_count of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_out_prefix_count

    @total_out_prefix_count.setter
    def total_out_prefix_count(self, total_out_prefix_count):
        """Sets the total_out_prefix_count of this BgpNeighborStatus.

        Sum of out prefixes counts across all address families.  # noqa: E501

        :param total_out_prefix_count: The total_out_prefix_count of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._total_out_prefix_count = total_out_prefix_count

    @property
    def lr_component_id(self):
        """Gets the lr_component_id of this BgpNeighborStatus.  # noqa: E501

        Logical router component(Service Router/Distributed Router) id  # noqa: E501

        :return: The lr_component_id of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._lr_component_id

    @lr_component_id.setter
    def lr_component_id(self, lr_component_id):
        """Sets the lr_component_id of this BgpNeighborStatus.

        Logical router component(Service Router/Distributed Router) id  # noqa: E501

        :param lr_component_id: The lr_component_id of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """

        self._lr_component_id = lr_component_id

    @property
    def established_connection_count(self):
        """Gets the established_connection_count of this BgpNeighborStatus.  # noqa: E501

        Count of connections established  # noqa: E501

        :return: The established_connection_count of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._established_connection_count

    @established_connection_count.setter
    def established_connection_count(self, established_connection_count):
        """Sets the established_connection_count of this BgpNeighborStatus.

        Count of connections established  # noqa: E501

        :param established_connection_count: The established_connection_count of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._established_connection_count = established_connection_count

    @property
    def messages_sent(self):
        """Gets the messages_sent of this BgpNeighborStatus.  # noqa: E501

        Count of messages sent to the neighbor  # noqa: E501

        :return: The messages_sent of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._messages_sent

    @messages_sent.setter
    def messages_sent(self, messages_sent):
        """Sets the messages_sent of this BgpNeighborStatus.

        Count of messages sent to the neighbor  # noqa: E501

        :param messages_sent: The messages_sent of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._messages_sent = messages_sent

    @property
    def time_since_established(self):
        """Gets the time_since_established of this BgpNeighborStatus.  # noqa: E501

        Time(in seconds) since connection was established.  # noqa: E501

        :return: The time_since_established of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._time_since_established

    @time_since_established.setter
    def time_since_established(self, time_since_established):
        """Sets the time_since_established of this BgpNeighborStatus.

        Time(in seconds) since connection was established.  # noqa: E501

        :param time_since_established: The time_since_established of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._time_since_established = time_since_established

    @property
    def hold_time(self):
        """Gets the hold_time of this BgpNeighborStatus.  # noqa: E501

        Time in ms to wait for HELLO from BGP peer. If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down.  # noqa: E501

        :return: The hold_time of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._hold_time

    @hold_time.setter
    def hold_time(self, hold_time):
        """Sets the hold_time of this BgpNeighborStatus.

        Time in ms to wait for HELLO from BGP peer. If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down.  # noqa: E501

        :param hold_time: The hold_time of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._hold_time = hold_time

    @property
    def graceful_restart(self):
        """Gets the graceful_restart of this BgpNeighborStatus.  # noqa: E501

        Current state of graceful restart where graceful_restart = true indicates graceful restart is enabled and graceful_restart = false indicates graceful restart is disabled. This is deprecated field, use graceful_restart_mode instead.   # noqa: E501

        :return: The graceful_restart of this BgpNeighborStatus.  # noqa: E501
        :rtype: bool
        """
        return self._graceful_restart

    @graceful_restart.setter
    def graceful_restart(self, graceful_restart):
        """Sets the graceful_restart of this BgpNeighborStatus.

        Current state of graceful restart where graceful_restart = true indicates graceful restart is enabled and graceful_restart = false indicates graceful restart is disabled. This is deprecated field, use graceful_restart_mode instead.   # noqa: E501

        :param graceful_restart: The graceful_restart of this BgpNeighborStatus.  # noqa: E501
        :type: bool
        """

        self._graceful_restart = graceful_restart

    @property
    def graceful_restart_mode(self):
        """Gets the graceful_restart_mode of this BgpNeighborStatus.  # noqa: E501

        Current state of graceful restart of BGP neighbor. Possible values are - 1. GR_AND_HELPER - Graceful restart with Helper 2. HELPER_ONLY - Helper only 3. DISABLE - Disabled   # noqa: E501

        :return: The graceful_restart_mode of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._graceful_restart_mode

    @graceful_restart_mode.setter
    def graceful_restart_mode(self, graceful_restart_mode):
        """Sets the graceful_restart_mode of this BgpNeighborStatus.

        Current state of graceful restart of BGP neighbor. Possible values are - 1. GR_AND_HELPER - Graceful restart with Helper 2. HELPER_ONLY - Helper only 3. DISABLE - Disabled   # noqa: E501

        :param graceful_restart_mode: The graceful_restart_mode of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """

        self._graceful_restart_mode = graceful_restart_mode

    @property
    def connection_drop_count(self):
        """Gets the connection_drop_count of this BgpNeighborStatus.  # noqa: E501

        Count of connection drop  # noqa: E501

        :return: The connection_drop_count of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._connection_drop_count

    @connection_drop_count.setter
    def connection_drop_count(self, connection_drop_count):
        """Sets the connection_drop_count of this BgpNeighborStatus.

        Count of connection drop  # noqa: E501

        :param connection_drop_count: The connection_drop_count of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._connection_drop_count = connection_drop_count

    @property
    def remote_port(self):
        """Gets the remote_port of this BgpNeighborStatus.  # noqa: E501

        TCP port number of remote BGP Connection  # noqa: E501

        :return: The remote_port of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this BgpNeighborStatus.

        TCP port number of remote BGP Connection  # noqa: E501

        :param remote_port: The remote_port of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._remote_port = remote_port

    @property
    def total_in_prefix_count(self):
        """Gets the total_in_prefix_count of this BgpNeighborStatus.  # noqa: E501

        Sum of in prefixes counts across all address families.  # noqa: E501

        :return: The total_in_prefix_count of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._total_in_prefix_count

    @total_in_prefix_count.setter
    def total_in_prefix_count(self, total_in_prefix_count):
        """Sets the total_in_prefix_count of this BgpNeighborStatus.

        Sum of in prefixes counts across all address families.  # noqa: E501

        :param total_in_prefix_count: The total_in_prefix_count of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._total_in_prefix_count = total_in_prefix_count

    @property
    def remote_site(self):
        """Gets the remote_site of this BgpNeighborStatus.  # noqa: E501


        :return: The remote_site of this BgpNeighborStatus.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._remote_site

    @remote_site.setter
    def remote_site(self, remote_site):
        """Sets the remote_site of this BgpNeighborStatus.


        :param remote_site: The remote_site of this BgpNeighborStatus.  # noqa: E501
        :type: ResourceReference
        """

        self._remote_site = remote_site

    @property
    def transport_node(self):
        """Gets the transport_node of this BgpNeighborStatus.  # noqa: E501


        :return: The transport_node of this BgpNeighborStatus.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._transport_node

    @transport_node.setter
    def transport_node(self, transport_node):
        """Sets the transport_node of this BgpNeighborStatus.


        :param transport_node: The transport_node of this BgpNeighborStatus.  # noqa: E501
        :type: ResourceReference
        """

        self._transport_node = transport_node

    @property
    def local_port(self):
        """Gets the local_port of this BgpNeighborStatus.  # noqa: E501

        TCP port number of Local BGP connection  # noqa: E501

        :return: The local_port of this BgpNeighborStatus.  # noqa: E501
        :rtype: int
        """
        return self._local_port

    @local_port.setter
    def local_port(self, local_port):
        """Sets the local_port of this BgpNeighborStatus.

        TCP port number of Local BGP connection  # noqa: E501

        :param local_port: The local_port of this BgpNeighborStatus.  # noqa: E501
        :type: int
        """

        self._local_port = local_port

    @property
    def remote_as_number(self):
        """Gets the remote_as_number of this BgpNeighborStatus.  # noqa: E501

        AS number of the BGP neighbor  # noqa: E501

        :return: The remote_as_number of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._remote_as_number

    @remote_as_number.setter
    def remote_as_number(self, remote_as_number):
        """Sets the remote_as_number of this BgpNeighborStatus.

        AS number of the BGP neighbor  # noqa: E501

        :param remote_as_number: The remote_as_number of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """

        self._remote_as_number = remote_as_number

    @property
    def announced_capabilities(self):
        """Gets the announced_capabilities of this BgpNeighborStatus.  # noqa: E501

        BGP capabilities sent to BGP neighbor.  # noqa: E501

        :return: The announced_capabilities of this BgpNeighborStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._announced_capabilities

    @announced_capabilities.setter
    def announced_capabilities(self, announced_capabilities):
        """Sets the announced_capabilities of this BgpNeighborStatus.

        BGP capabilities sent to BGP neighbor.  # noqa: E501

        :param announced_capabilities: The announced_capabilities of this BgpNeighborStatus.  # noqa: E501
        :type: list[str]
        """

        self._announced_capabilities = announced_capabilities

    @property
    def negotiated_capability(self):
        """Gets the negotiated_capability of this BgpNeighborStatus.  # noqa: E501

        BGP capabilities negotiated with BGP neighbor.  # noqa: E501

        :return: The negotiated_capability of this BgpNeighborStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._negotiated_capability

    @negotiated_capability.setter
    def negotiated_capability(self, negotiated_capability):
        """Sets the negotiated_capability of this BgpNeighborStatus.

        BGP capabilities negotiated with BGP neighbor.  # noqa: E501

        :param negotiated_capability: The negotiated_capability of this BgpNeighborStatus.  # noqa: E501
        :type: list[str]
        """

        self._negotiated_capability = negotiated_capability

    @property
    def address_families(self):
        """Gets the address_families of this BgpNeighborStatus.  # noqa: E501

        Address families of BGP neighbor  # noqa: E501

        :return: The address_families of this BgpNeighborStatus.  # noqa: E501
        :rtype: list[BgpAddressFamily]
        """
        return self._address_families

    @address_families.setter
    def address_families(self, address_families):
        """Sets the address_families of this BgpNeighborStatus.

        Address families of BGP neighbor  # noqa: E501

        :param address_families: The address_families of this BgpNeighborStatus.  # noqa: E501
        :type: list[BgpAddressFamily]
        """

        self._address_families = address_families

    @property
    def source_address(self):
        """Gets the source_address of this BgpNeighborStatus.  # noqa: E501

        The Ip address of logical port  # noqa: E501

        :return: The source_address of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._source_address

    @source_address.setter
    def source_address(self, source_address):
        """Sets the source_address of this BgpNeighborStatus.

        The Ip address of logical port  # noqa: E501

        :param source_address: The source_address of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """

        self._source_address = source_address

    @property
    def neighbor_address(self):
        """Gets the neighbor_address of this BgpNeighborStatus.  # noqa: E501

        The IP of the BGP neighbor  # noqa: E501

        :return: The neighbor_address of this BgpNeighborStatus.  # noqa: E501
        :rtype: str
        """
        return self._neighbor_address

    @neighbor_address.setter
    def neighbor_address(self, neighbor_address):
        """Sets the neighbor_address of this BgpNeighborStatus.

        The IP of the BGP neighbor  # noqa: E501

        :param neighbor_address: The neighbor_address of this BgpNeighborStatus.  # noqa: E501
        :type: str
        """

        self._neighbor_address = neighbor_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BgpNeighborStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BgpNeighborStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
