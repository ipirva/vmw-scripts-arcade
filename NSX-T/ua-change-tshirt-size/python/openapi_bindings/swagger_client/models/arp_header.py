# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArpHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'op_code': 'str',
        'src_ip': 'str',
        'dst_ip': 'str'
    }

    attribute_map = {
        'op_code': 'op_code',
        'src_ip': 'src_ip',
        'dst_ip': 'dst_ip'
    }

    def __init__(self, op_code='ARP_REQUEST', src_ip=None, dst_ip=None):  # noqa: E501
        """ArpHeader - a model defined in Swagger"""  # noqa: E501
        self._op_code = None
        self._src_ip = None
        self._dst_ip = None
        self.discriminator = None
        self.op_code = op_code
        if src_ip is not None:
            self.src_ip = src_ip
        self.dst_ip = dst_ip

    @property
    def op_code(self):
        """Gets the op_code of this ArpHeader.  # noqa: E501

        This field specifies the nature of the Arp message being sent.  # noqa: E501

        :return: The op_code of this ArpHeader.  # noqa: E501
        :rtype: str
        """
        return self._op_code

    @op_code.setter
    def op_code(self, op_code):
        """Sets the op_code of this ArpHeader.

        This field specifies the nature of the Arp message being sent.  # noqa: E501

        :param op_code: The op_code of this ArpHeader.  # noqa: E501
        :type: str
        """
        if op_code is None:
            raise ValueError("Invalid value for `op_code`, must not be `None`")  # noqa: E501
        allowed_values = ["ARP_REQUEST", "ARP_REPLY"]  # noqa: E501
        if op_code not in allowed_values:
            raise ValueError(
                "Invalid value for `op_code` ({0}), must be one of {1}"  # noqa: E501
                .format(op_code, allowed_values)
            )

        self._op_code = op_code

    @property
    def src_ip(self):
        """Gets the src_ip of this ArpHeader.  # noqa: E501

        This field specifies the IP address of the sender. If omitted, the src_ip is set to 0.0.0.0.  # noqa: E501

        :return: The src_ip of this ArpHeader.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this ArpHeader.

        This field specifies the IP address of the sender. If omitted, the src_ip is set to 0.0.0.0.  # noqa: E501

        :param src_ip: The src_ip of this ArpHeader.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def dst_ip(self):
        """Gets the dst_ip of this ArpHeader.  # noqa: E501

        The destination IP address  # noqa: E501

        :return: The dst_ip of this ArpHeader.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this ArpHeader.

        The destination IP address  # noqa: E501

        :param dst_ip: The dst_ip of this ArpHeader.  # noqa: E501
        :type: str
        """
        if dst_ip is None:
            raise ValueError("Invalid value for `dst_ip`, must not be `None`")  # noqa: E501

        self._dst_ip = dst_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArpHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArpHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
