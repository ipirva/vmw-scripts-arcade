# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.filter_widget_configuration import FilterWidgetConfiguration  # noqa: F401,E501

class DropdownFilterWidgetConfiguration(FilterWidgetConfiguration):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_value': 'str',
        'static_filters': 'list[StaticFilter]',
        'dropdown_item': 'DropdownItem',
        'static_filter_condition': 'str',
        'placeholder_msg': 'str'
    }
    if hasattr(FilterWidgetConfiguration, "swagger_types"):
        swagger_types.update(FilterWidgetConfiguration.swagger_types)

    attribute_map = {
        'default_value': 'default_value',
        'static_filters': 'static_filters',
        'dropdown_item': 'dropdown_item',
        'static_filter_condition': 'static_filter_condition',
        'placeholder_msg': 'placeholder_msg'
    }
    if hasattr(FilterWidgetConfiguration, "attribute_map"):
        attribute_map.update(FilterWidgetConfiguration.attribute_map)

    def __init__(self, default_value=None, static_filters=None, dropdown_item=None, static_filter_condition=None, placeholder_msg=None, *args, **kwargs):  # noqa: E501
        """DropdownFilterWidgetConfiguration - a model defined in Swagger"""  # noqa: E501
        self._default_value = None
        self._static_filters = None
        self._dropdown_item = None
        self._static_filter_condition = None
        self._placeholder_msg = None
        self.discriminator = None
        if default_value is not None:
            self.default_value = default_value
        if static_filters is not None:
            self.static_filters = static_filters
        self.dropdown_item = dropdown_item
        if static_filter_condition is not None:
            self.static_filter_condition = static_filter_condition
        if placeholder_msg is not None:
            self.placeholder_msg = placeholder_msg
        FilterWidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def default_value(self):
        """Gets the default_value of this DropdownFilterWidgetConfiguration.  # noqa: E501

        Expression to specify default value of filter.  # noqa: E501

        :return: The default_value of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this DropdownFilterWidgetConfiguration.

        Expression to specify default value of filter.  # noqa: E501

        :param default_value: The default_value of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def static_filters(self):
        """Gets the static_filters of this DropdownFilterWidgetConfiguration.  # noqa: E501

        Additional static items to be added in dropdown filter. Example can be 'ALL'.  # noqa: E501

        :return: The static_filters of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :rtype: list[StaticFilter]
        """
        return self._static_filters

    @static_filters.setter
    def static_filters(self, static_filters):
        """Sets the static_filters of this DropdownFilterWidgetConfiguration.

        Additional static items to be added in dropdown filter. Example can be 'ALL'.  # noqa: E501

        :param static_filters: The static_filters of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :type: list[StaticFilter]
        """

        self._static_filters = static_filters

    @property
    def dropdown_item(self):
        """Gets the dropdown_item of this DropdownFilterWidgetConfiguration.  # noqa: E501


        :return: The dropdown_item of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :rtype: DropdownItem
        """
        return self._dropdown_item

    @dropdown_item.setter
    def dropdown_item(self, dropdown_item):
        """Sets the dropdown_item of this DropdownFilterWidgetConfiguration.


        :param dropdown_item: The dropdown_item of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :type: DropdownItem
        """
        if dropdown_item is None:
            raise ValueError("Invalid value for `dropdown_item`, must not be `None`")  # noqa: E501

        self._dropdown_item = dropdown_item

    @property
    def static_filter_condition(self):
        """Gets the static_filter_condition of this DropdownFilterWidgetConfiguration.  # noqa: E501

        If the condition is met then the static filter will be added. If no condition is provided, then the static filters will be applied unconditionally.  # noqa: E501

        :return: The static_filter_condition of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._static_filter_condition

    @static_filter_condition.setter
    def static_filter_condition(self, static_filter_condition):
        """Sets the static_filter_condition of this DropdownFilterWidgetConfiguration.

        If the condition is met then the static filter will be added. If no condition is provided, then the static filters will be applied unconditionally.  # noqa: E501

        :param static_filter_condition: The static_filter_condition of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._static_filter_condition = static_filter_condition

    @property
    def placeholder_msg(self):
        """Gets the placeholder_msg of this DropdownFilterWidgetConfiguration.  # noqa: E501

        Placeholder message to be displayed in dropdown filter.  # noqa: E501

        :return: The placeholder_msg of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._placeholder_msg

    @placeholder_msg.setter
    def placeholder_msg(self, placeholder_msg):
        """Sets the placeholder_msg of this DropdownFilterWidgetConfiguration.

        Placeholder message to be displayed in dropdown filter.  # noqa: E501

        :param placeholder_msg: The placeholder_msg of this DropdownFilterWidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._placeholder_msg = placeholder_msg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DropdownFilterWidgetConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DropdownFilterWidgetConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
