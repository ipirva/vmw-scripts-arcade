# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeatureSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_list': 'list[str]',
        'require_all_permissions': 'bool'
    }

    attribute_map = {
        'feature_list': 'feature_list',
        'require_all_permissions': 'require_all_permissions'
    }

    def __init__(self, feature_list=None, require_all_permissions=None):  # noqa: E501
        """FeatureSet - a model defined in Swagger"""  # noqa: E501
        self._feature_list = None
        self._require_all_permissions = None
        self.discriminator = None
        if feature_list is not None:
            self.feature_list = feature_list
        if require_all_permissions is not None:
            self.require_all_permissions = require_all_permissions

    @property
    def feature_list(self):
        """Gets the feature_list of this FeatureSet.  # noqa: E501

        List of features required for to view widget.  # noqa: E501

        :return: The feature_list of this FeatureSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_list

    @feature_list.setter
    def feature_list(self, feature_list):
        """Sets the feature_list of this FeatureSet.

        List of features required for to view widget.  # noqa: E501

        :param feature_list: The feature_list of this FeatureSet.  # noqa: E501
        :type: list[str]
        """

        self._feature_list = feature_list

    @property
    def require_all_permissions(self):
        """Gets the require_all_permissions of this FeatureSet.  # noqa: E501

        Flag for specifying if permission to all features is required If set to false, then if there is permission for any of the feature from feature list, widget will be available.  # noqa: E501

        :return: The require_all_permissions of this FeatureSet.  # noqa: E501
        :rtype: bool
        """
        return self._require_all_permissions

    @require_all_permissions.setter
    def require_all_permissions(self, require_all_permissions):
        """Sets the require_all_permissions of this FeatureSet.

        Flag for specifying if permission to all features is required If set to false, then if there is permission for any of the feature from feature list, widget will be available.  # noqa: E501

        :param require_all_permissions: The require_all_permissions of this FeatureSet.  # noqa: E501
        :type: bool
        """

        self._require_all_permissions = require_all_permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
