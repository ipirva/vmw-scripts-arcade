# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class IDSEventsSummary(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_occurence': 'int',
        'latest_occurence': 'int',
        'total_count': 'int',
        'user_details': 'object',
        'vm_details': 'object',
        'is_rule_valid': 'bool',
        'signature_metadata': 'object',
        'idsflow_details': 'object',
        'signature_id': 'int',
        'rule_id': 'int',
        'is_ongoing': 'bool',
        'affected_vm_count': 'int',
        'resource_type': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'first_occurence': 'first_occurence',
        'latest_occurence': 'latest_occurence',
        'total_count': 'total_count',
        'user_details': 'user_details',
        'vm_details': 'vm_details',
        'is_rule_valid': 'is_rule_valid',
        'signature_metadata': 'signature_metadata',
        'idsflow_details': 'idsflow_details',
        'signature_id': 'signature_id',
        'rule_id': 'rule_id',
        'is_ongoing': 'is_ongoing',
        'affected_vm_count': 'affected_vm_count',
        'resource_type': 'resource_type'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, first_occurence=None, latest_occurence=None, total_count=None, user_details=None, vm_details=None, is_rule_valid=None, signature_metadata=None, idsflow_details=None, signature_id=None, rule_id=None, is_ongoing=None, affected_vm_count=None, resource_type=None, *args, **kwargs):  # noqa: E501
        """IDSEventsSummary - a model defined in Swagger"""  # noqa: E501
        self._first_occurence = None
        self._latest_occurence = None
        self._total_count = None
        self._user_details = None
        self._vm_details = None
        self._is_rule_valid = None
        self._signature_metadata = None
        self._idsflow_details = None
        self._signature_id = None
        self._rule_id = None
        self._is_ongoing = None
        self._affected_vm_count = None
        self._resource_type = None
        self.discriminator = None
        if first_occurence is not None:
            self.first_occurence = first_occurence
        if latest_occurence is not None:
            self.latest_occurence = latest_occurence
        if total_count is not None:
            self.total_count = total_count
        if user_details is not None:
            self.user_details = user_details
        if vm_details is not None:
            self.vm_details = vm_details
        if is_rule_valid is not None:
            self.is_rule_valid = is_rule_valid
        if signature_metadata is not None:
            self.signature_metadata = signature_metadata
        if idsflow_details is not None:
            self.idsflow_details = idsflow_details
        if signature_id is not None:
            self.signature_id = signature_id
        if rule_id is not None:
            self.rule_id = rule_id
        if is_ongoing is not None:
            self.is_ongoing = is_ongoing
        if affected_vm_count is not None:
            self.affected_vm_count = affected_vm_count
        if resource_type is not None:
            self.resource_type = resource_type
        Resource.__init__(self, *args, **kwargs)

    @property
    def first_occurence(self):
        """Gets the first_occurence of this IDSEventsSummary.  # noqa: E501

        First occurence of the intrusion, in epoch milliseconds.  # noqa: E501

        :return: The first_occurence of this IDSEventsSummary.  # noqa: E501
        :rtype: int
        """
        return self._first_occurence

    @first_occurence.setter
    def first_occurence(self, first_occurence):
        """Sets the first_occurence of this IDSEventsSummary.

        First occurence of the intrusion, in epoch milliseconds.  # noqa: E501

        :param first_occurence: The first_occurence of this IDSEventsSummary.  # noqa: E501
        :type: int
        """

        self._first_occurence = first_occurence

    @property
    def latest_occurence(self):
        """Gets the latest_occurence of this IDSEventsSummary.  # noqa: E501

        Latest occurence of the intrusion, in epoch milliseconds.  # noqa: E501

        :return: The latest_occurence of this IDSEventsSummary.  # noqa: E501
        :rtype: int
        """
        return self._latest_occurence

    @latest_occurence.setter
    def latest_occurence(self, latest_occurence):
        """Sets the latest_occurence of this IDSEventsSummary.

        Latest occurence of the intrusion, in epoch milliseconds.  # noqa: E501

        :param latest_occurence: The latest_occurence of this IDSEventsSummary.  # noqa: E501
        :type: int
        """

        self._latest_occurence = latest_occurence

    @property
    def total_count(self):
        """Gets the total_count of this IDSEventsSummary.  # noqa: E501

        Number of times this particular signature was detected.  # noqa: E501

        :return: The total_count of this IDSEventsSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this IDSEventsSummary.

        Number of times this particular signature was detected.  # noqa: E501

        :param total_count: The total_count of this IDSEventsSummary.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def user_details(self):
        """Gets the user_details of this IDSEventsSummary.  # noqa: E501

        List of users logged into VMs on which a particular signature was detected.  # noqa: E501

        :return: The user_details of this IDSEventsSummary.  # noqa: E501
        :rtype: object
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this IDSEventsSummary.

        List of users logged into VMs on which a particular signature was detected.  # noqa: E501

        :param user_details: The user_details of this IDSEventsSummary.  # noqa: E501
        :type: object
        """

        self._user_details = user_details

    @property
    def vm_details(self):
        """Gets the vm_details of this IDSEventsSummary.  # noqa: E501

        List of VMs on which a particular signature was detected with the count.  # noqa: E501

        :return: The vm_details of this IDSEventsSummary.  # noqa: E501
        :rtype: object
        """
        return self._vm_details

    @vm_details.setter
    def vm_details(self, vm_details):
        """Sets the vm_details of this IDSEventsSummary.

        List of VMs on which a particular signature was detected with the count.  # noqa: E501

        :param vm_details: The vm_details of this IDSEventsSummary.  # noqa: E501
        :type: object
        """

        self._vm_details = vm_details

    @property
    def is_rule_valid(self):
        """Gets the is_rule_valid of this IDSEventsSummary.  # noqa: E501

        Indicates if the rule id is valid or not.  # noqa: E501

        :return: The is_rule_valid of this IDSEventsSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_rule_valid

    @is_rule_valid.setter
    def is_rule_valid(self, is_rule_valid):
        """Sets the is_rule_valid of this IDSEventsSummary.

        Indicates if the rule id is valid or not.  # noqa: E501

        :param is_rule_valid: The is_rule_valid of this IDSEventsSummary.  # noqa: E501
        :type: bool
        """

        self._is_rule_valid = is_rule_valid

    @property
    def signature_metadata(self):
        """Gets the signature_metadata of this IDSEventsSummary.  # noqa: E501

        Metadata about the detected signature including name, id, severity, product affected, protocol etc.  # noqa: E501

        :return: The signature_metadata of this IDSEventsSummary.  # noqa: E501
        :rtype: object
        """
        return self._signature_metadata

    @signature_metadata.setter
    def signature_metadata(self, signature_metadata):
        """Sets the signature_metadata of this IDSEventsSummary.

        Metadata about the detected signature including name, id, severity, product affected, protocol etc.  # noqa: E501

        :param signature_metadata: The signature_metadata of this IDSEventsSummary.  # noqa: E501
        :type: object
        """

        self._signature_metadata = signature_metadata

    @property
    def idsflow_details(self):
        """Gets the idsflow_details of this IDSEventsSummary.  # noqa: E501

        IDS event flow data specific to each IDS event. The data includes source ip, source port, destination ip, destination port, and protocol.  # noqa: E501

        :return: The idsflow_details of this IDSEventsSummary.  # noqa: E501
        :rtype: object
        """
        return self._idsflow_details

    @idsflow_details.setter
    def idsflow_details(self, idsflow_details):
        """Sets the idsflow_details of this IDSEventsSummary.

        IDS event flow data specific to each IDS event. The data includes source ip, source port, destination ip, destination port, and protocol.  # noqa: E501

        :param idsflow_details: The idsflow_details of this IDSEventsSummary.  # noqa: E501
        :type: object
        """

        self._idsflow_details = idsflow_details

    @property
    def signature_id(self):
        """Gets the signature_id of this IDSEventsSummary.  # noqa: E501

        Signature ID pertaining to the detected intrusion.  # noqa: E501

        :return: The signature_id of this IDSEventsSummary.  # noqa: E501
        :rtype: int
        """
        return self._signature_id

    @signature_id.setter
    def signature_id(self, signature_id):
        """Sets the signature_id of this IDSEventsSummary.

        Signature ID pertaining to the detected intrusion.  # noqa: E501

        :param signature_id: The signature_id of this IDSEventsSummary.  # noqa: E501
        :type: int
        """

        self._signature_id = signature_id

    @property
    def rule_id(self):
        """Gets the rule_id of this IDSEventsSummary.  # noqa: E501

        The IDS Rule id that detected this particular intrusion.  # noqa: E501

        :return: The rule_id of this IDSEventsSummary.  # noqa: E501
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this IDSEventsSummary.

        The IDS Rule id that detected this particular intrusion.  # noqa: E501

        :param rule_id: The rule_id of this IDSEventsSummary.  # noqa: E501
        :type: int
        """

        self._rule_id = rule_id

    @property
    def is_ongoing(self):
        """Gets the is_ongoing of this IDSEventsSummary.  # noqa: E501

        Flag indicating an ongoing intrusion.  # noqa: E501

        :return: The is_ongoing of this IDSEventsSummary.  # noqa: E501
        :rtype: bool
        """
        return self._is_ongoing

    @is_ongoing.setter
    def is_ongoing(self, is_ongoing):
        """Sets the is_ongoing of this IDSEventsSummary.

        Flag indicating an ongoing intrusion.  # noqa: E501

        :param is_ongoing: The is_ongoing of this IDSEventsSummary.  # noqa: E501
        :type: bool
        """

        self._is_ongoing = is_ongoing

    @property
    def affected_vm_count(self):
        """Gets the affected_vm_count of this IDSEventsSummary.  # noqa: E501

        Count of VMs on which a particular signature was detected.  # noqa: E501

        :return: The affected_vm_count of this IDSEventsSummary.  # noqa: E501
        :rtype: int
        """
        return self._affected_vm_count

    @affected_vm_count.setter
    def affected_vm_count(self, affected_vm_count):
        """Sets the affected_vm_count of this IDSEventsSummary.

        Count of VMs on which a particular signature was detected.  # noqa: E501

        :param affected_vm_count: The affected_vm_count of this IDSEventsSummary.  # noqa: E501
        :type: int
        """

        self._affected_vm_count = affected_vm_count

    @property
    def resource_type(self):
        """Gets the resource_type of this IDSEventsSummary.  # noqa: E501

        IDSEvent resource type.  # noqa: E501

        :return: The resource_type of this IDSEventsSummary.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this IDSEventsSummary.

        IDSEvent resource type.  # noqa: E501

        :param resource_type: The resource_type of this IDSEventsSummary.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IDSEventsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDSEventsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
