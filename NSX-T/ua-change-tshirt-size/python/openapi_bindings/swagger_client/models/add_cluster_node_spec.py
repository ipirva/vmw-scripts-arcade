# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddClusterNodeSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'controller_role_config': 'AddControllerNodeSpec',
        'display_name': 'str',
        'mgr_role_config': 'AddManagementNodeSpec'
    }

    attribute_map = {
        'external_id': 'external_id',
        'controller_role_config': 'controller_role_config',
        'display_name': 'display_name',
        'mgr_role_config': 'mgr_role_config'
    }

    def __init__(self, external_id=None, controller_role_config=None, display_name=None, mgr_role_config=None):  # noqa: E501
        """AddClusterNodeSpec - a model defined in Swagger"""  # noqa: E501
        self._external_id = None
        self._controller_role_config = None
        self._display_name = None
        self._mgr_role_config = None
        self.discriminator = None
        if external_id is not None:
            self.external_id = external_id
        if controller_role_config is not None:
            self.controller_role_config = controller_role_config
        if display_name is not None:
            self.display_name = display_name
        if mgr_role_config is not None:
            self.mgr_role_config = mgr_role_config

    @property
    def external_id(self):
        """Gets the external_id of this AddClusterNodeSpec.  # noqa: E501

        External identifier of the node  # noqa: E501

        :return: The external_id of this AddClusterNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AddClusterNodeSpec.

        External identifier of the node  # noqa: E501

        :param external_id: The external_id of this AddClusterNodeSpec.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def controller_role_config(self):
        """Gets the controller_role_config of this AddClusterNodeSpec.  # noqa: E501


        :return: The controller_role_config of this AddClusterNodeSpec.  # noqa: E501
        :rtype: AddControllerNodeSpec
        """
        return self._controller_role_config

    @controller_role_config.setter
    def controller_role_config(self, controller_role_config):
        """Sets the controller_role_config of this AddClusterNodeSpec.


        :param controller_role_config: The controller_role_config of this AddClusterNodeSpec.  # noqa: E501
        :type: AddControllerNodeSpec
        """

        self._controller_role_config = controller_role_config

    @property
    def display_name(self):
        """Gets the display_name of this AddClusterNodeSpec.  # noqa: E501

        Display name for the node  # noqa: E501

        :return: The display_name of this AddClusterNodeSpec.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AddClusterNodeSpec.

        Display name for the node  # noqa: E501

        :param display_name: The display_name of this AddClusterNodeSpec.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def mgr_role_config(self):
        """Gets the mgr_role_config of this AddClusterNodeSpec.  # noqa: E501


        :return: The mgr_role_config of this AddClusterNodeSpec.  # noqa: E501
        :rtype: AddManagementNodeSpec
        """
        return self._mgr_role_config

    @mgr_role_config.setter
    def mgr_role_config(self, mgr_role_config):
        """Sets the mgr_role_config of this AddClusterNodeSpec.


        :param mgr_role_config: The mgr_role_config of this AddClusterNodeSpec.  # noqa: E501
        :type: AddManagementNodeSpec
        """

        self._mgr_role_config = mgr_role_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddClusterNodeSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddClusterNodeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
