# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HaVipConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ha_vip_subnets': 'list[VIPSubnet]',
        'redundant_uplink_port_ids': 'list[str]',
        'enabled': 'bool'
    }

    attribute_map = {
        'ha_vip_subnets': 'ha_vip_subnets',
        'redundant_uplink_port_ids': 'redundant_uplink_port_ids',
        'enabled': 'enabled'
    }

    def __init__(self, ha_vip_subnets=None, redundant_uplink_port_ids=None, enabled=True):  # noqa: E501
        """HaVipConfig - a model defined in Swagger"""  # noqa: E501
        self._ha_vip_subnets = None
        self._redundant_uplink_port_ids = None
        self._enabled = None
        self.discriminator = None
        self.ha_vip_subnets = ha_vip_subnets
        self.redundant_uplink_port_ids = redundant_uplink_port_ids
        if enabled is not None:
            self.enabled = enabled

    @property
    def ha_vip_subnets(self):
        """Gets the ha_vip_subnets of this HaVipConfig.  # noqa: E501

        Array of IP address subnets which will be used as floating IP addresses. | Note - this configuration is applicable only for Active-Standby LogicalRouter. | For Active-Active LogicalRouter this configuration will be rejected.  # noqa: E501

        :return: The ha_vip_subnets of this HaVipConfig.  # noqa: E501
        :rtype: list[VIPSubnet]
        """
        return self._ha_vip_subnets

    @ha_vip_subnets.setter
    def ha_vip_subnets(self, ha_vip_subnets):
        """Sets the ha_vip_subnets of this HaVipConfig.

        Array of IP address subnets which will be used as floating IP addresses. | Note - this configuration is applicable only for Active-Standby LogicalRouter. | For Active-Active LogicalRouter this configuration will be rejected.  # noqa: E501

        :param ha_vip_subnets: The ha_vip_subnets of this HaVipConfig.  # noqa: E501
        :type: list[VIPSubnet]
        """
        if ha_vip_subnets is None:
            raise ValueError("Invalid value for `ha_vip_subnets`, must not be `None`")  # noqa: E501

        self._ha_vip_subnets = ha_vip_subnets

    @property
    def redundant_uplink_port_ids(self):
        """Gets the redundant_uplink_port_ids of this HaVipConfig.  # noqa: E501

        Identifiers of logical router uplink ports which are to be paired to provide | redundancy. Floating IP will be owned by one of these uplink ports (depending upon | which node is Active).  # noqa: E501

        :return: The redundant_uplink_port_ids of this HaVipConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._redundant_uplink_port_ids

    @redundant_uplink_port_ids.setter
    def redundant_uplink_port_ids(self, redundant_uplink_port_ids):
        """Sets the redundant_uplink_port_ids of this HaVipConfig.

        Identifiers of logical router uplink ports which are to be paired to provide | redundancy. Floating IP will be owned by one of these uplink ports (depending upon | which node is Active).  # noqa: E501

        :param redundant_uplink_port_ids: The redundant_uplink_port_ids of this HaVipConfig.  # noqa: E501
        :type: list[str]
        """
        if redundant_uplink_port_ids is None:
            raise ValueError("Invalid value for `redundant_uplink_port_ids`, must not be `None`")  # noqa: E501

        self._redundant_uplink_port_ids = redundant_uplink_port_ids

    @property
    def enabled(self):
        """Gets the enabled of this HaVipConfig.  # noqa: E501

        Flag to enable this ha vip config.  # noqa: E501

        :return: The enabled of this HaVipConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this HaVipConfig.

        Flag to enable this ha vip config.  # noqa: E501

        :param enabled: The enabled of this HaVipConfig.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HaVipConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HaVipConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
