# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPSecVPNSessionTrafficSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'traffic_counters': 'IPSecVPNTrafficCounters',
        'ipsec_vpn_session': 'ResourceReference'
    }

    attribute_map = {
        'traffic_counters': 'traffic_counters',
        'ipsec_vpn_session': 'ipsec_vpn_session'
    }

    def __init__(self, traffic_counters=None, ipsec_vpn_session=None):  # noqa: E501
        """IPSecVPNSessionTrafficSummary - a model defined in Swagger"""  # noqa: E501
        self._traffic_counters = None
        self._ipsec_vpn_session = None
        self.discriminator = None
        if traffic_counters is not None:
            self.traffic_counters = traffic_counters
        if ipsec_vpn_session is not None:
            self.ipsec_vpn_session = ipsec_vpn_session

    @property
    def traffic_counters(self):
        """Gets the traffic_counters of this IPSecVPNSessionTrafficSummary.  # noqa: E501


        :return: The traffic_counters of this IPSecVPNSessionTrafficSummary.  # noqa: E501
        :rtype: IPSecVPNTrafficCounters
        """
        return self._traffic_counters

    @traffic_counters.setter
    def traffic_counters(self, traffic_counters):
        """Sets the traffic_counters of this IPSecVPNSessionTrafficSummary.


        :param traffic_counters: The traffic_counters of this IPSecVPNSessionTrafficSummary.  # noqa: E501
        :type: IPSecVPNTrafficCounters
        """

        self._traffic_counters = traffic_counters

    @property
    def ipsec_vpn_session(self):
        """Gets the ipsec_vpn_session of this IPSecVPNSessionTrafficSummary.  # noqa: E501


        :return: The ipsec_vpn_session of this IPSecVPNSessionTrafficSummary.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._ipsec_vpn_session

    @ipsec_vpn_session.setter
    def ipsec_vpn_session(self, ipsec_vpn_session):
        """Sets the ipsec_vpn_session of this IPSecVPNSessionTrafficSummary.


        :param ipsec_vpn_session: The ipsec_vpn_session of this IPSecVPNSessionTrafficSummary.  # noqa: E501
        :type: ResourceReference
        """

        self._ipsec_vpn_session = ipsec_vpn_session

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNSessionTrafficSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNSessionTrafficSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
