# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceDeploymentSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_specs': 'list[SVMDeploymentSpec]',
        'nic_metadata_list': 'list[NicMetadata]',
        'deployment_template': 'list[DeploymentTemplate]',
        'svm_version': 'str'
    }

    attribute_map = {
        'deployment_specs': 'deployment_specs',
        'nic_metadata_list': 'nic_metadata_list',
        'deployment_template': 'deployment_template',
        'svm_version': 'svm_version'
    }

    def __init__(self, deployment_specs=None, nic_metadata_list=None, deployment_template=None, svm_version=None):  # noqa: E501
        """ServiceDeploymentSpec - a model defined in Swagger"""  # noqa: E501
        self._deployment_specs = None
        self._nic_metadata_list = None
        self._deployment_template = None
        self._svm_version = None
        self.discriminator = None
        if deployment_specs is not None:
            self.deployment_specs = deployment_specs
        if nic_metadata_list is not None:
            self.nic_metadata_list = nic_metadata_list
        self.deployment_template = deployment_template
        if svm_version is not None:
            self.svm_version = svm_version

    @property
    def deployment_specs(self):
        """Gets the deployment_specs of this ServiceDeploymentSpec.  # noqa: E501

        Deployment Specs holds information required to deploy the Service-VMs. i.e. OVF url where the partner Service-VM OVF is hosted. The host type on which the OVF can be deployed, Form factor to name a few.  # noqa: E501

        :return: The deployment_specs of this ServiceDeploymentSpec.  # noqa: E501
        :rtype: list[SVMDeploymentSpec]
        """
        return self._deployment_specs

    @deployment_specs.setter
    def deployment_specs(self, deployment_specs):
        """Sets the deployment_specs of this ServiceDeploymentSpec.

        Deployment Specs holds information required to deploy the Service-VMs. i.e. OVF url where the partner Service-VM OVF is hosted. The host type on which the OVF can be deployed, Form factor to name a few.  # noqa: E501

        :param deployment_specs: The deployment_specs of this ServiceDeploymentSpec.  # noqa: E501
        :type: list[SVMDeploymentSpec]
        """

        self._deployment_specs = deployment_specs

    @property
    def nic_metadata_list(self):
        """Gets the nic_metadata_list of this ServiceDeploymentSpec.  # noqa: E501

        NIC metadata associated with the deployment spec.  # noqa: E501

        :return: The nic_metadata_list of this ServiceDeploymentSpec.  # noqa: E501
        :rtype: list[NicMetadata]
        """
        return self._nic_metadata_list

    @nic_metadata_list.setter
    def nic_metadata_list(self, nic_metadata_list):
        """Sets the nic_metadata_list of this ServiceDeploymentSpec.

        NIC metadata associated with the deployment spec.  # noqa: E501

        :param nic_metadata_list: The nic_metadata_list of this ServiceDeploymentSpec.  # noqa: E501
        :type: list[NicMetadata]
        """

        self._nic_metadata_list = nic_metadata_list

    @property
    def deployment_template(self):
        """Gets the deployment_template of this ServiceDeploymentSpec.  # noqa: E501

        Deployment Template holds the attributes specific to partner for which the service is created. These attributes are opaque to NSX Manager.  # noqa: E501

        :return: The deployment_template of this ServiceDeploymentSpec.  # noqa: E501
        :rtype: list[DeploymentTemplate]
        """
        return self._deployment_template

    @deployment_template.setter
    def deployment_template(self, deployment_template):
        """Sets the deployment_template of this ServiceDeploymentSpec.

        Deployment Template holds the attributes specific to partner for which the service is created. These attributes are opaque to NSX Manager.  # noqa: E501

        :param deployment_template: The deployment_template of this ServiceDeploymentSpec.  # noqa: E501
        :type: list[DeploymentTemplate]
        """
        if deployment_template is None:
            raise ValueError("Invalid value for `deployment_template`, must not be `None`")  # noqa: E501

        self._deployment_template = deployment_template

    @property
    def svm_version(self):
        """Gets the svm_version of this ServiceDeploymentSpec.  # noqa: E501

        Partner needs to specify the Service VM version which will get deployed.  # noqa: E501

        :return: The svm_version of this ServiceDeploymentSpec.  # noqa: E501
        :rtype: str
        """
        return self._svm_version

    @svm_version.setter
    def svm_version(self, svm_version):
        """Sets the svm_version of this ServiceDeploymentSpec.

        Partner needs to specify the Service VM version which will get deployed.  # noqa: E501

        :param svm_version: The svm_version of this ServiceDeploymentSpec.  # noqa: E501
        :type: str
        """

        self._svm_version = svm_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDeploymentSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDeploymentSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
