# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class EdgeCluster(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_node_type': 'str',
        'members': 'list[EdgeClusterMember]',
        'node_rtep_ips': 'list[NodeRtepIpsConfig]',
        'cluster_profile_bindings': 'list[ClusterProfileTypeIdEntry]',
        'enable_inter_site_forwarding': 'bool',
        'allocation_rules': 'list[AllocationRule]',
        'deployment_type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'member_node_type': 'member_node_type',
        'members': 'members',
        'node_rtep_ips': 'node_rtep_ips',
        'cluster_profile_bindings': 'cluster_profile_bindings',
        'enable_inter_site_forwarding': 'enable_inter_site_forwarding',
        'allocation_rules': 'allocation_rules',
        'deployment_type': 'deployment_type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, member_node_type=None, members=None, node_rtep_ips=None, cluster_profile_bindings=None, enable_inter_site_forwarding=None, allocation_rules=None, deployment_type=None, *args, **kwargs):  # noqa: E501
        """EdgeCluster - a model defined in Swagger"""  # noqa: E501
        self._member_node_type = None
        self._members = None
        self._node_rtep_ips = None
        self._cluster_profile_bindings = None
        self._enable_inter_site_forwarding = None
        self._allocation_rules = None
        self._deployment_type = None
        self.discriminator = None
        if member_node_type is not None:
            self.member_node_type = member_node_type
        if members is not None:
            self.members = members
        if node_rtep_ips is not None:
            self.node_rtep_ips = node_rtep_ips
        if cluster_profile_bindings is not None:
            self.cluster_profile_bindings = cluster_profile_bindings
        if enable_inter_site_forwarding is not None:
            self.enable_inter_site_forwarding = enable_inter_site_forwarding
        if allocation_rules is not None:
            self.allocation_rules = allocation_rules
        if deployment_type is not None:
            self.deployment_type = deployment_type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def member_node_type(self):
        """Gets the member_node_type of this EdgeCluster.  # noqa: E501

        Edge cluster is homogenous collection of transport nodes. Hence all transport nodes of the cluster must be of same type. This readonly field shows the type of transport nodes.   # noqa: E501

        :return: The member_node_type of this EdgeCluster.  # noqa: E501
        :rtype: str
        """
        return self._member_node_type

    @member_node_type.setter
    def member_node_type(self, member_node_type):
        """Sets the member_node_type of this EdgeCluster.

        Edge cluster is homogenous collection of transport nodes. Hence all transport nodes of the cluster must be of same type. This readonly field shows the type of transport nodes.   # noqa: E501

        :param member_node_type: The member_node_type of this EdgeCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["EDGE_NODE", "PUBLIC_CLOUD_GATEWAY_NODE", "UNKNOWN"]  # noqa: E501
        if member_node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `member_node_type` ({0}), must be one of {1}"  # noqa: E501
                .format(member_node_type, allowed_values)
            )

        self._member_node_type = member_node_type

    @property
    def members(self):
        """Gets the members of this EdgeCluster.  # noqa: E501

        EdgeCluster only supports homogeneous members. These member should be backed by either EdgeNode or PublicCloudGatewayNode. TransportNode type of these nodes should be the same. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types.   # noqa: E501

        :return: The members of this EdgeCluster.  # noqa: E501
        :rtype: list[EdgeClusterMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this EdgeCluster.

        EdgeCluster only supports homogeneous members. These member should be backed by either EdgeNode or PublicCloudGatewayNode. TransportNode type of these nodes should be the same. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types.   # noqa: E501

        :param members: The members of this EdgeCluster.  # noqa: E501
        :type: list[EdgeClusterMember]
        """

        self._members = members

    @property
    def node_rtep_ips(self):
        """Gets the node_rtep_ips of this EdgeCluster.  # noqa: E501

        List of remote tunnel endpoint ipaddress configured on edge cluster for each transport node.  # noqa: E501

        :return: The node_rtep_ips of this EdgeCluster.  # noqa: E501
        :rtype: list[NodeRtepIpsConfig]
        """
        return self._node_rtep_ips

    @node_rtep_ips.setter
    def node_rtep_ips(self, node_rtep_ips):
        """Sets the node_rtep_ips of this EdgeCluster.

        List of remote tunnel endpoint ipaddress configured on edge cluster for each transport node.  # noqa: E501

        :param node_rtep_ips: The node_rtep_ips of this EdgeCluster.  # noqa: E501
        :type: list[NodeRtepIpsConfig]
        """

        self._node_rtep_ips = node_rtep_ips

    @property
    def cluster_profile_bindings(self):
        """Gets the cluster_profile_bindings of this EdgeCluster.  # noqa: E501

        Edge cluster profile bindings  # noqa: E501

        :return: The cluster_profile_bindings of this EdgeCluster.  # noqa: E501
        :rtype: list[ClusterProfileTypeIdEntry]
        """
        return self._cluster_profile_bindings

    @cluster_profile_bindings.setter
    def cluster_profile_bindings(self, cluster_profile_bindings):
        """Sets the cluster_profile_bindings of this EdgeCluster.

        Edge cluster profile bindings  # noqa: E501

        :param cluster_profile_bindings: The cluster_profile_bindings of this EdgeCluster.  # noqa: E501
        :type: list[ClusterProfileTypeIdEntry]
        """

        self._cluster_profile_bindings = cluster_profile_bindings

    @property
    def enable_inter_site_forwarding(self):
        """Gets the enable_inter_site_forwarding of this EdgeCluster.  # noqa: E501

        Flag should be only use in federation for inter site l2 and l3 forwarding. Before enabling this flag, all the edge cluster members must have remote tunnel endpoint configured. TIER0/TIER1 logical routers managed by GM must be associated with edge cluster which has inter-site forwarding enabled.   # noqa: E501

        :return: The enable_inter_site_forwarding of this EdgeCluster.  # noqa: E501
        :rtype: bool
        """
        return self._enable_inter_site_forwarding

    @enable_inter_site_forwarding.setter
    def enable_inter_site_forwarding(self, enable_inter_site_forwarding):
        """Sets the enable_inter_site_forwarding of this EdgeCluster.

        Flag should be only use in federation for inter site l2 and l3 forwarding. Before enabling this flag, all the edge cluster members must have remote tunnel endpoint configured. TIER0/TIER1 logical routers managed by GM must be associated with edge cluster which has inter-site forwarding enabled.   # noqa: E501

        :param enable_inter_site_forwarding: The enable_inter_site_forwarding of this EdgeCluster.  # noqa: E501
        :type: bool
        """

        self._enable_inter_site_forwarding = enable_inter_site_forwarding

    @property
    def allocation_rules(self):
        """Gets the allocation_rules of this EdgeCluster.  # noqa: E501

        Set of allocation rules and respected action for auto placement of logical router, DHCP and MDProxy on edge cluster members.   # noqa: E501

        :return: The allocation_rules of this EdgeCluster.  # noqa: E501
        :rtype: list[AllocationRule]
        """
        return self._allocation_rules

    @allocation_rules.setter
    def allocation_rules(self, allocation_rules):
        """Sets the allocation_rules of this EdgeCluster.

        Set of allocation rules and respected action for auto placement of logical router, DHCP and MDProxy on edge cluster members.   # noqa: E501

        :param allocation_rules: The allocation_rules of this EdgeCluster.  # noqa: E501
        :type: list[AllocationRule]
        """

        self._allocation_rules = allocation_rules

    @property
    def deployment_type(self):
        """Gets the deployment_type of this EdgeCluster.  # noqa: E501

        This field is a readonly field which shows the deployment_type of members. It returns UNKNOWN if there are no members, and returns VIRTUAL_MACHINE| PHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE. It returns HYBRID if the cluster contains edge members of both types VIRTUAL_MACHINE and PHYSICAL_MACHINE.   # noqa: E501

        :return: The deployment_type of this EdgeCluster.  # noqa: E501
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this EdgeCluster.

        This field is a readonly field which shows the deployment_type of members. It returns UNKNOWN if there are no members, and returns VIRTUAL_MACHINE| PHYSICAL_MACHINE if all edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE. It returns HYBRID if the cluster contains edge members of both types VIRTUAL_MACHINE and PHYSICAL_MACHINE.   # noqa: E501

        :param deployment_type: The deployment_type of this EdgeCluster.  # noqa: E501
        :type: str
        """
        allowed_values = ["VIRTUAL_MACHINE", "PHYSICAL_MACHINE", "UNKNOWN"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeCluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
