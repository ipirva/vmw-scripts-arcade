# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class DirectoryGroupMember(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_id': 'str',
        'member_group_distinguished_name': 'str',
        'member_group_id': 'str',
        'group_distinguished_name': 'str',
        'nested': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'group_id': 'group_id',
        'member_group_distinguished_name': 'member_group_distinguished_name',
        'member_group_id': 'member_group_id',
        'group_distinguished_name': 'group_distinguished_name',
        'nested': 'nested'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, group_id=None, member_group_distinguished_name=None, member_group_id=None, group_distinguished_name=None, nested=None, *args, **kwargs):  # noqa: E501
        """DirectoryGroupMember - a model defined in Swagger"""  # noqa: E501
        self._group_id = None
        self._member_group_distinguished_name = None
        self._member_group_id = None
        self._group_distinguished_name = None
        self._nested = None
        self.discriminator = None
        self.group_id = group_id
        self.member_group_distinguished_name = member_group_distinguished_name
        self.member_group_id = member_group_id
        self.group_distinguished_name = group_distinguished_name
        self.nested = nested
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def group_id(self):
        """Gets the group_id of this DirectoryGroupMember.  # noqa: E501

        Directory group id this group member belongs to  # noqa: E501

        :return: The group_id of this DirectoryGroupMember.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DirectoryGroupMember.

        Directory group id this group member belongs to  # noqa: E501

        :param group_id: The group_id of this DirectoryGroupMember.  # noqa: E501
        :type: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def member_group_distinguished_name(self):
        """Gets the member_group_distinguished_name of this DirectoryGroupMember.  # noqa: E501

        Directory group name this group member owns  # noqa: E501

        :return: The member_group_distinguished_name of this DirectoryGroupMember.  # noqa: E501
        :rtype: str
        """
        return self._member_group_distinguished_name

    @member_group_distinguished_name.setter
    def member_group_distinguished_name(self, member_group_distinguished_name):
        """Sets the member_group_distinguished_name of this DirectoryGroupMember.

        Directory group name this group member owns  # noqa: E501

        :param member_group_distinguished_name: The member_group_distinguished_name of this DirectoryGroupMember.  # noqa: E501
        :type: str
        """
        if member_group_distinguished_name is None:
            raise ValueError("Invalid value for `member_group_distinguished_name`, must not be `None`")  # noqa: E501

        self._member_group_distinguished_name = member_group_distinguished_name

    @property
    def member_group_id(self):
        """Gets the member_group_id of this DirectoryGroupMember.  # noqa: E501

        Directory group id this group member owns  # noqa: E501

        :return: The member_group_id of this DirectoryGroupMember.  # noqa: E501
        :rtype: str
        """
        return self._member_group_id

    @member_group_id.setter
    def member_group_id(self, member_group_id):
        """Sets the member_group_id of this DirectoryGroupMember.

        Directory group id this group member owns  # noqa: E501

        :param member_group_id: The member_group_id of this DirectoryGroupMember.  # noqa: E501
        :type: str
        """
        if member_group_id is None:
            raise ValueError("Invalid value for `member_group_id`, must not be `None`")  # noqa: E501

        self._member_group_id = member_group_id

    @property
    def group_distinguished_name(self):
        """Gets the group_distinguished_name of this DirectoryGroupMember.  # noqa: E501

        Directory group distinguished name this group member belongs to.  # noqa: E501

        :return: The group_distinguished_name of this DirectoryGroupMember.  # noqa: E501
        :rtype: str
        """
        return self._group_distinguished_name

    @group_distinguished_name.setter
    def group_distinguished_name(self, group_distinguished_name):
        """Sets the group_distinguished_name of this DirectoryGroupMember.

        Directory group distinguished name this group member belongs to.  # noqa: E501

        :param group_distinguished_name: The group_distinguished_name of this DirectoryGroupMember.  # noqa: E501
        :type: str
        """
        if group_distinguished_name is None:
            raise ValueError("Invalid value for `group_distinguished_name`, must not be `None`")  # noqa: E501

        self._group_distinguished_name = group_distinguished_name

    @property
    def nested(self):
        """Gets the nested of this DirectoryGroupMember.  # noqa: E501

        Whether this member group is a directory member of the parent group speicified by group_id or a nested member group which parent group is also member group of the parent group speicified by group_id.  # noqa: E501

        :return: The nested of this DirectoryGroupMember.  # noqa: E501
        :rtype: bool
        """
        return self._nested

    @nested.setter
    def nested(self, nested):
        """Sets the nested of this DirectoryGroupMember.

        Whether this member group is a directory member of the parent group speicified by group_id or a nested member group which parent group is also member group of the parent group speicified by group_id.  # noqa: E501

        :param nested: The nested of this DirectoryGroupMember.  # noqa: E501
        :type: bool
        """
        if nested is None:
            raise ValueError("Invalid value for `nested`, must not be `None`")  # noqa: E501

        self._nested = nested

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryGroupMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryGroupMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
