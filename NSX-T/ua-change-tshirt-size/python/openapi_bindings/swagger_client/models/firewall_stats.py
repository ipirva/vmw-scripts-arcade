# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class FirewallStats(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_session_count': 'int',
        'packet_count': 'int',
        'popularity_index': 'int',
        'max_session_count': 'int',
        'byte_count': 'int',
        'max_popularity_index': 'int',
        'hit_count': 'int',
        'session_count': 'int',
        'rule_id': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'total_session_count': 'total_session_count',
        'packet_count': 'packet_count',
        'popularity_index': 'popularity_index',
        'max_session_count': 'max_session_count',
        'byte_count': 'byte_count',
        'max_popularity_index': 'max_popularity_index',
        'hit_count': 'hit_count',
        'session_count': 'session_count',
        'rule_id': 'rule_id'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, total_session_count=None, packet_count=None, popularity_index=None, max_session_count=None, byte_count=None, max_popularity_index=None, hit_count=None, session_count=None, rule_id=None, *args, **kwargs):  # noqa: E501
        """FirewallStats - a model defined in Swagger"""  # noqa: E501
        self._total_session_count = None
        self._packet_count = None
        self._popularity_index = None
        self._max_session_count = None
        self._byte_count = None
        self._max_popularity_index = None
        self._hit_count = None
        self._session_count = None
        self._rule_id = None
        self.discriminator = None
        if total_session_count is not None:
            self.total_session_count = total_session_count
        if packet_count is not None:
            self.packet_count = packet_count
        if popularity_index is not None:
            self.popularity_index = popularity_index
        if max_session_count is not None:
            self.max_session_count = max_session_count
        if byte_count is not None:
            self.byte_count = byte_count
        if max_popularity_index is not None:
            self.max_popularity_index = max_popularity_index
        if hit_count is not None:
            self.hit_count = hit_count
        if session_count is not None:
            self.session_count = session_count
        if rule_id is not None:
            self.rule_id = rule_id
        Resource.__init__(self, *args, **kwargs)

    @property
    def total_session_count(self):
        """Gets the total_session_count of this FirewallStats.  # noqa: E501

        Aggregated number of sessions processed by the all firewall rules. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.  # noqa: E501

        :return: The total_session_count of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._total_session_count

    @total_session_count.setter
    def total_session_count(self, total_session_count):
        """Sets the total_session_count of this FirewallStats.

        Aggregated number of sessions processed by the all firewall rules. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.  # noqa: E501

        :param total_session_count: The total_session_count of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._total_session_count = total_session_count

    @property
    def packet_count(self):
        """Gets the packet_count of this FirewallStats.  # noqa: E501

        Aggregated number of packets processed by the rule.  # noqa: E501

        :return: The packet_count of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._packet_count

    @packet_count.setter
    def packet_count(self, packet_count):
        """Sets the packet_count of this FirewallStats.

        Aggregated number of packets processed by the rule.  # noqa: E501

        :param packet_count: The packet_count of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._packet_count = packet_count

    @property
    def popularity_index(self):
        """Gets the popularity_index of this FirewallStats.  # noqa: E501

        This is calculated by sessions count divided by age of the rule.  # noqa: E501

        :return: The popularity_index of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._popularity_index

    @popularity_index.setter
    def popularity_index(self, popularity_index):
        """Sets the popularity_index of this FirewallStats.

        This is calculated by sessions count divided by age of the rule.  # noqa: E501

        :param popularity_index: The popularity_index of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._popularity_index = popularity_index

    @property
    def max_session_count(self):
        """Gets the max_session_count of this FirewallStats.  # noqa: E501

        Maximum value of sessions count of all firewall rules of the type. This is aggregated statistic which are computed with lower frequency compared to generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.  # noqa: E501

        :return: The max_session_count of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._max_session_count

    @max_session_count.setter
    def max_session_count(self, max_session_count):
        """Sets the max_session_count of this FirewallStats.

        Maximum value of sessions count of all firewall rules of the type. This is aggregated statistic which are computed with lower frequency compared to generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.  # noqa: E501

        :param max_session_count: The max_session_count of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._max_session_count = max_session_count

    @property
    def byte_count(self):
        """Gets the byte_count of this FirewallStats.  # noqa: E501

        Aggregated number of bytes processed by the rule.  # noqa: E501

        :return: The byte_count of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._byte_count

    @byte_count.setter
    def byte_count(self, byte_count):
        """Sets the byte_count of this FirewallStats.

        Aggregated number of bytes processed by the rule.  # noqa: E501

        :param byte_count: The byte_count of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._byte_count = byte_count

    @property
    def max_popularity_index(self):
        """Gets the max_popularity_index of this FirewallStats.  # noqa: E501

        Maximum value of popularity index of all firewall rules of the type. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.  # noqa: E501

        :return: The max_popularity_index of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._max_popularity_index

    @max_popularity_index.setter
    def max_popularity_index(self, max_popularity_index):
        """Sets the max_popularity_index of this FirewallStats.

        Maximum value of popularity index of all firewall rules of the type. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.  # noqa: E501

        :param max_popularity_index: The max_popularity_index of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._max_popularity_index = max_popularity_index

    @property
    def hit_count(self):
        """Gets the hit_count of this FirewallStats.  # noqa: E501

        Aggregated number of hits received by the rule.  # noqa: E501

        :return: The hit_count of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._hit_count

    @hit_count.setter
    def hit_count(self, hit_count):
        """Sets the hit_count of this FirewallStats.

        Aggregated number of hits received by the rule.  # noqa: E501

        :param hit_count: The hit_count of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._hit_count = hit_count

    @property
    def session_count(self):
        """Gets the session_count of this FirewallStats.  # noqa: E501

        Aggregated number of sessions processed by the rule.  # noqa: E501

        :return: The session_count of this FirewallStats.  # noqa: E501
        :rtype: int
        """
        return self._session_count

    @session_count.setter
    def session_count(self, session_count):
        """Sets the session_count of this FirewallStats.

        Aggregated number of sessions processed by the rule.  # noqa: E501

        :param session_count: The session_count of this FirewallStats.  # noqa: E501
        :type: int
        """

        self._session_count = session_count

    @property
    def rule_id(self):
        """Gets the rule_id of this FirewallStats.  # noqa: E501

        Rule Identifier of the Firewall rule. This is a globally unique number.  # noqa: E501

        :return: The rule_id of this FirewallStats.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this FirewallStats.

        Rule Identifier of the Firewall rule. This is a globally unique number.  # noqa: E501

        :param rule_id: The rule_id of this FirewallStats.  # noqa: E501
        :type: str
        """

        self._rule_id = rule_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
