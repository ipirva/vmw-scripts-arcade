# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InterSiteBgpSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_timestamp': 'int',
        'neighbor_status': 'list[BgpNeighborStatus]',
        'transport_node_id': 'str'
    }

    attribute_map = {
        'last_update_timestamp': 'last_update_timestamp',
        'neighbor_status': 'neighbor_status',
        'transport_node_id': 'transport_node_id'
    }

    def __init__(self, last_update_timestamp=None, neighbor_status=None, transport_node_id=None):  # noqa: E501
        """InterSiteBgpSummary - a model defined in Swagger"""  # noqa: E501
        self._last_update_timestamp = None
        self._neighbor_status = None
        self._transport_node_id = None
        self.discriminator = None
        if last_update_timestamp is not None:
            self.last_update_timestamp = last_update_timestamp
        if neighbor_status is not None:
            self.neighbor_status = neighbor_status
        if transport_node_id is not None:
            self.transport_node_id = transport_node_id

    @property
    def last_update_timestamp(self):
        """Gets the last_update_timestamp of this InterSiteBgpSummary.  # noqa: E501

        Timestamp when the inter-site IBgp neighbors status was last updated.   # noqa: E501

        :return: The last_update_timestamp of this InterSiteBgpSummary.  # noqa: E501
        :rtype: int
        """
        return self._last_update_timestamp

    @last_update_timestamp.setter
    def last_update_timestamp(self, last_update_timestamp):
        """Sets the last_update_timestamp of this InterSiteBgpSummary.

        Timestamp when the inter-site IBgp neighbors status was last updated.   # noqa: E501

        :param last_update_timestamp: The last_update_timestamp of this InterSiteBgpSummary.  # noqa: E501
        :type: int
        """

        self._last_update_timestamp = last_update_timestamp

    @property
    def neighbor_status(self):
        """Gets the neighbor_status of this InterSiteBgpSummary.  # noqa: E501

        Status of all inter-site IBgp neighbors.  # noqa: E501

        :return: The neighbor_status of this InterSiteBgpSummary.  # noqa: E501
        :rtype: list[BgpNeighborStatus]
        """
        return self._neighbor_status

    @neighbor_status.setter
    def neighbor_status(self, neighbor_status):
        """Sets the neighbor_status of this InterSiteBgpSummary.

        Status of all inter-site IBgp neighbors.  # noqa: E501

        :param neighbor_status: The neighbor_status of this InterSiteBgpSummary.  # noqa: E501
        :type: list[BgpNeighborStatus]
        """

        self._neighbor_status = neighbor_status

    @property
    def transport_node_id(self):
        """Gets the transport_node_id of this InterSiteBgpSummary.  # noqa: E501

        Edge node id whose status is being reported.  # noqa: E501

        :return: The transport_node_id of this InterSiteBgpSummary.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_id

    @transport_node_id.setter
    def transport_node_id(self, transport_node_id):
        """Sets the transport_node_id of this InterSiteBgpSummary.

        Edge node id whose status is being reported.  # noqa: E501

        :param transport_node_id: The transport_node_id of this InterSiteBgpSummary.  # noqa: E501
        :type: str
        """

        self._transport_node_id = transport_node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterSiteBgpSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterSiteBgpSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
