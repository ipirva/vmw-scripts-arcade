# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class WidgetConfiguration(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_set': 'FeatureSet',
        'default_filter_value': 'list[DefaultFilterValue]',
        'display_name': 'str',
        'datasources': 'list[Datasource]',
        'weight': 'int',
        'footer': 'Footer',
        'filter_value_required': 'bool',
        'span': 'int',
        'icons': 'list[Icon]',
        'is_drilldown': 'bool',
        'filter': 'str',
        'drilldown_id': 'str',
        'shared': 'bool',
        'legend': 'Legend',
        'resource_type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'feature_set': 'feature_set',
        'default_filter_value': 'default_filter_value',
        'display_name': 'display_name',
        'datasources': 'datasources',
        'weight': 'weight',
        'footer': 'footer',
        'filter_value_required': 'filter_value_required',
        'span': 'span',
        'icons': 'icons',
        'is_drilldown': 'is_drilldown',
        'filter': 'filter',
        'drilldown_id': 'drilldown_id',
        'shared': 'shared',
        'legend': 'legend',
        'resource_type': 'resource_type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    discriminator_value_class_map = {
          'DonutConfiguration': 'DonutConfiguration',
'MultiWidgetConfiguration': 'MultiWidgetConfiguration',
'GridConfiguration': 'GridConfiguration',
'CustomWidgetConfiguration': 'CustomWidgetConfiguration',
'ContainerConfiguration': 'ContainerConfiguration',
'GraphConfiguration': 'GraphConfiguration',
'FilterWidgetConfiguration': 'FilterWidgetConfiguration',
'LabelValueConfiguration': 'LabelValueConfiguration',
'DropdownFilterWidgetConfiguration': 'DropdownFilterWidgetConfiguration',
'StatsConfiguration': 'StatsConfiguration'    }

    def __init__(self, feature_set=None, default_filter_value=None, display_name=None, datasources=None, weight=None, footer=None, filter_value_required=True, span=None, icons=None, is_drilldown=False, filter=None, drilldown_id=None, shared=None, legend=None, resource_type=None, *args, **kwargs):  # noqa: E501
        """WidgetConfiguration - a model defined in Swagger"""  # noqa: E501
        self._feature_set = None
        self._default_filter_value = None
        self._display_name = None
        self._datasources = None
        self._weight = None
        self._footer = None
        self._filter_value_required = None
        self._span = None
        self._icons = None
        self._is_drilldown = None
        self._filter = None
        self._drilldown_id = None
        self._shared = None
        self._legend = None
        self._resource_type = None
        self.discriminator = 'resource_type'
        if feature_set is not None:
            self.feature_set = feature_set
        if default_filter_value is not None:
            self.default_filter_value = default_filter_value
        if display_name is not None:
            self.display_name = display_name
        if datasources is not None:
            self.datasources = datasources
        if weight is not None:
            self.weight = weight
        if footer is not None:
            self.footer = footer
        if filter_value_required is not None:
            self.filter_value_required = filter_value_required
        if span is not None:
            self.span = span
        if icons is not None:
            self.icons = icons
        if is_drilldown is not None:
            self.is_drilldown = is_drilldown
        if filter is not None:
            self.filter = filter
        if drilldown_id is not None:
            self.drilldown_id = drilldown_id
        if shared is not None:
            self.shared = shared
        if legend is not None:
            self.legend = legend
        self.resource_type = resource_type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def feature_set(self):
        """Gets the feature_set of this WidgetConfiguration.  # noqa: E501


        :return: The feature_set of this WidgetConfiguration.  # noqa: E501
        :rtype: FeatureSet
        """
        return self._feature_set

    @feature_set.setter
    def feature_set(self, feature_set):
        """Sets the feature_set of this WidgetConfiguration.


        :param feature_set: The feature_set of this WidgetConfiguration.  # noqa: E501
        :type: FeatureSet
        """

        self._feature_set = feature_set

    @property
    def default_filter_value(self):
        """Gets the default_filter_value of this WidgetConfiguration.  # noqa: E501

        Default filter values to be passed to datasources. This will be used when the report is requested without filter values.  # noqa: E501

        :return: The default_filter_value of this WidgetConfiguration.  # noqa: E501
        :rtype: list[DefaultFilterValue]
        """
        return self._default_filter_value

    @default_filter_value.setter
    def default_filter_value(self, default_filter_value):
        """Sets the default_filter_value of this WidgetConfiguration.

        Default filter values to be passed to datasources. This will be used when the report is requested without filter values.  # noqa: E501

        :param default_filter_value: The default_filter_value of this WidgetConfiguration.  # noqa: E501
        :type: list[DefaultFilterValue]
        """

        self._default_filter_value = default_filter_value

    @property
    def display_name(self):
        """Gets the display_name of this WidgetConfiguration.  # noqa: E501

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :return: The display_name of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WidgetConfiguration.

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :param display_name: The display_name of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def datasources(self):
        """Gets the datasources of this WidgetConfiguration.  # noqa: E501

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :return: The datasources of this WidgetConfiguration.  # noqa: E501
        :rtype: list[Datasource]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this WidgetConfiguration.

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :param datasources: The datasources of this WidgetConfiguration.  # noqa: E501
        :type: list[Datasource]
        """

        self._datasources = datasources

    @property
    def weight(self):
        """Gets the weight of this WidgetConfiguration.  # noqa: E501

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :return: The weight of this WidgetConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WidgetConfiguration.

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :param weight: The weight of this WidgetConfiguration.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def footer(self):
        """Gets the footer of this WidgetConfiguration.  # noqa: E501


        :return: The footer of this WidgetConfiguration.  # noqa: E501
        :rtype: Footer
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this WidgetConfiguration.


        :param footer: The footer of this WidgetConfiguration.  # noqa: E501
        :type: Footer
        """

        self._footer = footer

    @property
    def filter_value_required(self):
        """Gets the filter_value_required of this WidgetConfiguration.  # noqa: E501

        Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.  # noqa: E501

        :return: The filter_value_required of this WidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._filter_value_required

    @filter_value_required.setter
    def filter_value_required(self, filter_value_required):
        """Sets the filter_value_required of this WidgetConfiguration.

        Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.  # noqa: E501

        :param filter_value_required: The filter_value_required of this WidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._filter_value_required = filter_value_required

    @property
    def span(self):
        """Gets the span of this WidgetConfiguration.  # noqa: E501

        Represents the horizontal span of the widget / container.  # noqa: E501

        :return: The span of this WidgetConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this WidgetConfiguration.

        Represents the horizontal span of the widget / container.  # noqa: E501

        :param span: The span of this WidgetConfiguration.  # noqa: E501
        :type: int
        """

        self._span = span

    @property
    def icons(self):
        """Gets the icons of this WidgetConfiguration.  # noqa: E501

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :return: The icons of this WidgetConfiguration.  # noqa: E501
        :rtype: list[Icon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this WidgetConfiguration.

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :param icons: The icons of this WidgetConfiguration.  # noqa: E501
        :type: list[Icon]
        """

        self._icons = icons

    @property
    def is_drilldown(self):
        """Gets the is_drilldown of this WidgetConfiguration.  # noqa: E501

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :return: The is_drilldown of this WidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_drilldown

    @is_drilldown.setter
    def is_drilldown(self, is_drilldown):
        """Sets the is_drilldown of this WidgetConfiguration.

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :param is_drilldown: The is_drilldown of this WidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_drilldown = is_drilldown

    @property
    def filter(self):
        """Gets the filter of this WidgetConfiguration.  # noqa: E501

        Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.  # noqa: E501

        :return: The filter of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this WidgetConfiguration.

        Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.  # noqa: E501

        :param filter: The filter of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def drilldown_id(self):
        """Gets the drilldown_id of this WidgetConfiguration.  # noqa: E501

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :return: The drilldown_id of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._drilldown_id

    @drilldown_id.setter
    def drilldown_id(self, drilldown_id):
        """Sets the drilldown_id of this WidgetConfiguration.

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :param drilldown_id: The drilldown_id of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._drilldown_id = drilldown_id

    @property
    def shared(self):
        """Gets the shared of this WidgetConfiguration.  # noqa: E501

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :return: The shared of this WidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this WidgetConfiguration.

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :param shared: The shared of this WidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def legend(self):
        """Gets the legend of this WidgetConfiguration.  # noqa: E501


        :return: The legend of this WidgetConfiguration.  # noqa: E501
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this WidgetConfiguration.


        :param legend: The legend of this WidgetConfiguration.  # noqa: E501
        :type: Legend
        """

        self._legend = legend

    @property
    def resource_type(self):
        """Gets the resource_type of this WidgetConfiguration.  # noqa: E501

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.  # noqa: E501

        :return: The resource_type of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this WidgetConfiguration.

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.  # noqa: E501

        :param resource_type: The resource_type of this WidgetConfiguration.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LabelValueConfiguration", "DonutConfiguration", "MultiWidgetConfiguration", "ContainerConfiguration", "StatsConfiguration", "GridConfiguration", "GraphConfiguration", "CustomWidgetConfiguration", "DropdownFilterWidgetConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WidgetConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
