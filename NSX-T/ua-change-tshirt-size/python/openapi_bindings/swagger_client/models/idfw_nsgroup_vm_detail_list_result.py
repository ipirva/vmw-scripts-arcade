# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.list_result import ListResult  # noqa: F401,E501

class IdfwNsgroupVmDetailListResult(ListResult):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ns_group_id': 'str',
        'results': 'list[IdfwVmDetail]'
    }
    if hasattr(ListResult, "swagger_types"):
        swagger_types.update(ListResult.swagger_types)

    attribute_map = {
        'ns_group_id': 'ns_group_id',
        'results': 'results'
    }
    if hasattr(ListResult, "attribute_map"):
        attribute_map.update(ListResult.attribute_map)

    def __init__(self, ns_group_id=None, results=None, *args, **kwargs):  # noqa: E501
        """IdfwNsgroupVmDetailListResult - a model defined in Swagger"""  # noqa: E501
        self._ns_group_id = None
        self._results = None
        self.discriminator = None
        if ns_group_id is not None:
            self.ns_group_id = ns_group_id
        self.results = results
        ListResult.__init__(self, *args, **kwargs)

    @property
    def ns_group_id(self):
        """Gets the ns_group_id of this IdfwNsgroupVmDetailListResult.  # noqa: E501

        NSGroup ID  # noqa: E501

        :return: The ns_group_id of this IdfwNsgroupVmDetailListResult.  # noqa: E501
        :rtype: str
        """
        return self._ns_group_id

    @ns_group_id.setter
    def ns_group_id(self, ns_group_id):
        """Sets the ns_group_id of this IdfwNsgroupVmDetailListResult.

        NSGroup ID  # noqa: E501

        :param ns_group_id: The ns_group_id of this IdfwNsgroupVmDetailListResult.  # noqa: E501
        :type: str
        """

        self._ns_group_id = ns_group_id

    @property
    def results(self):
        """Gets the results of this IdfwNsgroupVmDetailListResult.  # noqa: E501

        List of user login/session data for a single VM  # noqa: E501

        :return: The results of this IdfwNsgroupVmDetailListResult.  # noqa: E501
        :rtype: list[IdfwVmDetail]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this IdfwNsgroupVmDetailListResult.

        List of user login/session data for a single VM  # noqa: E501

        :param results: The results of this IdfwNsgroupVmDetailListResult.  # noqa: E501
        :type: list[IdfwVmDetail]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdfwNsgroupVmDetailListResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdfwNsgroupVmDetailListResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
