# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpIpPoolUsage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocated_percentage': 'int',
        'pool_size': 'int',
        'allocated_number': 'int',
        'dhcp_ip_pool_id': 'str'
    }

    attribute_map = {
        'allocated_percentage': 'allocated_percentage',
        'pool_size': 'pool_size',
        'allocated_number': 'allocated_number',
        'dhcp_ip_pool_id': 'dhcp_ip_pool_id'
    }

    def __init__(self, allocated_percentage=None, pool_size=None, allocated_number=None, dhcp_ip_pool_id=None):  # noqa: E501
        """DhcpIpPoolUsage - a model defined in Swagger"""  # noqa: E501
        self._allocated_percentage = None
        self._pool_size = None
        self._allocated_number = None
        self._dhcp_ip_pool_id = None
        self.discriminator = None
        self.allocated_percentage = allocated_percentage
        self.pool_size = pool_size
        self.allocated_number = allocated_number
        self.dhcp_ip_pool_id = dhcp_ip_pool_id

    @property
    def allocated_percentage(self):
        """Gets the allocated_percentage of this DhcpIpPoolUsage.  # noqa: E501

        allocated percentage. COULD BE INACCURATE, REFERENCE ONLY.  # noqa: E501

        :return: The allocated_percentage of this DhcpIpPoolUsage.  # noqa: E501
        :rtype: int
        """
        return self._allocated_percentage

    @allocated_percentage.setter
    def allocated_percentage(self, allocated_percentage):
        """Sets the allocated_percentage of this DhcpIpPoolUsage.

        allocated percentage. COULD BE INACCURATE, REFERENCE ONLY.  # noqa: E501

        :param allocated_percentage: The allocated_percentage of this DhcpIpPoolUsage.  # noqa: E501
        :type: int
        """
        if allocated_percentage is None:
            raise ValueError("Invalid value for `allocated_percentage`, must not be `None`")  # noqa: E501

        self._allocated_percentage = allocated_percentage

    @property
    def pool_size(self):
        """Gets the pool_size of this DhcpIpPoolUsage.  # noqa: E501

        pool size  # noqa: E501

        :return: The pool_size of this DhcpIpPoolUsage.  # noqa: E501
        :rtype: int
        """
        return self._pool_size

    @pool_size.setter
    def pool_size(self, pool_size):
        """Sets the pool_size of this DhcpIpPoolUsage.

        pool size  # noqa: E501

        :param pool_size: The pool_size of this DhcpIpPoolUsage.  # noqa: E501
        :type: int
        """
        if pool_size is None:
            raise ValueError("Invalid value for `pool_size`, must not be `None`")  # noqa: E501

        self._pool_size = pool_size

    @property
    def allocated_number(self):
        """Gets the allocated_number of this DhcpIpPoolUsage.  # noqa: E501

        allocated number. COULD BE INACCURATE, REFERENCE ONLY.  # noqa: E501

        :return: The allocated_number of this DhcpIpPoolUsage.  # noqa: E501
        :rtype: int
        """
        return self._allocated_number

    @allocated_number.setter
    def allocated_number(self, allocated_number):
        """Sets the allocated_number of this DhcpIpPoolUsage.

        allocated number. COULD BE INACCURATE, REFERENCE ONLY.  # noqa: E501

        :param allocated_number: The allocated_number of this DhcpIpPoolUsage.  # noqa: E501
        :type: int
        """
        if allocated_number is None:
            raise ValueError("Invalid value for `allocated_number`, must not be `None`")  # noqa: E501

        self._allocated_number = allocated_number

    @property
    def dhcp_ip_pool_id(self):
        """Gets the dhcp_ip_pool_id of this DhcpIpPoolUsage.  # noqa: E501

        uuid of dhcp ip pool  # noqa: E501

        :return: The dhcp_ip_pool_id of this DhcpIpPoolUsage.  # noqa: E501
        :rtype: str
        """
        return self._dhcp_ip_pool_id

    @dhcp_ip_pool_id.setter
    def dhcp_ip_pool_id(self, dhcp_ip_pool_id):
        """Sets the dhcp_ip_pool_id of this DhcpIpPoolUsage.

        uuid of dhcp ip pool  # noqa: E501

        :param dhcp_ip_pool_id: The dhcp_ip_pool_id of this DhcpIpPoolUsage.  # noqa: E501
        :type: str
        """
        if dhcp_ip_pool_id is None:
            raise ValueError("Invalid value for `dhcp_ip_pool_id`, must not be `None`")  # noqa: E501

        self._dhcp_ip_pool_id = dhcp_ip_pool_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpIpPoolUsage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpIpPoolUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
