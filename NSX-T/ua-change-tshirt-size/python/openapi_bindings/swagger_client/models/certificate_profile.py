# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.resource import Resource  # noqa: F401,E501

class CertificateProfile(Resource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_certificate': 'bool',
        'node_type': 'list[str]',
        'profile_name': 'str',
        'extended_key_usage': 'list[str]',
        'service_type': 'str',
        'unique_use': 'bool'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        'cluster_certificate': 'cluster_certificate',
        'node_type': 'node_type',
        'profile_name': 'profile_name',
        'extended_key_usage': 'extended_key_usage',
        'service_type': 'service_type',
        'unique_use': 'unique_use'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, cluster_certificate=None, node_type=None, profile_name=None, extended_key_usage=None, service_type=None, unique_use=None, *args, **kwargs):  # noqa: E501
        """CertificateProfile - a model defined in Swagger"""  # noqa: E501
        self._cluster_certificate = None
        self._node_type = None
        self._profile_name = None
        self._extended_key_usage = None
        self._service_type = None
        self._unique_use = None
        self.discriminator = None
        if cluster_certificate is not None:
            self.cluster_certificate = cluster_certificate
        if node_type is not None:
            self.node_type = node_type
        if profile_name is not None:
            self.profile_name = profile_name
        if extended_key_usage is not None:
            self.extended_key_usage = extended_key_usage
        if service_type is not None:
            self.service_type = service_type
        if unique_use is not None:
            self.unique_use = unique_use
        Resource.__init__(self, *args, **kwargs)

    @property
    def cluster_certificate(self):
        """Gets the cluster_certificate of this CertificateProfile.  # noqa: E501

        True if this is for a cluster certificate  # noqa: E501

        :return: The cluster_certificate of this CertificateProfile.  # noqa: E501
        :rtype: bool
        """
        return self._cluster_certificate

    @cluster_certificate.setter
    def cluster_certificate(self, cluster_certificate):
        """Sets the cluster_certificate of this CertificateProfile.

        True if this is for a cluster certificate  # noqa: E501

        :param cluster_certificate: The cluster_certificate of this CertificateProfile.  # noqa: E501
        :type: bool
        """

        self._cluster_certificate = cluster_certificate

    @property
    def node_type(self):
        """Gets the node_type of this CertificateProfile.  # noqa: E501

        List of types of node this certificate applies to.  # noqa: E501

        :return: The node_type of this CertificateProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this CertificateProfile.

        List of types of node this certificate applies to.  # noqa: E501

        :param node_type: The node_type of this CertificateProfile.  # noqa: E501
        :type: list[str]
        """

        self._node_type = node_type

    @property
    def profile_name(self):
        """Gets the profile_name of this CertificateProfile.  # noqa: E501

        Certificate Profile Name  # noqa: E501

        :return: The profile_name of this CertificateProfile.  # noqa: E501
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this CertificateProfile.

        Certificate Profile Name  # noqa: E501

        :param profile_name: The profile_name of this CertificateProfile.  # noqa: E501
        :type: str
        """

        self._profile_name = profile_name

    @property
    def extended_key_usage(self):
        """Gets the extended_key_usage of this CertificateProfile.  # noqa: E501

        Indicating whether this certificate is used for server-auth, client-auth or both.  # noqa: E501

        :return: The extended_key_usage of this CertificateProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._extended_key_usage

    @extended_key_usage.setter
    def extended_key_usage(self, extended_key_usage):
        """Sets the extended_key_usage of this CertificateProfile.

        Indicating whether this certificate is used for server-auth, client-auth or both.  # noqa: E501

        :param extended_key_usage: The extended_key_usage of this CertificateProfile.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SERVER", "CLIENT"]  # noqa: E501
        if not set(extended_key_usage).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `extended_key_usage` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(extended_key_usage) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._extended_key_usage = extended_key_usage

    @property
    def service_type(self):
        """Gets the service_type of this CertificateProfile.  # noqa: E501

        Unique Service Type  # noqa: E501

        :return: The service_type of this CertificateProfile.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this CertificateProfile.

        Unique Service Type  # noqa: E501

        :param service_type: The service_type of this CertificateProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["MGMT_CLUSTER", "MGMT_PLANE", "API", "NOTIFICATION_COLLECTOR", "SYSLOG_SERVER", "RSYSLOG_CLIENT", "APH", "GLOBAL_MANAGER", "LOCAL_MANAGER", "CLIENT_AUTH", "RMQ"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def unique_use(self):
        """Gets the unique_use of this CertificateProfile.  # noqa: E501

        True if the certificate used for this service-type cannot be used anywhere else.  # noqa: E501

        :return: The unique_use of this CertificateProfile.  # noqa: E501
        :rtype: bool
        """
        return self._unique_use

    @unique_use.setter
    def unique_use(self, unique_use):
        """Sets the unique_use of this CertificateProfile.

        True if the certificate used for this service-type cannot be used anywhere else.  # noqa: E501

        :param unique_use: The unique_use of this CertificateProfile.  # noqa: E501
        :type: bool
        """

        self._unique_use = unique_use

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
