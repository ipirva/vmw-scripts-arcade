# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeIdServicesMap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_types': 'list[str]',
        'node_id': 'str'
    }

    attribute_map = {
        'service_types': 'service_types',
        'node_id': 'node_id'
    }

    def __init__(self, service_types=None, node_id=None):  # noqa: E501
        """NodeIdServicesMap - a model defined in Swagger"""  # noqa: E501
        self._service_types = None
        self._node_id = None
        self.discriminator = None
        self.service_types = service_types
        self.node_id = node_id

    @property
    def service_types(self):
        """Gets the service_types of this NodeIdServicesMap.  # noqa: E501

        List of ServiceTypes.  # noqa: E501

        :return: The service_types of this NodeIdServicesMap.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_types

    @service_types.setter
    def service_types(self, service_types):
        """Sets the service_types of this NodeIdServicesMap.

        List of ServiceTypes.  # noqa: E501

        :param service_types: The service_types of this NodeIdServicesMap.  # noqa: E501
        :type: list[str]
        """
        if service_types is None:
            raise ValueError("Invalid value for `service_types`, must not be `None`")  # noqa: E501
        allowed_values = ["MGMT_CLUSTER", "MGMT_PLANE", "API", "NOTIFICATION_COLLECTOR", "SYSLOG_SERVER", "RSYSLOG_CLIENT", "APH", "GLOBAL_MANAGER", "LOCAL_MANAGER", "CLIENT_AUTH", "RMQ"]  # noqa: E501
        if not set(service_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `service_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(service_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._service_types = service_types

    @property
    def node_id(self):
        """Gets the node_id of this NodeIdServicesMap.  # noqa: E501

        NodeId  # noqa: E501

        :return: The node_id of this NodeIdServicesMap.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeIdServicesMap.

        NodeId  # noqa: E501

        :param node_id: The node_id of this NodeIdServicesMap.  # noqa: E501
        :type: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeIdServicesMap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeIdServicesMap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
