# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tooltip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'heading': 'bool',
        'condition': 'str'
    }

    attribute_map = {
        'text': 'text',
        'heading': 'heading',
        'condition': 'condition'
    }

    def __init__(self, text=None, heading=None, condition=None):  # noqa: E501
        """Tooltip - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._heading = None
        self._condition = None
        self.discriminator = None
        self.text = text
        if heading is not None:
            self.heading = heading
        if condition is not None:
            self.condition = condition

    @property
    def text(self):
        """Gets the text of this Tooltip.  # noqa: E501

        Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.  # noqa: E501

        :return: The text of this Tooltip.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Tooltip.

        Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.  # noqa: E501

        :param text: The text of this Tooltip.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def heading(self):
        """Gets the heading of this Tooltip.  # noqa: E501

        If true, displays tooltip text in bold  # noqa: E501

        :return: The heading of this Tooltip.  # noqa: E501
        :rtype: bool
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this Tooltip.

        If true, displays tooltip text in bold  # noqa: E501

        :param heading: The heading of this Tooltip.  # noqa: E501
        :type: bool
        """

        self._heading = heading

    @property
    def condition(self):
        """Gets the condition of this Tooltip.  # noqa: E501

        If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :return: The condition of this Tooltip.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Tooltip.

        If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :param condition: The condition of this Tooltip.  # noqa: E501
        :type: str
        """

        self._condition = condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tooltip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tooltip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
