# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class LbRule(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phase': 'str',
        'match_conditions': 'list[LbRuleCondition]',
        'actions': 'list[LbRuleAction]',
        'match_strategy': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'phase': 'phase',
        'match_conditions': 'match_conditions',
        'actions': 'actions',
        'match_strategy': 'match_strategy'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, phase=None, match_conditions=None, actions=None, match_strategy=None, *args, **kwargs):  # noqa: E501
        """LbRule - a model defined in Swagger"""  # noqa: E501
        self._phase = None
        self._match_conditions = None
        self._actions = None
        self._match_strategy = None
        self.discriminator = None
        self.phase = phase
        if match_conditions is not None:
            self.match_conditions = match_conditions
        self.actions = actions
        self.match_strategy = match_strategy
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def phase(self):
        """Gets the phase of this LbRule.  # noqa: E501

        Each load balancer rule is used at a specific phase of load balancer processing. Currently five phases are supported, HTTP_REQUEST_REWRITE, HTTP_FORWARDING, HTTP_RESPONSE_REWRITE, HTTP_ACCESS and TRANSPORT. When an HTTP request message is received by load balancer, all HTTP_REQUEST_REWRITE rules, if present are executed in the order they are applied to virtual server. And then if HTTP_FORWARDING rules present, only first matching rule's action is executed, remaining rules are not checked. HTTP_FORWARDING rules can have only one action. If the request is forwarded to a backend server and the response goes back to load balancer, all HTTP_RESPONSE_REWRITE rules, if present, are executed in the order they are applied to the virtual server. In HTTP_ACCESS phase, user can define action to control access using JWT authentication. In TRANSPORT phase, user can define the condition to match SNI in TLS client hello and define the action to do SSL end-to-end, SSL offloading or SSL passthrough using a specific load balancer server pool.   # noqa: E501

        :return: The phase of this LbRule.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this LbRule.

        Each load balancer rule is used at a specific phase of load balancer processing. Currently five phases are supported, HTTP_REQUEST_REWRITE, HTTP_FORWARDING, HTTP_RESPONSE_REWRITE, HTTP_ACCESS and TRANSPORT. When an HTTP request message is received by load balancer, all HTTP_REQUEST_REWRITE rules, if present are executed in the order they are applied to virtual server. And then if HTTP_FORWARDING rules present, only first matching rule's action is executed, remaining rules are not checked. HTTP_FORWARDING rules can have only one action. If the request is forwarded to a backend server and the response goes back to load balancer, all HTTP_RESPONSE_REWRITE rules, if present, are executed in the order they are applied to the virtual server. In HTTP_ACCESS phase, user can define action to control access using JWT authentication. In TRANSPORT phase, user can define the condition to match SNI in TLS client hello and define the action to do SSL end-to-end, SSL offloading or SSL passthrough using a specific load balancer server pool.   # noqa: E501

        :param phase: The phase of this LbRule.  # noqa: E501
        :type: str
        """
        if phase is None:
            raise ValueError("Invalid value for `phase`, must not be `None`")  # noqa: E501
        allowed_values = ["HTTP_REQUEST_REWRITE", "HTTP_FORWARDING", "HTTP_RESPONSE_REWRITE", "HTTP_ACCESS", "TRANSPORT"]  # noqa: E501
        if phase not in allowed_values:
            raise ValueError(
                "Invalid value for `phase` ({0}), must be one of {1}"  # noqa: E501
                .format(phase, allowed_values)
            )

        self._phase = phase

    @property
    def match_conditions(self):
        """Gets the match_conditions of this LbRule.  # noqa: E501

        A list of match conditions used to match application traffic. Multiple match conditions can be specified in one load balancer rule, each match condition defines a criterion to match application traffic. If no match conditions are specified, then the load balancer rule will always match and it is used typically to define default rules. If more than one match condition is specified, then match strategy determines if all conditions should match or any one condition should match for the load balancer rule to considered a match.   # noqa: E501

        :return: The match_conditions of this LbRule.  # noqa: E501
        :rtype: list[LbRuleCondition]
        """
        return self._match_conditions

    @match_conditions.setter
    def match_conditions(self, match_conditions):
        """Sets the match_conditions of this LbRule.

        A list of match conditions used to match application traffic. Multiple match conditions can be specified in one load balancer rule, each match condition defines a criterion to match application traffic. If no match conditions are specified, then the load balancer rule will always match and it is used typically to define default rules. If more than one match condition is specified, then match strategy determines if all conditions should match or any one condition should match for the load balancer rule to considered a match.   # noqa: E501

        :param match_conditions: The match_conditions of this LbRule.  # noqa: E501
        :type: list[LbRuleCondition]
        """

        self._match_conditions = match_conditions

    @property
    def actions(self):
        """Gets the actions of this LbRule.  # noqa: E501

        A list of actions to be executed at specified phase when load balancer rule matches. The actions are used to manipulate application traffic, such as rewrite URI of HTTP messages, redirect HTTP messages, etc.   # noqa: E501

        :return: The actions of this LbRule.  # noqa: E501
        :rtype: list[LbRuleAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this LbRule.

        A list of actions to be executed at specified phase when load balancer rule matches. The actions are used to manipulate application traffic, such as rewrite URI of HTTP messages, redirect HTTP messages, etc.   # noqa: E501

        :param actions: The actions of this LbRule.  # noqa: E501
        :type: list[LbRuleAction]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")  # noqa: E501

        self._actions = actions

    @property
    def match_strategy(self):
        """Gets the match_strategy of this LbRule.  # noqa: E501

        Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If match_stragety is set to ALL, then load balancer rule is considered a match only if all the conditions match. If match_strategy is set to ANY, then load balancer rule is considered a match if any one of the conditions match.   # noqa: E501

        :return: The match_strategy of this LbRule.  # noqa: E501
        :rtype: str
        """
        return self._match_strategy

    @match_strategy.setter
    def match_strategy(self, match_strategy):
        """Sets the match_strategy of this LbRule.

        Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If match_stragety is set to ALL, then load balancer rule is considered a match only if all the conditions match. If match_strategy is set to ANY, then load balancer rule is considered a match if any one of the conditions match.   # noqa: E501

        :param match_strategy: The match_strategy of this LbRule.  # noqa: E501
        :type: str
        """
        if match_strategy is None:
            raise ValueError("Invalid value for `match_strategy`, must not be `None`")  # noqa: E501
        allowed_values = ["ALL", "ANY"]  # noqa: E501
        if match_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `match_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(match_strategy, allowed_values)
            )

        self._match_strategy = match_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
