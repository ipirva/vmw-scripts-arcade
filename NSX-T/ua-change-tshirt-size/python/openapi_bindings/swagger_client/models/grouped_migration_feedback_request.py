# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupedMigrationFeedbackRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resolved': 'bool',
        'accepted_actions': 'list[str]',
        'hash': 'str',
        'vertical': 'str',
        'suggested_value': 'str',
        'multi_value': 'bool',
        'sub_vertical': 'str',
        'objects': 'list[SummaryMigrationFeedbackRequest]',
        'accepted_values': 'list[str]',
        'message': 'str',
        'accepted_value_type': 'str',
        'suggested_action': 'str'
    }

    attribute_map = {
        'resolved': 'resolved',
        'accepted_actions': 'accepted_actions',
        'hash': 'hash',
        'vertical': 'vertical',
        'suggested_value': 'suggested_value',
        'multi_value': 'multi_value',
        'sub_vertical': 'sub_vertical',
        'objects': 'objects',
        'accepted_values': 'accepted_values',
        'message': 'message',
        'accepted_value_type': 'accepted_value_type',
        'suggested_action': 'suggested_action'
    }

    def __init__(self, resolved=None, accepted_actions=None, hash=None, vertical=None, suggested_value=None, multi_value=None, sub_vertical=None, objects=None, accepted_values=None, message=None, accepted_value_type=None, suggested_action=None):  # noqa: E501
        """GroupedMigrationFeedbackRequest - a model defined in Swagger"""  # noqa: E501
        self._resolved = None
        self._accepted_actions = None
        self._hash = None
        self._vertical = None
        self._suggested_value = None
        self._multi_value = None
        self._sub_vertical = None
        self._objects = None
        self._accepted_values = None
        self._message = None
        self._accepted_value_type = None
        self._suggested_action = None
        self.discriminator = None
        if resolved is not None:
            self.resolved = resolved
        if accepted_actions is not None:
            self.accepted_actions = accepted_actions
        if hash is not None:
            self.hash = hash
        if vertical is not None:
            self.vertical = vertical
        if suggested_value is not None:
            self.suggested_value = suggested_value
        if multi_value is not None:
            self.multi_value = multi_value
        if sub_vertical is not None:
            self.sub_vertical = sub_vertical
        self.objects = objects
        if accepted_values is not None:
            self.accepted_values = accepted_values
        if message is not None:
            self.message = message
        if accepted_value_type is not None:
            self.accepted_value_type = accepted_value_type
        if suggested_action is not None:
            self.suggested_action = suggested_action

    @property
    def resolved(self):
        """Gets the resolved of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Indicates if a valid response already exist for all feedback requests in this group.  # noqa: E501

        :return: The resolved of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this GroupedMigrationFeedbackRequest.

        Indicates if a valid response already exist for all feedback requests in this group.  # noqa: E501

        :param resolved: The resolved of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: bool
        """

        self._resolved = resolved

    @property
    def accepted_actions(self):
        """Gets the accepted_actions of this GroupedMigrationFeedbackRequest.  # noqa: E501

        List of acceptable actions for this feedback request.  # noqa: E501

        :return: The accepted_actions of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_actions

    @accepted_actions.setter
    def accepted_actions(self, accepted_actions):
        """Sets the accepted_actions of this GroupedMigrationFeedbackRequest.

        List of acceptable actions for this feedback request.  # noqa: E501

        :param accepted_actions: The accepted_actions of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: list[str]
        """

        self._accepted_actions = accepted_actions

    @property
    def hash(self):
        """Gets the hash of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Identify a feedback request type across objects. This can be used to group together objects with similar feedback request and resolve them in one go.  # noqa: E501

        :return: The hash of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GroupedMigrationFeedbackRequest.

        Identify a feedback request type across objects. This can be used to group together objects with similar feedback request and resolve them in one go.  # noqa: E501

        :param hash: The hash of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def vertical(self):
        """Gets the vertical of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Functional area that this query falls into.  # noqa: E501

        :return: The vertical of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._vertical

    @vertical.setter
    def vertical(self, vertical):
        """Sets the vertical of this GroupedMigrationFeedbackRequest.

        Functional area that this query falls into.  # noqa: E501

        :param vertical: The vertical of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._vertical = vertical

    @property
    def suggested_value(self):
        """Gets the suggested_value of this GroupedMigrationFeedbackRequest.  # noqa: E501

        The suggested value to resolve this feedback request.  # noqa: E501

        :return: The suggested_value of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._suggested_value

    @suggested_value.setter
    def suggested_value(self, suggested_value):
        """Sets the suggested_value of this GroupedMigrationFeedbackRequest.

        The suggested value to resolve this feedback request.  # noqa: E501

        :param suggested_value: The suggested_value of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._suggested_value = suggested_value

    @property
    def multi_value(self):
        """Gets the multi_value of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Indicates if multiple values can be selected as response from the list of acceptable value.  # noqa: E501

        :return: The multi_value of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: bool
        """
        return self._multi_value

    @multi_value.setter
    def multi_value(self, multi_value):
        """Sets the multi_value of this GroupedMigrationFeedbackRequest.

        Indicates if multiple values can be selected as response from the list of acceptable value.  # noqa: E501

        :param multi_value: The multi_value of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: bool
        """

        self._multi_value = multi_value

    @property
    def sub_vertical(self):
        """Gets the sub_vertical of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Functional sub-area that this query falls into.  # noqa: E501

        :return: The sub_vertical of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._sub_vertical

    @sub_vertical.setter
    def sub_vertical(self, sub_vertical):
        """Sets the sub_vertical of this GroupedMigrationFeedbackRequest.

        Functional sub-area that this query falls into.  # noqa: E501

        :param sub_vertical: The sub_vertical of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._sub_vertical = sub_vertical

    @property
    def objects(self):
        """Gets the objects of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Collection of feedback requests of a given type  # noqa: E501

        :return: The objects of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: list[SummaryMigrationFeedbackRequest]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this GroupedMigrationFeedbackRequest.

        Collection of feedback requests of a given type  # noqa: E501

        :param objects: The objects of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: list[SummaryMigrationFeedbackRequest]
        """
        if objects is None:
            raise ValueError("Invalid value for `objects`, must not be `None`")  # noqa: E501

        self._objects = objects

    @property
    def accepted_values(self):
        """Gets the accepted_values of this GroupedMigrationFeedbackRequest.  # noqa: E501

        List of acceptable values for this feedback request.  # noqa: E501

        :return: The accepted_values of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_values

    @accepted_values.setter
    def accepted_values(self, accepted_values):
        """Sets the accepted_values of this GroupedMigrationFeedbackRequest.

        List of acceptable values for this feedback request.  # noqa: E501

        :param accepted_values: The accepted_values of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: list[str]
        """

        self._accepted_values = accepted_values

    @property
    def message(self):
        """Gets the message of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Detailed feedback request with options.  # noqa: E501

        :return: The message of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GroupedMigrationFeedbackRequest.

        Detailed feedback request with options.  # noqa: E501

        :param message: The message of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def accepted_value_type(self):
        """Gets the accepted_value_type of this GroupedMigrationFeedbackRequest.  # noqa: E501

        Data type of the items listed in acceptable values list.  # noqa: E501

        :return: The accepted_value_type of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._accepted_value_type

    @accepted_value_type.setter
    def accepted_value_type(self, accepted_value_type):
        """Sets the accepted_value_type of this GroupedMigrationFeedbackRequest.

        Data type of the items listed in acceptable values list.  # noqa: E501

        :param accepted_value_type: The accepted_value_type of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._accepted_value_type = accepted_value_type

    @property
    def suggested_action(self):
        """Gets the suggested_action of this GroupedMigrationFeedbackRequest.  # noqa: E501

        The suggested action to resolve this feedback request.  # noqa: E501

        :return: The suggested_action of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :rtype: str
        """
        return self._suggested_action

    @suggested_action.setter
    def suggested_action(self, suggested_action):
        """Sets the suggested_action of this GroupedMigrationFeedbackRequest.

        The suggested action to resolve this feedback request.  # noqa: E501

        :param suggested_action: The suggested_action of this GroupedMigrationFeedbackRequest.  # noqa: E501
        :type: str
        """

        self._suggested_action = suggested_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupedMigrationFeedbackRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupedMigrationFeedbackRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
