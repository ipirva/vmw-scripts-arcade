# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPSecVPNPolicyTrafficStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aggregate_traffic_counters': 'IPSecVPNTrafficCounters',
        'tunnel_statistics': 'list[IPSecVPNTunnelTrafficStatistics]',
        'tunnel_port_id': 'str',
        'policy_id': 'str'
    }

    attribute_map = {
        'aggregate_traffic_counters': 'aggregate_traffic_counters',
        'tunnel_statistics': 'tunnel_statistics',
        'tunnel_port_id': 'tunnel_port_id',
        'policy_id': 'policy_id'
    }

    def __init__(self, aggregate_traffic_counters=None, tunnel_statistics=None, tunnel_port_id=None, policy_id=None):  # noqa: E501
        """IPSecVPNPolicyTrafficStatistics - a model defined in Swagger"""  # noqa: E501
        self._aggregate_traffic_counters = None
        self._tunnel_statistics = None
        self._tunnel_port_id = None
        self._policy_id = None
        self.discriminator = None
        if aggregate_traffic_counters is not None:
            self.aggregate_traffic_counters = aggregate_traffic_counters
        if tunnel_statistics is not None:
            self.tunnel_statistics = tunnel_statistics
        if tunnel_port_id is not None:
            self.tunnel_port_id = tunnel_port_id
        if policy_id is not None:
            self.policy_id = policy_id

    @property
    def aggregate_traffic_counters(self):
        """Gets the aggregate_traffic_counters of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501


        :return: The aggregate_traffic_counters of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :rtype: IPSecVPNTrafficCounters
        """
        return self._aggregate_traffic_counters

    @aggregate_traffic_counters.setter
    def aggregate_traffic_counters(self, aggregate_traffic_counters):
        """Sets the aggregate_traffic_counters of this IPSecVPNPolicyTrafficStatistics.


        :param aggregate_traffic_counters: The aggregate_traffic_counters of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :type: IPSecVPNTrafficCounters
        """

        self._aggregate_traffic_counters = aggregate_traffic_counters

    @property
    def tunnel_statistics(self):
        """Gets the tunnel_statistics of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501

        Tunnel statistics.  # noqa: E501

        :return: The tunnel_statistics of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :rtype: list[IPSecVPNTunnelTrafficStatistics]
        """
        return self._tunnel_statistics

    @tunnel_statistics.setter
    def tunnel_statistics(self, tunnel_statistics):
        """Sets the tunnel_statistics of this IPSecVPNPolicyTrafficStatistics.

        Tunnel statistics.  # noqa: E501

        :param tunnel_statistics: The tunnel_statistics of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :type: list[IPSecVPNTunnelTrafficStatistics]
        """

        self._tunnel_statistics = tunnel_statistics

    @property
    def tunnel_port_id(self):
        """Gets the tunnel_port_id of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501

        Tunnel port identifier.  # noqa: E501

        :return: The tunnel_port_id of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tunnel_port_id

    @tunnel_port_id.setter
    def tunnel_port_id(self, tunnel_port_id):
        """Sets the tunnel_port_id of this IPSecVPNPolicyTrafficStatistics.

        Tunnel port identifier.  # noqa: E501

        :param tunnel_port_id: The tunnel_port_id of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :type: str
        """

        self._tunnel_port_id = tunnel_port_id

    @property
    def policy_id(self):
        """Gets the policy_id of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501

        Policy Identifier.  # noqa: E501

        :return: The policy_id of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this IPSecVPNPolicyTrafficStatistics.

        Policy Identifier.  # noqa: E501

        :param policy_id: The policy_id of this IPSecVPNPolicyTrafficStatistics.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNPolicyTrafficStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNPolicyTrafficStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
