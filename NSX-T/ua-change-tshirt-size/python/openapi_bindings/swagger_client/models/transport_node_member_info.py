# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportNodeMemberInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_switches': 'list[HostSwitchInfo]',
        'transport_node_display_name': 'str',
        'compute_collection_id': 'str',
        'transport_node_id': 'str'
    }

    attribute_map = {
        'host_switches': 'host_switches',
        'transport_node_display_name': 'transport_node_display_name',
        'compute_collection_id': 'compute_collection_id',
        'transport_node_id': 'transport_node_id'
    }

    def __init__(self, host_switches=None, transport_node_display_name=None, compute_collection_id=None, transport_node_id=None):  # noqa: E501
        """TransportNodeMemberInfo - a model defined in Swagger"""  # noqa: E501
        self._host_switches = None
        self._transport_node_display_name = None
        self._compute_collection_id = None
        self._transport_node_id = None
        self.discriminator = None
        if host_switches is not None:
            self.host_switches = host_switches
        if transport_node_display_name is not None:
            self.transport_node_display_name = transport_node_display_name
        if compute_collection_id is not None:
            self.compute_collection_id = compute_collection_id
        if transport_node_id is not None:
            self.transport_node_id = transport_node_id

    @property
    def host_switches(self):
        """Gets the host_switches of this TransportNodeMemberInfo.  # noqa: E501

        List of host switches using the transport zone  # noqa: E501

        :return: The host_switches of this TransportNodeMemberInfo.  # noqa: E501
        :rtype: list[HostSwitchInfo]
        """
        return self._host_switches

    @host_switches.setter
    def host_switches(self, host_switches):
        """Sets the host_switches of this TransportNodeMemberInfo.

        List of host switches using the transport zone  # noqa: E501

        :param host_switches: The host_switches of this TransportNodeMemberInfo.  # noqa: E501
        :type: list[HostSwitchInfo]
        """

        self._host_switches = host_switches

    @property
    def transport_node_display_name(self):
        """Gets the transport_node_display_name of this TransportNodeMemberInfo.  # noqa: E501

        Display name of the transport node which has one or more host switches which belong to associated transport zone.  # noqa: E501

        :return: The transport_node_display_name of this TransportNodeMemberInfo.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_display_name

    @transport_node_display_name.setter
    def transport_node_display_name(self, transport_node_display_name):
        """Sets the transport_node_display_name of this TransportNodeMemberInfo.

        Display name of the transport node which has one or more host switches which belong to associated transport zone.  # noqa: E501

        :param transport_node_display_name: The transport_node_display_name of this TransportNodeMemberInfo.  # noqa: E501
        :type: str
        """

        self._transport_node_display_name = transport_node_display_name

    @property
    def compute_collection_id(self):
        """Gets the compute_collection_id of this TransportNodeMemberInfo.  # noqa: E501

        Id of the compute collection to which this transport node belongs. Empty if this is standalone transport node or non ESX type node.  # noqa: E501

        :return: The compute_collection_id of this TransportNodeMemberInfo.  # noqa: E501
        :rtype: str
        """
        return self._compute_collection_id

    @compute_collection_id.setter
    def compute_collection_id(self, compute_collection_id):
        """Sets the compute_collection_id of this TransportNodeMemberInfo.

        Id of the compute collection to which this transport node belongs. Empty if this is standalone transport node or non ESX type node.  # noqa: E501

        :param compute_collection_id: The compute_collection_id of this TransportNodeMemberInfo.  # noqa: E501
        :type: str
        """

        self._compute_collection_id = compute_collection_id

    @property
    def transport_node_id(self):
        """Gets the transport_node_id of this TransportNodeMemberInfo.  # noqa: E501

        Id of the transport node which has one or more host switches which belong to associated transport zone.  # noqa: E501

        :return: The transport_node_id of this TransportNodeMemberInfo.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_id

    @transport_node_id.setter
    def transport_node_id(self, transport_node_id):
        """Sets the transport_node_id of this TransportNodeMemberInfo.

        Id of the transport node which has one or more host switches which belong to associated transport zone.  # noqa: E501

        :param transport_node_id: The transport_node_id of this TransportNodeMemberInfo.  # noqa: E501
        :type: str
        """

        self._transport_node_id = transport_node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportNodeMemberInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportNodeMemberInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
