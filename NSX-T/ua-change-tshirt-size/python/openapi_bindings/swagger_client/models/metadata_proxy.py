# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.managed_resource import ManagedResource  # noqa: F401,E501

class MetadataProxy(ManagedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secret': 'str',
        'metadata_server_ca_ids': 'list[str]',
        'edge_cluster_member_indexes': 'list[int]',
        'crypto_protocols': 'list[str]',
        'metadata_server_url': 'str',
        'attached_logical_port_id': 'str',
        'enable_standby_relocation': 'bool',
        'edge_cluster_id': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'secret': 'secret',
        'metadata_server_ca_ids': 'metadata_server_ca_ids',
        'edge_cluster_member_indexes': 'edge_cluster_member_indexes',
        'crypto_protocols': 'crypto_protocols',
        'metadata_server_url': 'metadata_server_url',
        'attached_logical_port_id': 'attached_logical_port_id',
        'enable_standby_relocation': 'enable_standby_relocation',
        'edge_cluster_id': 'edge_cluster_id'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, secret=None, metadata_server_ca_ids=None, edge_cluster_member_indexes=None, crypto_protocols=None, metadata_server_url=None, attached_logical_port_id=None, enable_standby_relocation=False, edge_cluster_id=None, *args, **kwargs):  # noqa: E501
        """MetadataProxy - a model defined in Swagger"""  # noqa: E501
        self._secret = None
        self._metadata_server_ca_ids = None
        self._edge_cluster_member_indexes = None
        self._crypto_protocols = None
        self._metadata_server_url = None
        self._attached_logical_port_id = None
        self._enable_standby_relocation = None
        self._edge_cluster_id = None
        self.discriminator = None
        if secret is not None:
            self.secret = secret
        if metadata_server_ca_ids is not None:
            self.metadata_server_ca_ids = metadata_server_ca_ids
        if edge_cluster_member_indexes is not None:
            self.edge_cluster_member_indexes = edge_cluster_member_indexes
        if crypto_protocols is not None:
            self.crypto_protocols = crypto_protocols
        self.metadata_server_url = metadata_server_url
        if attached_logical_port_id is not None:
            self.attached_logical_port_id = attached_logical_port_id
        if enable_standby_relocation is not None:
            self.enable_standby_relocation = enable_standby_relocation
        self.edge_cluster_id = edge_cluster_id
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def secret(self):
        """Gets the secret of this MetadataProxy.  # noqa: E501

        secret to access metadata server  # noqa: E501

        :return: The secret of this MetadataProxy.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this MetadataProxy.

        secret to access metadata server  # noqa: E501

        :param secret: The secret of this MetadataProxy.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def metadata_server_ca_ids(self):
        """Gets the metadata_server_ca_ids of this MetadataProxy.  # noqa: E501

        The CAs referenced here must be uploaded to the truststore using the API POST /api/v1/trust-management/certificates?action=import. User needs to ensure a correct CA for this metedata server is used. The REST API can not detect a wrong CA which was used to verify a different server. If the Metadata Proxy reports an ERROR or NO_BACKUP status, user can check the metadata proxy log at transport node for a possible CA issue.   # noqa: E501

        :return: The metadata_server_ca_ids of this MetadataProxy.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata_server_ca_ids

    @metadata_server_ca_ids.setter
    def metadata_server_ca_ids(self, metadata_server_ca_ids):
        """Sets the metadata_server_ca_ids of this MetadataProxy.

        The CAs referenced here must be uploaded to the truststore using the API POST /api/v1/trust-management/certificates?action=import. User needs to ensure a correct CA for this metedata server is used. The REST API can not detect a wrong CA which was used to verify a different server. If the Metadata Proxy reports an ERROR or NO_BACKUP status, user can check the metadata proxy log at transport node for a possible CA issue.   # noqa: E501

        :param metadata_server_ca_ids: The metadata_server_ca_ids of this MetadataProxy.  # noqa: E501
        :type: list[str]
        """

        self._metadata_server_ca_ids = metadata_server_ca_ids

    @property
    def edge_cluster_member_indexes(self):
        """Gets the edge_cluster_member_indexes of this MetadataProxy.  # noqa: E501

        If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If user provides only one edge node, there will be no HA support.   # noqa: E501

        :return: The edge_cluster_member_indexes of this MetadataProxy.  # noqa: E501
        :rtype: list[int]
        """
        return self._edge_cluster_member_indexes

    @edge_cluster_member_indexes.setter
    def edge_cluster_member_indexes(self, edge_cluster_member_indexes):
        """Sets the edge_cluster_member_indexes of this MetadataProxy.

        If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If user provides only one edge node, there will be no HA support.   # noqa: E501

        :param edge_cluster_member_indexes: The edge_cluster_member_indexes of this MetadataProxy.  # noqa: E501
        :type: list[int]
        """

        self._edge_cluster_member_indexes = edge_cluster_member_indexes

    @property
    def crypto_protocols(self):
        """Gets the crypto_protocols of this MetadataProxy.  # noqa: E501

        The cryptographic protocols listed here are supported by the metadata proxy. The TLSv1.1 and TLSv1.2 are supported by default.   # noqa: E501

        :return: The crypto_protocols of this MetadataProxy.  # noqa: E501
        :rtype: list[str]
        """
        return self._crypto_protocols

    @crypto_protocols.setter
    def crypto_protocols(self, crypto_protocols):
        """Sets the crypto_protocols of this MetadataProxy.

        The cryptographic protocols listed here are supported by the metadata proxy. The TLSv1.1 and TLSv1.2 are supported by default.   # noqa: E501

        :param crypto_protocols: The crypto_protocols of this MetadataProxy.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["TLS_V1", "TLS_V1_1", "TLS_V1_2"]  # noqa: E501
        if not set(crypto_protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `crypto_protocols` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(crypto_protocols) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._crypto_protocols = crypto_protocols

    @property
    def metadata_server_url(self):
        """Gets the metadata_server_url of this MetadataProxy.  # noqa: E501

        The URL in format scheme://host:port/path. Please note, the scheme supports only http and https as of now, port supports range 3000 - 9000, inclusive.   # noqa: E501

        :return: The metadata_server_url of this MetadataProxy.  # noqa: E501
        :rtype: str
        """
        return self._metadata_server_url

    @metadata_server_url.setter
    def metadata_server_url(self, metadata_server_url):
        """Sets the metadata_server_url of this MetadataProxy.

        The URL in format scheme://host:port/path. Please note, the scheme supports only http and https as of now, port supports range 3000 - 9000, inclusive.   # noqa: E501

        :param metadata_server_url: The metadata_server_url of this MetadataProxy.  # noqa: E501
        :type: str
        """
        if metadata_server_url is None:
            raise ValueError("Invalid value for `metadata_server_url`, must not be `None`")  # noqa: E501

        self._metadata_server_url = metadata_server_url

    @property
    def attached_logical_port_id(self):
        """Gets the attached_logical_port_id of this MetadataProxy.  # noqa: E501

        id of attached logical port  # noqa: E501

        :return: The attached_logical_port_id of this MetadataProxy.  # noqa: E501
        :rtype: str
        """
        return self._attached_logical_port_id

    @attached_logical_port_id.setter
    def attached_logical_port_id(self, attached_logical_port_id):
        """Sets the attached_logical_port_id of this MetadataProxy.

        id of attached logical port  # noqa: E501

        :param attached_logical_port_id: The attached_logical_port_id of this MetadataProxy.  # noqa: E501
        :type: str
        """

        self._attached_logical_port_id = attached_logical_port_id

    @property
    def enable_standby_relocation(self):
        """Gets the enable_standby_relocation of this MetadataProxy.  # noqa: E501

        Flag to enable the auto-relocation of standby Metadata Proxy in case of edge node failure. Only tier 1 and auto placed Metadata Proxy are considered for the relocation.   # noqa: E501

        :return: The enable_standby_relocation of this MetadataProxy.  # noqa: E501
        :rtype: bool
        """
        return self._enable_standby_relocation

    @enable_standby_relocation.setter
    def enable_standby_relocation(self, enable_standby_relocation):
        """Sets the enable_standby_relocation of this MetadataProxy.

        Flag to enable the auto-relocation of standby Metadata Proxy in case of edge node failure. Only tier 1 and auto placed Metadata Proxy are considered for the relocation.   # noqa: E501

        :param enable_standby_relocation: The enable_standby_relocation of this MetadataProxy.  # noqa: E501
        :type: bool
        """

        self._enable_standby_relocation = enable_standby_relocation

    @property
    def edge_cluster_id(self):
        """Gets the edge_cluster_id of this MetadataProxy.  # noqa: E501

        edge cluster uuid  # noqa: E501

        :return: The edge_cluster_id of this MetadataProxy.  # noqa: E501
        :rtype: str
        """
        return self._edge_cluster_id

    @edge_cluster_id.setter
    def edge_cluster_id(self, edge_cluster_id):
        """Sets the edge_cluster_id of this MetadataProxy.

        edge cluster uuid  # noqa: E501

        :param edge_cluster_id: The edge_cluster_id of this MetadataProxy.  # noqa: E501
        :type: str
        """
        if edge_cluster_id is None:
            raise ValueError("Invalid value for `edge_cluster_id`, must not be `None`")  # noqa: E501

        self._edge_cluster_id = edge_cluster_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetadataProxy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataProxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
