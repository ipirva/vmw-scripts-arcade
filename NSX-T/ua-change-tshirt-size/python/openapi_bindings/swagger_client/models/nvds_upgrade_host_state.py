# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NvdsUpgradeHostState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall_state': 'str',
        'state_details': 'list[str]',
        'host': 'str',
        'upgrade_stage': 'str'
    }

    attribute_map = {
        'overall_state': 'overall_state',
        'state_details': 'state_details',
        'host': 'host',
        'upgrade_stage': 'upgrade_stage'
    }

    def __init__(self, overall_state=None, state_details=None, host=None, upgrade_stage=None):  # noqa: E501
        """NvdsUpgradeHostState - a model defined in Swagger"""  # noqa: E501
        self._overall_state = None
        self._state_details = None
        self._host = None
        self._upgrade_stage = None
        self.discriminator = None
        if overall_state is not None:
            self.overall_state = overall_state
        if state_details is not None:
            self.state_details = state_details
        if host is not None:
            self.host = host
        if upgrade_stage is not None:
            self.upgrade_stage = upgrade_stage

    @property
    def overall_state(self):
        """Gets the overall_state of this NvdsUpgradeHostState.  # noqa: E501

        Overall state of N-VDSes on the TransportNodes  # noqa: E501

        :return: The overall_state of this NvdsUpgradeHostState.  # noqa: E501
        :rtype: str
        """
        return self._overall_state

    @overall_state.setter
    def overall_state(self, overall_state):
        """Sets the overall_state of this NvdsUpgradeHostState.

        Overall state of N-VDSes on the TransportNodes  # noqa: E501

        :param overall_state: The overall_state of this NvdsUpgradeHostState.  # noqa: E501
        :type: str
        """
        allowed_values = ["UPGRADE_READY", "UPGRADE_IN_PROGRESS", "UPGRADE_FAILED", "SUCCESS"]  # noqa: E501
        if overall_state not in allowed_values:
            raise ValueError(
                "Invalid value for `overall_state` ({0}), must be one of {1}"  # noqa: E501
                .format(overall_state, allowed_values)
            )

        self._overall_state = overall_state

    @property
    def state_details(self):
        """Gets the state_details of this NvdsUpgradeHostState.  # noqa: E501

        Details of the N-VDS upgrade state on the host  # noqa: E501

        :return: The state_details of this NvdsUpgradeHostState.  # noqa: E501
        :rtype: list[str]
        """
        return self._state_details

    @state_details.setter
    def state_details(self, state_details):
        """Sets the state_details of this NvdsUpgradeHostState.

        Details of the N-VDS upgrade state on the host  # noqa: E501

        :param state_details: The state_details of this NvdsUpgradeHostState.  # noqa: E501
        :type: list[str]
        """

        self._state_details = state_details

    @property
    def host(self):
        """Gets the host of this NvdsUpgradeHostState.  # noqa: E501

        TransportNode identifier  # noqa: E501

        :return: The host of this NvdsUpgradeHostState.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this NvdsUpgradeHostState.

        TransportNode identifier  # noqa: E501

        :param host: The host of this NvdsUpgradeHostState.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def upgrade_stage(self):
        """Gets the upgrade_stage of this NvdsUpgradeHostState.  # noqa: E501

        This field returns current stage of Migration task. Here is a sequence of stages the task cycles through, RETRIEVE_SAVED_CONFIG, TN_VALIDATE, TN_STATELESS_WAIT_FOR_HP, DETACH_TNP, TNP_WAIT, TN_SEND_HS_MIGRATION_MSG, TN_ADD_HOST_TO_VDS, TN_UPDATE, TN_UPDATE_WAIT, TN_DELETE, TN_DELETE_WAIT, FN_DELETE_WAIT, TN_RECONFIG_HOST, TN_CREATE, TN_CREATE_WAIT, UPDATE_TNP_AND_APPLY, TN_EXIT_MM, TN_MIGRATION_COMPLETED Depending on the type of host (stateful, stateless, Sddc, etc.) migration task may not cycle through all stages but in will follow above sequence. If stage is TN_MIGRATION_COMPLETED refer to field overall_state for SUCCESS or UPGRADE_FAILURE and state_details for details on same.   # noqa: E501

        :return: The upgrade_stage of this NvdsUpgradeHostState.  # noqa: E501
        :rtype: str
        """
        return self._upgrade_stage

    @upgrade_stage.setter
    def upgrade_stage(self, upgrade_stage):
        """Sets the upgrade_stage of this NvdsUpgradeHostState.

        This field returns current stage of Migration task. Here is a sequence of stages the task cycles through, RETRIEVE_SAVED_CONFIG, TN_VALIDATE, TN_STATELESS_WAIT_FOR_HP, DETACH_TNP, TNP_WAIT, TN_SEND_HS_MIGRATION_MSG, TN_ADD_HOST_TO_VDS, TN_UPDATE, TN_UPDATE_WAIT, TN_DELETE, TN_DELETE_WAIT, FN_DELETE_WAIT, TN_RECONFIG_HOST, TN_CREATE, TN_CREATE_WAIT, UPDATE_TNP_AND_APPLY, TN_EXIT_MM, TN_MIGRATION_COMPLETED Depending on the type of host (stateful, stateless, Sddc, etc.) migration task may not cycle through all stages but in will follow above sequence. If stage is TN_MIGRATION_COMPLETED refer to field overall_state for SUCCESS or UPGRADE_FAILURE and state_details for details on same.   # noqa: E501

        :param upgrade_stage: The upgrade_stage of this NvdsUpgradeHostState.  # noqa: E501
        :type: str
        """

        self._upgrade_stage = upgrade_stage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NvdsUpgradeHostState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NvdsUpgradeHostState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
