# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.configuration_state import ConfigurationState  # noqa: F401,E501

class TransportNodeState(ConfigurationState):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_progress_state': 'TransportNodeDeploymentProgressState',
        'transport_node_id': 'str',
        'remote_tunnel_endpoint_state': 'RemoteTunnelEndpointConfigState',
        'host_switch_states': 'list[HostSwitchState]',
        'maintenance_mode_state': 'str',
        'node_deployment_state': 'ConfigurationState'
    }
    if hasattr(ConfigurationState, "swagger_types"):
        swagger_types.update(ConfigurationState.swagger_types)

    attribute_map = {
        'deployment_progress_state': 'deployment_progress_state',
        'transport_node_id': 'transport_node_id',
        'remote_tunnel_endpoint_state': 'remote_tunnel_endpoint_state',
        'host_switch_states': 'host_switch_states',
        'maintenance_mode_state': 'maintenance_mode_state',
        'node_deployment_state': 'node_deployment_state'
    }
    if hasattr(ConfigurationState, "attribute_map"):
        attribute_map.update(ConfigurationState.attribute_map)

    def __init__(self, deployment_progress_state=None, transport_node_id=None, remote_tunnel_endpoint_state=None, host_switch_states=None, maintenance_mode_state=None, node_deployment_state=None, *args, **kwargs):  # noqa: E501
        """TransportNodeState - a model defined in Swagger"""  # noqa: E501
        self._deployment_progress_state = None
        self._transport_node_id = None
        self._remote_tunnel_endpoint_state = None
        self._host_switch_states = None
        self._maintenance_mode_state = None
        self._node_deployment_state = None
        self.discriminator = None
        if deployment_progress_state is not None:
            self.deployment_progress_state = deployment_progress_state
        if transport_node_id is not None:
            self.transport_node_id = transport_node_id
        if remote_tunnel_endpoint_state is not None:
            self.remote_tunnel_endpoint_state = remote_tunnel_endpoint_state
        if host_switch_states is not None:
            self.host_switch_states = host_switch_states
        if maintenance_mode_state is not None:
            self.maintenance_mode_state = maintenance_mode_state
        if node_deployment_state is not None:
            self.node_deployment_state = node_deployment_state
        ConfigurationState.__init__(self, *args, **kwargs)

    @property
    def deployment_progress_state(self):
        """Gets the deployment_progress_state of this TransportNodeState.  # noqa: E501


        :return: The deployment_progress_state of this TransportNodeState.  # noqa: E501
        :rtype: TransportNodeDeploymentProgressState
        """
        return self._deployment_progress_state

    @deployment_progress_state.setter
    def deployment_progress_state(self, deployment_progress_state):
        """Sets the deployment_progress_state of this TransportNodeState.


        :param deployment_progress_state: The deployment_progress_state of this TransportNodeState.  # noqa: E501
        :type: TransportNodeDeploymentProgressState
        """

        self._deployment_progress_state = deployment_progress_state

    @property
    def transport_node_id(self):
        """Gets the transport_node_id of this TransportNodeState.  # noqa: E501

        Unique Id of the TransportNode  # noqa: E501

        :return: The transport_node_id of this TransportNodeState.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_id

    @transport_node_id.setter
    def transport_node_id(self, transport_node_id):
        """Sets the transport_node_id of this TransportNodeState.

        Unique Id of the TransportNode  # noqa: E501

        :param transport_node_id: The transport_node_id of this TransportNodeState.  # noqa: E501
        :type: str
        """

        self._transport_node_id = transport_node_id

    @property
    def remote_tunnel_endpoint_state(self):
        """Gets the remote_tunnel_endpoint_state of this TransportNodeState.  # noqa: E501


        :return: The remote_tunnel_endpoint_state of this TransportNodeState.  # noqa: E501
        :rtype: RemoteTunnelEndpointConfigState
        """
        return self._remote_tunnel_endpoint_state

    @remote_tunnel_endpoint_state.setter
    def remote_tunnel_endpoint_state(self, remote_tunnel_endpoint_state):
        """Sets the remote_tunnel_endpoint_state of this TransportNodeState.


        :param remote_tunnel_endpoint_state: The remote_tunnel_endpoint_state of this TransportNodeState.  # noqa: E501
        :type: RemoteTunnelEndpointConfigState
        """

        self._remote_tunnel_endpoint_state = remote_tunnel_endpoint_state

    @property
    def host_switch_states(self):
        """Gets the host_switch_states of this TransportNodeState.  # noqa: E501

        States of HostSwitches on the host  # noqa: E501

        :return: The host_switch_states of this TransportNodeState.  # noqa: E501
        :rtype: list[HostSwitchState]
        """
        return self._host_switch_states

    @host_switch_states.setter
    def host_switch_states(self, host_switch_states):
        """Sets the host_switch_states of this TransportNodeState.

        States of HostSwitches on the host  # noqa: E501

        :param host_switch_states: The host_switch_states of this TransportNodeState.  # noqa: E501
        :type: list[HostSwitchState]
        """

        self._host_switch_states = host_switch_states

    @property
    def maintenance_mode_state(self):
        """Gets the maintenance_mode_state of this TransportNodeState.  # noqa: E501

        the present realized maintenance mode state  # noqa: E501

        :return: The maintenance_mode_state of this TransportNodeState.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode_state

    @maintenance_mode_state.setter
    def maintenance_mode_state(self, maintenance_mode_state):
        """Sets the maintenance_mode_state of this TransportNodeState.

        the present realized maintenance mode state  # noqa: E501

        :param maintenance_mode_state: The maintenance_mode_state of this TransportNodeState.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENTERING", "ENABLED", "EXITING", "DISABLED"]  # noqa: E501
        if maintenance_mode_state not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_mode_state` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode_state, allowed_values)
            )

        self._maintenance_mode_state = maintenance_mode_state

    @property
    def node_deployment_state(self):
        """Gets the node_deployment_state of this TransportNodeState.  # noqa: E501


        :return: The node_deployment_state of this TransportNodeState.  # noqa: E501
        :rtype: ConfigurationState
        """
        return self._node_deployment_state

    @node_deployment_state.setter
    def node_deployment_state(self, node_deployment_state):
        """Sets the node_deployment_state of this TransportNodeState.


        :param node_deployment_state: The node_deployment_state of this TransportNodeState.  # noqa: E501
        :type: ConfigurationState
        """

        self._node_deployment_state = node_deployment_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportNodeState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportNodeState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
