# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DhcpOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'option121': 'DhcpOption121',
        'others': 'list[GenericDhcpOption]'
    }

    attribute_map = {
        'option121': 'option121',
        'others': 'others'
    }

    def __init__(self, option121=None, others=None):  # noqa: E501
        """DhcpOptions - a model defined in Swagger"""  # noqa: E501
        self._option121 = None
        self._others = None
        self.discriminator = None
        if option121 is not None:
            self.option121 = option121
        if others is not None:
            self.others = others

    @property
    def option121(self):
        """Gets the option121 of this DhcpOptions.  # noqa: E501


        :return: The option121 of this DhcpOptions.  # noqa: E501
        :rtype: DhcpOption121
        """
        return self._option121

    @option121.setter
    def option121(self, option121):
        """Sets the option121 of this DhcpOptions.


        :param option121: The option121 of this DhcpOptions.  # noqa: E501
        :type: DhcpOption121
        """

        self._option121 = option121

    @property
    def others(self):
        """Gets the others of this DhcpOptions.  # noqa: E501

        To define DHCP options other than option 121 in generic format. Please note, only the following options can be defined in generic format. Those other options will be accepted without validation but will not take effect. --------------------------   Code    Name --------------------------     2   Time Offset     6   Domain Name Server     13  Boot File Size     19  Forward On/Off     26  MTU Interface     28  Broadcast Address     35  ARP Timeout     40  NIS Domain     41  NIS Servers     42  NTP Servers     44  NETBIOS Name Srv     45  NETBIOS Dist Srv     46  NETBIOS Node Type     47  NETBIOS Scope     58  Renewal Time     59  Rebinding Time     64  NIS+-Domain-Name     65  NIS+-Server-Addr     66  TFTP Server-Name (used by PXE)     67  Bootfile-Name (used by PXE)     93  PXE: Client system architecture     94  PXE: Client NDI     97  PXE: UUID/UNDI     117 Name Service Search     119 Domain Search     150 TFTP server address (used by PXE)     175 Etherboot     209 PXE Configuration File     210 PXE Path Prefix     211 PXE Reboot Time   # noqa: E501

        :return: The others of this DhcpOptions.  # noqa: E501
        :rtype: list[GenericDhcpOption]
        """
        return self._others

    @others.setter
    def others(self, others):
        """Sets the others of this DhcpOptions.

        To define DHCP options other than option 121 in generic format. Please note, only the following options can be defined in generic format. Those other options will be accepted without validation but will not take effect. --------------------------   Code    Name --------------------------     2   Time Offset     6   Domain Name Server     13  Boot File Size     19  Forward On/Off     26  MTU Interface     28  Broadcast Address     35  ARP Timeout     40  NIS Domain     41  NIS Servers     42  NTP Servers     44  NETBIOS Name Srv     45  NETBIOS Dist Srv     46  NETBIOS Node Type     47  NETBIOS Scope     58  Renewal Time     59  Rebinding Time     64  NIS+-Domain-Name     65  NIS+-Server-Addr     66  TFTP Server-Name (used by PXE)     67  Bootfile-Name (used by PXE)     93  PXE: Client system architecture     94  PXE: Client NDI     97  PXE: UUID/UNDI     117 Name Service Search     119 Domain Search     150 TFTP server address (used by PXE)     175 Etherboot     209 PXE Configuration File     210 PXE Path Prefix     211 PXE Reboot Time   # noqa: E501

        :param others: The others of this DhcpOptions.  # noqa: E501
        :type: list[GenericDhcpOption]
        """

        self._others = others

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DhcpOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DhcpOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
