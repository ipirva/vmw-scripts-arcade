# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class L2VpnTcpMssClamping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_segment_size': 'int',
        'direction': 'str'
    }

    attribute_map = {
        'max_segment_size': 'max_segment_size',
        'direction': 'direction'
    }

    def __init__(self, max_segment_size=None, direction='BOTH'):  # noqa: E501
        """L2VpnTcpMssClamping - a model defined in Swagger"""  # noqa: E501
        self._max_segment_size = None
        self._direction = None
        self.discriminator = None
        if max_segment_size is not None:
            self.max_segment_size = max_segment_size
        if direction is not None:
            self.direction = direction

    @property
    def max_segment_size(self):
        """Gets the max_segment_size of this L2VpnTcpMssClamping.  # noqa: E501

        It defines the maximum amount of data that a host is willing to accept in a single TCP segment. This field is set in TCP header during connection establishment. To avoid packet fragmentation, you can set this field depending on uplink MTU and VPN overhead. This is optional field and in case it is left unconfigured, best possible MSS value will be calculated based on effective mtu of uplink interface. Supported MSS range is 108 to 8860.  # noqa: E501

        :return: The max_segment_size of this L2VpnTcpMssClamping.  # noqa: E501
        :rtype: int
        """
        return self._max_segment_size

    @max_segment_size.setter
    def max_segment_size(self, max_segment_size):
        """Sets the max_segment_size of this L2VpnTcpMssClamping.

        It defines the maximum amount of data that a host is willing to accept in a single TCP segment. This field is set in TCP header during connection establishment. To avoid packet fragmentation, you can set this field depending on uplink MTU and VPN overhead. This is optional field and in case it is left unconfigured, best possible MSS value will be calculated based on effective mtu of uplink interface. Supported MSS range is 108 to 8860.  # noqa: E501

        :param max_segment_size: The max_segment_size of this L2VpnTcpMssClamping.  # noqa: E501
        :type: int
        """

        self._max_segment_size = max_segment_size

    @property
    def direction(self):
        """Gets the direction of this L2VpnTcpMssClamping.  # noqa: E501

        Specifies the traffic direction for which to apply MSS Clamping. If direction is None, the feature is disabled.  # noqa: E501

        :return: The direction of this L2VpnTcpMssClamping.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this L2VpnTcpMssClamping.

        Specifies the traffic direction for which to apply MSS Clamping. If direction is None, the feature is disabled.  # noqa: E501

        :param direction: The direction of this L2VpnTcpMssClamping.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "BOTH"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(L2VpnTcpMssClamping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, L2VpnTcpMssClamping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
