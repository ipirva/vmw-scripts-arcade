# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.ds_section import DSSection  # noqa: F401,E501

class FirewallSection(DSSection):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'enforced_on': 'str',
        'locked': 'bool',
        'tcp_strict': 'bool',
        'lock_modified_by': 'str',
        'lock_modified_time': 'int',
        'priority': 'int',
        'firewall_schedule': 'ResourceReference',
        'comments': 'str',
        'autoplumbed': 'bool'
    }
    if hasattr(DSSection, "swagger_types"):
        swagger_types.update(DSSection.swagger_types)

    attribute_map = {
        'category': 'category',
        'enforced_on': 'enforced_on',
        'locked': 'locked',
        'tcp_strict': 'tcp_strict',
        'lock_modified_by': 'lock_modified_by',
        'lock_modified_time': 'lock_modified_time',
        'priority': 'priority',
        'firewall_schedule': 'firewall_schedule',
        'comments': 'comments',
        'autoplumbed': 'autoplumbed'
    }
    if hasattr(DSSection, "attribute_map"):
        attribute_map.update(DSSection.attribute_map)

    def __init__(self, category=None, enforced_on=None, locked=False, tcp_strict=False, lock_modified_by=None, lock_modified_time=None, priority=None, firewall_schedule=None, comments=None, autoplumbed=False, *args, **kwargs):  # noqa: E501
        """FirewallSection - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._enforced_on = None
        self._locked = None
        self._tcp_strict = None
        self._lock_modified_by = None
        self._lock_modified_time = None
        self._priority = None
        self._firewall_schedule = None
        self._comments = None
        self._autoplumbed = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if enforced_on is not None:
            self.enforced_on = enforced_on
        if locked is not None:
            self.locked = locked
        if tcp_strict is not None:
            self.tcp_strict = tcp_strict
        if lock_modified_by is not None:
            self.lock_modified_by = lock_modified_by
        if lock_modified_time is not None:
            self.lock_modified_time = lock_modified_time
        if priority is not None:
            self.priority = priority
        if firewall_schedule is not None:
            self.firewall_schedule = firewall_schedule
        if comments is not None:
            self.comments = comments
        if autoplumbed is not None:
            self.autoplumbed = autoplumbed
        DSSection.__init__(self, *args, **kwargs)

    @property
    def category(self):
        """Gets the category of this FirewallSection.  # noqa: E501

        Category from policy framework.  # noqa: E501

        :return: The category of this FirewallSection.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FirewallSection.

        Category from policy framework.  # noqa: E501

        :param category: The category of this FirewallSection.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def enforced_on(self):
        """Gets the enforced_on of this FirewallSection.  # noqa: E501

        This attribute represents enforcement point of firewall section. For example, firewall section enforced on logical port with attachment type bridge endpoint will have 'BRIDGEENDPOINT' value, firewall section enforced on logical router will have 'LOGICALROUTER' value and rest have 'VIF' value.  # noqa: E501

        :return: The enforced_on of this FirewallSection.  # noqa: E501
        :rtype: str
        """
        return self._enforced_on

    @enforced_on.setter
    def enforced_on(self, enforced_on):
        """Sets the enforced_on of this FirewallSection.

        This attribute represents enforcement point of firewall section. For example, firewall section enforced on logical port with attachment type bridge endpoint will have 'BRIDGEENDPOINT' value, firewall section enforced on logical router will have 'LOGICALROUTER' value and rest have 'VIF' value.  # noqa: E501

        :param enforced_on: The enforced_on of this FirewallSection.  # noqa: E501
        :type: str
        """

        self._enforced_on = enforced_on

    @property
    def locked(self):
        """Gets the locked of this FirewallSection.  # noqa: E501

        Section is locked/unlocked.  # noqa: E501

        :return: The locked of this FirewallSection.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this FirewallSection.

        Section is locked/unlocked.  # noqa: E501

        :param locked: The locked of this FirewallSection.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def tcp_strict(self):
        """Gets the tcp_strict of this FirewallSection.  # noqa: E501

        If TCP strict is enabled on a section and a packet matches rule in it, the following check will be performed. If the packet does not belong to an existing session, the kernel will check to see if the SYN flag of the packet is set. If it is not, then it will drop the packet.  # noqa: E501

        :return: The tcp_strict of this FirewallSection.  # noqa: E501
        :rtype: bool
        """
        return self._tcp_strict

    @tcp_strict.setter
    def tcp_strict(self, tcp_strict):
        """Sets the tcp_strict of this FirewallSection.

        If TCP strict is enabled on a section and a packet matches rule in it, the following check will be performed. If the packet does not belong to an existing session, the kernel will check to see if the SYN flag of the packet is set. If it is not, then it will drop the packet.  # noqa: E501

        :param tcp_strict: The tcp_strict of this FirewallSection.  # noqa: E501
        :type: bool
        """

        self._tcp_strict = tcp_strict

    @property
    def lock_modified_by(self):
        """Gets the lock_modified_by of this FirewallSection.  # noqa: E501

        ID of the user who last modified the lock for the section.  # noqa: E501

        :return: The lock_modified_by of this FirewallSection.  # noqa: E501
        :rtype: str
        """
        return self._lock_modified_by

    @lock_modified_by.setter
    def lock_modified_by(self, lock_modified_by):
        """Sets the lock_modified_by of this FirewallSection.

        ID of the user who last modified the lock for the section.  # noqa: E501

        :param lock_modified_by: The lock_modified_by of this FirewallSection.  # noqa: E501
        :type: str
        """

        self._lock_modified_by = lock_modified_by

    @property
    def lock_modified_time(self):
        """Gets the lock_modified_time of this FirewallSection.  # noqa: E501

        Section locked/unlocked time in epoch milliseconds.  # noqa: E501

        :return: The lock_modified_time of this FirewallSection.  # noqa: E501
        :rtype: int
        """
        return self._lock_modified_time

    @lock_modified_time.setter
    def lock_modified_time(self, lock_modified_time):
        """Sets the lock_modified_time of this FirewallSection.

        Section locked/unlocked time in epoch milliseconds.  # noqa: E501

        :param lock_modified_time: The lock_modified_time of this FirewallSection.  # noqa: E501
        :type: int
        """

        self._lock_modified_time = lock_modified_time

    @property
    def priority(self):
        """Gets the priority of this FirewallSection.  # noqa: E501

        Priority of current section with respect to other sections. In case the field is empty, the list section api should be used to get section priority.  # noqa: E501

        :return: The priority of this FirewallSection.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this FirewallSection.

        Priority of current section with respect to other sections. In case the field is empty, the list section api should be used to get section priority.  # noqa: E501

        :param priority: The priority of this FirewallSection.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def firewall_schedule(self):
        """Gets the firewall_schedule of this FirewallSection.  # noqa: E501


        :return: The firewall_schedule of this FirewallSection.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._firewall_schedule

    @firewall_schedule.setter
    def firewall_schedule(self, firewall_schedule):
        """Sets the firewall_schedule of this FirewallSection.


        :param firewall_schedule: The firewall_schedule of this FirewallSection.  # noqa: E501
        :type: ResourceReference
        """

        self._firewall_schedule = firewall_schedule

    @property
    def comments(self):
        """Gets the comments of this FirewallSection.  # noqa: E501

        Comments for section lock/unlock.  # noqa: E501

        :return: The comments of this FirewallSection.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this FirewallSection.

        Comments for section lock/unlock.  # noqa: E501

        :param comments: The comments of this FirewallSection.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def autoplumbed(self):
        """Gets the autoplumbed of this FirewallSection.  # noqa: E501

        This flag indicates whether it is an auto-plumbed section that is associated to a LogicalRouter. Auto-plumbed sections are system owned and cannot be updated via the API.  # noqa: E501

        :return: The autoplumbed of this FirewallSection.  # noqa: E501
        :rtype: bool
        """
        return self._autoplumbed

    @autoplumbed.setter
    def autoplumbed(self, autoplumbed):
        """Sets the autoplumbed of this FirewallSection.

        This flag indicates whether it is an auto-plumbed section that is associated to a LogicalRouter. Auto-plumbed sections are system owned and cannot be updated via the API.  # noqa: E501

        :param autoplumbed: The autoplumbed of this FirewallSection.  # noqa: E501
        :type: bool
        """

        self._autoplumbed = autoplumbed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewallSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewallSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
