# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricEdgeClustersEdgeClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_edge_cluster(self, body, **kwargs):  # noqa: E501
        """Create Edge Cluster  # noqa: E501

        Creates a new edge cluster. It only supports homogeneous members. The TransportNodes backed by EdgeNode are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_edge_cluster(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeCluster body: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_edge_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_edge_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_edge_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Edge Cluster  # noqa: E501

        Creates a new edge cluster. It only supports homogeneous members. The TransportNodes backed by EdgeNode are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_edge_cluster_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeCluster body: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_edge_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_edge_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_edge_cluster(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Delete Edge Cluster  # noqa: E501

        Deletes the specified edge cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_edge_cluster(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_edge_cluster_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_edge_cluster_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_edge_cluster_with_http_info(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Delete Edge Cluster  # noqa: E501

        Deletes the specified edge cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_edge_cluster_with_http_info(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_edge_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `delete_edge_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edge_cluster_allocation_status(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get the Allocation details of an edge cluster  # noqa: E501

        Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_allocation_status(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: EdgeClusterAllocationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_cluster_allocation_status_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_cluster_allocation_status_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_edge_cluster_allocation_status_with_http_info(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get the Allocation details of an edge cluster  # noqa: E501

        Returns the allocation details of cluster and its members. Lists the edge node members, active and standby services of each node, utilization details of configured sub-pools. These allocation details can be monitored by customers to trigger migration of certain service contexts to different edge nodes, to balance the utilization of edge node resources.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_allocation_status_with_http_info(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: EdgeClusterAllocationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_cluster_allocation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `get_edge_cluster_allocation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}/allocation-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeClusterAllocationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edge_cluster_state(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get the Realized State of a Edge Cluster  # noqa: E501

        Return realized state information of a edge cluster. Any configuration update that affects the edge cluster can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of edge cluster.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_state(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :param int barrier_id:
        :param str request_id: Realization request ID
        :return: EdgeClusterState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_cluster_state_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_cluster_state_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_edge_cluster_state_with_http_info(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get the Realized State of a Edge Cluster  # noqa: E501

        Return realized state information of a edge cluster. Any configuration update that affects the edge cluster can use this API to get its realized state by passing a request_id returned by the configuration change operation. e.g. Update configuration of edge cluster.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_state_with_http_info(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :param int barrier_id:
        :param str request_id: Realization request ID
        :return: EdgeClusterState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_cluster_id', 'barrier_id', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_cluster_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `get_edge_cluster_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []
        if 'barrier_id' in params:
            query_params.append(('barrier_id', params['barrier_id']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeClusterState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edge_cluster_status(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get the status for the Edge cluster of the given id  # noqa: E501

        Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_status(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :param str source: Data source type.
        :return: EdgeClusterStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_cluster_status_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_cluster_status_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_edge_cluster_status_with_http_info(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get the status for the Edge cluster of the given id  # noqa: E501

        Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. Query parameter \"source=realtime\" is the only supported source.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_status_with_http_info(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :param str source: Data source type.
        :return: EdgeClusterStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_cluster_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_cluster_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `get_edge_cluster_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeClusterStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_edge_clusters(self, **kwargs):  # noqa: E501
        """List Edge Clusters  # noqa: E501

        Returns information about the configured edge clusters, which enable you to group together transport nodes of the type EdgeNode and apply fabric profiles to all members of the edge cluster. Each edge node can participate in only one edge cluster.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_edge_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: EdgeClusterListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_edge_clusters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_edge_clusters_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_edge_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """List Edge Clusters  # noqa: E501

        Returns information about the configured edge clusters, which enable you to group together transport nodes of the type EdgeNode and apply fabric profiles to all members of the edge cluster. Each edge node can participate in only one edge cluster.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_edge_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: EdgeClusterListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_edge_clusters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeClusterListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_edge_cluster(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Read Edge Cluster  # noqa: E501

        Returns information about the specified edge cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_edge_cluster(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_edge_cluster_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_edge_cluster_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def read_edge_cluster_with_http_info(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Read Edge Cluster  # noqa: E501

        Returns information about the specified edge cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_edge_cluster_with_http_info(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_edge_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `read_edge_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_edge_cluster_member_transport_node_replace_transport_node(self, body, edge_cluster_id, **kwargs):  # noqa: E501
        """Replace the transport node in the specified member of the edge-cluster  # noqa: E501

        Replace the transport node in the specified member of the edge-cluster. This is a disruptive action. This will move all the LogicalRouterPorts(uplink and routerLink) host on the old transport_node to the new transport_node. The transportNode cannot be present in another member of any edgeClusters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_edge_cluster_member_transport_node_replace_transport_node(body, edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeClusterMemberTransportNode body: (required)
        :param str edge_cluster_id: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.replace_edge_cluster_member_transport_node_replace_transport_node_with_http_info(body, edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.replace_edge_cluster_member_transport_node_replace_transport_node_with_http_info(body, edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def replace_edge_cluster_member_transport_node_replace_transport_node_with_http_info(self, body, edge_cluster_id, **kwargs):  # noqa: E501
        """Replace the transport node in the specified member of the edge-cluster  # noqa: E501

        Replace the transport node in the specified member of the edge-cluster. This is a disruptive action. This will move all the LogicalRouterPorts(uplink and routerLink) host on the old transport_node to the new transport_node. The transportNode cannot be present in another member of any edgeClusters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.replace_edge_cluster_member_transport_node_replace_transport_node_with_http_info(body, edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeClusterMemberTransportNode body: (required)
        :param str edge_cluster_id: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'edge_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_edge_cluster_member_transport_node_replace_transport_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `replace_edge_cluster_member_transport_node_replace_transport_node`")  # noqa: E501
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `replace_edge_cluster_member_transport_node_replace_transport_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}?action=replace_transport_node', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_edge_cluster(self, body, edge_cluster_id, **kwargs):  # noqa: E501
        """Update Edge Cluster  # noqa: E501

        Modifies the specified edge cluster. Modifiable parameters include the description, display_name, transport-node-id. If the optional fabric_profile_binding is included, resource_type and profile_id are required. User should do a GET on the edge-cluster and obtain the payload and retain the member_index of the existing members as returning in the GET output. For new member additions, the member_index cannot be defined by the user, user can read the system allocated index to the new member in the output of this API call or by doing a GET call. User cannot use this PUT api to replace the transport_node of an existing member because this is a disruption action, we have exposed a explicit API for doing so, refer to \"ReplaceEdgeClusterMemberTransportNode\" EdgeCluster only supports homogeneous members. The TransportNodes backed by EdgeNode are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_edge_cluster(body, edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeCluster body: (required)
        :param str edge_cluster_id: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_edge_cluster_with_http_info(body, edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_edge_cluster_with_http_info(body, edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def update_edge_cluster_with_http_info(self, body, edge_cluster_id, **kwargs):  # noqa: E501
        """Update Edge Cluster  # noqa: E501

        Modifies the specified edge cluster. Modifiable parameters include the description, display_name, transport-node-id. If the optional fabric_profile_binding is included, resource_type and profile_id are required. User should do a GET on the edge-cluster and obtain the payload and retain the member_index of the existing members as returning in the GET output. For new member additions, the member_index cannot be defined by the user, user can read the system allocated index to the new member in the output of this API call or by doing a GET call. User cannot use this PUT api to replace the transport_node of an existing member because this is a disruption action, we have exposed a explicit API for doing so, refer to \"ReplaceEdgeClusterMemberTransportNode\" EdgeCluster only supports homogeneous members. The TransportNodes backed by EdgeNode are only allowed in cluster members. DeploymentType (VIRTUAL_MACHINE|PHYSICAL_MACHINE) of these EdgeNodes is recommended to be the same. EdgeCluster supports members of different deployment types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_edge_cluster_with_http_info(body, edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EdgeCluster body: (required)
        :param str edge_cluster_id: (required)
        :return: EdgeCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'edge_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_edge_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_edge_cluster`")  # noqa: E501
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `update_edge_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
