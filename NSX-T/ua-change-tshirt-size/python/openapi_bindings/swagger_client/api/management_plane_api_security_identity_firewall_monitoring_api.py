# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPISecurityIdentityFirewallMonitoringApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_compute_collection_status_by_id(self, compute_collection_ext_id, **kwargs):  # noqa: E501
        """Get list of compute collections and status.  # noqa: E501

        Retrieve the compute collection status by ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_collection_status_by_id(compute_collection_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_collection_ext_id: (required)
        :return: IdfwComputeCollectionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_compute_collection_status_by_id_with_http_info(compute_collection_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compute_collection_status_by_id_with_http_info(compute_collection_ext_id, **kwargs)  # noqa: E501
            return data

    def get_compute_collection_status_by_id_with_http_info(self, compute_collection_ext_id, **kwargs):  # noqa: E501
        """Get list of compute collections and status.  # noqa: E501

        Retrieve the compute collection status by ID.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_collection_status_by_id_with_http_info(compute_collection_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_collection_ext_id: (required)
        :return: IdfwComputeCollectionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_collection_ext_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_collection_status_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_collection_ext_id' is set
        if ('compute_collection_ext_id' not in params or
                params['compute_collection_ext_id'] is None):
            raise ValueError("Missing the required parameter `compute_collection_ext_id` when calling `get_compute_collection_status_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_collection_ext_id' in params:
            path_params['compute-collection-ext-id'] = params['compute_collection_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/idfw/compute-collections/{compute-collection-ext-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdfwComputeCollectionStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_collection_statuses(self, **kwargs):  # noqa: E501
        """List all IDFW enabled ComputeCollection statuses.  # noqa: E501

        Retrieve all the Compute collection status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collection_statuses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: IdfwComputeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_compute_collection_statuses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_collection_statuses_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_collection_statuses_with_http_info(self, **kwargs):  # noqa: E501
        """List all IDFW enabled ComputeCollection statuses.  # noqa: E501

        Retrieve all the Compute collection status.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collection_statuses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: IdfwComputeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_collection_statuses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/idfw/compute-collections/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdfwComputeCollectionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_node_statuses_by_compute_collection_id(self, cc_ext_id, **kwargs):  # noqa: E501
        """List all transport node and statuses based on idfw enabled ComputeCollection ID.  # noqa: E501

        Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_statuses_by_compute_collection_id(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: IdfwTransportNodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_node_statuses_by_compute_collection_id_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_node_statuses_by_compute_collection_id_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
            return data

    def list_transport_node_statuses_by_compute_collection_id_with_http_info(self, cc_ext_id, **kwargs):  # noqa: E501
        """List all transport node and statuses based on idfw enabled ComputeCollection ID.  # noqa: E501

        Retrieve all the transport node and status by idfw enabled   ComputeCollection ID in the request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_statuses_by_compute_collection_id_with_http_info(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: IdfwTransportNodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc_ext_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_node_statuses_by_compute_collection_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc_ext_id' is set
        if ('cc_ext_id' not in params or
                params['cc_ext_id'] is None):
            raise ValueError("Missing the required parameter `cc_ext_id` when calling `list_transport_node_statuses_by_compute_collection_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cc_ext_id' in params:
            path_params['cc-ext-id'] = params['cc_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/idfw/compute-collections/{cc-ext-id}/transport-nodes/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdfwTransportNodeStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_virtual_machine_statuses_by_transport_node_id(self, transport_node_id, **kwargs):  # noqa: E501
        """List all VM and statuses based on transport node ID of idfw enabled compute collection.  # noqa: E501

        Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_virtual_machine_statuses_by_transport_node_id(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: IdfwVirtualMachineStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_virtual_machine_statuses_by_transport_node_id_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_virtual_machine_statuses_by_transport_node_id_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def list_virtual_machine_statuses_by_transport_node_id_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """List all VM and statuses based on transport node ID of idfw enabled compute collection.  # noqa: E501

        Retrieve all the VM and status by transport node ID of idfw enabled compute collection in the request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_virtual_machine_statuses_by_transport_node_id_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: IdfwVirtualMachineStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_virtual_machine_statuses_by_transport_node_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `list_virtual_machine_statuses_by_transport_node_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/idfw/transport-nodes/{transport-node-id}/vms/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IdfwVirtualMachineStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
