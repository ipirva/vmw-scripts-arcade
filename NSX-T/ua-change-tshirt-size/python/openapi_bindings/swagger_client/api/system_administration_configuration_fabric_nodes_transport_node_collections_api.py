# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesTransportNodeCollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_transport_node_collection(self, body, **kwargs):  # noqa: E501
        """Create transport node collection by attaching Transport Node Profile to cluster.  # noqa: E501

        When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transport_node_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeCollection body: (required)
        :param bool apply_profile: Indicates if the Transport Node Profile (TNP) configuration should be applied during creation
        :return: TransportNodeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_transport_node_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_transport_node_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_transport_node_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create transport node collection by attaching Transport Node Profile to cluster.  # noqa: E501

        When transport node collection is created the hosts which are part of compute collection will be prepared automatically i.e. NSX Manager attempts to install the NSX components on hosts. Transport nodes for these hosts are created using the configuration specified in transport node profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transport_node_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeCollection body: (required)
        :param bool apply_profile: Indicates if the Transport Node Profile (TNP) configuration should be applied during creation
        :return: TransportNodeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'apply_profile']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transport_node_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_transport_node_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'apply_profile' in params:
            query_params.append(('apply_profile', params['apply_profile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_transport_node_collection(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Detach transport node profile from compute collection.  # noqa: E501

        By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transport_node_collection(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_transport_node_collection_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_transport_node_collection_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
            return data

    def delete_transport_node_collection_with_http_info(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Detach transport node profile from compute collection.  # noqa: E501

        By deleting transport node collection, we are detaching the transport node profile(TNP) from the compute collection. It has no effect on existing transport nodes. However, new hosts added to the compute collection will no longer be automatically converted to NSX transport node. Detaching TNP from compute collection does not delete TNP.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transport_node_collection_with_http_info(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transport_node_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_collection_id' is set
        if ('transport_node_collection_id' not in params or
                params['transport_node_collection_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_collection_id` when calling `delete_transport_node_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_collection_id' in params:
            path_params['transport-node-collection-id'] = params['transport_node_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections/{transport-node-collection-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transport_node_collection(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Get Transport Node collection by id  # noqa: E501

        Returns transport node collection by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_collection(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: TransportNodeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transport_node_collection_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transport_node_collection_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
            return data

    def get_transport_node_collection_with_http_info(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Get Transport Node collection by id  # noqa: E501

        Returns transport node collection by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_collection_with_http_info(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: TransportNodeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transport_node_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_collection_id' is set
        if ('transport_node_collection_id' not in params or
                params['transport_node_collection_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_collection_id` when calling `get_transport_node_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_collection_id' in params:
            path_params['transport-node-collection-id'] = params['transport_node_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections/{transport-node-collection-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transport_node_collection_state(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Get Transport Node collection application state  # noqa: E501

        Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_collection_state(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: TransportNodeCollectionState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transport_node_collection_state_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transport_node_collection_state_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
            return data

    def get_transport_node_collection_state_with_http_info(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Get Transport Node collection application state  # noqa: E501

        Returns the state of transport node collection based on the states of transport nodes of the hosts which are part of compute collection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_collection_state_with_http_info(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: TransportNodeCollectionState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transport_node_collection_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_collection_id' is set
        if ('transport_node_collection_id' not in params or
                params['transport_node_collection_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_collection_id` when calling `get_transport_node_collection_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_collection_id' in params:
            path_params['transport-node-collection-id'] = params['transport_node_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections/{transport-node-collection-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeCollectionState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_node_collections(self, **kwargs):  # noqa: E501
        """List Transport Node collections  # noqa: E501

        Returns all Transport Node collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_collections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_moid: Managed object ID of cluster in VC
        :param str compute_collection_id: Compute collection id
        :param str vc_instance_uuid: UUID for VC deployment
        :return: TransportNodeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_node_collections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_node_collections_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_transport_node_collections_with_http_info(self, **kwargs):  # noqa: E501
        """List Transport Node collections  # noqa: E501

        Returns all Transport Node collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_moid: Managed object ID of cluster in VC
        :param str compute_collection_id: Compute collection id
        :param str vc_instance_uuid: UUID for VC deployment
        :return: TransportNodeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_moid', 'compute_collection_id', 'vc_instance_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_node_collections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_moid' in params:
            query_params.append(('cluster_moid', params['cluster_moid']))  # noqa: E501
        if 'compute_collection_id' in params:
            query_params.append(('compute_collection_id', params['compute_collection_id']))  # noqa: E501
        if 'vc_instance_uuid' in params:
            query_params.append(('vc_instance_uuid', params['vc_instance_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeCollectionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_transport_node_collection_realization_retry_profile_realization(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Retry the process on applying transport node profile  # noqa: E501

        This API is relevant for compute collection on which vLCM is enabled. This API shpuld be invoked to retry the realization of transport node profile on the compute collection. This is useful when profile realization had failed because of error in vLCM. This API has no effect if vLCM is not enabled on the computer collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_transport_node_collection_realization_retry_profile_realization(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retry_transport_node_collection_realization_retry_profile_realization_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retry_transport_node_collection_realization_retry_profile_realization_with_http_info(transport_node_collection_id, **kwargs)  # noqa: E501
            return data

    def retry_transport_node_collection_realization_retry_profile_realization_with_http_info(self, transport_node_collection_id, **kwargs):  # noqa: E501
        """Retry the process on applying transport node profile  # noqa: E501

        This API is relevant for compute collection on which vLCM is enabled. This API shpuld be invoked to retry the realization of transport node profile on the compute collection. This is useful when profile realization had failed because of error in vLCM. This API has no effect if vLCM is not enabled on the computer collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_transport_node_collection_realization_retry_profile_realization_with_http_info(transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_collection_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_transport_node_collection_realization_retry_profile_realization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_collection_id' is set
        if ('transport_node_collection_id' not in params or
                params['transport_node_collection_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_collection_id` when calling `retry_transport_node_collection_realization_retry_profile_realization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_collection_id' in params:
            path_params['transport-node-collection-id'] = params['transport_node_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections/{transport-node-collection-id}?action=retry_profile_realization', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_transport_node_collection(self, body, transport_node_collection_id, **kwargs):  # noqa: E501
        """Update Transport Node collection  # noqa: E501

        Attach different transport node profile to compute collection by updating transport node collection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_collection(body, transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeCollection body: (required)
        :param str transport_node_collection_id: (required)
        :return: TransportNodeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_transport_node_collection_with_http_info(body, transport_node_collection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_transport_node_collection_with_http_info(body, transport_node_collection_id, **kwargs)  # noqa: E501
            return data

    def update_transport_node_collection_with_http_info(self, body, transport_node_collection_id, **kwargs):  # noqa: E501
        """Update Transport Node collection  # noqa: E501

        Attach different transport node profile to compute collection by updating transport node collection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_collection_with_http_info(body, transport_node_collection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeCollection body: (required)
        :param str transport_node_collection_id: (required)
        :return: TransportNodeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'transport_node_collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_transport_node_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_transport_node_collection`")  # noqa: E501
        # verify the required parameter 'transport_node_collection_id' is set
        if ('transport_node_collection_id' not in params or
                params['transport_node_collection_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_collection_id` when calling `update_transport_node_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_collection_id' in params:
            path_params['transport-node-collection-id'] = params['transport_node_collection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-collections/{transport-node-collection-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
