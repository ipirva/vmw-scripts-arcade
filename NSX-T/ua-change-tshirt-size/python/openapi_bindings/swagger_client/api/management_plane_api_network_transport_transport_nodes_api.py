# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPINetworkTransportTransportNodesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_nvds_upgrade_precheck(self, **kwargs):  # noqa: E501
        """Start precheck for N-VDS to VDS migration  # noqa: E501

        Start precheck for N-VDS to VDS migration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nvds_upgrade_precheck(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NvdsUpgradePrecheckId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nvds_upgrade_precheck_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nvds_upgrade_precheck_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nvds_upgrade_precheck_with_http_info(self, **kwargs):  # noqa: E501
        """Start precheck for N-VDS to VDS migration  # noqa: E501

        Start precheck for N-VDS to VDS migration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nvds_upgrade_precheck_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NvdsUpgradePrecheckId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nvds_upgrade_precheck" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt/precheck', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NvdsUpgradePrecheckId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nvds_upgrade_precheck_id(self, **kwargs):  # noqa: E501
        """Retrieve latest precheck ID of the N-VDS to VDS migration  # noqa: E501

        Retrieve latest precheck ID of the N-VDS to VDS migration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nvds_upgrade_precheck_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NvdsUpgradePrecheckId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nvds_upgrade_precheck_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_nvds_upgrade_precheck_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_nvds_upgrade_precheck_id_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve latest precheck ID of the N-VDS to VDS migration  # noqa: E501

        Retrieve latest precheck ID of the N-VDS to VDS migration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nvds_upgrade_precheck_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NvdsUpgradePrecheckId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nvds_upgrade_precheck_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt/precheck', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NvdsUpgradePrecheckId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nvds_upgrade_readiness_check_summary(self, precheck_id, **kwargs):  # noqa: E501
        """Get summary of N-VDS to VDS migration  # noqa: E501

        Get summary of N-VDS to VDS migration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nvds_upgrade_readiness_check_summary(precheck_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str precheck_id: (required)
        :return: NvdsUpgradeStatusSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nvds_upgrade_readiness_check_summary_with_http_info(precheck_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nvds_upgrade_readiness_check_summary_with_http_info(precheck_id, **kwargs)  # noqa: E501
            return data

    def get_nvds_upgrade_readiness_check_summary_with_http_info(self, precheck_id, **kwargs):  # noqa: E501
        """Get summary of N-VDS to VDS migration  # noqa: E501

        Get summary of N-VDS to VDS migration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nvds_upgrade_readiness_check_summary_with_http_info(precheck_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str precheck_id: (required)
        :return: NvdsUpgradeStatusSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['precheck_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nvds_upgrade_readiness_check_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'precheck_id' is set
        if ('precheck_id' not in params or
                params['precheck_id'] is None):
            raise ValueError("Missing the required parameter `precheck_id` when calling `get_nvds_upgrade_readiness_check_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'precheck_id' in params:
            path_params['precheck-id'] = params['precheck_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt/status-summary/{precheck-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NvdsUpgradeStatusSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_recommended_vds_topology(self, precheck_id, **kwargs):  # noqa: E501
        """Recommmended topology  # noqa: E501

        Recommmended topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommended_vds_topology(precheck_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str precheck_id: (required)
        :param str compute_manager_id: vCenter identifier
        :param bool show_vds_config: Flag to indicate if VdsTopology should contain VDS configuration
        :return: UpgradeTopology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_recommended_vds_topology_with_http_info(precheck_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_recommended_vds_topology_with_http_info(precheck_id, **kwargs)  # noqa: E501
            return data

    def get_recommended_vds_topology_with_http_info(self, precheck_id, **kwargs):  # noqa: E501
        """Recommmended topology  # noqa: E501

        Recommmended topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_recommended_vds_topology_with_http_info(precheck_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str precheck_id: (required)
        :param str compute_manager_id: vCenter identifier
        :param bool show_vds_config: Flag to indicate if VdsTopology should contain VDS configuration
        :return: UpgradeTopology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['precheck_id', 'compute_manager_id', 'show_vds_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_recommended_vds_topology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'precheck_id' is set
        if ('precheck_id' not in params or
                params['precheck_id'] is None):
            raise ValueError("Missing the required parameter `precheck_id` when calling `get_recommended_vds_topology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'precheck_id' in params:
            path_params['precheck-id'] = params['precheck_id']  # noqa: E501

        query_params = []
        if 'compute_manager_id' in params:
            query_params.append(('compute_manager_id', params['compute_manager_id']))  # noqa: E501
        if 'show_vds_config' in params:
            query_params.append(('show_vds_config', params['show_vds_config']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt/topology/{precheck-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeTopology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ignore_migrate_status_ignore_migrate_status(self, **kwargs):  # noqa: E501
        """Set the migrate status key of ExtraConfigProfile of all Transport Nodes to IGNORE  # noqa: E501

        Set the migrate status key of ExtraConfigProfile of all Transport Nodes to IGNORE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ignore_migrate_status_ignore_migrate_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ignore_migrate_status_ignore_migrate_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ignore_migrate_status_ignore_migrate_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def ignore_migrate_status_ignore_migrate_status_with_http_info(self, **kwargs):  # noqa: E501
        """Set the migrate status key of ExtraConfigProfile of all Transport Nodes to IGNORE  # noqa: E501

        Set the migrate status key of ExtraConfigProfile of all Transport Nodes to IGNORE  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ignore_migrate_status_ignore_migrate_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ignore_migrate_status_ignore_migrate_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt?action=ignore_migrate_status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def migrate_transport_node_from_nvds_to_vds_migrate_to_vds(self, transport_node_id, **kwargs):  # noqa: E501
        """Trigger Migration of NVDS to VDS on this TransportNode.  # noqa: E501

        Migrates all NVDS to VDS on given TransportNode. Upgrade precheck apis should have been run prior to invoking this API on transport node and a migration topology should be created. Please refer to Migration guide for details about migration APIs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_transport_node_from_nvds_to_vds_migrate_to_vds(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.migrate_transport_node_from_nvds_to_vds_migrate_to_vds_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.migrate_transport_node_from_nvds_to_vds_migrate_to_vds_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def migrate_transport_node_from_nvds_to_vds_migrate_to_vds_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Trigger Migration of NVDS to VDS on this TransportNode.  # noqa: E501

        Migrates all NVDS to VDS on given TransportNode. Upgrade precheck apis should have been run prior to invoking this API on transport node and a migration topology should be created. Please refer to Migration guide for details about migration APIs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.migrate_transport_node_from_nvds_to_vds_migrate_to_vds_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method migrate_transport_node_from_nvds_to_vds_migrate_to_vds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `migrate_transport_node_from_nvds_to_vds_migrate_to_vds`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}?action=migrate_to_vds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def nvds_upgrade_cleanup(self, **kwargs):  # noqa: E501
        """Clean up all nvds upgrade related configurations  # noqa: E501

        Clean up all nvds upgrade related configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nvds_upgrade_cleanup(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.nvds_upgrade_cleanup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.nvds_upgrade_cleanup_with_http_info(**kwargs)  # noqa: E501
            return data

    def nvds_upgrade_cleanup_with_http_info(self, **kwargs):  # noqa: E501
        """Clean up all nvds upgrade related configurations  # noqa: E501

        Clean up all nvds upgrade related configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.nvds_upgrade_cleanup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method nvds_upgrade_cleanup" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt?action=cleanup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_target_vds_topology_apply(self, body, **kwargs):  # noqa: E501
        """Set VDS configuration and create it in vCenter  # noqa: E501

        Set VDS configuration and create it in vCenter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_target_vds_topology_apply(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpgradeTopology body: (required)
        :return: UpgradeTopology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_target_vds_topology_apply_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_target_vds_topology_apply_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_target_vds_topology_apply_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set VDS configuration and create it in vCenter  # noqa: E501

        Set VDS configuration and create it in vCenter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_target_vds_topology_apply_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpgradeTopology body: (required)
        :return: UpgradeTopology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_target_vds_topology_apply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_target_vds_topology_apply`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/nvds-urt/topology?action=apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpgradeTopology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
