# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesUserManagementUsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_node_user_ssh_key_add_ssh_key(self, body, userid, **kwargs):  # noqa: E501
        """Add SSH public key to authorized_keys file for node user  # noqa: E501

        Add SSH public key to authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_user_ssh_key_add_ssh_key(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_node_user_ssh_key_add_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_node_user_ssh_key_add_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def add_node_user_ssh_key_add_ssh_key_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Add SSH public key to authorized_keys file for node user  # noqa: E501

        Add SSH public key to authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_user_ssh_key_add_ssh_key_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_node_user_ssh_key_add_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_node_user_ssh_key_add_ssh_key`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `add_node_user_ssh_key_add_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}/ssh-keys?action=add_ssh_key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_user_ssh_key_remove_ssh_key(self, body, userid, **kwargs):  # noqa: E501
        """Remove SSH public key from authorized_keys file for node user  # noqa: E501

        Remove SSH public key from authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_user_ssh_key_remove_ssh_key(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyBaseProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_user_ssh_key_remove_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_user_ssh_key_remove_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def delete_node_user_ssh_key_remove_ssh_key_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Remove SSH public key from authorized_keys file for node user  # noqa: E501

        Remove SSH public key from authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_user_ssh_key_remove_ssh_key_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyBaseProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_user_ssh_key_remove_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_node_user_ssh_key_remove_ssh_key`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `delete_node_user_ssh_key_remove_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}/ssh-keys?action=remove_ssh_key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_user_ssh_keys(self, userid, **kwargs):  # noqa: E501
        """List SSH keys from authorized_keys file for node user  # noqa: E501

        Returns a list of all SSH keys from authorized_keys file for node user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_user_ssh_keys(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: SshKeyPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_user_ssh_keys_with_http_info(userid, **kwargs)  # noqa: E501
        else:
            (data) = self.list_node_user_ssh_keys_with_http_info(userid, **kwargs)  # noqa: E501
            return data

    def list_node_user_ssh_keys_with_http_info(self, userid, **kwargs):  # noqa: E501
        """List SSH keys from authorized_keys file for node user  # noqa: E501

        Returns a list of all SSH keys from authorized_keys file for node user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_user_ssh_keys_with_http_info(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: SshKeyPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_user_ssh_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `list_node_user_ssh_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}/ssh-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SshKeyPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_users(self, **kwargs):  # noqa: E501
        """List node users  # noqa: E501

        Returns the list of users configued to log in to the NSX appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeUserPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_users_with_http_info(self, **kwargs):  # noqa: E501
        """List node users  # noqa: E501

        Returns the list of users configued to log in to the NSX appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeUserPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeUserPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_user(self, userid, **kwargs):  # noqa: E501
        """Read node user  # noqa: E501

        Returns information about a specified user who is configued to log in to the NSX appliance. The valid user IDs are: 0, 10000, 10002.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_user(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_user_with_http_info(userid, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_user_with_http_info(userid, **kwargs)  # noqa: E501
            return data

    def read_node_user_with_http_info(self, userid, **kwargs):  # noqa: E501
        """Read node user  # noqa: E501

        Returns information about a specified user who is configued to log in to the NSX appliance. The valid user IDs are: 0, 10000, 10002.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_user_with_http_info(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `read_node_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeUserProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_node_user_own_password_reset_own_password(self, body, **kwargs):  # noqa: E501
        """Reset a user's own password. Requires current password  # noqa: E501

        Enables a user to reset their own password.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_node_user_own_password_reset_own_password(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserPasswordProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_node_user_own_password_reset_own_password_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_node_user_own_password_reset_own_password_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def reset_node_user_own_password_reset_own_password_with_http_info(self, body, **kwargs):  # noqa: E501
        """Reset a user's own password. Requires current password  # noqa: E501

        Enables a user to reset their own password.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_node_user_own_password_reset_own_password_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserPasswordProperty body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_node_user_own_password_reset_own_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reset_node_user_own_password_reset_own_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users?action=reset_own_password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_node_user_password_reset_password(self, body, userid, **kwargs):  # noqa: E501
        """Reset a user's password without requiring their current password  # noqa: E501

        Unlike the PUT version of this call (PUT /node/users/<userid>), this API does not require that the current password for the user be provided. The account of the target user must be \"ACTIVE\" for the call to succeed. This API only supports user ID 10002.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_node_user_password_reset_password(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserPasswordProperty body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_node_user_password_reset_password_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_node_user_password_reset_password_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def reset_node_user_password_reset_password_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Reset a user's password without requiring their current password  # noqa: E501

        Unlike the PUT version of this call (PUT /node/users/<userid>), this API does not require that the current password for the user be provided. The account of the target user must be \"ACTIVE\" for the call to succeed. This API only supports user ID 10002.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_node_user_password_reset_password_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserPasswordProperty body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_node_user_password_reset_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `reset_node_user_password_reset_password`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `reset_node_user_password_reset_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}?action=reset_password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_user(self, body, userid, **kwargs):  # noqa: E501
        """Update node user  # noqa: E501

        Updates attributes of an existing NSX appliance user. This method cannot be used to add a new user. Modifiable attributes include the username, full name of the user, and password. If you specify a password in a PUT request, it is not returned in the response. Nor is it returned in a GET request. The specified password does not meet the following complexity requirements: - minimum 12 characters in length - minimum 1 uppercase character - minimum 1 lowercase character - minimum 1 numeric character - minimum 1 special character - minimum 5 unique characters - default password complexity rules as enforced by the Linux PAM module The valid user IDs are: 0, 10000, 10002. Note that invoking this API does not update any user-related properties of existing objects in the system and does not modify the username field in existing audit log entries.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_user(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserProperties body: (required)
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_user_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_user_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def update_node_user_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Update node user  # noqa: E501

        Updates attributes of an existing NSX appliance user. This method cannot be used to add a new user. Modifiable attributes include the username, full name of the user, and password. If you specify a password in a PUT request, it is not returned in the response. Nor is it returned in a GET request. The specified password does not meet the following complexity requirements: - minimum 12 characters in length - minimum 1 uppercase character - minimum 1 lowercase character - minimum 1 numeric character - minimum 1 special character - minimum 5 unique characters - default password complexity rules as enforced by the Linux PAM module The valid user IDs are: 0, 10000, 10002. Note that invoking this API does not update any user-related properties of existing objects in the system and does not modify the username field in existing audit log entries.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_user_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserProperties body: (required)
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_user`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `update_node_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeUserProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
