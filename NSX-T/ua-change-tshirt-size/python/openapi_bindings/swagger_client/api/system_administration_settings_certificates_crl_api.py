# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationSettingsCertificatesCRLApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_crl_distribution_point(self, body, **kwargs):  # noqa: E501
        """Create a Crl Distribution Point  # noqa: E501

        Create an entity that will represent a Crl Distribution Point   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_crl_distribution_point(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrlDistributionPoint body: (required)
        :return: CrlDistributionPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_crl_distribution_point_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_crl_distribution_point_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_crl_distribution_point_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Crl Distribution Point  # noqa: E501

        Create an entity that will represent a Crl Distribution Point   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_crl_distribution_point_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrlDistributionPoint body: (required)
        :return: CrlDistributionPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_crl_distribution_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_crl_distribution_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrlDistributionPoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_crl_distribution_point(self, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Delete a CrlDistributionPoint  # noqa: E501

        Delete a CrlDistributionPoint. It does not delete the actual CRL.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_crl_distribution_point(crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crl_distribution_point_id: Unique id of the CrlDistributionPoint to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_crl_distribution_point_with_http_info(crl_distribution_point_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_crl_distribution_point_with_http_info(crl_distribution_point_id, **kwargs)  # noqa: E501
            return data

    def delete_crl_distribution_point_with_http_info(self, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Delete a CrlDistributionPoint  # noqa: E501

        Delete a CrlDistributionPoint. It does not delete the actual CRL.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_crl_distribution_point_with_http_info(crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crl_distribution_point_id: Unique id of the CrlDistributionPoint to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crl_distribution_point_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_crl_distribution_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crl_distribution_point_id' is set
        if ('crl_distribution_point_id' not in params or
                params['crl_distribution_point_id'] is None):
            raise ValueError("Missing the required parameter `crl_distribution_point_id` when calling `delete_crl_distribution_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crl_distribution_point_id' in params:
            path_params['crl-distribution-point-id'] = params['crl_distribution_point_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points/{crl-distribution-point-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crl_distribution_point(self, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Return the CrlDistributionPoint with <crl-distribution-point-id>  # noqa: E501

        Return the CrlDistributionPoint with <crl-distribution-point-id>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crl_distribution_point(crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crl_distribution_point_id: (required)
        :return: CrlDistributionPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crl_distribution_point_with_http_info(crl_distribution_point_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crl_distribution_point_with_http_info(crl_distribution_point_id, **kwargs)  # noqa: E501
            return data

    def get_crl_distribution_point_with_http_info(self, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Return the CrlDistributionPoint with <crl-distribution-point-id>  # noqa: E501

        Return the CrlDistributionPoint with <crl-distribution-point-id>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crl_distribution_point_with_http_info(crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crl_distribution_point_id: (required)
        :return: CrlDistributionPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crl_distribution_point_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crl_distribution_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crl_distribution_point_id' is set
        if ('crl_distribution_point_id' not in params or
                params['crl_distribution_point_id'] is None):
            raise ValueError("Missing the required parameter `crl_distribution_point_id` when calling `get_crl_distribution_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crl_distribution_point_id' in params:
            path_params['crl-distribution-point-id'] = params['crl_distribution_point_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points/{crl-distribution-point-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrlDistributionPoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crl_distribution_point_pem(self, body, **kwargs):  # noqa: E501
        """Return stored CRL in PEM format  # noqa: E501

        Return stored CRL in PEM format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crl_distribution_point_pem(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrlPemRequestType body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crl_distribution_point_pem_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crl_distribution_point_pem_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_crl_distribution_point_pem_with_http_info(self, body, **kwargs):  # noqa: E501
        """Return stored CRL in PEM format  # noqa: E501

        Return stored CRL in PEM format  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crl_distribution_point_pem_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrlPemRequestType body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crl_distribution_point_pem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_crl_distribution_point_pem`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points/pem-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_crl_distribution_point_status(self, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Return the status of the CrlDistributionPoint  # noqa: E501

        Return the status of the CrlDistributionPoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crl_distribution_point_status(crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crl_distribution_point_id: (required)
        :return: CrlDistributionPointStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_crl_distribution_point_status_with_http_info(crl_distribution_point_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_crl_distribution_point_status_with_http_info(crl_distribution_point_id, **kwargs)  # noqa: E501
            return data

    def get_crl_distribution_point_status_with_http_info(self, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Return the status of the CrlDistributionPoint  # noqa: E501

        Return the status of the CrlDistributionPoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_crl_distribution_point_status_with_http_info(crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str crl_distribution_point_id: (required)
        :return: CrlDistributionPointStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['crl_distribution_point_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_crl_distribution_point_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'crl_distribution_point_id' is set
        if ('crl_distribution_point_id' not in params or
                params['crl_distribution_point_id'] is None):
            raise ValueError("Missing the required parameter `crl_distribution_point_id` when calling `get_crl_distribution_point_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crl_distribution_point_id' in params:
            path_params['crl-distribution-point-id'] = params['crl_distribution_point_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points/{crl-distribution-point-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrlDistributionPointStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_crl_distribution_points(self, **kwargs):  # noqa: E501
        """Return the list of CrlDistributionPoints  # noqa: E501

        Return the list of CrlDistributionPoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_crl_distribution_points(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: CrlDistributionPointList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_crl_distribution_points_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_crl_distribution_points_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_crl_distribution_points_with_http_info(self, **kwargs):  # noqa: E501
        """Return the list of CrlDistributionPoints  # noqa: E501

        Return the list of CrlDistributionPoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_crl_distribution_points_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: CrlDistributionPointList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_crl_distribution_points" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrlDistributionPointList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_crl_distribution_point(self, body, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Update CrlDistributionPoint with <crl-distribution-point-id> This allows updating the ManagedResource fields.   # noqa: E501

        Update CrlDistributionPoint with <crl-distribution-point-id> This allows updating the ManagedResource fields.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_crl_distribution_point(body, crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrlDistributionPoint body: (required)
        :param str crl_distribution_point_id: (required)
        :return: CrlDistributionPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_crl_distribution_point_with_http_info(body, crl_distribution_point_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_crl_distribution_point_with_http_info(body, crl_distribution_point_id, **kwargs)  # noqa: E501
            return data

    def update_crl_distribution_point_with_http_info(self, body, crl_distribution_point_id, **kwargs):  # noqa: E501
        """Update CrlDistributionPoint with <crl-distribution-point-id> This allows updating the ManagedResource fields.   # noqa: E501

        Update CrlDistributionPoint with <crl-distribution-point-id> This allows updating the ManagedResource fields.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_crl_distribution_point_with_http_info(body, crl_distribution_point_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CrlDistributionPoint body: (required)
        :param str crl_distribution_point_id: (required)
        :return: CrlDistributionPoint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'crl_distribution_point_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_crl_distribution_point" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_crl_distribution_point`")  # noqa: E501
        # verify the required parameter 'crl_distribution_point_id' is set
        if ('crl_distribution_point_id' not in params or
                params['crl_distribution_point_id'] is None):
            raise ValueError("Missing the required parameter `crl_distribution_point_id` when calling `update_crl_distribution_point`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'crl_distribution_point_id' in params:
            path_params['crl-distribution-point-id'] = params['crl_distribution_point_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/crl-distribution-points/{crl-distribution-point-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CrlDistributionPoint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
