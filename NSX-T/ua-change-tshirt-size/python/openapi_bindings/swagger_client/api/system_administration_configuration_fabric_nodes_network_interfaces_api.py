# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesNetworkInterfacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_node_interfaces(self, **kwargs):  # noqa: E501
        """List the Node's Network Interfaces  # noqa: E501

        Returns the number of interfaces on the node appliance and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """List the Node's Network Interfaces  # noqa: E501

        Returns the number of interfaces on the node appliance and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkInterfacePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_network_interface_statistics(self, interface_id, **kwargs):  # noqa: E501
        """Read the Node's Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_interface_statistics(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_network_interface_statistics_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_network_interface_statistics_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def read_network_interface_statistics_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """Read the Node's Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_interface_statistics_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_network_interface_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_network_interface_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces/{interface-id}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceStatisticsProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_network_properties(self, **kwargs):  # noqa: E501
        """Read network configuration properties  # noqa: E501

        Read network configuration properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_network_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_network_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_network_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Read network configuration properties  # noqa: E501

        Read network configuration properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_network_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_interface(self, interface_id, **kwargs):  # noqa: E501
        """Read the Node's Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_interface(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_interface_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_interface_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def read_node_interface_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """Read the Node's Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_interface_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces/{interface-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_interface(self, body, interface_id, **kwargs):  # noqa: E501
        """Update the Node's Network Interface  # noqa: E501

        Updates the specified interface properties. You cannot change the properties <code>ip_configuration</code>, <code>ip_addresses</code>, or <code>plane</code>. NSX Manager must have a static IP address. You must use NSX CLI to configure a controller or an edge node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_interface(body, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNetworkInterfaceProperties body: (required)
        :param str interface_id: ID of interface to update (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_interface_with_http_info(body, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_interface_with_http_info(body, interface_id, **kwargs)  # noqa: E501
            return data

    def update_node_interface_with_http_info(self, body, interface_id, **kwargs):  # noqa: E501
        """Update the Node's Network Interface  # noqa: E501

        Updates the specified interface properties. You cannot change the properties <code>ip_configuration</code>, <code>ip_addresses</code>, or <code>plane</code>. NSX Manager must have a static IP address. You must use NSX CLI to configure a controller or an edge node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_interface_with_http_info(body, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNetworkInterfaceProperties body: (required)
        :param str interface_id: ID of interface to update (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'interface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_interface`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `update_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces/{interface-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
