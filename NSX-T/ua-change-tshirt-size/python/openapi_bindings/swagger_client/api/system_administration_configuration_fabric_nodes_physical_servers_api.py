# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesPhysicalServersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_physical_server(self, physical_server_id, **kwargs):  # noqa: E501
        """Return a specific physical server  # noqa: E501

        Returns information about physical/bare metal server based on given transport node id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_physical_server(physical_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str physical_server_id: (required)
        :return: PhysicalServer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_physical_server_with_http_info(physical_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_physical_server_with_http_info(physical_server_id, **kwargs)  # noqa: E501
            return data

    def get_physical_server_with_http_info(self, physical_server_id, **kwargs):  # noqa: E501
        """Return a specific physical server  # noqa: E501

        Returns information about physical/bare metal server based on given transport node id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_physical_server_with_http_info(physical_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str physical_server_id: (required)
        :return: PhysicalServer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['physical_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_physical_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'physical_server_id' is set
        if ('physical_server_id' not in params or
                params['physical_server_id'] is None):
            raise ValueError("Missing the required parameter `physical_server_id` when calling `get_physical_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'physical_server_id' in params:
            path_params['physical-server-id'] = params['physical_server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/physical-servers/{physical-server-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhysicalServer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_physical_servers(self, **kwargs):  # noqa: E501
        """Return the list of physical servers  # noqa: E501

        Returns information of all physical/bare metal servers registered as TN.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_physical_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str display_name: Display Name of the physical server
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str os_type: OS type of the physical server
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: PhysicalServerListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_physical_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_physical_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_physical_servers_with_http_info(self, **kwargs):  # noqa: E501
        """Return the list of physical servers  # noqa: E501

        Returns information of all physical/bare metal servers registered as TN.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_physical_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str display_name: Display Name of the physical server
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str os_type: OS type of the physical server
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: PhysicalServerListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'display_name', 'included_fields', 'os_type', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_physical_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'os_type' in params:
            query_params.append(('os_type', params['os_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/physical-servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhysicalServerListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
