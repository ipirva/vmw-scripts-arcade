# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPIGroupingObjectsNSProfilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_ip_set(self, body, **kwargs):  # noqa: E501
        """Create IPSet  # noqa: E501

        Creates a new IPSet that can group either IPv4 or IPv6 individual ip addresses, ranges or subnets.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ip_set(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IPSet body: (required)
        :return: IPSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ip_set_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ip_set_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ip_set_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create IPSet  # noqa: E501

        Creates a new IPSet that can group either IPv4 or IPv6 individual ip addresses, ranges or subnets.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ip_set_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IPSet body: (required)
        :return: IPSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ip_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ip_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ip-sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPSet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ns_profile(self, ns_profile_id, **kwargs):  # noqa: E501
        """Delete NSProfile  # noqa: E501

        Deletes the specified NSProfile. By default, if the NSProfile is consumed in a Firewall rule, it won't get deleted. In such situations, pass \"force=true\" as query param to force delete the NSProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ns_profile(ns_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ns_profile_id: NSProfile Id (required)
        :param bool force: Force delete the resource even if it is being used somewhere 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ns_profile_with_http_info(ns_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ns_profile_with_http_info(ns_profile_id, **kwargs)  # noqa: E501
            return data

    def delete_ns_profile_with_http_info(self, ns_profile_id, **kwargs):  # noqa: E501
        """Delete NSProfile  # noqa: E501

        Deletes the specified NSProfile. By default, if the NSProfile is consumed in a Firewall rule, it won't get deleted. In such situations, pass \"force=true\" as query param to force delete the NSProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ns_profile_with_http_info(ns_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ns_profile_id: NSProfile Id (required)
        :param bool force: Force delete the resource even if it is being used somewhere 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ns_profile_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ns_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ns_profile_id' is set
        if ('ns_profile_id' not in params or
                params['ns_profile_id'] is None):
            raise ValueError("Missing the required parameter `ns_profile_id` when calling `delete_ns_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ns_profile_id' in params:
            path_params['ns-profile-id'] = params['ns_profile_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ns-profiles/{ns-profile-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ns_profiles(self, **kwargs):  # noqa: E501
        """List NSProfiles  # noqa: E501

        List the NSProfiles created in a paginated format.The page size is restricted to 50 NSProfiles, so that the size of the response remains small even when there are high number of NSProfiles with multiple attributes and multiple attribute values for each attribute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ns_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type: Fetch NSProfiles for the given attribute type
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NSProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ns_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ns_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ns_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List NSProfiles  # noqa: E501

        List the NSProfiles created in a paginated format.The page size is restricted to 50 NSProfiles, so that the size of the response remains small even when there are high number of NSProfiles with multiple attributes and multiple attribute values for each attribute.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ns_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_type: Fetch NSProfiles for the given attribute type
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NSProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_type', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ns_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attribute_type' in params:
            query_params.append(('attribute_type', params['attribute_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ns-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NSProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ns_supported_attributes(self, **kwargs):  # noqa: E501
        """List NSProfile supported attribute and sub-attributes  # noqa: E501

        Returns supported attribute and sub-attributes for specified attribute type with their supported values, if provided in query/request parameter, else will fetch all supported attribute and sub-attributes for all supported attribute types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ns_supported_attributes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_source: Fetch attributes source
        :param str attribute_type: Fetch attributes and sub-attributes for the given attribute type
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NSSupportedAttributesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ns_supported_attributes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ns_supported_attributes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ns_supported_attributes_with_http_info(self, **kwargs):  # noqa: E501
        """List NSProfile supported attribute and sub-attributes  # noqa: E501

        Returns supported attribute and sub-attributes for specified attribute type with their supported values, if provided in query/request parameter, else will fetch all supported attribute and sub-attributes for all supported attribute types.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ns_supported_attributes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_source: Fetch attributes source
        :param str attribute_type: Fetch attributes and sub-attributes for the given attribute type
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NSSupportedAttributesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_source', 'attribute_type', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ns_supported_attributes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attribute_source' in params:
            query_params.append(('attribute_source', params['attribute_source']))  # noqa: E501
        if 'attribute_type' in params:
            query_params.append(('attribute_type', params['attribute_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ns-profiles/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NSSupportedAttributesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ns_supported_attributes_types(self, **kwargs):  # noqa: E501
        """List NSProfile supported attribute types  # noqa: E501

        Returns supported attribute type strings for NSProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ns_supported_attributes_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NSSupportedAttributeTypesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ns_supported_attributes_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ns_supported_attributes_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ns_supported_attributes_types_with_http_info(self, **kwargs):  # noqa: E501
        """List NSProfile supported attribute types  # noqa: E501

        Returns supported attribute type strings for NSProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ns_supported_attributes_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NSSupportedAttributeTypesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ns_supported_attributes_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ns-profiles/attribute-types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NSSupportedAttributeTypesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ns_profile(self, ns_profile_id, **kwargs):  # noqa: E501
        """Read NSProfile  # noqa: E501

        Returns information about the specified NSProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ns_profile(ns_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ns_profile_id: NSProfile Id (required)
        :return: NSProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ns_profile_with_http_info(ns_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_ns_profile_with_http_info(ns_profile_id, **kwargs)  # noqa: E501
            return data

    def read_ns_profile_with_http_info(self, ns_profile_id, **kwargs):  # noqa: E501
        """Read NSProfile  # noqa: E501

        Returns information about the specified NSProfile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ns_profile_with_http_info(ns_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ns_profile_id: NSProfile Id (required)
        :return: NSProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ns_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ns_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ns_profile_id' is set
        if ('ns_profile_id' not in params or
                params['ns_profile_id'] is None):
            raise ValueError("Missing the required parameter `ns_profile_id` when calling `read_ns_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ns_profile_id' in params:
            path_params['ns-profile-id'] = params['ns_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ns-profiles/{ns-profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NSProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ns_profile(self, body, ns_profile_id, **kwargs):  # noqa: E501
        """Update NSProfile  # noqa: E501

        Updates the specified NSProfile. Rules for using attributes and sub-attributes in single NSProfile 1. One type of attribute can't have multiple occurrences. ( Example -  Attribute type APP_ID can be used only once per NSProfile.) 2. Values for an attribute are mentioned as array of strings.  ( Example - For type APP_ID , values can be mentioned as [\"SSL\",\"FTP\"].) 3. If sub-attribtes are mentioned for an attribute, then only single  value is allowed for that attribute. 4. To get a list of supported  attributes and sub-attributes fire the following REST API  GET https://&lt;nsx-mgr&gt;/api/v1/ns-profiles/attributes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ns_profile(body, ns_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NSProfile body: (required)
        :param str ns_profile_id: NSProfile Id (required)
        :return: NSProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ns_profile_with_http_info(body, ns_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ns_profile_with_http_info(body, ns_profile_id, **kwargs)  # noqa: E501
            return data

    def update_ns_profile_with_http_info(self, body, ns_profile_id, **kwargs):  # noqa: E501
        """Update NSProfile  # noqa: E501

        Updates the specified NSProfile. Rules for using attributes and sub-attributes in single NSProfile 1. One type of attribute can't have multiple occurrences. ( Example -  Attribute type APP_ID can be used only once per NSProfile.) 2. Values for an attribute are mentioned as array of strings.  ( Example - For type APP_ID , values can be mentioned as [\"SSL\",\"FTP\"].) 3. If sub-attribtes are mentioned for an attribute, then only single  value is allowed for that attribute. 4. To get a list of supported  attributes and sub-attributes fire the following REST API  GET https://&lt;nsx-mgr&gt;/api/v1/ns-profiles/attributes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ns_profile_with_http_info(body, ns_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NSProfile body: (required)
        :param str ns_profile_id: NSProfile Id (required)
        :return: NSProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ns_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ns_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ns_profile`")  # noqa: E501
        # verify the required parameter 'ns_profile_id' is set
        if ('ns_profile_id' not in params or
                params['ns_profile_id'] is None):
            raise ValueError("Missing the required parameter `ns_profile_id` when calling `update_ns_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ns_profile_id' in params:
            path_params['ns-profile-id'] = params['ns_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ns-profiles/{ns-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NSProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
