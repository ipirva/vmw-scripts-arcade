# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricProfilesTransportNodeProfilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_transport_node_profile(self, body, **kwargs):  # noqa: E501
        """Create a Transport Node Profile  # noqa: E501

        Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transport_node_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeProfile body: (required)
        :return: TransportNodeProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_transport_node_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_transport_node_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_transport_node_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Transport Node Profile  # noqa: E501

        Transport node profile captures the configuration needed to create a transport node. A transport node profile can be attached to compute collections for automatic TN creation of member hosts.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transport_node_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeProfile body: (required)
        :return: TransportNodeProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transport_node_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_transport_node_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_transport_node_profile(self, transport_node_profile_id, **kwargs):  # noqa: E501
        """Delete a Transport Node Profile  # noqa: E501

        Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transport_node_profile(transport_node_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_transport_node_profile_with_http_info(transport_node_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_transport_node_profile_with_http_info(transport_node_profile_id, **kwargs)  # noqa: E501
            return data

    def delete_transport_node_profile_with_http_info(self, transport_node_profile_id, **kwargs):  # noqa: E501
        """Delete a Transport Node Profile  # noqa: E501

        Deletes the specified transport node profile. A transport node profile can be deleted only when it is not attached to any compute collection.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transport_node_profile_with_http_info(transport_node_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transport_node_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_profile_id' is set
        if ('transport_node_profile_id' not in params or
                params['transport_node_profile_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_profile_id` when calling `delete_transport_node_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_profile_id' in params:
            path_params['transport-node-profile-id'] = params['transport_node_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-profiles/{transport-node-profile-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transport_node_profile(self, transport_node_profile_id, **kwargs):  # noqa: E501
        """Get a Transport Node  # noqa: E501

        Returns information about a specified transport node profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_profile(transport_node_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_profile_id: (required)
        :return: TransportNodeProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transport_node_profile_with_http_info(transport_node_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transport_node_profile_with_http_info(transport_node_profile_id, **kwargs)  # noqa: E501
            return data

    def get_transport_node_profile_with_http_info(self, transport_node_profile_id, **kwargs):  # noqa: E501
        """Get a Transport Node  # noqa: E501

        Returns information about a specified transport node profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_profile_with_http_info(transport_node_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_profile_id: (required)
        :return: TransportNodeProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transport_node_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_profile_id' is set
        if ('transport_node_profile_id' not in params or
                params['transport_node_profile_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_profile_id` when calling `get_transport_node_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_profile_id' in params:
            path_params['transport-node-profile-id'] = params['transport_node_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-profiles/{transport-node-profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_node_profiles(self, **kwargs):  # noqa: E501
        """List Transport Nodes  # noqa: E501

        Returns information about all transport node profiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: TransportNodeProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_node_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_node_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_transport_node_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List Transport Nodes  # noqa: E501

        Returns information about all transport node profiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: TransportNodeProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_node_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_transport_node_profile(self, body, transport_node_profile_id, **kwargs):  # noqa: E501
        """Update a Transport Node Profile  # noqa: E501

        When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_profile(body, transport_node_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeProfile body: (required)
        :param str transport_node_profile_id: (required)
        :param str esx_mgmt_if_migration_dest: The network ids to which the ESX vmk interfaces will be migrated
        :param str if_id: The ESX vmk interfaces to migrate
        :param str ping_ip: IP Addresses to ping right after ESX vmk interfaces were migrated.
        :param bool skip_validation: Whether to skip front-end validation for vmk/vnic/pnic migration
        :param str vnic: The ESX vmk interfaces and/or VM NIC to migrate
        :param str vnic_migration_dest: The migration destinations of ESX vmk interfaces and/or VM NIC
        :return: TransportNodeProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_transport_node_profile_with_http_info(body, transport_node_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_transport_node_profile_with_http_info(body, transport_node_profile_id, **kwargs)  # noqa: E501
            return data

    def update_transport_node_profile_with_http_info(self, body, transport_node_profile_id, **kwargs):  # noqa: E501
        """Update a Transport Node Profile  # noqa: E501

        When configurations of a transport node profile(TNP) is updated, all the transport nodes in all the compute collections to which this TNP is attached are updated to reflect the updated configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_profile_with_http_info(body, transport_node_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNodeProfile body: (required)
        :param str transport_node_profile_id: (required)
        :param str esx_mgmt_if_migration_dest: The network ids to which the ESX vmk interfaces will be migrated
        :param str if_id: The ESX vmk interfaces to migrate
        :param str ping_ip: IP Addresses to ping right after ESX vmk interfaces were migrated.
        :param bool skip_validation: Whether to skip front-end validation for vmk/vnic/pnic migration
        :param str vnic: The ESX vmk interfaces and/or VM NIC to migrate
        :param str vnic_migration_dest: The migration destinations of ESX vmk interfaces and/or VM NIC
        :return: TransportNodeProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'transport_node_profile_id', 'esx_mgmt_if_migration_dest', 'if_id', 'ping_ip', 'skip_validation', 'vnic', 'vnic_migration_dest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_transport_node_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_transport_node_profile`")  # noqa: E501
        # verify the required parameter 'transport_node_profile_id' is set
        if ('transport_node_profile_id' not in params or
                params['transport_node_profile_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_profile_id` when calling `update_transport_node_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_profile_id' in params:
            path_params['transport-node-profile-id'] = params['transport_node_profile_id']  # noqa: E501

        query_params = []
        if 'esx_mgmt_if_migration_dest' in params:
            query_params.append(('esx_mgmt_if_migration_dest', params['esx_mgmt_if_migration_dest']))  # noqa: E501
        if 'if_id' in params:
            query_params.append(('if_id', params['if_id']))  # noqa: E501
        if 'ping_ip' in params:
            query_params.append(('ping_ip', params['ping_ip']))  # noqa: E501
        if 'skip_validation' in params:
            query_params.append(('skip_validation', params['skip_validation']))  # noqa: E501
        if 'vnic' in params:
            query_params.append(('vnic', params['vnic']))  # noqa: E501
        if 'vnic_migration_dest' in params:
            query_params.append(('vnic_migration_dest', params['vnic_migration_dest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-node-profiles/{transport-node-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
