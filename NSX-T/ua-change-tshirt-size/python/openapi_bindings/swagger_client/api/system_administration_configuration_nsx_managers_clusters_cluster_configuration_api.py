# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationNSXManagersClustersClusterConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_cluster_node(self, body, action, **kwargs):  # noqa: E501
        """Add a controller to the cluster  # noqa: E501

        Add a new controller to the NSX cluster. Deprecated. Use POST /cluster?action=join_cluster to join a node to cluster. The controller comes with the new node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cluster_node(body, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClusterNodeSpec body: (required)
        :param str action: (required)
        :return: ClusterNodeConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cluster_node_with_http_info(body, action, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cluster_node_with_http_info(body, action, **kwargs)  # noqa: E501
            return data

    def add_cluster_node_with_http_info(self, body, action, **kwargs):  # noqa: E501
        """Add a controller to the cluster  # noqa: E501

        Add a new controller to the NSX cluster. Deprecated. Use POST /cluster?action=join_cluster to join a node to cluster. The controller comes with the new node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cluster_node_with_http_info(body, action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClusterNodeSpec body: (required)
        :param str action: (required)
        :return: ClusterNodeConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cluster_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_cluster_node`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `add_cluster_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cluster_node_config(self, node_id, **kwargs):  # noqa: E501
        """Remove a controller from the cluster  # noqa: E501

        Removes the specified controller from the NSX cluster. Before you can remove a controller from the cluster, you must shut down the controller service with the \"stop service controller\" command. Deprecated. Use POST /cluster/<node-id>?action=remove_node to detach a node from cluster. The controller is removed with the node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_node_config(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cluster_node_config_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cluster_node_config_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def delete_cluster_node_config_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Remove a controller from the cluster  # noqa: E501

        Removes the specified controller from the NSX cluster. Before you can remove a controller from the cluster, you must shut down the controller service with the \"stop service controller\" command. Deprecated. Use POST /cluster/<node-id>?action=remove_node to detach a node from cluster. The controller is removed with the node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cluster_node_config_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster_node_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `delete_cluster_node_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/{node-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detach_cluster_node_remove_node(self, node_id, **kwargs):  # noqa: E501
        """Detach a node from the Cluster  # noqa: E501

        Detach a node from the Cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_cluster_node_remove_node(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: UUID of the node (required)
        :param str force:
        :param str graceful_shutdown:
        :param str ignore_repository_ip_check:
        :return: ClusterConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detach_cluster_node_remove_node_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.detach_cluster_node_remove_node_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def detach_cluster_node_remove_node_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Detach a node from the Cluster  # noqa: E501

        Detach a node from the Cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detach_cluster_node_remove_node_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: UUID of the node (required)
        :param str force:
        :param str graceful_shutdown:
        :param str ignore_repository_ip_check:
        :return: ClusterConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'force', 'graceful_shutdown', 'ignore_repository_ip_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_cluster_node_remove_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `detach_cluster_node_remove_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501
        if 'graceful_shutdown' in params:
            query_params.append(('graceful-shutdown', params['graceful_shutdown']))  # noqa: E501
        if 'ignore_repository_ip_check' in params:
            query_params.append(('ignore-repository-ip-check', params['ignore_repository_ip_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{node-id}?action=remove_node', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backup_ui_frames_info(self, **kwargs):  # noqa: E501
        """Get backup frames for UI  # noqa: E501

        Returns list of backup frames and some metadata to be used by UI.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_ui_frames_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str ui_tab_type:
        :return: BackupUiFramesInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backup_ui_frames_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_backup_ui_frames_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_backup_ui_frames_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get backup frames for UI  # noqa: E501

        Returns list of backup frames and some metadata to be used by UI.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_ui_frames_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str ui_tab_type:
        :return: BackupUiFramesInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'ui_tab_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_ui_frames_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'ui_tab_type' in params:
            query_params.append(('ui_tab_type', params['ui_tab_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups/ui_frames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupUiFramesInfoList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cluster_node_config(self, node_id, **kwargs):  # noqa: E501
        """Read cluster node configuration  # noqa: E501

        Returns information about the specified NSX cluster node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_config(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ClusterNodeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cluster_node_config_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cluster_node_config_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_cluster_node_config_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Read cluster node configuration  # noqa: E501

        Returns information about the specified NSX cluster node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cluster_node_config_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ClusterNodeInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_node_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_cluster_node_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{node-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_delete_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target cluster node  # noqa: E501

        Invoke DELETE request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_delete_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_delete_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_delete_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target cluster node  # noqa: E501

        Invoke DELETE request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_delete_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_delete_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_delete_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_get_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target cluster node  # noqa: E501

        Invoke GET request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_get_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_get_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_get_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target cluster node  # noqa: E501

        Invoke GET request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_get_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_get_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_get_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_post_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target cluster node  # noqa: E501

        Invoke POST request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_post_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_post_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_post_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target cluster node  # noqa: E501

        Invoke POST request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_post_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_post_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_post_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_put_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target cluster node  # noqa: E501

        Invoke PUT request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_put_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_put_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_put_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target cluster node  # noqa: E501

        Invoke PUT request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_put_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_put_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_put_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def join_cluster_join_cluster(self, body, **kwargs):  # noqa: E501
        """Join this node to a NSX Cluster  # noqa: E501

        Join this node to a NSX Cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.join_cluster_join_cluster(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JoinClusterParameters body: (required)
        :return: ClusterConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.join_cluster_join_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.join_cluster_join_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def join_cluster_join_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """Join this node to a NSX Cluster  # noqa: E501

        Join this node to a NSX Cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.join_cluster_join_cluster_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JoinClusterParameters body: (required)
        :return: ClusterConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method join_cluster_join_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `join_cluster_join_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster?action=join_cluster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cluster_node_configs(self, **kwargs):  # noqa: E501
        """List Cluster Node Configurations  # noqa: E501

        Returns information about all NSX cluster nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cluster_node_configs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ClusterNodeConfigListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cluster_node_configs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_cluster_node_configs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_cluster_node_configs_with_http_info(self, **kwargs):  # noqa: E501
        """List Cluster Node Configurations  # noqa: E501

        Returns information about all NSX cluster nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cluster_node_configs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ClusterNodeConfigListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cluster_node_configs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeConfigListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_cluster_config(self, **kwargs):  # noqa: E501
        """Read Cluster Configuration  # noqa: E501

        Returns information about the NSX cluster configuration. An NSX cluster has two functions or purposes, commonly referred to as \"roles.\" These two roles are control and management. Each NSX installation has a single cluster. Separate NSX clusters do not share data. In other words, a given data-plane node is attached to only one cluster, not to multiple clusters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClusterConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_cluster_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_cluster_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_cluster_config_with_http_info(self, **kwargs):  # noqa: E501
        """Read Cluster Configuration  # noqa: E501

        Returns information about the NSX cluster configuration. An NSX cluster has two functions or purposes, commonly referred to as \"roles.\" These two roles are control and management. Each NSX installation has a single cluster. Separate NSX clusters do not share data. In other words, a given data-plane node is attached to only one cluster, not to multiple clusters.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClusterConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_cluster_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_cluster_node_config(self, node_id, **kwargs):  # noqa: E501
        """Read Cluster Node Configuration  # noqa: E501

        Returns information about the specified NSX cluster node. Deprecated. Use GET /cluster/<node-id> to get cluster node configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_node_config(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ClusterNodeConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_cluster_node_config_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_cluster_node_config_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def read_cluster_node_config_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Read Cluster Node Configuration  # noqa: E501

        Returns information about the specified NSX cluster node. Deprecated. Use GET /cluster/<node-id> to get cluster node configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_node_config_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ClusterNodeConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_cluster_node_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_cluster_node_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/nodes/{node-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClusterNodeConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
