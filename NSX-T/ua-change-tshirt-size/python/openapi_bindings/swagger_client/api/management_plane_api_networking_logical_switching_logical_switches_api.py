# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPINetworkingLogicalSwitchingLogicalSwitchesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_logical_switch(self, body, **kwargs):  # noqa: E501
        """Create a Logical Switch  # noqa: E501

        Creates a new logical switch. The request must include the transport_zone_id, display_name, and admin_state (UP or DOWN). The replication_mode (MTEP or SOURCE) is required for overlay logical switches, but not for VLAN-based logical switches. A vlan needs to be provided for VLAN-based logical switches   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_logical_switch(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogicalSwitch body: (required)
        :return: LogicalSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_logical_switch_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_logical_switch_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_logical_switch_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Logical Switch  # noqa: E501

        Creates a new logical switch. The request must include the transport_zone_id, display_name, and admin_state (UP or DOWN). The replication_mode (MTEP or SOURCE) is required for overlay logical switches, but not for VLAN-based logical switches. A vlan needs to be provided for VLAN-based logical switches   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_logical_switch_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogicalSwitch body: (required)
        :return: LogicalSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_logical_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_logical_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_logical_switch(self, lswitch_id, **kwargs):  # noqa: E501
        """Delete a Logical Switch  # noqa: E501

        Removes a logical switch from the associated overlay or VLAN transport zone. By default, a logical switch cannot be deleted if there are logical ports on the switch, or it is added to a NSGroup. Cascade option can be used to delete all ports and the logical switch. Detach option can be used to delete the logical switch forcibly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_logical_switch(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param bool cascade: Delete a Logical Switch and all the logical ports in it, if none of the logical ports have any attachment. 
        :param bool detach: Force delete a logical switch
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_logical_switch_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_logical_switch_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def delete_logical_switch_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Delete a Logical Switch  # noqa: E501

        Removes a logical switch from the associated overlay or VLAN transport zone. By default, a logical switch cannot be deleted if there are logical ports on the switch, or it is added to a NSGroup. Cascade option can be used to delete all ports and the logical switch. Detach option can be used to delete the logical switch forcibly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_logical_switch_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param bool cascade: Delete a Logical Switch and all the logical ports in it, if none of the logical ports have any attachment. 
        :param bool detach: Force delete a logical switch
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id', 'cascade', 'detach']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_logical_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `delete_logical_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []
        if 'cascade' in params:
            query_params.append(('cascade', params['cascade']))  # noqa: E501
        if 'detach' in params:
            query_params.append(('detach', params['detach']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch(self, lswitch_id, **kwargs):  # noqa: E501
        """Get Logical Switch associated with the provided id (lswitch-id)  # noqa: E501

        Returns information about the specified logical switch Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :return: LogicalSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get Logical Switch associated with the provided id (lswitch-id)  # noqa: E501

        Returns information about the specified logical switch Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :return: LogicalSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_mac_table(self, lswitch_id, **kwargs):  # noqa: E501
        """Get MAC Table for Logical Switch of the Given ID (lswitch-id)  # noqa: E501

        Returns MAC table of a specified logical switch from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_mac_table(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: MacAddressListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_mac_table_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_mac_table_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_mac_table_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get MAC Table for Logical Switch of the Given ID (lswitch-id)  # noqa: E501

        Returns MAC table of a specified logical switch from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_mac_table_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: MacAddressListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'source', 'transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_mac_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_mac_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'transport_node_id' in params:
            query_params.append(('transport_node_id', params['transport_node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/mac-table', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MacAddressListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_mac_table_in_csv_format_csv(self, lswitch_id, **kwargs):  # noqa: E501
        """Get MAC Table for Logical Switch of the Given ID (lswitch-id)  # noqa: E501

        Returns MAC table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_mac_table_in_csv_format_csv(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: MacAddressCsvListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_mac_table_in_csv_format_csv_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_mac_table_in_csv_format_csv_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_mac_table_in_csv_format_csv_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get MAC Table for Logical Switch of the Given ID (lswitch-id)  # noqa: E501

        Returns MAC table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_mac_table_in_csv_format_csv_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: MacAddressCsvListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id', 'source', 'transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_mac_table_in_csv_format_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_mac_table_in_csv_format_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'transport_node_id' in params:
            query_params.append(('transport_node_id', params['transport_node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/mac-table?format=csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MacAddressCsvListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_state(self, lswitch_id, **kwargs):  # noqa: E501
        """Get the realized state associated with provided logical switch id  # noqa: E501

        Returns current state of the logical switch configuration and details of only out-of-sync transport nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_state(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :return: LogicalSwitchState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_state_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_state_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_state_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get the realized state associated with provided logical switch id  # noqa: E501

        Returns current state of the logical switch configuration and details of only out-of-sync transport nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_state_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :return: LogicalSwitchState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitchState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_statistics(self, lswitch_id, **kwargs):  # noqa: E501
        """Get Statistics for Logical Switch of the Given ID (lswitch-id)  # noqa: E501

        Returns statistics  of a specified logical switch. The query parameter \"source=realtime\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_statistics(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str source: Data source type.
        :return: LogicalSwitchStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_statistics_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_statistics_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_statistics_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get Statistics for Logical Switch of the Given ID (lswitch-id)  # noqa: E501

        Returns statistics  of a specified logical switch. The query parameter \"source=realtime\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_statistics_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str source: Data source type.
        :return: LogicalSwitchStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitchStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_status(self, lswitch_id, **kwargs):  # noqa: E501
        """Get Logical Switch runtime status info for a given logical switch  # noqa: E501

        Returns the number of ports assigned to a logical switch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_status(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :return: LogicalSwitchStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_status_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_status_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_status_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get Logical Switch runtime status info for a given logical switch  # noqa: E501

        Returns the number of ports assigned to a logical switch.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_status_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :return: LogicalSwitchStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitchStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_status_summary(self, **kwargs):  # noqa: E501
        """Get Status Summary of All Logical Switches in the System  # noqa: E501

        Returns Operational status of all logical switches. The query parameter \"source=realtime\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_status_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool diagnostic: Flag to enable showing of transit logical switch.
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str source: Data source type.
        :param str switching_profile_id: Switching Profile identifier
        :param str transport_type: Mode of transport supported in the transport zone for this logical switch
        :param str transport_zone_id: Transport zone identifier
        :param str uplink_teaming_policy_name: The logical switch's uplink teaming policy name
        :param int vlan: Virtual Local Area Network Identifier
        :param int vni: VNI of the OVERLAY LogicalSwitch(es) to return.
        :return: LogicalSwitchStatusSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_status_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_status_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_logical_switch_status_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get Status Summary of All Logical Switches in the System  # noqa: E501

        Returns Operational status of all logical switches. The query parameter \"source=realtime\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_status_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool diagnostic: Flag to enable showing of transit logical switch.
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str source: Data source type.
        :param str switching_profile_id: Switching Profile identifier
        :param str transport_type: Mode of transport supported in the transport zone for this logical switch
        :param str transport_zone_id: Transport zone identifier
        :param str uplink_teaming_policy_name: The logical switch's uplink teaming policy name
        :param int vlan: Virtual Local Area Network Identifier
        :param int vni: VNI of the OVERLAY LogicalSwitch(es) to return.
        :return: LogicalSwitchStatusSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'diagnostic', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'source', 'switching_profile_id', 'transport_type', 'transport_zone_id', 'uplink_teaming_policy_name', 'vlan', 'vni']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_status_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'diagnostic' in params:
            query_params.append(('diagnostic', params['diagnostic']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'switching_profile_id' in params:
            query_params.append(('switching_profile_id', params['switching_profile_id']))  # noqa: E501
        if 'transport_type' in params:
            query_params.append(('transport_type', params['transport_type']))  # noqa: E501
        if 'transport_zone_id' in params:
            query_params.append(('transport_zone_id', params['transport_zone_id']))  # noqa: E501
        if 'uplink_teaming_policy_name' in params:
            query_params.append(('uplink_teaming_policy_name', params['uplink_teaming_policy_name']))  # noqa: E501
        if 'vlan' in params:
            query_params.append(('vlan', params['vlan']))  # noqa: E501
        if 'vni' in params:
            query_params.append(('vni', params['vni']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitchStatusSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_vtep_table(self, lswitch_id, **kwargs):  # noqa: E501
        """Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id)   # noqa: E501

        Returns the virtual tunnel endpoint table of a specified logical switch from the given transport node if a transport node id is given in the query parameter, from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_vtep_table(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: VtepListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_vtep_table_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_vtep_table_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_vtep_table_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id)   # noqa: E501

        Returns the virtual tunnel endpoint table of a specified logical switch from the given transport node if a transport node id is given in the query parameter, from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_vtep_table_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: VtepListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'source', 'transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_vtep_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_vtep_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'transport_node_id' in params:
            query_params.append(('transport_node_id', params['transport_node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/vtep-table', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VtepListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_logical_switch_vtep_table_in_csv_format_csv(self, lswitch_id, **kwargs):  # noqa: E501
        """Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id)   # noqa: E501

        Returns virtual tunnel endpoint table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_vtep_table_in_csv_format_csv(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: VtepCsvListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_logical_switch_vtep_table_in_csv_format_csv_with_http_info(lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_logical_switch_vtep_table_in_csv_format_csv_with_http_info(lswitch_id, **kwargs)  # noqa: E501
            return data

    def get_logical_switch_vtep_table_in_csv_format_csv_with_http_info(self, lswitch_id, **kwargs):  # noqa: E501
        """Get virtual tunnel endpoint table for logical switch of the given ID (lswitch-id)   # noqa: E501

        Returns virtual tunnel endpoint table of a specified logical switch in CSV format from the given transport node if a transport node id is given in the query parameter from the Central Controller Plane. The query parameter \"source=cached\" is not supported.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_logical_switch_vtep_table_in_csv_format_csv_with_http_info(lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lswitch_id: (required)
        :param str source: Data source type.
        :param str transport_node_id: TransportNode Id
        :return: VtepCsvListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lswitch_id', 'source', 'transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_logical_switch_vtep_table_in_csv_format_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `get_logical_switch_vtep_table_in_csv_format_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'transport_node_id' in params:
            query_params.append(('transport_node_id', params['transport_node_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}/vtep-table?format=csv', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VtepCsvListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_logical_switches(self, **kwargs):  # noqa: E501
        """List all Logical Switches  # noqa: E501

        Returns information about all configured logical switches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_logical_switches(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool diagnostic: Flag to enable showing of transit logical switch.
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str switching_profile_id: Switching Profile identifier
        :param str transport_type: Mode of transport supported in the transport zone for this logical switch
        :param str transport_zone_id: Transport zone identifier
        :param str uplink_teaming_policy_name: The logical switch's uplink teaming policy name
        :param int vlan: Virtual Local Area Network Identifier
        :param int vni: VNI of the OVERLAY LogicalSwitch(es) to return.
        :return: LogicalSwitchListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_logical_switches_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_logical_switches_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_logical_switches_with_http_info(self, **kwargs):  # noqa: E501
        """List all Logical Switches  # noqa: E501

        Returns information about all configured logical switches.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_logical_switches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool diagnostic: Flag to enable showing of transit logical switch.
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str switching_profile_id: Switching Profile identifier
        :param str transport_type: Mode of transport supported in the transport zone for this logical switch
        :param str transport_zone_id: Transport zone identifier
        :param str uplink_teaming_policy_name: The logical switch's uplink teaming policy name
        :param int vlan: Virtual Local Area Network Identifier
        :param int vni: VNI of the OVERLAY LogicalSwitch(es) to return.
        :return: LogicalSwitchListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'diagnostic', 'included_fields', 'page_size', 'sort_ascending', 'sort_by', 'switching_profile_id', 'transport_type', 'transport_zone_id', 'uplink_teaming_policy_name', 'vlan', 'vni']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_logical_switches" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'diagnostic' in params:
            query_params.append(('diagnostic', params['diagnostic']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'switching_profile_id' in params:
            query_params.append(('switching_profile_id', params['switching_profile_id']))  # noqa: E501
        if 'transport_type' in params:
            query_params.append(('transport_type', params['transport_type']))  # noqa: E501
        if 'transport_zone_id' in params:
            query_params.append(('transport_zone_id', params['transport_zone_id']))  # noqa: E501
        if 'uplink_teaming_policy_name' in params:
            query_params.append(('uplink_teaming_policy_name', params['uplink_teaming_policy_name']))  # noqa: E501
        if 'vlan' in params:
            query_params.append(('vlan', params['vlan']))  # noqa: E501
        if 'vni' in params:
            query_params.append(('vni', params['vni']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitchListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_logical_switches_by_state(self, **kwargs):  # noqa: E501
        """List logical switches by realized state  # noqa: E501

        Returns a list of logical switches states that have realized state as provided as query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_logical_switches_by_state(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Realized state of logical switches
        :return: LogicalSwitchStateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_logical_switches_by_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_logical_switches_by_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_logical_switches_by_state_with_http_info(self, **kwargs):  # noqa: E501
        """List logical switches by realized state  # noqa: E501

        Returns a list of logical switches states that have realized state as provided as query parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_logical_switches_by_state_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Realized state of logical switches
        :return: LogicalSwitchStateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_logical_switches_by_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitchStateListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_logical_switch(self, body, lswitch_id, **kwargs):  # noqa: E501
        """Update a Logical Switch  # noqa: E501

        Modifies attributes of an existing logical switch. Modifiable attributes include admin_state, replication_mode, switching_profile_ids and VLAN spec. You cannot modify the original transport_zone_id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_logical_switch(body, lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogicalSwitch body: (required)
        :param str lswitch_id: (required)
        :return: LogicalSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_logical_switch_with_http_info(body, lswitch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_logical_switch_with_http_info(body, lswitch_id, **kwargs)  # noqa: E501
            return data

    def update_logical_switch_with_http_info(self, body, lswitch_id, **kwargs):  # noqa: E501
        """Update a Logical Switch  # noqa: E501

        Modifies attributes of an existing logical switch. Modifiable attributes include admin_state, replication_mode, switching_profile_ids and VLAN spec. You cannot modify the original transport_zone_id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_logical_switch_with_http_info(body, lswitch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogicalSwitch body: (required)
        :param str lswitch_id: (required)
        :return: LogicalSwitch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'lswitch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_logical_switch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_logical_switch`")  # noqa: E501
        # verify the required parameter 'lswitch_id' is set
        if ('lswitch_id' not in params or
                params['lswitch_id'] is None):
            raise ValueError("Missing the required parameter `lswitch_id` when calling `update_logical_switch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lswitch_id' in params:
            path_params['lswitch-id'] = params['lswitch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/logical-switches/{lswitch-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogicalSwitch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
