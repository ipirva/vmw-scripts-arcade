# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPITroubleshootingAndMonitoringPortMirroringApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_port_mirroring_sessions(self, body, **kwargs):  # noqa: E501
        """Create a mirror session  # noqa: E501

        Create a mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_port_mirroring_sessions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortMirroringSession body: (required)
        :return: PortMirroringSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_port_mirroring_sessions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_port_mirroring_sessions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_port_mirroring_sessions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a mirror session  # noqa: E501

        Create a mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_port_mirroring_sessions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortMirroringSession body: (required)
        :return: PortMirroringSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_port_mirroring_sessions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_port_mirroring_sessions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortMirroringSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_port_mirroring_session(self, mirror_session_id, **kwargs):  # noqa: E501
        """Delete the mirror session  # noqa: E501

        Delete the mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_port_mirroring_session(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_port_mirroring_session_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_port_mirroring_session_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
            return data

    def delete_port_mirroring_session_with_http_info(self, mirror_session_id, **kwargs):  # noqa: E501
        """Delete the mirror session  # noqa: E501

        Delete the mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_port_mirroring_session_with_http_info(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mirror_session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_port_mirroring_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mirror_session_id' is set
        if ('mirror_session_id' not in params or
                params['mirror_session_id'] is None):
            raise ValueError("Missing the required parameter `mirror_session_id` when calling `delete_port_mirroring_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mirror_session_id' in params:
            path_params['mirror-session-id'] = params['mirror_session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions/{mirror-session-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mirror_stack_status(self, mirror_session_id, **kwargs):  # noqa: E501
        """Get the mirror stack status on given remote L3 mirror session  # noqa: E501

        Get the mirror stack status on given remote L3 mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mirror_stack_status(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: MirrorStackStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mirror_stack_status_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mirror_stack_status_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
            return data

    def get_mirror_stack_status_with_http_info(self, mirror_session_id, **kwargs):  # noqa: E501
        """Get the mirror stack status on given remote L3 mirror session  # noqa: E501

        Get the mirror stack status on given remote L3 mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mirror_stack_status_with_http_info(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: MirrorStackStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mirror_session_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mirror_stack_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mirror_session_id' is set
        if ('mirror_session_id' not in params or
                params['mirror_session_id'] is None):
            raise ValueError("Missing the required parameter `mirror_session_id` when calling `get_mirror_stack_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mirror_session_id' in params:
            path_params['mirror-session-id'] = params['mirror_session_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions/{mirror-session-id}/mirror-stack-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MirrorStackStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_port_mirroring_session(self, mirror_session_id, **kwargs):  # noqa: E501
        """Get the mirror session  # noqa: E501

        Get the mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_mirroring_session(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :return: PortMirroringSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_port_mirroring_session_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_port_mirroring_session_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
            return data

    def get_port_mirroring_session_with_http_info(self, mirror_session_id, **kwargs):  # noqa: E501
        """Get the mirror session  # noqa: E501

        Get the mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_mirroring_session_with_http_info(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :return: PortMirroringSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mirror_session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port_mirroring_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mirror_session_id' is set
        if ('mirror_session_id' not in params or
                params['mirror_session_id'] is None):
            raise ValueError("Missing the required parameter `mirror_session_id` when calling `get_port_mirroring_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mirror_session_id' in params:
            path_params['mirror-session-id'] = params['mirror_session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions/{mirror-session-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortMirroringSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_port_mirroring_session(self, **kwargs):  # noqa: E501
        """List all mirror sessions  # noqa: E501

        List all mirror sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_port_mirroring_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: PortMirroringSessionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_port_mirroring_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_port_mirroring_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_port_mirroring_session_with_http_info(self, **kwargs):  # noqa: E501
        """List all mirror sessions  # noqa: E501

        List all mirror sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_port_mirroring_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: PortMirroringSessionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_port_mirroring_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortMirroringSessionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_port_mirroring_session(self, body, mirror_session_id, **kwargs):  # noqa: E501
        """Update the mirror session  # noqa: E501

        Update the mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_port_mirroring_session(body, mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortMirroringSession body: (required)
        :param str mirror_session_id: (required)
        :return: PortMirroringSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_port_mirroring_session_with_http_info(body, mirror_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_port_mirroring_session_with_http_info(body, mirror_session_id, **kwargs)  # noqa: E501
            return data

    def update_port_mirroring_session_with_http_info(self, body, mirror_session_id, **kwargs):  # noqa: E501
        """Update the mirror session  # noqa: E501

        Update the mirror session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_port_mirroring_session_with_http_info(body, mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PortMirroringSession body: (required)
        :param str mirror_session_id: (required)
        :return: PortMirroringSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'mirror_session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_port_mirroring_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_port_mirroring_session`")  # noqa: E501
        # verify the required parameter 'mirror_session_id' is set
        if ('mirror_session_id' not in params or
                params['mirror_session_id'] is None):
            raise ValueError("Missing the required parameter `mirror_session_id` when calling `update_port_mirroring_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mirror_session_id' in params:
            path_params['mirror-session-id'] = params['mirror_session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions/{mirror-session-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortMirroringSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_port_mirroring_session_verify(self, mirror_session_id, **kwargs):  # noqa: E501
        """Verify whether the mirror session is still valid  # noqa: E501

        Verify whether all participants are on the same transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_port_mirroring_session_verify(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_port_mirroring_session_verify_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_port_mirroring_session_verify_with_http_info(mirror_session_id, **kwargs)  # noqa: E501
            return data

    def verify_port_mirroring_session_verify_with_http_info(self, mirror_session_id, **kwargs):  # noqa: E501
        """Verify whether the mirror session is still valid  # noqa: E501

        Verify whether all participants are on the same transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_port_mirroring_session_verify_with_http_info(mirror_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mirror_session_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mirror_session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_port_mirroring_session_verify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mirror_session_id' is set
        if ('mirror_session_id' not in params or
                params['mirror_session_id'] is None):
            raise ValueError("Missing the required parameter `mirror_session_id` when calling `verify_port_mirroring_session_verify`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mirror_session_id' in params:
            path_params['mirror-session-id'] = params['mirror_session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mirror-sessions/{mirror-session-id}?action=verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
