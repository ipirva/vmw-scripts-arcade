# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricContainersContainerClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_container_cluster(self, container_cluster_id, **kwargs):  # noqa: E501
        """Return a container cluster  # noqa: E501

        Returns information about a specific container cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_cluster(container_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: (required)
        :return: ContainerCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_cluster_with_http_info(container_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_cluster_with_http_info(container_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_container_cluster_with_http_info(self, container_cluster_id, **kwargs):  # noqa: E501
        """Return a container cluster  # noqa: E501

        Returns information about a specific container cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_cluster_with_http_info(container_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: (required)
        :return: ContainerCluster
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_cluster_id' is set
        if ('container_cluster_id' not in params or
                params['container_cluster_id'] is None):
            raise ValueError("Missing the required parameter `container_cluster_id` when calling `get_container_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_cluster_id' in params:
            path_params['container-cluster-id'] = params['container_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-clusters/{container-cluster-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerCluster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_cluster_node(self, container_cluster_node_id, **kwargs):  # noqa: E501
        """Return a container cluster node  # noqa: E501

        Returns information about a specific container cluster node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_cluster_node(container_cluster_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_node_id: (required)
        :return: ContainerClusterNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_cluster_node_with_http_info(container_cluster_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_cluster_node_with_http_info(container_cluster_node_id, **kwargs)  # noqa: E501
            return data

    def get_container_cluster_node_with_http_info(self, container_cluster_node_id, **kwargs):  # noqa: E501
        """Return a container cluster node  # noqa: E501

        Returns information about a specific container cluster node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_cluster_node_with_http_info(container_cluster_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_node_id: (required)
        :return: ContainerClusterNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_cluster_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_cluster_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_cluster_node_id' is set
        if ('container_cluster_node_id' not in params or
                params['container_cluster_node_id'] is None):
            raise ValueError("Missing the required parameter `container_cluster_node_id` when calling `get_container_cluster_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_cluster_node_id' in params:
            path_params['container-cluster-node-id'] = params['container_cluster_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-cluster-nodes/{container-cluster-node-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerClusterNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_ingress_policy(self, ingress_policy_id, **kwargs):  # noqa: E501
        """Returns an ingress policy spec  # noqa: E501

        Returns information about a specific ingress policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_ingress_policy(ingress_policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ingress_policy_id: (required)
        :return: ContainerIngressPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_ingress_policy_with_http_info(ingress_policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_ingress_policy_with_http_info(ingress_policy_id, **kwargs)  # noqa: E501
            return data

    def get_container_ingress_policy_with_http_info(self, ingress_policy_id, **kwargs):  # noqa: E501
        """Returns an ingress policy spec  # noqa: E501

        Returns information about a specific ingress policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_ingress_policy_with_http_info(ingress_policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ingress_policy_id: (required)
        :return: ContainerIngressPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ingress_policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_ingress_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ingress_policy_id' is set
        if ('ingress_policy_id' not in params or
                params['ingress_policy_id'] is None):
            raise ValueError("Missing the required parameter `ingress_policy_id` when calling `get_container_ingress_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ingress_policy_id' in params:
            path_params['ingress-policy-id'] = params['ingress_policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-ingress-policies/{ingress-policy-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerIngressPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_container_network_policy(self, network_policy_id, **kwargs):  # noqa: E501
        """Return a network policy spec  # noqa: E501

        Returns information about a specific network policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_network_policy(network_policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str network_policy_id: (required)
        :return: ContainerNetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_container_network_policy_with_http_info(network_policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_container_network_policy_with_http_info(network_policy_id, **kwargs)  # noqa: E501
            return data

    def get_container_network_policy_with_http_info(self, network_policy_id, **kwargs):  # noqa: E501
        """Return a network policy spec  # noqa: E501

        Returns information about a specific network policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_container_network_policy_with_http_info(network_policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str network_policy_id: (required)
        :return: ContainerNetworkPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['network_policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_container_network_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'network_policy_id' is set
        if ('network_policy_id' not in params or
                params['network_policy_id'] is None):
            raise ValueError("Missing the required parameter `network_policy_id` when calling `get_container_network_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'network_policy_id' in params:
            path_params['network-policy-id'] = params['network_policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-network-policies/{network-policy-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerNetworkPolicy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_container_cluster_nodes(self, **kwargs):  # noqa: E501
        """Return the list of container cluster nodes  # noqa: E501

        Returns information about all container cluster nodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_cluster_nodes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: Identifier of the container cluster
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerClusterNodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_container_cluster_nodes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_container_cluster_nodes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_container_cluster_nodes_with_http_info(self, **kwargs):  # noqa: E501
        """Return the list of container cluster nodes  # noqa: E501

        Returns information about all container cluster nodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_cluster_nodes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: Identifier of the container cluster
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerClusterNodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_cluster_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_container_cluster_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'container_cluster_id' in params:
            query_params.append(('container_cluster_id', params['container_cluster_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-cluster-nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerClusterNodeListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_container_clusters(self, **kwargs):  # noqa: E501
        """Return the List of Container Clusters  # noqa: E501

        Returns information about all Container Clusters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_clusters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_type: Type of container cluster
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str infra_type: Type of infrastructure
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerClusterListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_container_clusters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_container_clusters_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_container_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Container Clusters  # noqa: E501

        Returns information about all Container Clusters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_clusters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cluster_type: Type of container cluster
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str infra_type: Type of infrastructure
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerClusterListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_type', 'cursor', 'included_fields', 'infra_type', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_container_clusters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_type' in params:
            query_params.append(('cluster_type', params['cluster_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'infra_type' in params:
            query_params.append(('infra_type', params['infra_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-clusters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerClusterListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_container_ingress_policies(self, **kwargs):  # noqa: E501
        """Return the List of Container Ingress Policies  # noqa: E501

        Returns information about all ingress policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_ingress_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: Identifier of the container cluster
        :param str container_project_id: Identifier of the container project
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerIngressPolicyListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_container_ingress_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_container_ingress_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_container_ingress_policies_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Container Ingress Policies  # noqa: E501

        Returns information about all ingress policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_ingress_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: Identifier of the container cluster
        :param str container_project_id: Identifier of the container project
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerIngressPolicyListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_cluster_id', 'container_project_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_container_ingress_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'container_cluster_id' in params:
            query_params.append(('container_cluster_id', params['container_cluster_id']))  # noqa: E501
        if 'container_project_id' in params:
            query_params.append(('container_project_id', params['container_project_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-ingress-policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerIngressPolicyListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_container_network_policies(self, **kwargs):  # noqa: E501
        """Return the List of Container Network Policies  # noqa: E501

        Returns information about all network policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_network_policies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: Identifier of the container cluster
        :param str container_project_id: Identifier of the container project
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerNetworkPolicyListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_container_network_policies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_container_network_policies_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_container_network_policies_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Container Network Policies  # noqa: E501

        Returns information about all network policies.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_container_network_policies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str container_cluster_id: Identifier of the container cluster
        :param str container_project_id: Identifier of the container project
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ContainerNetworkPolicyListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['container_cluster_id', 'container_project_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_container_network_policies" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'container_cluster_id' in params:
            query_params.append(('container_cluster_id', params['container_cluster_id']))  # noqa: E501
        if 'container_project_id' in params:
            query_params.append(('container_project_id', params['container_project_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/container-network-policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContainerNetworkPolicyListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
