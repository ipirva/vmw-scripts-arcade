# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesTransportNodesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_transport_node_with_deployment_info(self, body, **kwargs):  # noqa: E501
        """Create a Transport Node  # noqa: E501

        Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 16 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: Previous versions of NSX-T also used a property named transport_zone_endpoints at TransportNode level. This property is deprecated which creates some combinations of new client along with old client payloads. Examples [1] & [2] show old/existing client request and response by populating transport_zone_endpoints property at TransportNode level. Example [3] shows TransportNode creation request/response by populating transport_zone_endpoints property at StandardHostSwitch level and other new properties.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transport_node_with_deployment_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNode body: (required)
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_transport_node_with_deployment_info_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_transport_node_with_deployment_info_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_transport_node_with_deployment_info_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Transport Node  # noqa: E501

        Transport nodes are hypervisor hosts and NSX Edges that will participate in an NSX-T overlay. For a hypervisor host, this means that it hosts VMs that will communicate over NSX-T logical switches. For NSX Edges, this means that it will have logical router uplinks and downlinks.  This API creates transport node for a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> This api is deprecated as part of FN+TN unification. Please use Transport Node API to install NSX components on a node.  Additional documentation on creating a transport node can be found in the NSX-T Installation Guide.  In order for the transport node to forward packets, the host_switch_spec property must be specified.  Host switches (called bridges in OVS on KVM hypervisors) are the individual switches within the host virtual switch. Virtual machines are connected to the host switches.  When creating a transport node, you need to specify if the host switches are already manually preconfigured on the node, or if NSX should create and manage the host switches. You specify this choice by the type of host switches you pass in the host_switch_spec property of the TransportNode request payload.  For a KVM host, you can preconfigure the host switch, or you can have NSX Manager perform the configuration. For an ESXi host or NSX Edge node, NSX Manager always configures the host switch.  To preconfigure the host switches on a KVM host, pass an array of PreconfiguredHostSwitchSpec objects that describes those host switches. In the current NSX-T release, only one prefonfigured host switch can be specified.  See the PreconfiguredHostSwitchSpec schema definition for documentation on the properties that must be provided. Preconfigured host switches are only supported on KVM hosts, not on ESXi hosts or NSX Edge nodes.  To allow NSX to manage the host switch configuration on KVM hosts, ESXi hosts, or NSX Edge nodes, pass an array of StandardHostSwitchSpec objects in the host_switch_spec property, and NSX will automatically create host switches with the properties you provide. In the current NSX-T release, up to 16 host switches can be automatically managed. See the StandardHostSwitchSpec schema definition for documentation on the properties that must be provided.  Note: Previous versions of NSX-T also used a property named transport_zone_endpoints at TransportNode level. This property is deprecated which creates some combinations of new client along with old client payloads. Examples [1] & [2] show old/existing client request and response by populating transport_zone_endpoints property at TransportNode level. Example [3] shows TransportNode creation request/response by populating transport_zone_endpoints property at StandardHostSwitch level and other new properties.  The request should either provide node_deployement_info or node_id.  If the host node (hypervisor) or edge node (router) is already added in system then it can be converted to transport node by providing node_id in request.  If host node (hypervisor) or edge node (router) is not already present in system then information should be provided under node_deployment_info.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_transport_node_with_deployment_info_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNode body: (required)
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transport_node_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_transport_node_with_deployment_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_transport_node_with_deployment_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Delete a Transport Node  # noqa: E501

        Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transport_node_with_deployment_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param bool force: Force delete the resource even if it is being used somewhere 
        :param bool unprepare_host: Uninstall NSX components from host while deleting
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_transport_node_with_deployment_info_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_transport_node_with_deployment_info_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def delete_transport_node_with_deployment_info_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Delete a Transport Node  # noqa: E501

        Deletes the specified transport node. Query param force can be used to force delete the host nodes. Force deletion of edge and public cloud gateway nodes is not supported.  It also removes the specified node (host or edge) from system. If unprepare_host option is set to false, then host will be deleted without uninstalling the NSX components from the host.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_transport_node_with_deployment_info_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param bool force: Force delete the resource even if it is being used somewhere 
        :param bool unprepare_host: Uninstall NSX components from host while deleting
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id', 'force', 'unprepare_host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_transport_node_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `delete_transport_node_with_deployment_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501
        if 'unprepare_host' in params:
            query_params.append(('unprepare_host', params['unprepare_host']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_flow_cache_disable_flow_cache(self, transport_node_id, **kwargs):  # noqa: E501
        """Disable flow cache for an edge transport node  # noqa: E501

        Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_flow_cache_disable_flow_cache(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_flow_cache_disable_flow_cache_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_flow_cache_disable_flow_cache_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def disable_flow_cache_disable_flow_cache_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Disable flow cache for an edge transport node  # noqa: E501

        Disable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_flow_cache_disable_flow_cache_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_flow_cache_disable_flow_cache" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `disable_flow_cache_disable_flow_cache`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}?action=disable_flow_cache', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_flow_cache_enable_flow_cache(self, transport_node_id, **kwargs):  # noqa: E501
        """Enable flow cache for an edge transport node  # noqa: E501

        Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_flow_cache_enable_flow_cache(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_flow_cache_enable_flow_cache_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_flow_cache_enable_flow_cache_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def enable_flow_cache_enable_flow_cache_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Enable flow cache for an edge transport node  # noqa: E501

        Enable flow cache for edge transport node. Caution: This involves restart of the edge dataplane and hence may lead to network disruption.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_flow_cache_enable_flow_cache_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_flow_cache_enable_flow_cache" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `enable_flow_cache_enable_flow_cache`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}?action=enable_flow_cache', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fabric_node_modules_of_transport_node(self, node_id, **kwargs):  # noqa: E501
        """Get the module details of a transport node   # noqa: E501

        Get the module details of a transport node   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fabric_node_modules_of_transport_node(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: SoftwareModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fabric_node_modules_of_transport_node_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fabric_node_modules_of_transport_node_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_fabric_node_modules_of_transport_node_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Get the module details of a transport node   # noqa: E501

        Get the module details of a transport node   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fabric_node_modules_of_transport_node_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: SoftwareModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fabric_node_modules_of_transport_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_fabric_node_modules_of_transport_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{node-id}/modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SoftwareModuleResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transport_node_state_with_deployment_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Get a Transport Node's State  # noqa: E501

        Returns information about the current state of the transport node configuration and information about the associated hostswitch.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_state_with_deployment_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: TransportNodeState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transport_node_state_with_deployment_info_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transport_node_state_with_deployment_info_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def get_transport_node_state_with_deployment_info_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Get a Transport Node's State  # noqa: E501

        Returns information about the current state of the transport node configuration and information about the associated hostswitch.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_state_with_deployment_info_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: TransportNodeState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transport_node_state_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `get_transport_node_state_with_deployment_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transport_node_with_deployment_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Get a Transport Node  # noqa: E501

        Returns information about a specified transport node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_with_deployment_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transport_node_with_deployment_info_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transport_node_with_deployment_info_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def get_transport_node_with_deployment_info_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Get a Transport Node  # noqa: E501

        Returns information about a specified transport node.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transport_node_with_deployment_info_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transport_node_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `get_transport_node_with_deployment_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_delete_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target transport node  # noqa: E501

        Invoke DELETE request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_delete_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_delete_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_delete_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target transport node  # noqa: E501

        Invoke DELETE request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_delete_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_delete_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_delete_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_get_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target transport node  # noqa: E501

        Invoke GET request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_get_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_get_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_get_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target transport node  # noqa: E501

        Invoke GET request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_get_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_get_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_get_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_post_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target transport node  # noqa: E501

        Invoke POST request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_post_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_post_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_post_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target transport node  # noqa: E501

        Invoke POST request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_post_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_post_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_post_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_put_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target transport node  # noqa: E501

        Invoke PUT request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_put_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_put_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_put_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target transport node  # noqa: E501

        Invoke PUT request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_put_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_put_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_put_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_node_capabilities(self, transport_node_id, **kwargs):  # noqa: E501
        """Return the list of capabilities of transport node  # noqa: E501

        Returns information about capabilities of transport host node. Edge nodes do not have capabilities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_capabilities(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: NodeCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_node_capabilities_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_node_capabilities_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def list_transport_node_capabilities_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Return the list of capabilities of transport node  # noqa: E501

        Returns information about capabilities of transport host node. Edge nodes do not have capabilities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_capabilities_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: NodeCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_node_capabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `list_transport_node_capabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}/capabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeCapabilitiesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_nodes_by_state_with_deployment_info(self, **kwargs):  # noqa: E501
        """List transport nodes by realized state  # noqa: E501

        Returns a list of transport node states that have realized state as provided as query parameter   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_nodes_by_state_with_deployment_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mm_state: maintenance mode state
        :param str status: Realized state of transport nodes
        :param str vtep_ip: Virtual tunnel endpoint ip address of transport node
        :return: TransportNodeStateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_nodes_by_state_with_deployment_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_nodes_by_state_with_deployment_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_transport_nodes_by_state_with_deployment_info_with_http_info(self, **kwargs):  # noqa: E501
        """List transport nodes by realized state  # noqa: E501

        Returns a list of transport node states that have realized state as provided as query parameter   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_nodes_by_state_with_deployment_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mm_state: maintenance mode state
        :param str status: Realized state of transport nodes
        :param str vtep_ip: Virtual tunnel endpoint ip address of transport node
        :return: TransportNodeStateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mm_state', 'status', 'vtep_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_nodes_by_state_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mm_state' in params:
            query_params.append(('mm_state', params['mm_state']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'vtep_ip' in params:
            query_params.append(('vtep_ip', params['vtep_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeStateListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_nodes_with_deployment_info(self, **kwargs):  # noqa: E501
        """List Transport Nodes  # noqa: E501

        Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_nodes_with_deployment_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool in_maintenance_mode: maintenance mode flag
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str node_id: node identifier
        :param str node_ip: Fabric node IP address
        :param str node_types: a list of fabric node types separated by comma or a single type
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str transport_zone_id: Transport zone identifier
        :return: TransportNodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_nodes_with_deployment_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_nodes_with_deployment_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_transport_nodes_with_deployment_info_with_http_info(self, **kwargs):  # noqa: E501
        """List Transport Nodes  # noqa: E501

        Returns information about all transport nodes along with underlying host or edge details. A transport node is a host or edge that contains hostswitches. A hostswitch can have virtual machines connected to them.  Because each transport node has hostswitches, transport nodes can also have virtual tunnel endpoints, which means that they can be part of the overlay.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_nodes_with_deployment_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param bool in_maintenance_mode: maintenance mode flag
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str node_id: node identifier
        :param str node_ip: Fabric node IP address
        :param str node_types: a list of fabric node types separated by comma or a single type
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str transport_zone_id: Transport zone identifier
        :return: TransportNodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'in_maintenance_mode', 'included_fields', 'node_id', 'node_ip', 'node_types', 'page_size', 'sort_ascending', 'sort_by', 'transport_zone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_nodes_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'in_maintenance_mode' in params:
            query_params.append(('in_maintenance_mode', params['in_maintenance_mode']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'node_ip' in params:
            query_params.append(('node_ip', params['node_ip']))  # noqa: E501
        if 'node_types' in params:
            query_params.append(('node_types', params['node_types']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'transport_zone_id' in params:
            query_params.append(('transport_zone_id', params['transport_zone_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNodeListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redeploy_edge_transport_node_redeploy(self, body, node_id, **kwargs):  # noqa: E501
        """Redeploys a new node that replaces the specified edge node.  # noqa: E501

        Redeploys an edge node at NSX Manager that replaces the edge node with identifier <node-id>. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redeploy_edge_transport_node_redeploy(body, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNode body: (required)
        :param str node_id: (required)
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redeploy_edge_transport_node_redeploy_with_http_info(body, node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.redeploy_edge_transport_node_redeploy_with_http_info(body, node_id, **kwargs)  # noqa: E501
            return data

    def redeploy_edge_transport_node_redeploy_with_http_info(self, body, node_id, **kwargs):  # noqa: E501
        """Redeploys a new node that replaces the specified edge node.  # noqa: E501

        Redeploys an edge node at NSX Manager that replaces the edge node with identifier <node-id>. If NSX Manager can access the specified edge node, then the node is put into maintenance mode and then the associated VM is deleted. This is a means to reset all configuration on the edge node. The communication channel between NSX Manager and edge is established after this operation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redeploy_edge_transport_node_redeploy_with_http_info(body, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNode body: (required)
        :param str node_id: (required)
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redeploy_edge_transport_node_redeploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `redeploy_edge_transport_node_redeploy`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `redeploy_edge_transport_node_redeploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{node-id}?action=redeploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_transport_node(self, transport_node_id, **kwargs):  # noqa: E501
        """Refresh the node configuration for the Edge node.  # noqa: E501

        The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_transport_node(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_transport_node_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_transport_node_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def refresh_transport_node_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Refresh the node configuration for the Edge node.  # noqa: E501

        The API is applicable for Edge transport nodes. If you update the VM configuration and find a discrepancy in VM configuration at NSX Manager, then use this API to refresh configuration at NSX Manager. It refreshes the VM configuration from sources external to MP. Sources include vSphere Server and the edge node. After this action, the API GET api/v1/transport-nodes will show refreshed data.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_transport_node_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_transport_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `refresh_transport_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}?action=refresh_node_configuration&resource_type=EdgeNode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_transport_node_inventory_sync_restart_inventory_sync(self, transport_node_id, **kwargs):  # noqa: E501
        """Restart the inventory sync for the node if it is paused currently.  # noqa: E501

        Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_transport_node_inventory_sync_restart_inventory_sync(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_transport_node_inventory_sync_restart_inventory_sync_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_transport_node_inventory_sync_restart_inventory_sync_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def restart_transport_node_inventory_sync_restart_inventory_sync_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Restart the inventory sync for the node if it is paused currently.  # noqa: E501

        Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_transport_node_inventory_sync_restart_inventory_sync_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_transport_node_inventory_sync_restart_inventory_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `restart_transport_node_inventory_sync_restart_inventory_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}?action=restart_inventory_sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_parent_cluster_configuration_restore_cluster_config(self, transport_node_id, **kwargs):  # noqa: E501
        """Apply cluster level Transport Node Profile on overridden host  # noqa: E501

        A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_parent_cluster_configuration_restore_cluster_config(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_parent_cluster_configuration_restore_cluster_config_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_parent_cluster_configuration_restore_cluster_config_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def restore_parent_cluster_configuration_restore_cluster_config_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """Apply cluster level Transport Node Profile on overridden host  # noqa: E501

        A host can be overridden to have different configuration than Transport Node Profile(TNP) on cluster. This action will restore such overridden host back to cluster level TNP.  This API can be used in other case. When TNP is applied to a cluster, if any validation fails (e.g. VMs running on host) then existing transport node (TN) is not updated. In that case after the issue is resolved manually (e.g. VMs powered off), you can call this API to update TN as per cluster level TNP.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_parent_cluster_configuration_restore_cluster_config_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_parent_cluster_configuration_restore_cluster_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `restore_parent_cluster_configuration_restore_cluster_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}?action=restore_cluster_config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resync_transport_node_resync_host_config(self, transportnode_id, **kwargs):  # noqa: E501
        """Resync a Transport Node  # noqa: E501

        Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resync_transport_node_resync_host_config(transportnode_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transportnode_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resync_transport_node_resync_host_config_with_http_info(transportnode_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resync_transport_node_resync_host_config_with_http_info(transportnode_id, **kwargs)  # noqa: E501
            return data

    def resync_transport_node_resync_host_config_with_http_info(self, transportnode_id, **kwargs):  # noqa: E501
        """Resync a Transport Node  # noqa: E501

        Resync the TransportNode configuration on a host. It is similar to updating the TransportNode with existing configuration, but force synce these configurations to the host (no backend optimizations).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resync_transport_node_resync_host_config_with_http_info(transportnode_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transportnode_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transportnode_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resync_transport_node_resync_host_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transportnode_id' is set
        if ('transportnode_id' not in params or
                params['transportnode_id'] is None):
            raise ValueError("Missing the required parameter `transportnode_id` when calling `resync_transport_node_resync_host_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transportnode_id' in params:
            path_params['transportnode-id'] = params['transportnode_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transportnode-id}?action=resync_host_config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_transport_node_maintenance_mode(self, transportnode_id, **kwargs):  # noqa: E501
        """Update transport node maintenance mode  # noqa: E501

        Put transport node into maintenance mode or exit from maintenance mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_maintenance_mode(transportnode_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transportnode_id: (required)
        :param str action:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_transport_node_maintenance_mode_with_http_info(transportnode_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_transport_node_maintenance_mode_with_http_info(transportnode_id, **kwargs)  # noqa: E501
            return data

    def update_transport_node_maintenance_mode_with_http_info(self, transportnode_id, **kwargs):  # noqa: E501
        """Update transport node maintenance mode  # noqa: E501

        Put transport node into maintenance mode or exit from maintenance mode.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_maintenance_mode_with_http_info(transportnode_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transportnode_id: (required)
        :param str action:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transportnode_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_transport_node_maintenance_mode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transportnode_id' is set
        if ('transportnode_id' not in params or
                params['transportnode_id'] is None):
            raise ValueError("Missing the required parameter `transportnode_id` when calling `update_transport_node_maintenance_mode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transportnode_id' in params:
            path_params['transportnode-id'] = params['transportnode_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transportnode-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_transport_node_with_deployment_info(self, body, transport_node_id, **kwargs):  # noqa: E501
        """Update a Transport Node  # noqa: E501

        Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is.  It also modifies attributes of node (host or edge).  Note: Previous versions of NSX-T also used a property named transport_zone_endpoints at TransportNode level. This property is deprecated which creates some combinations of new client along with old client payloads. Examples [1] shows old/existing client request and response by populating transport_zone_endpoints property at TransportNode level. Example [2] shows TransportNode updating TransportNode from exmaple [1] request/response by adding a new StandardHostSwitch by populating transport_zone_endpoints at StandardHostSwitch level. TransportNode level transport_zone_endpoints will ONLY have TransportZoneEndpoints that were originally specified here during create/update operation and does not include TransportZoneEndpoints that were directly specified at StandardHostSwitch level.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_with_deployment_info(body, transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNode body: (required)
        :param str transport_node_id: (required)
        :param str esx_mgmt_if_migration_dest: The network ids to which the ESX vmk interfaces will be migrated
        :param str if_id: The ESX vmk interfaces to migrate
        :param str ping_ip: IP Addresses to ping right after ESX vmk interfaces were migrated.
        :param bool skip_validation: Whether to skip front-end validation for vmk/vnic/pnic migration
        :param str vnic: The ESX vmk interfaces and/or VM NIC to migrate
        :param str vnic_migration_dest: The migration destinations of ESX vmk interfaces and/or VM NIC
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_transport_node_with_deployment_info_with_http_info(body, transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_transport_node_with_deployment_info_with_http_info(body, transport_node_id, **kwargs)  # noqa: E501
            return data

    def update_transport_node_with_deployment_info_with_http_info(self, body, transport_node_id, **kwargs):  # noqa: E501
        """Update a Transport Node  # noqa: E501

        Modifies the transport node information. The host_switch_name field must match the host_switch_name value specified in the transport zone (API: transport-zones). You must create the associated uplink profile (API: host-switch-profiles) before you can specify an uplink_name here. If the host is an ESX and has only one physical NIC being used by a vSphere standard switch, TransportNodeUpdateParameters should be used to migrate the management interface and the physical NIC into a logical switch that is in a transport zone this transport node will join or has already joined. If the migration is already done, TransportNodeUpdateParameters can also be used to migrate the management interface and the physical NIC back to a vSphere standard switch. In other cases, the TransportNodeUpdateParameters should NOT be used. When updating transport node you should follow pattern where you should fetch the existing transport node and then only modify the required properties keeping other properties as is.  It also modifies attributes of node (host or edge).  Note: Previous versions of NSX-T also used a property named transport_zone_endpoints at TransportNode level. This property is deprecated which creates some combinations of new client along with old client payloads. Examples [1] shows old/existing client request and response by populating transport_zone_endpoints property at TransportNode level. Example [2] shows TransportNode updating TransportNode from exmaple [1] request/response by adding a new StandardHostSwitch by populating transport_zone_endpoints at StandardHostSwitch level. TransportNode level transport_zone_endpoints will ONLY have TransportZoneEndpoints that were originally specified here during create/update operation and does not include TransportZoneEndpoints that were directly specified at StandardHostSwitch level.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_transport_node_with_deployment_info_with_http_info(body, transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransportNode body: (required)
        :param str transport_node_id: (required)
        :param str esx_mgmt_if_migration_dest: The network ids to which the ESX vmk interfaces will be migrated
        :param str if_id: The ESX vmk interfaces to migrate
        :param str ping_ip: IP Addresses to ping right after ESX vmk interfaces were migrated.
        :param bool skip_validation: Whether to skip front-end validation for vmk/vnic/pnic migration
        :param str vnic: The ESX vmk interfaces and/or VM NIC to migrate
        :param str vnic_migration_dest: The migration destinations of ESX vmk interfaces and/or VM NIC
        :return: TransportNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'transport_node_id', 'esx_mgmt_if_migration_dest', 'if_id', 'ping_ip', 'skip_validation', 'vnic', 'vnic_migration_dest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_transport_node_with_deployment_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_transport_node_with_deployment_info`")  # noqa: E501
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `update_transport_node_with_deployment_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []
        if 'esx_mgmt_if_migration_dest' in params:
            query_params.append(('esx_mgmt_if_migration_dest', params['esx_mgmt_if_migration_dest']))  # noqa: E501
        if 'if_id' in params:
            query_params.append(('if_id', params['if_id']))  # noqa: E501
        if 'ping_ip' in params:
            query_params.append(('ping_ip', params['ping_ip']))  # noqa: E501
        if 'skip_validation' in params:
            query_params.append(('skip_validation', params['skip_validation']))  # noqa: E501
        if 'vnic' in params:
            query_params.append(('vnic', params['vnic']))  # noqa: E501
        if 'vnic_migration_dest' in params:
            query_params.append(('vnic_migration_dest', params['vnic_migration_dest']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransportNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
