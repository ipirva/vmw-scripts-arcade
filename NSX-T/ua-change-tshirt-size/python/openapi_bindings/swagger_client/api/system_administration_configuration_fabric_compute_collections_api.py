# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricComputeCollectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_compute_collection_fabric_template(self, body, **kwargs):  # noqa: E501
        """Create a compute collection fabric template  # noqa: E501

        Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_compute_collection_fabric_template(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeCollectionFabricTemplate body: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_compute_collection_fabric_template_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_compute_collection_fabric_template_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_compute_collection_fabric_template_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a compute collection fabric template  # noqa: E501

        Fabric templates are fabric configurations applied at the compute collection level. This configurations is used to decide what automated operations should be a run when a host membership changes. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_compute_collection_fabric_template_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeCollectionFabricTemplate body: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_compute_collection_fabric_template(self, fabric_template_id, **kwargs):  # noqa: E501
        """Deletes compute collection fabric template  # noqa: E501

        Deletes compute collection fabric template for the given id. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_collection_fabric_template(fabric_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
            return data

    def delete_compute_collection_fabric_template_with_http_info(self, fabric_template_id, **kwargs):  # noqa: E501
        """Deletes compute collection fabric template  # noqa: E501

        Deletes compute collection fabric template for the given id. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_collection_fabric_template_with_http_info(fabric_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_template_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_template_id' is set
        if ('fabric_template_id' not in params or
                params['fabric_template_id'] is None):
            raise ValueError("Missing the required parameter `fabric_template_id` when calling `delete_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_template_id' in params:
            path_params['fabric-template-id'] = params['fabric_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates/{fabric-template-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compute_collection_fabric_template(self, fabric_template_id, **kwargs):  # noqa: E501
        """Get compute collection fabric template by id  # noqa: E501

        Get compute collection fabric template for the given id. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_collection_fabric_template(fabric_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_template_id: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compute_collection_fabric_template_with_http_info(fabric_template_id, **kwargs)  # noqa: E501
            return data

    def get_compute_collection_fabric_template_with_http_info(self, fabric_template_id, **kwargs):  # noqa: E501
        """Get compute collection fabric template by id  # noqa: E501

        Get compute collection fabric template for the given id. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_collection_fabric_template_with_http_info(fabric_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fabric_template_id: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fabric_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fabric_template_id' is set
        if ('fabric_template_id' not in params or
                params['fabric_template_id'] is None):
            raise ValueError("Missing the required parameter `fabric_template_id` when calling `get_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_template_id' in params:
            path_params['fabric-template-id'] = params['fabric_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates/{fabric-template-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_host_node_status_on_compute_collection(self, cc_ext_id, **kwargs):  # noqa: E501
        """Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.  # noqa: E501

        Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_node_status_on_compute_collection(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: HostNodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_host_node_status_on_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_host_node_status_on_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
            return data

    def get_host_node_status_on_compute_collection_with_http_info(self, cc_ext_id, **kwargs):  # noqa: E501
        """Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.  # noqa: E501

        Get status of member host nodes of the compute-collection. Only nsx prepared host nodes in the specified compute-collection are included in the response. cc-ext-id should be of type VC_Cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_node_status_on_compute_collection_with_http_info(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: HostNodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc_ext_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_node_status_on_compute_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc_ext_id' is set
        if ('cc_ext_id' not in params or
                params['cc_ext_id'] is None):
            raise ValueError("Missing the required parameter `cc_ext_id` when calling `get_host_node_status_on_compute_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cc_ext_id' in params:
            path_params['cc-ext-id'] = params['cc_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections/{cc-ext-id}/member-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostNodeStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_collection_fabric_templates(self, **kwargs):  # noqa: E501
        """Get compute collection fabric templates  # noqa: E501

        Returns compute collection fabric templates. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collection_fabric_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_collection_id: Compute collection id
        :return: ComputeCollectionFabricTemplateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_compute_collection_fabric_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_collection_fabric_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_collection_fabric_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get compute collection fabric templates  # noqa: E501

        Returns compute collection fabric templates. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collection_fabric_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_collection_id: Compute collection id
        :return: ComputeCollectionFabricTemplateListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_collection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_collection_fabric_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'compute_collection_id' in params:
            query_params.append(('compute_collection_id', params['compute_collection_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplateListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_collection_physical_network_interfaces(self, cc_ext_id, **kwargs):  # noqa: E501
        """List the Physical Network Interface for all discovered nodes  # noqa: E501

        Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it's attached to(if any) and MAC address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collection_physical_network_interfaces(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: ComputeCollectionNetworkInterfacesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_compute_collection_physical_network_interfaces_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_collection_physical_network_interfaces_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
            return data

    def list_compute_collection_physical_network_interfaces_with_http_info(self, cc_ext_id, **kwargs):  # noqa: E501
        """List the Physical Network Interface for all discovered nodes  # noqa: E501

        Returns list of physical network interfaces for all discovered nodes in compute collection. Interface information includes PNIC name, hostswitch name it's attached to(if any) and MAC address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collection_physical_network_interfaces_with_http_info(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: ComputeCollectionNetworkInterfacesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc_ext_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_collection_physical_network_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc_ext_id' is set
        if ('cc_ext_id' not in params or
                params['cc_ext_id'] is None):
            raise ValueError("Missing the required parameter `cc_ext_id` when calling `list_compute_collection_physical_network_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cc_ext_id' in params:
            path_params['cc-ext-id'] = params['cc_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections/{cc-ext-id}/network/physical-interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionNetworkInterfacesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_collections(self, **kwargs):  # noqa: E501
        """Return the List of Compute Collections  # noqa: E501

        Returns information about all compute collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cm_local_id: Local Id of the compute collection in the Compute Manager
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which belongs to this Compute Collection 
        :param str display_name: Name of the ComputeCollection in source compute manager
        :param str external_id: External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC 
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str node_id: Id of the fabric node created from a discovered node belonging to this Compute Collection 
        :param str origin_id: Id of the compute manager from where this Compute Collection was discovered
        :param str origin_type: ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers 
        :param str owner_id: Id of the owner of compute collection in the Compute Manager
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_compute_collections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_collections_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_collections_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Compute Collections  # noqa: E501

        Returns information about all compute collections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cm_local_id: Local Id of the compute collection in the Compute Manager
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which belongs to this Compute Collection 
        :param str display_name: Name of the ComputeCollection in source compute manager
        :param str external_id: External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC 
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str node_id: Id of the fabric node created from a discovered node belonging to this Compute Collection 
        :param str origin_id: Id of the compute manager from where this Compute Collection was discovered
        :param str origin_type: ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers 
        :param str owner_id: Id of the owner of compute collection in the Compute Manager
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeCollectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cm_local_id', 'cursor', 'discovered_node_id', 'display_name', 'external_id', 'included_fields', 'node_id', 'origin_id', 'origin_type', 'owner_id', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_collections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cm_local_id' in params:
            query_params.append(('cm_local_id', params['cm_local_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'discovered_node_id' in params:
            query_params.append(('discovered_node_id', params['discovered_node_id']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('external_id', params['external_id']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'origin_id' in params:
            query_params.append(('origin_id', params['origin_id']))  # noqa: E501
        if 'origin_type' in params:
            query_params.append(('origin_type', params['origin_type']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('owner_id', params['owner_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_action_on_compute_collection(self, cc_ext_id, **kwargs):  # noqa: E501
        """Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.  # noqa: E501

        Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_action_on_compute_collection(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :param str action: Supported actions on compute-collection
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_action_on_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_action_on_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
            return data

    def perform_action_on_compute_collection_with_http_info(self, cc_ext_id, **kwargs):  # noqa: E501
        """Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.  # noqa: E501

        Perform action specific to NSX on the compute-collection. cc-ext-id should be of type VC_Cluster.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_action_on_compute_collection_with_http_info(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :param str action: Supported actions on compute-collection
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc_ext_id', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_action_on_compute_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc_ext_id' is set
        if ('cc_ext_id' not in params or
                params['cc_ext_id'] is None):
            raise ValueError("Missing the required parameter `cc_ext_id` when calling `perform_action_on_compute_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cc_ext_id' in params:
            path_params['cc-ext-id'] = params['cc_ext_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections/{cc-ext-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_compute_collection(self, cc_ext_id, **kwargs):  # noqa: E501
        """Return Compute Collection Information  # noqa: E501

        Returns information about a specific compute collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_compute_collection(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: ComputeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_compute_collection_with_http_info(cc_ext_id, **kwargs)  # noqa: E501
            return data

    def read_compute_collection_with_http_info(self, cc_ext_id, **kwargs):  # noqa: E501
        """Return Compute Collection Information  # noqa: E501

        Returns information about a specific compute collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_compute_collection_with_http_info(cc_ext_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cc_ext_id: (required)
        :return: ComputeCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cc_ext_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_compute_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cc_ext_id' is set
        if ('cc_ext_id' not in params or
                params['cc_ext_id'] is None):
            raise ValueError("Missing the required parameter `cc_ext_id` when calling `read_compute_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cc_ext_id' in params:
            path_params['cc-ext-id'] = params['cc_ext_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collections/{cc-ext-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_compute_collection_fabric_template(self, body, fabric_template_id, **kwargs):  # noqa: E501
        """Updates compute collection fabric template  # noqa: E501

        Updates compute collection fabric template for the given id. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_compute_collection_fabric_template(body, fabric_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeCollectionFabricTemplate body: (required)
        :param str fabric_template_id: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_compute_collection_fabric_template_with_http_info(body, fabric_template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_compute_collection_fabric_template_with_http_info(body, fabric_template_id, **kwargs)  # noqa: E501
            return data

    def update_compute_collection_fabric_template_with_http_info(self, body, fabric_template_id, **kwargs):  # noqa: E501
        """Updates compute collection fabric template  # noqa: E501

        Updates compute collection fabric template for the given id. This functionality is deprecated. Use Transport Node Profiles instead of this template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_compute_collection_fabric_template_with_http_info(body, fabric_template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeCollectionFabricTemplate body: (required)
        :param str fabric_template_id: (required)
        :return: ComputeCollectionFabricTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'fabric_template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_compute_collection_fabric_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_compute_collection_fabric_template`")  # noqa: E501
        # verify the required parameter 'fabric_template_id' is set
        if ('fabric_template_id' not in params or
                params['fabric_template_id'] is None):
            raise ValueError("Missing the required parameter `fabric_template_id` when calling `update_compute_collection_fabric_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fabric_template_id' in params:
            path_params['fabric-template-id'] = params['fabric_template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-collection-fabric-templates/{fabric-template-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeCollectionFabricTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
