# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPITroubleshootingAndMonitoringPacketCaptureApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_packet_capture_session(self, body, **kwargs):  # noqa: E501
        """Create an new packet capture session  # noqa: E501

        Create an new packet capture session on given node with specified options   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_packet_capture_session(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PacketCaptureRequest body: (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_packet_capture_session_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_packet_capture_session_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_packet_capture_session_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an new packet capture session  # noqa: E501

        Create an new packet capture session on given node with specified options   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_packet_capture_session_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PacketCaptureRequest body: (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_packet_capture_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_packet_capture_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/session', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_all_capture_sessions_delete(self, **kwargs):  # noqa: E501
        """Delete all the packet capture sessions  # noqa: E501

        Delete all the packet capture sessions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_capture_sessions_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PacketCaptureSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_all_capture_sessions_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_all_capture_sessions_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_all_capture_sessions_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all the packet capture sessions  # noqa: E501

        Delete all the packet capture sessions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_capture_sessions_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PacketCaptureSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_capture_sessions_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/sessions?action=delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSessionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_packet_capture_session_delete(self, session_id, **kwargs):  # noqa: E501
        """Delete the packet capture session by session id.  # noqa: E501

        Before calling this method, terminate any running capture session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_capture_session_delete(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_packet_capture_session_delete_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_packet_capture_session_delete_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def delete_packet_capture_session_delete_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Delete the packet capture session by session id.  # noqa: E501

        Before calling this method, terminate any running capture session.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_packet_capture_session_delete_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_packet_capture_session_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `delete_packet_capture_session_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/session/{session-id}?action=delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_capture_file(self, session_id, **kwargs):  # noqa: E501
        """Get packet capture file  # noqa: E501

        You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capture_file(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_capture_file_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_capture_file_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def get_capture_file_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get packet capture file  # noqa: E501

        You must provide the request header \"Accept:application/octet-stream\" when calling this API. The capture file can only be found in MP which receives the capture request.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_capture_file_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_capture_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `get_capture_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/session/{session-id}/capturefile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_packet_capture_sessions(self, **kwargs):  # noqa: E501
        """Get the information of all packet capture sessions  # noqa: E501

        Get the information of all packet capture sessions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packet_capture_sessions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PacketCaptureSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_packet_capture_sessions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_packet_capture_sessions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_packet_capture_sessions_with_http_info(self, **kwargs):  # noqa: E501
        """Get the information of all packet capture sessions  # noqa: E501

        Get the information of all packet capture sessions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_packet_capture_sessions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PacketCaptureSessionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_packet_capture_sessions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSessionList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_packet_capture_session(self, session_id, **kwargs):  # noqa: E501
        """Get the status of packet capture session  # noqa: E501

        Get the packet capture status information by session id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_packet_capture_session(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_packet_capture_session_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_packet_capture_session_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def read_packet_capture_session_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get the status of packet capture session  # noqa: E501

        Get the packet capture status information by session id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_packet_capture_session_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_packet_capture_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `read_packet_capture_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/session/{session-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_packet_capture_session_restart(self, session_id, **kwargs):  # noqa: E501
        """Restart the packet capture session  # noqa: E501

        Restart the packet capture session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_packet_capture_session_restart(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_packet_capture_session_restart_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_packet_capture_session_restart_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def restart_packet_capture_session_restart_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Restart the packet capture session  # noqa: E501

        Restart the packet capture session   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_packet_capture_session_restart_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_packet_capture_session_restart" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `restart_packet_capture_session_restart`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/session/{session-id}?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def terminate_packet_capture_session_terminate(self, session_id, **kwargs):  # noqa: E501
        """Terminate the packet capture session by session id  # noqa: E501

        Terminate the packet capture session by session id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terminate_packet_capture_session_terminate(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.terminate_packet_capture_session_terminate_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.terminate_packet_capture_session_terminate_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def terminate_packet_capture_session_terminate_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Terminate the packet capture session by session id  # noqa: E501

        Terminate the packet capture session by session id.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.terminate_packet_capture_session_terminate_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: Packet capture session id (required)
        :return: PacketCaptureSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminate_packet_capture_session_terminate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `terminate_packet_capture_session_terminate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['session-id'] = params['session_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pktcap/session/{session-id}?action=terminate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PacketCaptureSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
