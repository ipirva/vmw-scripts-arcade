# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apply_certificate_apply_certificate(self, cert_id, service_type, **kwargs):  # noqa: E501
        """Apply a certificate for a CertificateProfile  # noqa: E501

        Look up the Certificate Profile matching the service-type and apply the certificate. When the Certificate Profile has cluster_certificate=false, the node_id parameter is required to designate the node where the certificate needs to be applied.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_certificate_apply_certificate(cert_id, service_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cert_id: ID of certificate to apply (required)
        :param str service_type: Supported service types, that are using certificates. (required)
        :param str node_id: Node Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_certificate_apply_certificate_with_http_info(cert_id, service_type, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_certificate_apply_certificate_with_http_info(cert_id, service_type, **kwargs)  # noqa: E501
            return data

    def apply_certificate_apply_certificate_with_http_info(self, cert_id, service_type, **kwargs):  # noqa: E501
        """Apply a certificate for a CertificateProfile  # noqa: E501

        Look up the Certificate Profile matching the service-type and apply the certificate. When the Certificate Profile has cluster_certificate=false, the node_id parameter is required to designate the node where the certificate needs to be applied.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_certificate_apply_certificate_with_http_info(cert_id, service_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cert_id: ID of certificate to apply (required)
        :param str service_type: Supported service types, that are using certificates. (required)
        :param str node_id: Node Id
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_id', 'service_type', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_certificate_apply_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `apply_certificate_apply_certificate`")  # noqa: E501
        # verify the required parameter 'service_type' is set
        if ('service_type' not in params or
                params['service_type'] is None):
            raise ValueError("Missing the required parameter `service_type` when calling `apply_certificate_apply_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']  # noqa: E501

        query_params = []
        if 'node_id' in params:
            query_params.append(('node_id', params['node_id']))  # noqa: E501
        if 'service_type' in params:
            query_params.append(('service_type', params['service_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/certificates/{cert-id}?action=apply_certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation(self, body, **kwargs):  # noqa: E501
        """Set a certificate as a GM or LM Principal Identity certificate  # noqa: E501

        Set a certificate that has been imported to be either the principal identity certificate for the local cluster with either GM or LM service type. Currently, the service type specified must match the current service type of the local cluster.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPrincipalIdentityCertificateForFederationRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set a certificate as a GM or LM Principal Identity certificate  # noqa: E501

        Set a certificate that has been imported to be either the principal identity certificate for the local cluster with either GM or LM service type. Currently, the service type specified must match the current service type of the local cluster.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetPrincipalIdentityCertificateForFederationRequest body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_principal_identity_certificate_for_federation_set_pi_certificate_for_federation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/certificates?action=set_pi_certificate_for_federation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_certificate_validate(self, cert_id, **kwargs):  # noqa: E501
        """Validate a certificate  # noqa: E501

        Checks whether certificate is valid. When the certificate contains a chain, the full chain is validated. The usage parameter can be SERVER (default) or CLIENT. This indicates whether the certificate needs to be validated as a server-auth or a client-auth certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_certificate_validate(cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cert_id: ID of certificate to validate (required)
        :param str usage: Usage Type of the Certificate, SERVER or CLIENT. Default is SERVER
        :return: CertificateCheckingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_certificate_validate_with_http_info(cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_certificate_validate_with_http_info(cert_id, **kwargs)  # noqa: E501
            return data

    def validate_certificate_validate_with_http_info(self, cert_id, **kwargs):  # noqa: E501
        """Validate a certificate  # noqa: E501

        Checks whether certificate is valid. When the certificate contains a chain, the full chain is validated. The usage parameter can be SERVER (default) or CLIENT. This indicates whether the certificate needs to be validated as a server-auth or a client-auth certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_certificate_validate_with_http_info(cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cert_id: ID of certificate to validate (required)
        :param str usage: Usage Type of the Certificate, SERVER or CLIENT. Default is SERVER
        :return: CertificateCheckingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_id', 'usage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_certificate_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `validate_certificate_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']  # noqa: E501

        query_params = []
        if 'usage' in params:
            query_params.append(('usage', params['usage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/certificates/{cert-id}?action=validate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateCheckingStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
