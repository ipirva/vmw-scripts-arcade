# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationGlobalConfigurationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_global_configs(self, config_type, **kwargs):  # noqa: E501
        """Get global configs for a config type  # noqa: E501

        Returns global configurations that belong to the config type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_global_configs(config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_type: (required)
        :return: GlobalConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_global_configs_with_http_info(config_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_global_configs_with_http_info(config_type, **kwargs)  # noqa: E501
            return data

    def get_global_configs_with_http_info(self, config_type, **kwargs):  # noqa: E501
        """Get global configs for a config type  # noqa: E501

        Returns global configurations that belong to the config type   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_global_configs_with_http_info(config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_type: (required)
        :return: GlobalConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_global_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_type' is set
        if ('config_type' not in params or
                params['config_type'] is None):
            raise ValueError("Missing the required parameter `config_type` when calling `get_global_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_type' in params:
            path_params['config-type'] = params['config_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global-configs/{config-type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalConfigs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_central_node_config_profiles(self, **kwargs):  # noqa: E501
        """List all Central Node Config profiles  # noqa: E501

        Returns list of all Central Node Config profiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_central_node_config_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CentralNodeConfigProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_central_node_config_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_central_node_config_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_central_node_config_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List all Central Node Config profiles  # noqa: E501

        Returns list of all Central Node Config profiles.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_central_node_config_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CentralNodeConfigProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_central_node_config_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/configs/central-config/node-config-profiles/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CentralNodeConfigProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_global_configs(self, **kwargs):  # noqa: E501
        """List global configurations of a NSX domain  # noqa: E501

        Returns global configurations of a NSX domain grouped by the config types. These global configurations are valid across NSX domain for their respective types unless they are overridden by a more granular configurations.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_global_configs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GlobalConfigsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_global_configs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_global_configs_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_global_configs_with_http_info(self, **kwargs):  # noqa: E501
        """List global configurations of a NSX domain  # noqa: E501

        Returns global configurations of a NSX domain grouped by the config types. These global configurations are valid across NSX domain for their respective types unless they are overridden by a more granular configurations.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_global_configs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GlobalConfigsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_global_configs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global-configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalConfigsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_central_node_config_profile(self, profile_id, **kwargs):  # noqa: E501
        """Read Central Node Config profile  # noqa: E501

        Returns properties in specified Central Node Config profile. Sensitive data (like SNMP v2c community strings) are included only if query parameter \"show_sensitive_data\" is true.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_central_node_config_profile(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Central Node Config profile id (required)
        :param bool show_sensitive_data: Show sensitive data in Central Node Config profile
        :return: CentralNodeConfigProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_central_node_config_profile_with_http_info(profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_central_node_config_profile_with_http_info(profile_id, **kwargs)  # noqa: E501
            return data

    def read_central_node_config_profile_with_http_info(self, profile_id, **kwargs):  # noqa: E501
        """Read Central Node Config profile  # noqa: E501

        Returns properties in specified Central Node Config profile. Sensitive data (like SNMP v2c community strings) are included only if query parameter \"show_sensitive_data\" is true.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_central_node_config_profile_with_http_info(profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str profile_id: Central Node Config profile id (required)
        :param bool show_sensitive_data: Show sensitive data in Central Node Config profile
        :return: CentralNodeConfigProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile_id', 'show_sensitive_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_central_node_config_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `read_central_node_config_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'profile_id' in params:
            path_params['profile-id'] = params['profile_id']  # noqa: E501

        query_params = []
        if 'show_sensitive_data' in params:
            query_params.append(('show_sensitive_data', params['show_sensitive_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/configs/central-config/node-config-profiles/{profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CentralNodeConfigProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resync_global_configs_resync_config(self, body, config_type, **kwargs):  # noqa: E501
        """Resyncs global configurations of a config-type  # noqa: E501

        It is similar to update global configurations but this request would trigger update even if the configs are unmodified. However, the realization of the new configurations is config-type specific. Refer to config-type specific documentation for details about the configuration push state.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resync_global_configs_resync_config(body, config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalConfigs body: (required)
        :param str config_type: (required)
        :return: GlobalConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resync_global_configs_resync_config_with_http_info(body, config_type, **kwargs)  # noqa: E501
        else:
            (data) = self.resync_global_configs_resync_config_with_http_info(body, config_type, **kwargs)  # noqa: E501
            return data

    def resync_global_configs_resync_config_with_http_info(self, body, config_type, **kwargs):  # noqa: E501
        """Resyncs global configurations of a config-type  # noqa: E501

        It is similar to update global configurations but this request would trigger update even if the configs are unmodified. However, the realization of the new configurations is config-type specific. Refer to config-type specific documentation for details about the configuration push state.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resync_global_configs_resync_config_with_http_info(body, config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalConfigs body: (required)
        :param str config_type: (required)
        :return: GlobalConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'config_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resync_global_configs_resync_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `resync_global_configs_resync_config`")  # noqa: E501
        # verify the required parameter 'config_type' is set
        if ('config_type' not in params or
                params['config_type'] is None):
            raise ValueError("Missing the required parameter `config_type` when calling `resync_global_configs_resync_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_type' in params:
            path_params['config-type'] = params['config_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global-configs/{config-type}?action=resync_config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalConfigs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_central_node_config_profile(self, body, node_config_profile_id, **kwargs):  # noqa: E501
        """Configure Node Config profile  # noqa: E501

        Updates properties in the specified Central Node Config profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_central_node_config_profile(body, node_config_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CentralNodeConfigProfile body: (required)
        :param str node_config_profile_id: (required)
        :return: CentralNodeConfigProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_central_node_config_profile_with_http_info(body, node_config_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_central_node_config_profile_with_http_info(body, node_config_profile_id, **kwargs)  # noqa: E501
            return data

    def update_central_node_config_profile_with_http_info(self, body, node_config_profile_id, **kwargs):  # noqa: E501
        """Configure Node Config profile  # noqa: E501

        Updates properties in the specified Central Node Config profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_central_node_config_profile_with_http_info(body, node_config_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CentralNodeConfigProfile body: (required)
        :param str node_config_profile_id: (required)
        :return: CentralNodeConfigProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'node_config_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_central_node_config_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_central_node_config_profile`")  # noqa: E501
        # verify the required parameter 'node_config_profile_id' is set
        if ('node_config_profile_id' not in params or
                params['node_config_profile_id'] is None):
            raise ValueError("Missing the required parameter `node_config_profile_id` when calling `update_central_node_config_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_config_profile_id' in params:
            path_params['node-config-profile-id'] = params['node_config_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/configs/central-config/node-config-profiles/{node-config-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CentralNodeConfigProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_global_configs(self, body, config_type, **kwargs):  # noqa: E501
        """Update global configurations of a config type  # noqa: E501

        Updates global configurations that belong to a config type. The request must include the updated values along with the unmodified values. The values that are updated(different) would trigger update to config-type specific state. However, the realization of the new configurations is config-type specific. Refer to config-type specific documentation for details about the config- uration push state. Policy api will overwrite the fipsGlobalConfig set using MP api. Always use https://<policyIp>/policy/api/v1/infra/global-config to update fips config- uration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_global_configs(body, config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalConfigs body: (required)
        :param str config_type: (required)
        :return: GlobalConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_global_configs_with_http_info(body, config_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_global_configs_with_http_info(body, config_type, **kwargs)  # noqa: E501
            return data

    def update_global_configs_with_http_info(self, body, config_type, **kwargs):  # noqa: E501
        """Update global configurations of a config type  # noqa: E501

        Updates global configurations that belong to a config type. The request must include the updated values along with the unmodified values. The values that are updated(different) would trigger update to config-type specific state. However, the realization of the new configurations is config-type specific. Refer to config-type specific documentation for details about the config- uration push state. Policy api will overwrite the fipsGlobalConfig set using MP api. Always use https://<policyIp>/policy/api/v1/infra/global-config to update fips config- uration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_global_configs_with_http_info(body, config_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GlobalConfigs body: (required)
        :param str config_type: (required)
        :return: GlobalConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'config_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_global_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_global_configs`")  # noqa: E501
        # verify the required parameter 'config_type' is set
        if ('config_type' not in params or
                params['config_type'] is None):
            raise ValueError("Missing the required parameter `config_type` when calling `update_global_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_type' in params:
            path_params['config-type'] = params['config_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/global-configs/{config-type}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GlobalConfigs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
