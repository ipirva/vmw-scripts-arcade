# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricEdgeClustersInterSitesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_edge_cluster_inter_site_status(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get inter-site status of the edge cluster  # noqa: E501

        Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. It always returns cached response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_inter_site_status(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: EdgeClusterInterSiteStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_edge_cluster_inter_site_status_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edge_cluster_inter_site_status_with_http_info(edge_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_edge_cluster_inter_site_status_with_http_info(self, edge_cluster_id, **kwargs):  # noqa: E501
        """Get inter-site status of the edge cluster  # noqa: E501

        Returns the aggregated status for the Edge cluster along with status of all edge nodes in the cluster. It always returns cached response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_edge_cluster_inter_site_status_with_http_info(edge_cluster_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_cluster_id: (required)
        :return: EdgeClusterInterSiteStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_cluster_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edge_cluster_inter_site_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_cluster_id' is set
        if ('edge_cluster_id' not in params or
                params['edge_cluster_id'] is None):
            raise ValueError("Missing the required parameter `edge_cluster_id` when calling `get_edge_cluster_inter_site_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_cluster_id' in params:
            path_params['edge-cluster-id'] = params['edge_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/edge-clusters/{edge-cluster-id}/inter-site/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EdgeClusterInterSiteStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inter_site_edge_node_bgp_neighbor_advertised_routes(self, edge_node_id, neighbor_id, **kwargs):  # noqa: E501
        """Get BGP neighbor advertised routes on edge transport node  # noqa: E501

        Returns routes advertised by BGP neighbor from the given edge transport node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_bgp_neighbor_advertised_routes(edge_node_id, neighbor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :param str neighbor_id: (required)
        :return: BgpNeighborRouteDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inter_site_edge_node_bgp_neighbor_advertised_routes_with_http_info(edge_node_id, neighbor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_inter_site_edge_node_bgp_neighbor_advertised_routes_with_http_info(edge_node_id, neighbor_id, **kwargs)  # noqa: E501
            return data

    def get_inter_site_edge_node_bgp_neighbor_advertised_routes_with_http_info(self, edge_node_id, neighbor_id, **kwargs):  # noqa: E501
        """Get BGP neighbor advertised routes on edge transport node  # noqa: E501

        Returns routes advertised by BGP neighbor from the given edge transport node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_bgp_neighbor_advertised_routes_with_http_info(edge_node_id, neighbor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :param str neighbor_id: (required)
        :return: BgpNeighborRouteDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_node_id', 'neighbor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inter_site_edge_node_bgp_neighbor_advertised_routes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_node_id' is set
        if ('edge_node_id' not in params or
                params['edge_node_id'] is None):
            raise ValueError("Missing the required parameter `edge_node_id` when calling `get_inter_site_edge_node_bgp_neighbor_advertised_routes`")  # noqa: E501
        # verify the required parameter 'neighbor_id' is set
        if ('neighbor_id' not in params or
                params['neighbor_id'] is None):
            raise ValueError("Missing the required parameter `neighbor_id` when calling `get_inter_site_edge_node_bgp_neighbor_advertised_routes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_node_id' in params:
            path_params['edge-node-id'] = params['edge_node_id']  # noqa: E501
        if 'neighbor_id' in params:
            path_params['neighbor-id'] = params['neighbor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{edge-node-id}/inter-site/bgp/neighbors/{neighbor-id}/advertised-routes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BgpNeighborRouteDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inter_site_edge_node_bgp_neighbor_routes(self, edge_node_id, neighbor_id, **kwargs):  # noqa: E501
        """Get BGP neighbor learned routes on edge transport node  # noqa: E501

        Returns routes learned by BGP neighbor from the given edge transport node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_bgp_neighbor_routes(edge_node_id, neighbor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :param str neighbor_id: (required)
        :return: BgpNeighborRouteDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inter_site_edge_node_bgp_neighbor_routes_with_http_info(edge_node_id, neighbor_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_inter_site_edge_node_bgp_neighbor_routes_with_http_info(edge_node_id, neighbor_id, **kwargs)  # noqa: E501
            return data

    def get_inter_site_edge_node_bgp_neighbor_routes_with_http_info(self, edge_node_id, neighbor_id, **kwargs):  # noqa: E501
        """Get BGP neighbor learned routes on edge transport node  # noqa: E501

        Returns routes learned by BGP neighbor from the given edge transport node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_bgp_neighbor_routes_with_http_info(edge_node_id, neighbor_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :param str neighbor_id: (required)
        :return: BgpNeighborRouteDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_node_id', 'neighbor_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inter_site_edge_node_bgp_neighbor_routes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_node_id' is set
        if ('edge_node_id' not in params or
                params['edge_node_id'] is None):
            raise ValueError("Missing the required parameter `edge_node_id` when calling `get_inter_site_edge_node_bgp_neighbor_routes`")  # noqa: E501
        # verify the required parameter 'neighbor_id' is set
        if ('neighbor_id' not in params or
                params['neighbor_id'] is None):
            raise ValueError("Missing the required parameter `neighbor_id` when calling `get_inter_site_edge_node_bgp_neighbor_routes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_node_id' in params:
            path_params['edge-node-id'] = params['edge_node_id']  # noqa: E501
        if 'neighbor_id' in params:
            path_params['neighbor-id'] = params['neighbor_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{edge-node-id}/inter-site/bgp/neighbors/{neighbor-id}/routes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BgpNeighborRouteDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inter_site_edge_node_bgp_summary(self, edge_node_id, **kwargs):  # noqa: E501
        """Get inter-site BGP summary of edge node  # noqa: E501

        Returns BGP summary for all configured neighbors in tunnel VRF on the given egde node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_bgp_summary(edge_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :return: InterSiteBgpSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inter_site_edge_node_bgp_summary_with_http_info(edge_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_inter_site_edge_node_bgp_summary_with_http_info(edge_node_id, **kwargs)  # noqa: E501
            return data

    def get_inter_site_edge_node_bgp_summary_with_http_info(self, edge_node_id, **kwargs):  # noqa: E501
        """Get inter-site BGP summary of edge node  # noqa: E501

        Returns BGP summary for all configured neighbors in tunnel VRF on the given egde node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_bgp_summary_with_http_info(edge_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :return: InterSiteBgpSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inter_site_edge_node_bgp_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_node_id' is set
        if ('edge_node_id' not in params or
                params['edge_node_id'] is None):
            raise ValueError("Missing the required parameter `edge_node_id` when calling `get_inter_site_edge_node_bgp_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_node_id' in params:
            path_params['edge-node-id'] = params['edge_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{edge-node-id}/inter-site/bgp/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterSiteBgpSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inter_site_edge_node_statistics(self, edge_node_id, **kwargs):  # noqa: E501
        """Get inter-site statistics of edge node  # noqa: E501

        Returns RTEP to RTEP tunnel port statistics of the given edge node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_statistics(edge_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :return: NodeInterSiteStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inter_site_edge_node_statistics_with_http_info(edge_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_inter_site_edge_node_statistics_with_http_info(edge_node_id, **kwargs)  # noqa: E501
            return data

    def get_inter_site_edge_node_statistics_with_http_info(self, edge_node_id, **kwargs):  # noqa: E501
        """Get inter-site statistics of edge node  # noqa: E501

        Returns RTEP to RTEP tunnel port statistics of the given edge node. It always returns realtime response.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inter_site_edge_node_statistics_with_http_info(edge_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :return: NodeInterSiteStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inter_site_edge_node_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_node_id' is set
        if ('edge_node_id' not in params or
                params['edge_node_id'] is None):
            raise ValueError("Missing the required parameter `edge_node_id` when calling `get_inter_site_edge_node_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_node_id' in params:
            path_params['edge-node-id'] = params['edge_node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{edge-node-id}/inter-site/statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterSiteStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_inter_site_edge_node_bgp_neighbors(self, edge_node_id, **kwargs):  # noqa: E501
        """Paginated list of BGP Neighbors on edge transport node  # noqa: E501

        Paginated list of BGP Neighbors on edge transport node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_inter_site_edge_node_bgp_neighbors(edge_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: BgpNeighborListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_inter_site_edge_node_bgp_neighbors_with_http_info(edge_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_inter_site_edge_node_bgp_neighbors_with_http_info(edge_node_id, **kwargs)  # noqa: E501
            return data

    def list_inter_site_edge_node_bgp_neighbors_with_http_info(self, edge_node_id, **kwargs):  # noqa: E501
        """Paginated list of BGP Neighbors on edge transport node  # noqa: E501

        Paginated list of BGP Neighbors on edge transport node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_inter_site_edge_node_bgp_neighbors_with_http_info(edge_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_node_id: (required)
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: BgpNeighborListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_node_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_inter_site_edge_node_bgp_neighbors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_node_id' is set
        if ('edge_node_id' not in params or
                params['edge_node_id'] is None):
            raise ValueError("Missing the required parameter `edge_node_id` when calling `list_inter_site_edge_node_bgp_neighbors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'edge_node_id' in params:
            path_params['edge-node-id'] = params['edge_node_id']  # noqa: E501

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{edge-node-id}/inter-site/bgp/neighbors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BgpNeighborListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
