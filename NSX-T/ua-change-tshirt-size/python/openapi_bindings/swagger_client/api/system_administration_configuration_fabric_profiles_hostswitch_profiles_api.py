# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricProfilesHostswitchProfilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_host_switch_profile(self, body, **kwargs):  # noqa: E501
        """Create a Hostswitch Profile  # noqa: E501

        Creates a hostswitch profile. The resource_type is required. For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). (uplink_mtu_threshold) is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_host_switch_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BaseHostSwitchProfile body: (required)
        :return: BaseHostSwitchProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_host_switch_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_host_switch_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_host_switch_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Hostswitch Profile  # noqa: E501

        Creates a hostswitch profile. The resource_type is required. For uplink profiles, the teaming and policy parameters are required. By default, the mtu is 1600 and the transport_vlan is 0. The supported MTU range is 1280 through (uplink_mtu_threshold). (uplink_mtu_threshold) is 9000 by default. Range can be extended by modifying (uplink_mtu_threshold) in SwitchingGlobalConfig to the required upper threshold.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_host_switch_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BaseHostSwitchProfile body: (required)
        :return: BaseHostSwitchProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_host_switch_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_host_switch_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host-switch-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseHostSwitchProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_host_switch_profile(self, host_switch_profile_id, **kwargs):  # noqa: E501
        """Delete a Hostswitch Profile  # noqa: E501

        Deletes a specified hostswitch profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_switch_profile(host_switch_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_switch_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_host_switch_profile_with_http_info(host_switch_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_host_switch_profile_with_http_info(host_switch_profile_id, **kwargs)  # noqa: E501
            return data

    def delete_host_switch_profile_with_http_info(self, host_switch_profile_id, **kwargs):  # noqa: E501
        """Delete a Hostswitch Profile  # noqa: E501

        Deletes a specified hostswitch profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_switch_profile_with_http_info(host_switch_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_switch_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_switch_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_host_switch_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_switch_profile_id' is set
        if ('host_switch_profile_id' not in params or
                params['host_switch_profile_id'] is None):
            raise ValueError("Missing the required parameter `host_switch_profile_id` when calling `delete_host_switch_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_switch_profile_id' in params:
            path_params['host-switch-profile-id'] = params['host_switch_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host-switch-profiles/{host-switch-profile-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_host_switch_profile(self, host_switch_profile_id, **kwargs):  # noqa: E501
        """Get a Hostswitch Profile by ID  # noqa: E501

        Returns information about a specified hostswitch profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_switch_profile(host_switch_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_switch_profile_id: (required)
        :return: BaseHostSwitchProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_host_switch_profile_with_http_info(host_switch_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_host_switch_profile_with_http_info(host_switch_profile_id, **kwargs)  # noqa: E501
            return data

    def get_host_switch_profile_with_http_info(self, host_switch_profile_id, **kwargs):  # noqa: E501
        """Get a Hostswitch Profile by ID  # noqa: E501

        Returns information about a specified hostswitch profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_host_switch_profile_with_http_info(host_switch_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host_switch_profile_id: (required)
        :return: BaseHostSwitchProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_switch_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_host_switch_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_switch_profile_id' is set
        if ('host_switch_profile_id' not in params or
                params['host_switch_profile_id'] is None):
            raise ValueError("Missing the required parameter `host_switch_profile_id` when calling `get_host_switch_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_switch_profile_id' in params:
            path_params['host-switch-profile-id'] = params['host_switch_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host-switch-profiles/{host-switch-profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseHostSwitchProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_host_switch_profiles(self, **kwargs):  # noqa: E501
        """List Hostswitch Profiles  # noqa: E501

        Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, only uplink teaming is supported. Uplink teaming allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_host_switch_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str deployment_type: Supported edge deployment type.
        :param str hostswitch_profile_type: Supported HostSwitch profiles.
        :param bool include_system_owned: Whether the list result contains system resources
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str node_type: Fabric node type for which uplink profiles are to be listed
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str uplink_teaming_policy_name: The host switch profile's uplink teaming policy name
        :return: HostSwitchProfilesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_host_switch_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_host_switch_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_host_switch_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List Hostswitch Profiles  # noqa: E501

        Returns information about the configured hostswitch profiles. Hostswitch profiles define networking policies for hostswitches (sometimes referred to as bridges in OVS). Currently, only uplink teaming is supported. Uplink teaming allows NSX to load balance traffic across different physical NICs (PNICs) on the hypervisor hosts. Multiple teaming policies are supported, including LACP active, LACP passive, load balancing based on source ID, and failover order.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_host_switch_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str deployment_type: Supported edge deployment type.
        :param str hostswitch_profile_type: Supported HostSwitch profiles.
        :param bool include_system_owned: Whether the list result contains system resources
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str node_type: Fabric node type for which uplink profiles are to be listed
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str uplink_teaming_policy_name: The host switch profile's uplink teaming policy name
        :return: HostSwitchProfilesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'deployment_type', 'hostswitch_profile_type', 'include_system_owned', 'included_fields', 'node_type', 'page_size', 'sort_ascending', 'sort_by', 'uplink_teaming_policy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_host_switch_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'deployment_type' in params:
            query_params.append(('deployment_type', params['deployment_type']))  # noqa: E501
        if 'hostswitch_profile_type' in params:
            query_params.append(('hostswitch_profile_type', params['hostswitch_profile_type']))  # noqa: E501
        if 'include_system_owned' in params:
            query_params.append(('include_system_owned', params['include_system_owned']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'node_type' in params:
            query_params.append(('node_type', params['node_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'uplink_teaming_policy_name' in params:
            query_params.append(('uplink_teaming_policy_name', params['uplink_teaming_policy_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host-switch-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HostSwitchProfilesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_host_switch_profile(self, body, host_switch_profile_id, **kwargs):  # noqa: E501
        """Update a Hostswitch Profile  # noqa: E501

        Modifies a specified hostswitch profile. The body of the PUT request must include the resource_type. For uplink profiles, the put request must also include teaming parameters. Modifiable attributes include display_name, mtu, and transport_vlan. For uplink teaming policies, uplink_name and policy are also modifiable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_host_switch_profile(body, host_switch_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BaseHostSwitchProfile body: (required)
        :param str host_switch_profile_id: (required)
        :return: BaseHostSwitchProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_host_switch_profile_with_http_info(body, host_switch_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_host_switch_profile_with_http_info(body, host_switch_profile_id, **kwargs)  # noqa: E501
            return data

    def update_host_switch_profile_with_http_info(self, body, host_switch_profile_id, **kwargs):  # noqa: E501
        """Update a Hostswitch Profile  # noqa: E501

        Modifies a specified hostswitch profile. The body of the PUT request must include the resource_type. For uplink profiles, the put request must also include teaming parameters. Modifiable attributes include display_name, mtu, and transport_vlan. For uplink teaming policies, uplink_name and policy are also modifiable.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_host_switch_profile_with_http_info(body, host_switch_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BaseHostSwitchProfile body: (required)
        :param str host_switch_profile_id: (required)
        :return: BaseHostSwitchProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'host_switch_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_host_switch_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_host_switch_profile`")  # noqa: E501
        # verify the required parameter 'host_switch_profile_id' is set
        if ('host_switch_profile_id' not in params or
                params['host_switch_profile_id'] is None):
            raise ValueError("Missing the required parameter `host_switch_profile_id` when calling `update_host_switch_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'host_switch_profile_id' in params:
            path_params['host-switch-profile-id'] = params['host_switch_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/host-switch-profiles/{host-switch-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseHostSwitchProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
