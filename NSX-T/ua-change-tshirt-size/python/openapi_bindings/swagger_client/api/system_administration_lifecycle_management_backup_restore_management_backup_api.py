# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationLifecycleManagementBackupRestoreManagementBackupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def configure_backup_config(self, body, **kwargs):  # noqa: E501
        """Configure backup  # noqa: E501

        Configure file server and timers for automated backup. If secret fields are omitted (password, passphrase) then use the previously set value.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_backup_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BackupConfiguration body: (required)
        :param str frame_type: Frame type
        :param str site_id: Site ID
        :return: BackupConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_backup_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_backup_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def configure_backup_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Configure backup  # noqa: E501

        Configure file server and timers for automated backup. If secret fields are omitted (password, passphrase) then use the previously set value.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_backup_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BackupConfiguration body: (required)
        :param str frame_type: Frame type
        :param str site_id: Site ID
        :return: BackupConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'frame_type', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_backup_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `configure_backup_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'frame_type' in params:
            query_params.append(('frame_type', params['frame_type']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backup_config(self, **kwargs):  # noqa: E501
        """Get backup configuration  # noqa: E501

        Get a configuration of a file server and timers for automated backup. Fields that contain secrets (password, passphrase) are not returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BackupConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backup_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_backup_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_backup_config_with_http_info(self, **kwargs):  # noqa: E501
        """Get backup configuration  # noqa: E501

        Get a configuration of a file server and timers for automated backup. Fields that contain secrets (password, passphrase) are not returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BackupConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backup_history(self, **kwargs):  # noqa: E501
        """Get backup history  # noqa: E501

        Get history of previous backup operations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BackupOperationHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backup_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_backup_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_backup_history_with_http_info(self, **kwargs):  # noqa: E501
        """Get backup history  # noqa: E501

        Get history of previous backup operations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: BackupOperationHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupOperationHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backup_overview(self, **kwargs):  # noqa: E501
        """Get all backup related information for a site  # noqa: E501

        Get a configuration of a file server, timers for automated backup, latest backup status, backups list for a site. Fields that contain secrets (password, passphrase) are not returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_overview(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str frame_type: Frame type
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool show_backups_list: Need a list of backups
        :param str site_id: UUID of the site
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: BackupOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backup_overview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_backup_overview_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_backup_overview_with_http_info(self, **kwargs):  # noqa: E501
        """Get all backup related information for a site  # noqa: E501

        Get a configuration of a file server, timers for automated backup, latest backup status, backups list for a site. Fields that contain secrets (password, passphrase) are not returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_overview_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str frame_type: Frame type
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool show_backups_list: Need a list of backups
        :param str site_id: UUID of the site
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: BackupOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'frame_type', 'included_fields', 'page_size', 'show_backups_list', 'site_id', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_overview" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'frame_type' in params:
            query_params.append(('frame_type', params['frame_type']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'show_backups_list' in params:
            query_params.append(('show_backups_list', params['show_backups_list']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups/overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BackupOverview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backup_status(self, **kwargs):  # noqa: E501
        """Get backup status  # noqa: E501

        Get status of active backup operations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CurrentBackupOperationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_backup_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_backup_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_backup_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get backup status  # noqa: E501

        Get status of active backup operations   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_backup_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CurrentBackupOperationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backup_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CurrentBackupOperationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint(self, body, **kwargs):  # noqa: E501
        """Get ssh fingerprint of remote(backup) server  # noqa: E501

        Get SHA256 fingerprint of ECDSA key of remote server. The caller should independently verify that the key is trusted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteServerFingerprintRequest body: (required)
        :return: RemoteServerFingerprint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get ssh fingerprint of remote(backup) server  # noqa: E501

        Get SHA256 fingerprint of ECDSA key of remote server. The caller should independently verify that the key is trusted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteServerFingerprintRequest body: (required)
        :return: RemoteServerFingerprint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_ssh_fingerprint_of_server_retrieve_ssh_fingerprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/backups?action=retrieve_ssh_fingerprint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoteServerFingerprint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_onetime_backup_backup_to_remote(self, **kwargs):  # noqa: E501
        """Request one-time backup  # noqa: E501

        Request one-time backup. The backup will be uploaded using the same server configuration as for automatic backup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_onetime_backup_backup_to_remote(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str frame_type: Frame type
        :param str site_id: Site ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_onetime_backup_backup_to_remote_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_onetime_backup_backup_to_remote_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_onetime_backup_backup_to_remote_with_http_info(self, **kwargs):  # noqa: E501
        """Request one-time backup  # noqa: E501

        Request one-time backup. The backup will be uploaded using the same server configuration as for automatic backup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_onetime_backup_backup_to_remote_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str frame_type: Frame type
        :param str site_id: Site ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['frame_type', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_onetime_backup_backup_to_remote" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'frame_type' in params:
            query_params.append(('frame_type', params['frame_type']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster?action=backup_to_remote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_onetime_inventory_summary_summarize_inventory_to_remote(self, **kwargs):  # noqa: E501
        """Request one-time inventory summary.  # noqa: E501

        Request one-time inventory summary. The backup will be uploaded using the same server configuration as for an automatic backup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_onetime_inventory_summary_summarize_inventory_to_remote(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_onetime_inventory_summary_summarize_inventory_to_remote_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.request_onetime_inventory_summary_summarize_inventory_to_remote_with_http_info(**kwargs)  # noqa: E501
            return data

    def request_onetime_inventory_summary_summarize_inventory_to_remote_with_http_info(self, **kwargs):  # noqa: E501
        """Request one-time inventory summary.  # noqa: E501

        Request one-time inventory summary. The backup will be uploaded using the same server configuration as for an automatic backup.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_onetime_inventory_summary_summarize_inventory_to_remote_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_onetime_inventory_summary_summarize_inventory_to_remote" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster?action=summarize_inventory_to_remote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
