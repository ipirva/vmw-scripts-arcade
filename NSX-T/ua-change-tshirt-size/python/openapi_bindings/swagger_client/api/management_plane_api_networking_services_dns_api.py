# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPINetworkingServicesDNSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_dns_forwarder_cache_clear_cache(self, forwarder_id, **kwargs):  # noqa: E501
        """Clear the current cache of the DNS forwarder.  # noqa: E501

        Clear the current cache of the DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_dns_forwarder_cache_clear_cache(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_dns_forwarder_cache_clear_cache_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_dns_forwarder_cache_clear_cache_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def clear_dns_forwarder_cache_clear_cache_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Clear the current cache of the DNS forwarder.  # noqa: E501

        Clear the current cache of the DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_dns_forwarder_cache_clear_cache_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_dns_forwarder_cache_clear_cache" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `clear_dns_forwarder_cache_clear_cache`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}?action=clear_cache', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dns_forwader(self, body, **kwargs):  # noqa: E501
        """Create a DNS forwader  # noqa: E501

        Create a DNS forwader upon a logical router. There is only one DNS forwarder can be created upon a given logical router.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_forwader(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DnsForwarder body: (required)
        :return: DnsForwarder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dns_forwader_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dns_forwader_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_dns_forwader_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a DNS forwader  # noqa: E501

        Create a DNS forwader upon a logical router. There is only one DNS forwarder can be created upon a given logical router.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dns_forwader_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DnsForwarder body: (required)
        :return: DnsForwarder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dns_forwader" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dns_forwader`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsForwarder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dns_forwarder(self, forwarder_id, **kwargs):  # noqa: E501
        """Delete a specific DNS forwarder  # noqa: E501

        Delete a specific DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_forwarder(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dns_forwarder_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dns_forwarder_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def delete_dns_forwarder_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Delete a specific DNS forwarder  # noqa: E501

        Delete a specific DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dns_forwarder_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dns_forwarder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `delete_dns_forwarder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_dns_forwarder_disable(self, forwarder_id, **kwargs):  # noqa: E501
        """Disable the DNS forwarder.  # noqa: E501

        Disable the DNS forwarder if the forwarder is currently enbled. If the DNS forwarder is already disabled, the forwarder will not be re-disabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_dns_forwarder_disable(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_dns_forwarder_disable_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_dns_forwarder_disable_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def disable_dns_forwarder_disable_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Disable the DNS forwarder.  # noqa: E501

        Disable the DNS forwarder if the forwarder is currently enbled. If the DNS forwarder is already disabled, the forwarder will not be re-disabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_dns_forwarder_disable_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_dns_forwarder_disable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `disable_dns_forwarder_disable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}?action=disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_dns_forwarder_enable(self, forwarder_id, **kwargs):  # noqa: E501
        """Enable the DNS forwarder.  # noqa: E501

        Enable the DNS forwarder if the forwarder is currently disabled. If the DNS forwarder is already enabled, the forwarder will not be re-enabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_dns_forwarder_enable(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_dns_forwarder_enable_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_dns_forwarder_enable_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def enable_dns_forwarder_enable_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Enable the DNS forwarder.  # noqa: E501

        Enable the DNS forwarder if the forwarder is currently disabled. If the DNS forwarder is already enabled, the forwarder will not be re-enabled.  Please note, once a DNS forwarder is disabled then enabled, the previous DNS forwarder statistics counters will be reset.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_dns_forwarder_enable_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_dns_forwarder_enable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `enable_dns_forwarder_enable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}?action=enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_forwarder_state(self, forwarder_id, **kwargs):  # noqa: E501
        """Get the realized state of a DNS forwarder  # noqa: E501

        Return the realized state information of a DNS forwarder. After a DNS forwarder was created or updated, you can invoke this API to check the realization state of the forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_forwarder_state(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :param int barrier_id:
        :param str request_id: Realization request ID
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_forwarder_state_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_forwarder_state_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def get_dns_forwarder_state_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Get the realized state of a DNS forwarder  # noqa: E501

        Return the realized state information of a DNS forwarder. After a DNS forwarder was created or updated, you can invoke this API to check the realization state of the forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_forwarder_state_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :param int barrier_id:
        :param str request_id: Realization request ID
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id', 'barrier_id', 'request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_forwarder_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `get_dns_forwarder_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []
        if 'barrier_id' in params:
            query_params.append(('barrier_id', params['barrier_id']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('request_id', params['request_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigurationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dns_forwarder_status(self, forwarder_id, **kwargs):  # noqa: E501
        """Get current status of the given DNS forwarder  # noqa: E501

        Returns the current status of the given DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_forwarder_status(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: DnsForwarderStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dns_forwarder_status_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dns_forwarder_status_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def get_dns_forwarder_status_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Get current status of the given DNS forwarder  # noqa: E501

        Returns the current status of the given DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dns_forwarder_status_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: DnsForwarderStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dns_forwarder_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `get_dns_forwarder_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsForwarderStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_failed_dns_queries(self, forwarder_id, **kwargs):  # noqa: E501
        """Get the recent failed DNS queries  # noqa: E501

        Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Acitve/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_failed_dns_queries(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :param int count: The count of the failed DNS queries
        :return: DnsFailedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_failed_dns_queries_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_failed_dns_queries_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def get_failed_dns_queries_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Get the recent failed DNS queries  # noqa: E501

        Return the given count of recent failed DNS queries from DNS forwarder. Since the DNS forwarder is running in Acitve/Standby HA mode on transport nodes, the given count of queries will be returned from each nodes. Hence the total queries returned could be doubled. If no count is specified, 100 recent failed queries are returned. If the recent failures is less than the given count, all the failures will be returned. The maximum count is 1,000.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_failed_dns_queries_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :param int count: The count of the failed DNS queries
        :return: DnsFailedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_failed_dns_queries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `get_failed_dns_queries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}/failed-queries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsFailedQueries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dns_forwaders(self, **kwargs):  # noqa: E501
        """Get a paginated list of DNS forwarders  # noqa: E501

        Get a paginated list of DNS forwarders.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dns_forwaders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: DnsForwarderListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_dns_forwaders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dns_forwaders_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dns_forwaders_with_http_info(self, **kwargs):  # noqa: E501
        """Get a paginated list of DNS forwarders  # noqa: E501

        Get a paginated list of DNS forwarders.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dns_forwaders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: DnsForwarderListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dns_forwaders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsForwarderListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lookup_address(self, forwarder_id, **kwargs):  # noqa: E501
        """Resolve a given address via the DNS forwarder  # noqa: E501

        Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lookup_address(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :param str address: IP address or FQDN for nslookup
        :param str server_ip: IPv4 address
        :param str source_ip: IPv4 address
        :return: DnsAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lookup_address_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lookup_address_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def lookup_address_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Resolve a given address via the DNS forwarder  # noqa: E501

        Query the nameserver for an ip-address or a FQDN of the given an address optionally using an specified DNS server. If the address is a fqdn, nslookup will resolve ip-address with it. If the address is an ip-address, do a reverse lookup and answer fqdn(s).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lookup_address_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :param str address: IP address or FQDN for nslookup
        :param str server_ip: IPv4 address
        :param str source_ip: IPv4 address
        :return: DnsAnswer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id', 'address', 'server_ip', 'source_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lookup_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `lookup_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'server_ip' in params:
            query_params.append(('server_ip', params['server_ip']))  # noqa: E501
        if 'source_ip' in params:
            query_params.append(('source_ip', params['source_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}/nslookup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsAnswer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_dns_forwader(self, forwarder_id, **kwargs):  # noqa: E501
        """Retrieve a DNS forwarder  # noqa: E501

        Retrieve a DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_dns_forwader(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: DnsForwarder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_dns_forwader_with_http_info(forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_dns_forwader_with_http_info(forwarder_id, **kwargs)  # noqa: E501
            return data

    def read_dns_forwader_with_http_info(self, forwarder_id, **kwargs):  # noqa: E501
        """Retrieve a DNS forwarder  # noqa: E501

        Retrieve a DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_dns_forwader_with_http_info(forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str forwarder_id: (required)
        :return: DnsForwarder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_dns_forwader" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `read_dns_forwader`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsForwarder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dns_forwarder(self, body, forwarder_id, **kwargs):  # noqa: E501
        """Update a specific DNS forwarder  # noqa: E501

        Update a specific DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dns_forwarder(body, forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DnsForwarder body: (required)
        :param str forwarder_id: (required)
        :return: DnsForwarder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dns_forwarder_with_http_info(body, forwarder_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dns_forwarder_with_http_info(body, forwarder_id, **kwargs)  # noqa: E501
            return data

    def update_dns_forwarder_with_http_info(self, body, forwarder_id, **kwargs):  # noqa: E501
        """Update a specific DNS forwarder  # noqa: E501

        Update a specific DNS forwarder.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dns_forwarder_with_http_info(body, forwarder_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DnsForwarder body: (required)
        :param str forwarder_id: (required)
        :return: DnsForwarder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'forwarder_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dns_forwarder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dns_forwarder`")  # noqa: E501
        # verify the required parameter 'forwarder_id' is set
        if ('forwarder_id' not in params or
                params['forwarder_id'] is None):
            raise ValueError("Missing the required parameter `forwarder_id` when calling `update_dns_forwarder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'forwarder_id' in params:
            path_params['forwarder-id'] = params['forwarder_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dns/forwarders/{forwarder-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DnsForwarder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
