# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationNSXIntelligenceRepositoryBundlesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_bundle_upload_cancel_upload(self, bundle_id, product, **kwargs):  # noqa: E501
        """Cancel bundle upload  # noqa: E501

        Cancel upload of bundle. This API works only when bundle upload is in-progress and will not work during post-processing of bundle. If bundle upload is in-progress, then the API call returns http OK response after cancelling the upload and deleting partially uploaded bundle.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_bundle_upload_cancel_upload(bundle_id, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle_id: (required)
        :param str product: Name of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_bundle_upload_cancel_upload_with_http_info(bundle_id, product, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_bundle_upload_cancel_upload_with_http_info(bundle_id, product, **kwargs)  # noqa: E501
            return data

    def cancel_bundle_upload_cancel_upload_with_http_info(self, bundle_id, product, **kwargs):  # noqa: E501
        """Cancel bundle upload  # noqa: E501

        Cancel upload of bundle. This API works only when bundle upload is in-progress and will not work during post-processing of bundle. If bundle upload is in-progress, then the API call returns http OK response after cancelling the upload and deleting partially uploaded bundle.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_bundle_upload_cancel_upload_with_http_info(bundle_id, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle_id: (required)
        :param str product: Name of the product (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_bundle_upload_cancel_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `cancel_bundle_upload_cancel_upload`")  # noqa: E501
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `cancel_bundle_upload_cancel_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundle-id'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles/{bundle-id}?action=cancel_upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_ids(self, file_type, product, **kwargs):  # noqa: E501
        """Get list of bundle-ids which are available in repository or in-progress   # noqa: E501

        Get list of bundle-ids which are available in repository or in-progress   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_ids(file_type, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_type: Type of file (required)
        :param str product: Name of the product (required)
        :return: BundleIds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bundle_ids_with_http_info(file_type, product, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_ids_with_http_info(file_type, product, **kwargs)  # noqa: E501
            return data

    def get_bundle_ids_with_http_info(self, file_type, product, **kwargs):  # noqa: E501
        """Get list of bundle-ids which are available in repository or in-progress   # noqa: E501

        Get list of bundle-ids which are available in repository or in-progress   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_ids_with_http_info(file_type, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_type: Type of file (required)
        :param str product: Name of the product (required)
        :return: BundleIds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_type', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_type' is set
        if ('file_type' not in params or
                params['file_type'] is None):
            raise ValueError("Missing the required parameter `file_type` when calling `get_bundle_ids`")  # noqa: E501
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `get_bundle_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_type' in params:
            query_params.append(('file_type', params['file_type']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleIds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_upload_permissions(self, product, **kwargs):  # noqa: E501
        """Checks bundle upload permissions  # noqa: E501

        Checks whether bundle upload is allowed on given node for given product. There are different kinds of checks for different products. Some of the checks for Intelligence product are as follows: 1. Is bundle upload-allowed on given node 2. Is bundle upload already in-progress 3. Is Intelliegnce node deployment in-progress 4. Is Intelliegnce node upgrade in-progress   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_upload_permissions(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: Name of the product (required)
        :return: BundleUploadPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bundle_upload_permissions_with_http_info(product, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_upload_permissions_with_http_info(product, **kwargs)  # noqa: E501
            return data

    def get_bundle_upload_permissions_with_http_info(self, product, **kwargs):  # noqa: E501
        """Checks bundle upload permissions  # noqa: E501

        Checks whether bundle upload is allowed on given node for given product. There are different kinds of checks for different products. Some of the checks for Intelligence product are as follows: 1. Is bundle upload-allowed on given node 2. Is bundle upload already in-progress 3. Is Intelliegnce node deployment in-progress 4. Is Intelliegnce node upgrade in-progress   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_upload_permissions_with_http_info(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: Name of the product (required)
        :return: BundleUploadPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_upload_permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `get_bundle_upload_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles/upload-allowed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleUploadPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bundle_upload_status(self, bundle_id, product, **kwargs):  # noqa: E501
        """Get bundle upload status  # noqa: E501

        Get uploaded bundle upload status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_upload_status(bundle_id, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle_id: (required)
        :param str product: Name of the product (required)
        :return: BundleUploadStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bundle_upload_status_with_http_info(bundle_id, product, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bundle_upload_status_with_http_info(bundle_id, product, **kwargs)  # noqa: E501
            return data

    def get_bundle_upload_status_with_http_info(self, bundle_id, product, **kwargs):  # noqa: E501
        """Get bundle upload status  # noqa: E501

        Get uploaded bundle upload status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bundle_upload_status_with_http_info(bundle_id, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bundle_id: (required)
        :param str product: Name of the product (required)
        :return: BundleUploadStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bundle_id', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_upload_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params or
                params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_upload_status`")  # noqa: E501
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `get_bundle_upload_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundle-id'] = params['bundle_id']  # noqa: E501

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles/{bundle-id}/upload-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleUploadStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ovf_deploy_info(self, product, **kwargs):  # noqa: E501
        """Get information of the OVF which will be getting deployed.   # noqa: E501

        Get information of the OVF for specified product which is present in repository and will be used to deploy new VM.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ovf_deploy_info(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: Name of the product (required)
        :return: OvfInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ovf_deploy_info_with_http_info(product, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ovf_deploy_info_with_http_info(product, **kwargs)  # noqa: E501
            return data

    def get_ovf_deploy_info_with_http_info(self, product, **kwargs):  # noqa: E501
        """Get information of the OVF which will be getting deployed.   # noqa: E501

        Get information of the OVF for specified product which is present in repository and will be used to deploy new VM.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ovf_deploy_info_with_http_info(product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: Name of the product (required)
        :return: OvfInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ovf_deploy_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `get_ovf_deploy_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles/ovf-deploy-info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OvfInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_bundle_via_local_file_upload(self, file, file_type, product, **kwargs):  # noqa: E501
        """Upload bundle  # noqa: E501

        Upload the bundle. This call returns after upload is completed. You can check bundle processing status periodically by retrieving bundle upload-status to find out if the upload and processing is completed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_bundle_via_local_file_upload(file, file_type, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str file_type: Type of file (required)
        :param str product: Name of the product (required)
        :return: BundleId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_bundle_via_local_file_upload_with_http_info(file, file_type, product, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_bundle_via_local_file_upload_with_http_info(file, file_type, product, **kwargs)  # noqa: E501
            return data

    def upload_bundle_via_local_file_upload_with_http_info(self, file, file_type, product, **kwargs):  # noqa: E501
        """Upload bundle  # noqa: E501

        Upload the bundle. This call returns after upload is completed. You can check bundle processing status periodically by retrieving bundle upload-status to find out if the upload and processing is completed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_bundle_via_local_file_upload_with_http_info(file, file_type, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str file_type: Type of file (required)
        :param str product: Name of the product (required)
        :return: BundleId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'file_type', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_bundle_via_local_file_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_bundle_via_local_file_upload`")  # noqa: E501
        # verify the required parameter 'file_type' is set
        if ('file_type' not in params or
                params['file_type'] is None):
            raise ValueError("Missing the required parameter `file_type` when calling `upload_bundle_via_local_file_upload`")  # noqa: E501
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `upload_bundle_via_local_file_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_type' in params:
            query_params.append(('file_type', params['file_type']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles?action=upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_bundle_via_remote_file(self, body, file_type, product, **kwargs):  # noqa: E501
        """Upload bundle using remote file  # noqa: E501

        Upload the bundle from remote bundle URL. The call returns after fetch is initiated. Check status by periodically retrieving bundle upload status using GET /repository/bundles/<bundle-id>/upload-status. The upload is complete when the status is SUCCESS.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_bundle_via_remote_file(body, file_type, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteBundleUrl body: (required)
        :param str file_type: Type of file (required)
        :param str product: Name of the product (required)
        :return: BundleId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_bundle_via_remote_file_with_http_info(body, file_type, product, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_bundle_via_remote_file_with_http_info(body, file_type, product, **kwargs)  # noqa: E501
            return data

    def upload_bundle_via_remote_file_with_http_info(self, body, file_type, product, **kwargs):  # noqa: E501
        """Upload bundle using remote file  # noqa: E501

        Upload the bundle from remote bundle URL. The call returns after fetch is initiated. Check status by periodically retrieving bundle upload status using GET /repository/bundles/<bundle-id>/upload-status. The upload is complete when the status is SUCCESS.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_bundle_via_remote_file_with_http_info(body, file_type, product, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoteBundleUrl body: (required)
        :param str file_type: Type of file (required)
        :param str product: Name of the product (required)
        :return: BundleId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'file_type', 'product']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_bundle_via_remote_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `upload_bundle_via_remote_file`")  # noqa: E501
        # verify the required parameter 'file_type' is set
        if ('file_type' not in params or
                params['file_type'] is None):
            raise ValueError("Missing the required parameter `file_type` when calling `upload_bundle_via_remote_file`")  # noqa: E501
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `upload_bundle_via_remote_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'file_type' in params:
            query_params.append(('file_type', params['file_type']))  # noqa: E501
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/repository/bundles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BundleId',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
