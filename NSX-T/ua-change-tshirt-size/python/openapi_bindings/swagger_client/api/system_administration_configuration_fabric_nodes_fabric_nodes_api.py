# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesFabricNodesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_node(self, body, **kwargs):  # noqa: E501
        """Register and Install NSX Components on a Node  # noqa: E501

        Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Node body: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_node_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_node_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_node_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register and Install NSX Components on a Node  # noqa: E501

        Creates a host node (hypervisor) or edge node (router) in the transport network.  When you run this command for a host, NSX Manager attempts to install the NSX kernel modules, which are packaged as VIB, RPM, or DEB files. For the installation to succeed, you must provide the host login credentials and the host thumbprint.  To get the ESXi host thumbprint, SSH to the host and run the <b>openssl x509 -in /etc/vmware/ssl/rui.crt -fingerprint -sha256 -noout</b> command.  To generate host key thumbprint using SHA-256 algorithm please follow the steps below.  Log into the host, making sure that the connection is not vulnerable to a man in the middle attack. Check whether a public key already exists. Host public key is generally located at '/etc/ssh/ssh_host_rsa_key.pub'. If the key is not present then generate a new key by running the following command and follow the instructions.  <b>ssh-keygen -t rsa</b>  Now generate a SHA256 hash of the key using the following command. Please make sure to pass the appropriate file name if the public key is stored with a different file name other than the default 'id_rsa.pub'.  <b>awk '{print $2}' id_rsa.pub | base64 -d | sha256sum -b | sed 's/ .*$//' | xxd -r -p | base64</b> This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes to install NSX components on a node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Node body: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node(self, node_id, **kwargs):  # noqa: E501
        """Delete a Node  # noqa: E501

        Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. DELETE /transport-nodes/<transport-node-id> to delete FN.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param bool unprepare_host: Delete a host and uninstall NSX components
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def delete_node_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Delete a Node  # noqa: E501

        Removes a specified fabric node (host or edge). A fabric node may only be deleted when it is no longer referenced by a Transport Node. If unprepare_host option is set to false, the host will be deleted without uninstalling the NSX components from the host. This api is deprecated, use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt; to delete FN. DELETE /transport-nodes/<transport-node-id> to delete FN.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param bool unprepare_host: Delete a host and uninstall NSX components
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'unprepare_host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `delete_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'unprepare_host' in params:
            query_params.append(('unprepare_host', params['unprepare_host']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fabric_node_modules(self, node_id, **kwargs):  # noqa: E501
        """Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transportnode-id&gt;/modules to get fabric node modules.   # noqa: E501

        Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transportnode-id&gt;/modules to get fabric node modules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fabric_node_modules(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: SoftwareModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fabric_node_modules_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fabric_node_modules_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_fabric_node_modules_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transportnode-id&gt;/modules to get fabric node modules.   # noqa: E501

        Get the module details of a Fabric Node This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transportnode-id&gt;/modules to get fabric node modules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fabric_node_modules_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: SoftwareModuleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fabric_node_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_fabric_node_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/modules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SoftwareModuleResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fabric_node_state(self, node_id, **kwargs):  # noqa: E501
        """Get the Realized State of a Fabric Node.  # noqa: E501

        For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&lt;transportnode-id&gt;/state to get realized state of a Fabric Node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fabric_node_state(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fabric_node_state_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fabric_node_state_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def get_fabric_node_state_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Get the Realized State of a Fabric Node.  # noqa: E501

        For edge nodes, returns the current install state when deployment is in progress, NODE_READY when deployment is complete and the failure state when deployment has failed. This api is deprecated. Please use /transport-nodes/&lt;transportnode-id&gt;/state to get realized state of a Fabric Node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fabric_node_state_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fabric_node_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `get_fabric_node_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigurationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_supported_host_os_types(self, **kwargs):  # noqa: E501
        """Return list of supported host OS types  # noqa: E501

        Returns names of all supported host OS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supported_host_os_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportedHostOSListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_supported_host_os_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_supported_host_os_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_supported_host_os_types_with_http_info(self, **kwargs):  # noqa: E501
        """Return list of supported host OS types  # noqa: E501

        Returns names of all supported host OS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_supported_host_os_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SupportedHostOSListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supported_host_os_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/ostypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportedHostOSListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_delete_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target fabric node  # noqa: E501

        Invoke DELETE request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_delete_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_delete_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_delete_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target fabric node  # noqa: E501

        Invoke DELETE request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_delete_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_delete_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_delete_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_get_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target fabric node  # noqa: E501

        Invoke GET request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_get_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_get_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_get_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target fabric node  # noqa: E501

        Invoke GET request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_get_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_get_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_get_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_post_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target fabric node  # noqa: E501

        Invoke POST request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_post_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_post_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_post_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target fabric node  # noqa: E501

        Invoke POST request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_post_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_post_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_post_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_put_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target fabric node  # noqa: E501

        Invoke PUT request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_put_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_put_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_put_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target fabric node  # noqa: E501

        Invoke PUT request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_put_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_put_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_put_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_capabilities(self, node_id, **kwargs):  # noqa: E501
        """Return the List of Capabilities of a Single Node  # noqa: E501

        Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&lt;transportnode-id&gt;/capabilities if FN is converted to TN.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_capabilities(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: NodeCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_capabilities_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_node_capabilities_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def list_node_capabilities_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Return the List of Capabilities of a Single Node  # noqa: E501

        Returns information about capabilities of a single fabric host node. Edge nodes do not have capabilities. This api is deprecated, use GET /transport-nodes/&lt;transportnode-id&gt;/capabilities if FN is converted to TN.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_capabilities_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: NodeCapabilitiesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_capabilities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `list_node_capabilities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/capabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeCapabilitiesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_nodes(self, **kwargs):  # noqa: E501
        """Return the List of Nodes  # noqa: E501

        Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_nodes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which was converted to create this node
        :param str display_name: HostNode display name
        :param str external_id: HostNode external id
        :param str hardware_id: Hardware Id of the host
        :param str hypervisor_os_type: HostNode's Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str ip_address: Management IP address of the node
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str resource_type: Node type from 'HostNode', 'EdgeNode', 'PublicCloudGatewayNode'
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_nodes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_nodes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_nodes_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Nodes  # noqa: E501

        Returns information about all fabric nodes (hosts and edges). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes to list all fabric nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_nodes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str discovered_node_id: Id of the discovered node which was converted to create this node
        :param str display_name: HostNode display name
        :param str external_id: HostNode external id
        :param str hardware_id: Hardware Id of the host
        :param str hypervisor_os_type: HostNode's Hypervisor type, for example ESXi, RHEL KVM or UBUNTU KVM.
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str ip_address: Management IP address of the node
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str resource_type: Node type from 'HostNode', 'EdgeNode', 'PublicCloudGatewayNode'
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: NodeListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'discovered_node_id', 'display_name', 'external_id', 'hardware_id', 'hypervisor_os_type', 'included_fields', 'ip_address', 'page_size', 'resource_type', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'discovered_node_id' in params:
            query_params.append(('discovered_node_id', params['discovered_node_id']))  # noqa: E501
        if 'display_name' in params:
            query_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'external_id' in params:
            query_params.append(('external_id', params['external_id']))  # noqa: E501
        if 'hardware_id' in params:
            query_params.append(('hardware_id', params['hardware_id']))  # noqa: E501
        if 'hypervisor_os_type' in params:
            query_params.append(('hypervisor_os_type', params['hypervisor_os_type']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ip_address', params['ip_address']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_host_node_upgrade_action_upgrade_infra(self, node_id, **kwargs):  # noqa: E501
        """Perform a service deployment upgrade on a host node  # noqa: E501

        Perform a service deployment upgrade on a host node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_host_node_upgrade_action_upgrade_infra(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param bool disable_vm_migration: Should VM migration be disabled during upgrade
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def perform_host_node_upgrade_action_upgrade_infra_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Perform a service deployment upgrade on a host node  # noqa: E501

        Perform a service deployment upgrade on a host node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_host_node_upgrade_action_upgrade_infra_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param bool disable_vm_migration: Should VM migration be disabled during upgrade
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'disable_vm_migration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_host_node_upgrade_action_upgrade_infra" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `perform_host_node_upgrade_action_upgrade_infra`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'disable_vm_migration' in params:
            query_params.append(('disable_vm_migration', params['disable_vm_migration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}?action=upgrade_infra', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_node_action(self, node_id, **kwargs):  # noqa: E501
        """Perform an Action on Fabric Node  # noqa: E501

        The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \"Update transport node maintenance mode\".   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_node_action(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str action: Supported fabric node actions
        :param bool evacuate_powered_off_vms: Evacuate powered-off vms
        :param str vsan_mode: Vsan decommission mode
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.perform_node_action_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_node_action_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def perform_node_action_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Perform an Action on Fabric Node  # noqa: E501

        The supported fabric node actions are enter_maintenance_mode, exit_maintenance_mode for EdgeNode. This API is deprecated, please call TransportNode maintenance mode API to update maintenance mode, refer to \"Update transport node maintenance mode\".   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.perform_node_action_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str action: Supported fabric node actions
        :param bool evacuate_powered_off_vms: Evacuate powered-off vms
        :param str vsan_mode: Vsan decommission mode
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'action', 'evacuate_powered_off_vms', 'vsan_mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_node_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `perform_node_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'evacuate_powered_off_vms' in params:
            query_params.append(('evacuate_powered_off_vms', params['evacuate_powered_off_vms']))  # noqa: E501
        if 'vsan_mode' in params:
            query_params.append(('vsan_mode', params['vsan_mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node(self, node_id, **kwargs):  # noqa: E501
        """Return Node Information  # noqa: E501

        Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt; to get fabric node information.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def read_node_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Return Node Information  # noqa: E501

        Returns information about a specific fabric node (host or edge). This api is deprecated, use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt; to get fabric node information.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_status(self, node_id, **kwargs):  # noqa: E501
        """Return Runtime Status Information for a Node  # noqa: E501

        Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&lt;node-id&gt;/status to get status information of a node with constraint FN is converted to TN.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_status(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str source: Data source type.
        :return: NodeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_status_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_status_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def read_node_status_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Return Runtime Status Information for a Node  # noqa: E501

        Returns connectivity, heartbeat, and version information about a fabric node (host or edge). Note that the LCP connectivity status remains down until after the fabric node has been added as a transpot node and the NSX host switch has been successfully installed. See POST /api/v1/transport-nodes. This api is deprecated, use GET /api/v1/transport-nodes/&lt;node-id&gt;/status to get status information of a node with constraint FN is converted to TN.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_status_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str source: Data source type.
        :return: NodeStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_node_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nodes_status(self, node_ids, **kwargs):  # noqa: E501
        """Return Runtime Status Information for given Nodes  # noqa: E501

        Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&lt;node-id&gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nodes_status(node_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_ids: List of requested Nodes. (required)
        :return: NodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nodes_status_with_http_info(node_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.read_nodes_status_with_http_info(node_ids, **kwargs)  # noqa: E501
            return data

    def read_nodes_status_with_http_info(self, node_ids, **kwargs):  # noqa: E501
        """Return Runtime Status Information for given Nodes  # noqa: E501

        Returns connectivity, heartbeat, and version information about all fabric nodes (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node Status API /transport-nodes/&lt;node-id&gt;/status to get status information of a node and to get all transport nodes ids use GET /transport-nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nodes_status_with_http_info(node_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_ids: List of requested Nodes. (required)
        :return: NodeStatusListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nodes_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_ids' is set
        if ('node_ids' not in params or
                params['node_ids'] is None):
            raise ValueError("Missing the required parameter `node_ids` when calling `read_nodes_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'node_ids' in params:
            query_params.append(('node_ids', params['node_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatusListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_inventory_sync_restart_inventory_sync(self, node_id, **kwargs):  # noqa: E501
        """Restart the inventory sync for the node if it is paused currently.  # noqa: E501

        Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;?action=restart_inventory_sync to restart inventory sync of node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_inventory_sync_restart_inventory_sync(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def restart_inventory_sync_restart_inventory_sync_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Restart the inventory sync for the node if it is paused currently.  # noqa: E501

        Restart the inventory sync for the node if it is currently internally paused. After this action the next inventory sync coming from the node is processed. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;?action=restart_inventory_sync to restart inventory sync of node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_inventory_sync_restart_inventory_sync_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_inventory_sync_restart_inventory_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `restart_inventory_sync_restart_inventory_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}?action=restart_inventory_sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node(self, body, node_id, **kwargs):  # noqa: E501
        """Update a Node  # noqa: E501

        Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. API PUT /transport-nodes/<transport-node-id> to update fabric node details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node(body, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Node body: (required)
        :param str node_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_with_http_info(body, node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_with_http_info(body, node_id, **kwargs)  # noqa: E501
            return data

    def update_node_with_http_info(self, body, node_id, **kwargs):  # noqa: E501
        """Update a Node  # noqa: E501

        Modifies attributes of a fabric node (host or edge). This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt; to update fabric node details. API PUT /transport-nodes/<transport-node-id> to update fabric node details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_with_http_info(body, node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Node body: (required)
        :param str node_id: (required)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'node_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node`")  # noqa: E501
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `update_node`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
