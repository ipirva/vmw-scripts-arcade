# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationMonitoringDashboardsWidgetConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_widget_configuration(self, body, view_id, **kwargs):  # noqa: E501
        """Creates a new Widget Configuration.  # noqa: E501

        Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The 'field' is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in 'condition' and 'display value' are         well-formed and free of runtime-errors such as 'null pointers' and         evaluates to 'true'; Then remaining render configurations are not         evaluated, and the current render configuration's 'display value'         is taken as the final value.      2. If expression provided in 'condition' of render configuration is         false, then next render configuration is evaluated.      3. Finally, 'field' is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the 'Label' for   identification) as 'Error_Messages: {}'.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration's display_value.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_widget_configuration(body, view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WidgetConfiguration body: (required)
        :param str view_id: (required)
        :return: WidgetConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_widget_configuration_with_http_info(body, view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_widget_configuration_with_http_info(body, view_id, **kwargs)  # noqa: E501
            return data

    def create_widget_configuration_with_http_info(self, body, view_id, **kwargs):  # noqa: E501
        """Creates a new Widget Configuration.  # noqa: E501

        Creates a new Widget Configuration and adds it to the specified view. Supported resource_types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  Note: Expressions should be given in a single line. If an expression spans   multiple lines, then form the expression in a single line. For label-value pairs, expressions are evaluated as follows:   a. First, render configurations are evaluated in their order of      appearance in the widget config. The 'field' is evaluated at the end.   b. Second, when render configuration is provided then the order of      evaluation is      1. If expressions provided in 'condition' and 'display value' are         well-formed and free of runtime-errors such as 'null pointers' and         evaluates to 'true'; Then remaining render configurations are not         evaluated, and the current render configuration's 'display value'         is taken as the final value.      2. If expression provided in 'condition' of render configuration is         false, then next render configuration is evaluated.      3. Finally, 'field' is evaluated only when every render configuration         evaluates to false and no error occurs during steps 1 and 2 above.  If an error occurs during evaluation of render configuration, then an   error message is shown. The display value corresponding to that label is   not shown and evaluation of the remaining render configurations continues   to collect and show all the error messages (marked with the 'Label' for   identification) as 'Error_Messages: {}'.  If during evaluation of expressions for any label-value pair an error   occurs, then it is marked with error. The errors are shown in the report,   along with the label value pairs that are error-free.  Important: For elements that take expressions, strings should be provided   by escaping them with a back-slash. These elements are - condition, field,   tooltip text and render_configuration's display_value.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_widget_configuration_with_http_info(body, view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WidgetConfiguration body: (required)
        :param str view_id: (required)
        :return: WidgetConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'view_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_widget_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_widget_configuration`")  # noqa: E501
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `create_widget_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['view-id'] = params['view_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ui-views/{view-id}/widgetconfigurations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_widget_configuration(self, view_id, widgetconfiguration_id, **kwargs):  # noqa: E501
        """Delete Widget Configuration  # noqa: E501

        Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_widget_configuration(view_id, widgetconfiguration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str widgetconfiguration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_widget_configuration_with_http_info(view_id, widgetconfiguration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_widget_configuration_with_http_info(view_id, widgetconfiguration_id, **kwargs)  # noqa: E501
            return data

    def delete_widget_configuration_with_http_info(self, view_id, widgetconfiguration_id, **kwargs):  # noqa: E501
        """Delete Widget Configuration  # noqa: E501

        Detaches widget from a given view. If the widget is no longer part of any view, then it will be purged.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_widget_configuration_with_http_info(view_id, widgetconfiguration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str widgetconfiguration_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_id', 'widgetconfiguration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_widget_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `delete_widget_configuration`")  # noqa: E501
        # verify the required parameter 'widgetconfiguration_id' is set
        if ('widgetconfiguration_id' not in params or
                params['widgetconfiguration_id'] is None):
            raise ValueError("Missing the required parameter `widgetconfiguration_id` when calling `delete_widget_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['view-id'] = params['view_id']  # noqa: E501
        if 'widgetconfiguration_id' in params:
            path_params['widgetconfiguration-id'] = params['widgetconfiguration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_widget_configuration(self, view_id, widgetconfiguration_id, **kwargs):  # noqa: E501
        """Returns Widget Configuration Information  # noqa: E501

        Returns Information about a specific Widget Configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_widget_configuration(view_id, widgetconfiguration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str widgetconfiguration_id: (required)
        :return: WidgetConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_widget_configuration_with_http_info(view_id, widgetconfiguration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_widget_configuration_with_http_info(view_id, widgetconfiguration_id, **kwargs)  # noqa: E501
            return data

    def get_widget_configuration_with_http_info(self, view_id, widgetconfiguration_id, **kwargs):  # noqa: E501
        """Returns Widget Configuration Information  # noqa: E501

        Returns Information about a specific Widget Configuration.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_widget_configuration_with_http_info(view_id, widgetconfiguration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str widgetconfiguration_id: (required)
        :return: WidgetConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_id', 'widgetconfiguration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_widget_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `get_widget_configuration`")  # noqa: E501
        # verify the required parameter 'widgetconfiguration_id' is set
        if ('widgetconfiguration_id' not in params or
                params['widgetconfiguration_id'] is None):
            raise ValueError("Missing the required parameter `widgetconfiguration_id` when calling `get_widget_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['view-id'] = params['view_id']  # noqa: E501
        if 'widgetconfiguration_id' in params:
            path_params['widgetconfiguration-id'] = params['widgetconfiguration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_widget_configurations(self, view_id, **kwargs):  # noqa: E501
        """Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.  # noqa: E501

        If no query params are specified then all the Widget Configurations of the specified view are returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_widget_configurations(view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str container: Id of the container
        :param str widget_ids: Ids of the WidgetConfigurations
        :return: WidgetConfigurationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_widget_configurations_with_http_info(view_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_widget_configurations_with_http_info(view_id, **kwargs)  # noqa: E501
            return data

    def list_widget_configurations_with_http_info(self, view_id, **kwargs):  # noqa: E501
        """Returns the Widget Configurations based on query criteria defined in WidgetQueryParameters.  # noqa: E501

        If no query params are specified then all the Widget Configurations of the specified view are returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_widget_configurations_with_http_info(view_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str view_id: (required)
        :param str container: Id of the container
        :param str widget_ids: Ids of the WidgetConfigurations
        :return: WidgetConfigurationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_id', 'container', 'widget_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_widget_configurations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `list_widget_configurations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['view-id'] = params['view_id']  # noqa: E501

        query_params = []
        if 'container' in params:
            query_params.append(('container', params['container']))  # noqa: E501
        if 'widget_ids' in params:
            query_params.append(('widget_ids', params['widget_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ui-views/{view-id}/widgetconfigurations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetConfigurationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_widget_configuration(self, body, view_id, widgetconfiguration_id, **kwargs):  # noqa: E501
        """Update Widget Configuration  # noqa: E501

        Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_widget_configuration(body, view_id, widgetconfiguration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WidgetConfiguration body: (required)
        :param str view_id: (required)
        :param str widgetconfiguration_id: (required)
        :return: WidgetConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_widget_configuration_with_http_info(body, view_id, widgetconfiguration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_widget_configuration_with_http_info(body, view_id, widgetconfiguration_id, **kwargs)  # noqa: E501
            return data

    def update_widget_configuration_with_http_info(self, body, view_id, widgetconfiguration_id, **kwargs):  # noqa: E501
        """Update Widget Configuration  # noqa: E501

        Updates the widget at the given view. If the widget is referenced by other views, then the widget will be updated in all the views that it is part of.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_widget_configuration_with_http_info(body, view_id, widgetconfiguration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WidgetConfiguration body: (required)
        :param str view_id: (required)
        :param str widgetconfiguration_id: (required)
        :return: WidgetConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'view_id', 'widgetconfiguration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_widget_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_widget_configuration`")  # noqa: E501
        # verify the required parameter 'view_id' is set
        if ('view_id' not in params or
                params['view_id'] is None):
            raise ValueError("Missing the required parameter `view_id` when calling `update_widget_configuration`")  # noqa: E501
        # verify the required parameter 'widgetconfiguration_id' is set
        if ('widgetconfiguration_id' not in params or
                params['widgetconfiguration_id'] is None):
            raise ValueError("Missing the required parameter `widgetconfiguration_id` when calling `update_widget_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'view_id' in params:
            path_params['view-id'] = params['view_id']  # noqa: E501
        if 'widgetconfiguration_id' in params:
            path_params['widgetconfiguration-id'] = params['widgetconfiguration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ui-views/{view-id}/widgetconfigurations/{widgetconfiguration-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WidgetConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
