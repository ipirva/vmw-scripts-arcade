# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricPoolManagementIPBlocksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def allocate_or_release_from_ip_block_subnet(self, body, action, subnet_id, **kwargs):  # noqa: E501
        """Allocate or Release an IP Address from a Ip Subnet  # noqa: E501

        Allocates or releases an IP address from the specified IP subnet. To allocate an address, include ?action=ALLOCATE in the request and a \"{}\" in the request body. When the request is successful, the response is \"allocation_id\": \"<ip-address>\", where <ip-address> is an IP address from the specified pool. To release an IP address (return it back to the pool), include ?action=RELEASE in the request and \"allocation_id\":<ip-address> in the request body, where <ip-address> is the address to be released. When the request is successful, the response is NULL.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.allocate_or_release_from_ip_block_subnet(body, action, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllocationIpAddress body: (required)
        :param str action: Specifies allocate or release action (required)
        :param str subnet_id: IP subnet id (required)
        :return: AllocationIpAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.allocate_or_release_from_ip_block_subnet_with_http_info(body, action, subnet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.allocate_or_release_from_ip_block_subnet_with_http_info(body, action, subnet_id, **kwargs)  # noqa: E501
            return data

    def allocate_or_release_from_ip_block_subnet_with_http_info(self, body, action, subnet_id, **kwargs):  # noqa: E501
        """Allocate or Release an IP Address from a Ip Subnet  # noqa: E501

        Allocates or releases an IP address from the specified IP subnet. To allocate an address, include ?action=ALLOCATE in the request and a \"{}\" in the request body. When the request is successful, the response is \"allocation_id\": \"<ip-address>\", where <ip-address> is an IP address from the specified pool. To release an IP address (return it back to the pool), include ?action=RELEASE in the request and \"allocation_id\":<ip-address> in the request body, where <ip-address> is the address to be released. When the request is successful, the response is NULL.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.allocate_or_release_from_ip_block_subnet_with_http_info(body, action, subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AllocationIpAddress body: (required)
        :param str action: Specifies allocate or release action (required)
        :param str subnet_id: IP subnet id (required)
        :return: AllocationIpAddress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'action', 'subnet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method allocate_or_release_from_ip_block_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `allocate_or_release_from_ip_block_subnet`")  # noqa: E501
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `allocate_or_release_from_ip_block_subnet`")  # noqa: E501
        # verify the required parameter 'subnet_id' is set
        if ('subnet_id' not in params or
                params['subnet_id'] is None):
            raise ValueError("Missing the required parameter `subnet_id` when calling `allocate_or_release_from_ip_block_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subnet_id' in params:
            path_params['subnet-id'] = params['subnet_id']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-subnets/{subnet-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllocationIpAddress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ip_block(self, body, **kwargs):  # noqa: E501
        """Create a new IP address block.  # noqa: E501

        Creates a new IPv4 address block using the specified cidr. cidr is a required parameter. display_name & description are optional parameters   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ip_block(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpBlock body: (required)
        :return: IpBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ip_block_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ip_block_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ip_block_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new IP address block.  # noqa: E501

        Creates a new IPv4 address block using the specified cidr. cidr is a required parameter. display_name & description are optional parameters   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ip_block_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpBlock body: (required)
        :return: IpBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ip_block" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ip_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-blocks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ip_block_subnet(self, body, **kwargs):  # noqa: E501
        """Create subnet of specified size within an IP block  # noqa: E501

        Carves out a subnet of requested size from the specified IP block. The \"size\" parameter  and the \"block_id \" are the requireds field while invoking this API. If the IP block has sufficient resources/space to allocate a subnet of specified size, the response will contain all the details of the newly created subnet including the display_name, description, cidr & allocation_ranges. Returns a conflict error if the IP block does not have enough resources/space to allocate a subnet of the requested size.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ip_block_subnet(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpBlockSubnet body: (required)
        :return: IpBlockSubnet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ip_block_subnet_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ip_block_subnet_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ip_block_subnet_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create subnet of specified size within an IP block  # noqa: E501

        Carves out a subnet of requested size from the specified IP block. The \"size\" parameter  and the \"block_id \" are the requireds field while invoking this API. If the IP block has sufficient resources/space to allocate a subnet of specified size, the response will contain all the details of the newly created subnet including the display_name, description, cidr & allocation_ranges. Returns a conflict error if the IP block does not have enough resources/space to allocate a subnet of the requested size.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ip_block_subnet_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpBlockSubnet body: (required)
        :return: IpBlockSubnet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ip_block_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ip_block_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-subnets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlockSubnet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ip_block(self, block_id, **kwargs):  # noqa: E501
        """Delete an IP Address Block  # noqa: E501

        Deletes the IP address block with specified id if it exists. IP block cannot be deleted if there are allocated subnets from the block.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ip_block(block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id: IP address block id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ip_block_with_http_info(block_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ip_block_with_http_info(block_id, **kwargs)  # noqa: E501
            return data

    def delete_ip_block_with_http_info(self, block_id, **kwargs):  # noqa: E501
        """Delete an IP Address Block  # noqa: E501

        Deletes the IP address block with specified id if it exists. IP block cannot be deleted if there are allocated subnets from the block.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ip_block_with_http_info(block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id: IP address block id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ip_block" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'block_id' is set
        if ('block_id' not in params or
                params['block_id'] is None):
            raise ValueError("Missing the required parameter `block_id` when calling `delete_ip_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_id' in params:
            path_params['block-id'] = params['block_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-blocks/{block-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ip_block_subnet(self, subnet_id, **kwargs):  # noqa: E501
        """Delete subnet within an IP block  # noqa: E501

        Deletes a subnet with specified id within a given IP address block. Deletion is allowed only when there are no allocated IP addresses from that subnet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ip_block_subnet(subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: Subnet id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ip_block_subnet_with_http_info(subnet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ip_block_subnet_with_http_info(subnet_id, **kwargs)  # noqa: E501
            return data

    def delete_ip_block_subnet_with_http_info(self, subnet_id, **kwargs):  # noqa: E501
        """Delete subnet within an IP block  # noqa: E501

        Deletes a subnet with specified id within a given IP address block. Deletion is allowed only when there are no allocated IP addresses from that subnet.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ip_block_subnet_with_http_info(subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: Subnet id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subnet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ip_block_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subnet_id' is set
        if ('subnet_id' not in params or
                params['subnet_id'] is None):
            raise ValueError("Missing the required parameter `subnet_id` when calling `delete_ip_block_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subnet_id' in params:
            path_params['subnet-id'] = params['subnet_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-subnets/{subnet-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ip_block_subnets(self, **kwargs):  # noqa: E501
        """List subnets within an IP block  # noqa: E501

        Returns information about all subnets present within an IP address block. Information includes subnet's id, display_name, description, cidr and allocation ranges.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ip_block_subnets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id:
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpBlockSubnetListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ip_block_subnets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ip_block_subnets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ip_block_subnets_with_http_info(self, **kwargs):  # noqa: E501
        """List subnets within an IP block  # noqa: E501

        Returns information about all subnets present within an IP address block. Information includes subnet's id, display_name, description, cidr and allocation ranges.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ip_block_subnets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id:
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpBlockSubnetListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_id', 'cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ip_block_subnets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'block_id' in params:
            query_params.append(('block_id', params['block_id']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-subnets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlockSubnetListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ip_blocks(self, **kwargs):  # noqa: E501
        """Returns list of configured IP address blocks.  # noqa: E501

        Returns information about configured IP address blocks. Information includes the id, display name, description & CIDR of IP address blocks   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ip_blocks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpBlockListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ip_blocks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ip_blocks_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ip_blocks_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of configured IP address blocks.  # noqa: E501

        Returns information about configured IP address blocks. Information includes the id, display name, description & CIDR of IP address blocks   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ip_blocks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpBlockListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ip_blocks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-blocks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlockListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ip_block(self, block_id, **kwargs):  # noqa: E501
        """Get IP address block information.  # noqa: E501

        Returns information about the IP address block with specified id. Information includes id, display_name, description & cidr.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ip_block(block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id: IP address block id (required)
        :return: IpBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ip_block_with_http_info(block_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_ip_block_with_http_info(block_id, **kwargs)  # noqa: E501
            return data

    def read_ip_block_with_http_info(self, block_id, **kwargs):  # noqa: E501
        """Get IP address block information.  # noqa: E501

        Returns information about the IP address block with specified id. Information includes id, display_name, description & cidr.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ip_block_with_http_info(block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str block_id: IP address block id (required)
        :return: IpBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['block_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ip_block" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'block_id' is set
        if ('block_id' not in params or
                params['block_id'] is None):
            raise ValueError("Missing the required parameter `block_id` when calling `read_ip_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_id' in params:
            path_params['block-id'] = params['block_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-blocks/{block-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ip_block_subnet(self, subnet_id, **kwargs):  # noqa: E501
        """Get the subnet within an IP block  # noqa: E501

        Returns information about the subnet with specified id within a given IP address block. Information includes display_name, description, cidr and allocation_ranges.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ip_block_subnet(subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: Subnet id (required)
        :return: IpBlockSubnet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ip_block_subnet_with_http_info(subnet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_ip_block_subnet_with_http_info(subnet_id, **kwargs)  # noqa: E501
            return data

    def read_ip_block_subnet_with_http_info(self, subnet_id, **kwargs):  # noqa: E501
        """Get the subnet within an IP block  # noqa: E501

        Returns information about the subnet with specified id within a given IP address block. Information includes display_name, description, cidr and allocation_ranges.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ip_block_subnet_with_http_info(subnet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subnet_id: Subnet id (required)
        :return: IpBlockSubnet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subnet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ip_block_subnet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subnet_id' is set
        if ('subnet_id' not in params or
                params['subnet_id'] is None):
            raise ValueError("Missing the required parameter `subnet_id` when calling `read_ip_block_subnet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subnet_id' in params:
            path_params['subnet-id'] = params['subnet_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-subnets/{subnet-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlockSubnet',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ip_block(self, body, block_id, **kwargs):  # noqa: E501
        """Update an IP Address Block  # noqa: E501

        Modifies the IP address block with specifed id. display_name, description and cidr are parameters that can be modified. If a new cidr is specified, it should contain all existing subnets in the IP block. Returns a conflict error if the IP address block cidr can not be modified due to the presence of subnets that it contains. Eg: If the IP block contains a subnet 192.168.0.1/24 and we try to change the IP block cidr to 10.1.0.1/16, it results in a conflict.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ip_block(body, block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpBlock body: (required)
        :param str block_id: IP address block id (required)
        :return: IpBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ip_block_with_http_info(body, block_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ip_block_with_http_info(body, block_id, **kwargs)  # noqa: E501
            return data

    def update_ip_block_with_http_info(self, body, block_id, **kwargs):  # noqa: E501
        """Update an IP Address Block  # noqa: E501

        Modifies the IP address block with specifed id. display_name, description and cidr are parameters that can be modified. If a new cidr is specified, it should contain all existing subnets in the IP block. Returns a conflict error if the IP address block cidr can not be modified due to the presence of subnets that it contains. Eg: If the IP block contains a subnet 192.168.0.1/24 and we try to change the IP block cidr to 10.1.0.1/16, it results in a conflict.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ip_block_with_http_info(body, block_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpBlock body: (required)
        :param str block_id: IP address block id (required)
        :return: IpBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'block_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ip_block" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ip_block`")  # noqa: E501
        # verify the required parameter 'block_id' is set
        if ('block_id' not in params or
                params['block_id'] is None):
            raise ValueError("Missing the required parameter `block_id` when calling `update_ip_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'block_id' in params:
            path_params['block-id'] = params['block_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pools/ip-blocks/{block-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpBlock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
