# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricComputeManagersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_compute_manager(self, body, **kwargs):  # noqa: E501
        """Register compute manager with NSX  # noqa: E501

        Registers compute manager with NSX. Inventory service will collect data from the registered compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_compute_manager(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeManager body: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_compute_manager_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_compute_manager_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_compute_manager_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register compute manager with NSX  # noqa: E501

        Registers compute manager with NSX. Inventory service will collect data from the registered compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_compute_manager_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeManager body: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManager',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_compute_manager(self, compute_manager_id, **kwargs):  # noqa: E501
        """Unregister a compute manager  # noqa: E501

        Unregisters a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_manager(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def delete_compute_manager_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Unregister a compute manager  # noqa: E501

        Unregisters a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_compute_manager_with_http_info(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `delete_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compute_manager_state(self, compute_manager_id, **kwargs):  # noqa: E501
        """Get the realized state of a compute manager  # noqa: E501

        Get the realized state of a compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_manager_state(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_compute_manager_state_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compute_manager_state_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def get_compute_manager_state_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Get the realized state of a compute manager  # noqa: E501

        Get the realized state of a compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compute_manager_state_with_http_info(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: ConfigurationState
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compute_manager_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `get_compute_manager_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigurationState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_inventory_config(self, **kwargs):  # noqa: E501
        """Return inventory configuration  # noqa: E501

        Supports retrieving following configuration of inventory module 1. Soft limit on number of compute managers that can be registered.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inventory_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InventoryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_inventory_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_inventory_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_inventory_config_with_http_info(self, **kwargs):  # noqa: E501
        """Return inventory configuration  # noqa: E501

        Supports retrieving following configuration of inventory module 1. Soft limit on number of compute managers that can be registered.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_inventory_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InventoryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inventory_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/configs/inventory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InventoryConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_compute_managers(self, **kwargs):  # noqa: E501
        """Return the List of Compute managers  # noqa: E501

        Returns information about all compute managers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_managers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str origin_type: Compute manager type like vCenter
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str server: IP address or hostname of compute manager
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeManagerListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_compute_managers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_compute_managers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_compute_managers_with_http_info(self, **kwargs):  # noqa: E501
        """Return the List of Compute managers  # noqa: E501

        Returns information about all compute managers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_compute_managers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str origin_type: Compute manager type like vCenter
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str server: IP address or hostname of compute manager
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: ComputeManagerListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'origin_type', 'page_size', 'server', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_compute_managers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'origin_type' in params:
            query_params.append(('origin_type', params['origin_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManagerListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_compute_manager(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return compute manager Information  # noqa: E501

        Returns information about a specific compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_compute_manager(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_compute_manager_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def read_compute_manager_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return compute manager Information  # noqa: E501

        Returns information about a specific compute manager  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_compute_manager_with_http_info(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `read_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManager',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_compute_manager_status(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return runtime status information for a compute manager  # noqa: E501

        Returns connection and version information about a compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_compute_manager_status(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: ComputeManagerStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_compute_manager_status_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_compute_manager_status_with_http_info(compute_manager_id, **kwargs)  # noqa: E501
            return data

    def read_compute_manager_status_with_http_info(self, compute_manager_id, **kwargs):  # noqa: E501
        """Return runtime status information for a compute manager  # noqa: E501

        Returns connection and version information about a compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_compute_manager_status_with_http_info(compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str compute_manager_id: (required)
        :return: ComputeManagerStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['compute_manager_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_compute_manager_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `read_compute_manager_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManagerStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_compute_manager(self, body, compute_manager_id, **kwargs):  # noqa: E501
        """Update compute manager  # noqa: E501

        Updates a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_compute_manager(body, compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeManager body: (required)
        :param str compute_manager_id: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_compute_manager_with_http_info(body, compute_manager_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_compute_manager_with_http_info(body, compute_manager_id, **kwargs)  # noqa: E501
            return data

    def update_compute_manager_with_http_info(self, body, compute_manager_id, **kwargs):  # noqa: E501
        """Update compute manager  # noqa: E501

        Updates a specified compute manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_compute_manager_with_http_info(body, compute_manager_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComputeManager body: (required)
        :param str compute_manager_id: (required)
        :return: ComputeManager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'compute_manager_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_compute_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_compute_manager`")  # noqa: E501
        # verify the required parameter 'compute_manager_id' is set
        if ('compute_manager_id' not in params or
                params['compute_manager_id'] is None):
            raise ValueError("Missing the required parameter `compute_manager_id` when calling `update_compute_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'compute_manager_id' in params:
            path_params['compute-manager-id'] = params['compute_manager_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/compute-managers/{compute-manager-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputeManager',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
