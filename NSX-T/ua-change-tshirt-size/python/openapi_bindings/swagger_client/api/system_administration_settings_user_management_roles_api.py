# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationSettingsUserManagementRolesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clone_role_clone(self, body, role, **kwargs):  # noqa: E501
        """Clone an already present role  # noqa: E501

        The role with id <role> is cloned and the new id, name and description are the ones provided in the request body.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_role_clone(body, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewRole body: (required)
        :param str role: Role id (required)
        :return: NewRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clone_role_clone_with_http_info(body, role, **kwargs)  # noqa: E501
        else:
            (data) = self.clone_role_clone_with_http_info(body, role, **kwargs)  # noqa: E501
            return data

    def clone_role_clone_with_http_info(self, body, role, **kwargs):  # noqa: E501
        """Clone an already present role  # noqa: E501

        The role with id <role> is cloned and the new id, name and description are the ones provided in the request body.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_role_clone_with_http_info(body, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewRole body: (required)
        :param str role: Role id (required)
        :return: NewRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_role_clone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clone_role_clone`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `clone_role_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles/{role}?action=clone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_role(self, body, role, **kwargs):  # noqa: E501
        """Update custom role  # noqa: E501

        Creates a new role with id as <role> if there does not exist any role with id <role>, else updates the existing role.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_role(body, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoleWithFeatures body: (required)
        :param str role: Custom role id (required)
        :return: RoleWithFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_role_with_http_info(body, role, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_role_with_http_info(body, role, **kwargs)  # noqa: E501
            return data

    def create_or_update_role_with_http_info(self, body, role, **kwargs):  # noqa: E501
        """Update custom role  # noqa: E501

        Creates a new role with id as <role> if there does not exist any role with id <role>, else updates the existing role.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_role_with_http_info(body, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoleWithFeatures body: (required)
        :param str role: Custom role id (required)
        :return: RoleWithFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_update_role`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `create_or_update_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles/{role}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleWithFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_role_binding(self, body, **kwargs):  # noqa: E501
        """Assign roles to User or Group  # noqa: E501

        When assigning a user role, specify the user name with the same case as it appears in vIDM to access the NSX-T user interface. For example, if vIDM has the user name User1@example.com then the name attribute in the API call must be be User1@example.com and cannot be user1@example.com.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_role_binding(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoleBinding body: (required)
        :return: RoleBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_role_binding_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_role_binding_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_role_binding_with_http_info(self, body, **kwargs):  # noqa: E501
        """Assign roles to User or Group  # noqa: E501

        When assigning a user role, specify the user name with the same case as it appears in vIDM to access the NSX-T user interface. For example, if vIDM has the user name User1@example.com then the name attribute in the API call must be be User1@example.com and cannot be user1@example.com.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_role_binding_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoleBinding body: (required)
        :return: RoleBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_role_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_role_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/role-bindings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_all_stale_role_bindings_delete_stale_bindings(self, **kwargs):  # noqa: E501
        """Delete all stale role assignments  # noqa: E501

        Delete all stale role assignments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_stale_role_bindings_delete_stale_bindings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_all_stale_role_bindings_delete_stale_bindings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_all_stale_role_bindings_delete_stale_bindings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_all_stale_role_bindings_delete_stale_bindings_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all stale role assignments  # noqa: E501

        Delete all stale role assignments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all_stale_role_bindings_delete_stale_bindings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all_stale_role_bindings_delete_stale_bindings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/role-bindings?action=delete_stale_bindings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_role(self, role, **kwargs):  # noqa: E501
        """Delete custom role  # noqa: E501

        If a role is assigned to a role binding then the deletion of the role is not allowed. Precanned roles cannot be deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: Custom role id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_role_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_role_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def delete_role_with_http_info(self, role, **kwargs):  # noqa: E501
        """Delete custom role  # noqa: E501

        If a role is assigned to a role binding then the deletion of the role is not allowed. Precanned roles cannot be deleted.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: Custom role id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `delete_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles/{role}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_role_binding(self, binding_id, **kwargs):  # noqa: E501
        """Delete user/group's roles assignment  # noqa: E501

        Delete user/group's roles assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_binding(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: User/Group's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_role_binding_with_http_info(binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_role_binding_with_http_info(binding_id, **kwargs)  # noqa: E501
            return data

    def delete_role_binding_with_http_info(self, binding_id, **kwargs):  # noqa: E501
        """Delete user/group's roles assignment  # noqa: E501

        Delete user/group's roles assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_binding_with_http_info(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: User/Group's id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_role_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'binding_id' is set
        if ('binding_id' not in params or
                params['binding_id'] is None):
            raise ValueError("Missing the required parameter `binding_id` when calling `delete_role_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'binding_id' in params:
            path_params['binding-id'] = params['binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/role-bindings/{binding-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_role_bindings(self, **kwargs):  # noqa: E501
        """Get all users and groups with their roles  # noqa: E501

        Get all users and groups with their roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_role_bindings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str identity_source_id: Identity source ID
        :param str identity_source_type: Identity source type
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str name: User/Group name
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str role: Role ID
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str type: Type
        :return: RoleBindingListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_role_bindings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_role_bindings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_role_bindings_with_http_info(self, **kwargs):  # noqa: E501
        """Get all users and groups with their roles  # noqa: E501

        Get all users and groups with their roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_role_bindings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str identity_source_id: Identity source ID
        :param str identity_source_type: Identity source type
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str name: User/Group name
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str role: Role ID
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str type: Type
        :return: RoleBindingListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'identity_source_id', 'identity_source_type', 'included_fields', 'name', 'page_size', 'role', 'sort_ascending', 'sort_by', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_role_bindings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'identity_source_id' in params:
            query_params.append(('identity_source_id', params['identity_source_id']))  # noqa: E501
        if 'identity_source_type' in params:
            query_params.append(('identity_source_type', params['identity_source_type']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/role-bindings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleBindingListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_roles_info(self, **kwargs):  # noqa: E501
        """Get information about all roles  # noqa: E501

        Get information about all roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_roles_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RoleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_roles_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_roles_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_roles_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get information about all roles  # noqa: E501

        Get information about all roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_roles_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RoleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_roles_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_binding(self, binding_id, **kwargs):  # noqa: E501
        """Get user/group's role information  # noqa: E501

        Get user/group's role information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_binding(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: User/Group's id (required)
        :return: RoleBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_binding_with_http_info(binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_binding_with_http_info(binding_id, **kwargs)  # noqa: E501
            return data

    def get_role_binding_with_http_info(self, binding_id, **kwargs):  # noqa: E501
        """Get user/group's role information  # noqa: E501

        Get user/group's role information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_binding_with_http_info(binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str binding_id: User/Group's id (required)
        :return: RoleBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'binding_id' is set
        if ('binding_id' not in params or
                params['binding_id'] is None):
            raise ValueError("Missing the required parameter `binding_id` when calling `get_role_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'binding_id' in params:
            path_params['binding-id'] = params['binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/role-bindings/{binding-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_info(self, role, **kwargs):  # noqa: E501
        """Get role information  # noqa: E501

        Get role information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: Role id (required)
        :return: RoleWithFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_info_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_info_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def get_role_info_with_http_info(self, role, **kwargs):  # noqa: E501
        """Get role information  # noqa: E501

        Get role information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_info_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: Role id (required)
        :return: RoleWithFeatures
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `get_role_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles/{role}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleWithFeatures',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_features(self, **kwargs):  # noqa: E501
        """List feature permissions  # noqa: E501

        List features   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_features(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FeaturePermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_features_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_features_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_features_with_http_info(self, **kwargs):  # noqa: E501
        """List feature permissions  # noqa: E501

        List features   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_features_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FeaturePermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_features" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/features-with-properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturePermissionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_roles_info(self, **kwargs):  # noqa: E501
        """Get information about all roles with features and their permissions  # noqa: E501

        Get information about all roles with features and their permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: RoleWithFeaturesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_roles_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_roles_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_roles_info_with_http_info(self, **kwargs):  # noqa: E501
        """Get information about all roles with features and their permissions  # noqa: E501

        Get information about all roles with features and their permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: RoleWithFeaturesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_roles_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles-with-feature-permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleWithFeaturesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_role_binding(self, body, binding_id, **kwargs):  # noqa: E501
        """Update User or Group's roles  # noqa: E501

        Update User or Group's roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role_binding(body, binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoleBinding body: (required)
        :param str binding_id: User/Group's id (required)
        :return: RoleBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_role_binding_with_http_info(body, binding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_role_binding_with_http_info(body, binding_id, **kwargs)  # noqa: E501
            return data

    def update_role_binding_with_http_info(self, body, binding_id, **kwargs):  # noqa: E501
        """Update User or Group's roles  # noqa: E501

        Update User or Group's roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role_binding_with_http_info(body, binding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RoleBinding body: (required)
        :param str binding_id: User/Group's id (required)
        :return: RoleBinding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'binding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_role_binding" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_role_binding`")  # noqa: E501
        # verify the required parameter 'binding_id' is set
        if ('binding_id' not in params or
                params['binding_id'] is None):
            raise ValueError("Missing the required parameter `binding_id` when calling `update_role_binding`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'binding_id' in params:
            path_params['binding-id'] = params['binding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/role-bindings/{binding-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleBinding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_and_recommend_permissions_validate(self, body, **kwargs):  # noqa: E501
        """Validate a new feature permission set  # noqa: E501

        Validate the permissions of an incoming role. Also, recommend the permissions which need to be corrected.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_and_recommend_permissions_validate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeaturePermissionArray body: (required)
        :return: RecommendedFeaturePermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_and_recommend_permissions_validate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_and_recommend_permissions_validate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def validate_and_recommend_permissions_validate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Validate a new feature permission set  # noqa: E501

        Validate the permissions of an incoming role. Also, recommend the permissions which need to be corrected.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_and_recommend_permissions_validate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FeaturePermissionArray body: (required)
        :return: RecommendedFeaturePermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_and_recommend_permissions_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `validate_and_recommend_permissions_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/aaa/roles?action=validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecommendedFeaturePermissionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
