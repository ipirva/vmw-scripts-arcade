# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPITroubleshootingAndMonitoringIPFIXApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_ipfix_collector_config(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX collector configuration  # noqa: E501

        Create a new IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_collector_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorConfig body: (required)
        :return: IpfixCollectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ipfix_collector_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ipfix_collector_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ipfix_collector_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX collector configuration  # noqa: E501

        Create a new IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_collector_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorConfig body: (required)
        :return: IpfixCollectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ipfix_collector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ipfix_collector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/collectorconfigs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ipfix_collector_upm_profile(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX collector profile  # noqa: E501

        Create a new IPFIX collector profile with essential properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_collector_upm_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorUpmProfile body: (required)
        :return: IpfixCollectorUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ipfix_collector_upm_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ipfix_collector_upm_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ipfix_collector_upm_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX collector profile  # noqa: E501

        Create a new IPFIX collector profile with essential properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_collector_upm_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorUpmProfile body: (required)
        :return: IpfixCollectorUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ipfix_collector_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ipfix_collector_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-collector-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorUpmProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ipfix_config(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX configuration  # noqa: E501

        Create a new IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixConfig body: (required)
        :return: IpfixConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ipfix_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ipfix_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ipfix_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX configuration  # noqa: E501

        Create a new IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixConfig body: (required)
        :return: IpfixConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ipfix_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/configs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ipfix_upm_profile(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX profile  # noqa: E501

        Create a new IPFIX profile with essential properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_upm_profile(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixUpmProfile body: (required)
        :return: IpfixUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ipfix_upm_profile_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ipfix_upm_profile_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ipfix_upm_profile_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new IPFIX profile  # noqa: E501

        Create a new IPFIX profile with essential properties.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ipfix_upm_profile_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixUpmProfile body: (required)
        :return: IpfixUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ipfix_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ipfix_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixUpmProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ipfix_collector_config(self, collector_config_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX collector configuration  # noqa: E501

        Delete an existing IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_collector_config(collector_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collector_config_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ipfix_collector_config_with_http_info(collector_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ipfix_collector_config_with_http_info(collector_config_id, **kwargs)  # noqa: E501
            return data

    def delete_ipfix_collector_config_with_http_info(self, collector_config_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX collector configuration  # noqa: E501

        Delete an existing IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_collector_config_with_http_info(collector_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collector_config_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collector_config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ipfix_collector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collector_config_id' is set
        if ('collector_config_id' not in params or
                params['collector_config_id'] is None):
            raise ValueError("Missing the required parameter `collector_config_id` when calling `delete_ipfix_collector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collector_config_id' in params:
            path_params['collector-config-id'] = params['collector_config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/collectorconfigs/{collector-config-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ipfix_collector_upm_profile(self, ipfix_collector_profile_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX collector profile  # noqa: E501

        Delete an existing IPFIX collector profile by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_collector_upm_profile(ipfix_collector_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_collector_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ipfix_collector_upm_profile_with_http_info(ipfix_collector_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ipfix_collector_upm_profile_with_http_info(ipfix_collector_profile_id, **kwargs)  # noqa: E501
            return data

    def delete_ipfix_collector_upm_profile_with_http_info(self, ipfix_collector_profile_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX collector profile  # noqa: E501

        Delete an existing IPFIX collector profile by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_collector_upm_profile_with_http_info(ipfix_collector_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_collector_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ipfix_collector_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ipfix_collector_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ipfix_collector_profile_id' is set
        if ('ipfix_collector_profile_id' not in params or
                params['ipfix_collector_profile_id'] is None):
            raise ValueError("Missing the required parameter `ipfix_collector_profile_id` when calling `delete_ipfix_collector_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ipfix_collector_profile_id' in params:
            path_params['ipfix-collector-profile-id'] = params['ipfix_collector_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-collector-profiles/{ipfix-collector-profile-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ipfix_config(self, config_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX configuration  # noqa: E501

        Delete an existing IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_config(config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ipfix_config_with_http_info(config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ipfix_config_with_http_info(config_id, **kwargs)  # noqa: E501
            return data

    def delete_ipfix_config_with_http_info(self, config_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX configuration  # noqa: E501

        Delete an existing IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_config_with_http_info(config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `delete_ipfix_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_id' in params:
            path_params['config-id'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/configs/{config-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ipfix_upm_profile(self, ipfix_profile_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX profile  # noqa: E501

        Delete an existing IPFIX profile by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_upm_profile(ipfix_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ipfix_upm_profile_with_http_info(ipfix_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ipfix_upm_profile_with_http_info(ipfix_profile_id, **kwargs)  # noqa: E501
            return data

    def delete_ipfix_upm_profile_with_http_info(self, ipfix_profile_id, **kwargs):  # noqa: E501
        """Delete an existing IPFIX profile  # noqa: E501

        Delete an existing IPFIX profile by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ipfix_upm_profile_with_http_info(ipfix_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_profile_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ipfix_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ipfix_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ipfix_profile_id' is set
        if ('ipfix_profile_id' not in params or
                params['ipfix_profile_id'] is None):
            raise ValueError("Missing the required parameter `ipfix_profile_id` when calling `delete_ipfix_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ipfix_profile_id' in params:
            path_params['ipfix-profile-id'] = params['ipfix_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-profiles/{ipfix-profile-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ipfix_collector_config(self, collector_config_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX collector configuration  # noqa: E501

        Get an existing IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_collector_config(collector_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collector_config_id: (required)
        :return: IpfixCollectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ipfix_collector_config_with_http_info(collector_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ipfix_collector_config_with_http_info(collector_config_id, **kwargs)  # noqa: E501
            return data

    def get_ipfix_collector_config_with_http_info(self, collector_config_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX collector configuration  # noqa: E501

        Get an existing IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_collector_config_with_http_info(collector_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str collector_config_id: (required)
        :return: IpfixCollectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collector_config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ipfix_collector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collector_config_id' is set
        if ('collector_config_id' not in params or
                params['collector_config_id'] is None):
            raise ValueError("Missing the required parameter `collector_config_id` when calling `get_ipfix_collector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collector_config_id' in params:
            path_params['collector-config-id'] = params['collector_config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/collectorconfigs/{collector-config-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ipfix_collector_upm_profile(self, ipfix_collector_profile_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX collector profile  # noqa: E501

        Get an existing IPFIX collector profile by profile ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_collector_upm_profile(ipfix_collector_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_collector_profile_id: (required)
        :return: IpfixCollectorUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ipfix_collector_upm_profile_with_http_info(ipfix_collector_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ipfix_collector_upm_profile_with_http_info(ipfix_collector_profile_id, **kwargs)  # noqa: E501
            return data

    def get_ipfix_collector_upm_profile_with_http_info(self, ipfix_collector_profile_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX collector profile  # noqa: E501

        Get an existing IPFIX collector profile by profile ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_collector_upm_profile_with_http_info(ipfix_collector_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_collector_profile_id: (required)
        :return: IpfixCollectorUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ipfix_collector_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ipfix_collector_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ipfix_collector_profile_id' is set
        if ('ipfix_collector_profile_id' not in params or
                params['ipfix_collector_profile_id'] is None):
            raise ValueError("Missing the required parameter `ipfix_collector_profile_id` when calling `get_ipfix_collector_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ipfix_collector_profile_id' in params:
            path_params['ipfix-collector-profile-id'] = params['ipfix_collector_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-collector-profiles/{ipfix-collector-profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorUpmProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ipfix_config(self, config_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX configuration  # noqa: E501

        Get an existing IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_config(config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: (required)
        :return: IpfixConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ipfix_config_with_http_info(config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ipfix_config_with_http_info(config_id, **kwargs)  # noqa: E501
            return data

    def get_ipfix_config_with_http_info(self, config_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX configuration  # noqa: E501

        Get an existing IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_config_with_http_info(config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: (required)
        :return: IpfixConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `get_ipfix_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_id' in params:
            path_params['config-id'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/configs/{config-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ipfix_obs_points(self, **kwargs):  # noqa: E501
        """Get the list of IPFIX observation points  # noqa: E501

        Deprecated - Please use /ipfix-profiles for switch IPFIX profile and /ipfix-collector-profiles for IPFIX collector profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_obs_points(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: IpfixObsPointsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ipfix_obs_points_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ipfix_obs_points_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ipfix_obs_points_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of IPFIX observation points  # noqa: E501

        Deprecated - Please use /ipfix-profiles for switch IPFIX profile and /ipfix-collector-profiles for IPFIX collector profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_obs_points_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: IpfixObsPointsListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ipfix_obs_points" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-obs-points', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixObsPointsListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ipfix_upm_profile(self, ipfix_profile_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX profile  # noqa: E501

        Get an existing IPFIX profile by profile ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_upm_profile(ipfix_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_profile_id: (required)
        :return: IpfixUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ipfix_upm_profile_with_http_info(ipfix_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ipfix_upm_profile_with_http_info(ipfix_profile_id, **kwargs)  # noqa: E501
            return data

    def get_ipfix_upm_profile_with_http_info(self, ipfix_profile_id, **kwargs):  # noqa: E501
        """Get an existing IPFIX profile  # noqa: E501

        Get an existing IPFIX profile by profile ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ipfix_upm_profile_with_http_info(ipfix_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ipfix_profile_id: (required)
        :return: IpfixUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ipfix_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ipfix_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ipfix_profile_id' is set
        if ('ipfix_profile_id' not in params or
                params['ipfix_profile_id'] is None):
            raise ValueError("Missing the required parameter `ipfix_profile_id` when calling `get_ipfix_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ipfix_profile_id' in params:
            path_params['ipfix-profile-id'] = params['ipfix_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-profiles/{ipfix-profile-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixUpmProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_switch_ipfix_config(self, **kwargs):  # noqa: E501
        """Read global switch IPFIX export configuration  # noqa: E501

        Deprecated - Please use /ipfix-profiles/<ipfix-profile-id> for switch IPFIX profile and /ipfix-collector-profiles/<ipfix-collector-profile-id> for IPFIX collector profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_switch_ipfix_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: IpfixObsPointConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_switch_ipfix_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_switch_ipfix_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_switch_ipfix_config_with_http_info(self, **kwargs):  # noqa: E501
        """Read global switch IPFIX export configuration  # noqa: E501

        Deprecated - Please use /ipfix-profiles/<ipfix-profile-id> for switch IPFIX profile and /ipfix-collector-profiles/<ipfix-collector-profile-id> for IPFIX collector profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_switch_ipfix_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: IpfixObsPointConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_switch_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-obs-points/switch-global', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixObsPointConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ipfix_collector_config(self, **kwargs):  # noqa: E501
        """List IPFIX collector configurations  # noqa: E501

        List IPFIX collector configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_collector_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixCollectorConfigListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ipfix_collector_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ipfix_collector_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ipfix_collector_config_with_http_info(self, **kwargs):  # noqa: E501
        """List IPFIX collector configurations  # noqa: E501

        List IPFIX collector configurations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_collector_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixCollectorConfigListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ipfix_collector_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/collectorconfigs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorConfigListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ipfix_collector_upm_profiles(self, **kwargs):  # noqa: E501
        """List IPFIX Collector Profies  # noqa: E501

        Query IPFIX collector profiles with list parameters. List result can be filtered by profile type defined by IpfixCollectorUpmProfileType.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_collector_upm_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str profile_types: IPFIX Collector Profile Type List
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixCollectorUpmProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ipfix_collector_upm_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ipfix_collector_upm_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ipfix_collector_upm_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List IPFIX Collector Profies  # noqa: E501

        Query IPFIX collector profiles with list parameters. List result can be filtered by profile type defined by IpfixCollectorUpmProfileType.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_collector_upm_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str profile_types: IPFIX Collector Profile Type List
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixCollectorUpmProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'page_size', 'profile_types', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ipfix_collector_upm_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'profile_types' in params:
            query_params.append(('profile_types', params['profile_types']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-collector-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorUpmProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ipfix_config(self, **kwargs):  # noqa: E501
        """List IPFIX configuration  # noqa: E501

        List IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applied_to: Applied To
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str ipfix_config_type: Supported IPFIX Config Types.
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixConfigListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ipfix_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ipfix_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ipfix_config_with_http_info(self, **kwargs):  # noqa: E501
        """List IPFIX configuration  # noqa: E501

        List IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applied_to: Applied To
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str ipfix_config_type: Supported IPFIX Config Types.
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixConfigListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applied_to', 'cursor', 'included_fields', 'ipfix_config_type', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'applied_to' in params:
            query_params.append(('applied_to', params['applied_to']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'ipfix_config_type' in params:
            query_params.append(('ipfix_config_type', params['ipfix_config_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixConfigListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_ipfix_upm_profiles(self, **kwargs):  # noqa: E501
        """List IPFIX Profies  # noqa: E501

        Query IPFIX profiles with list parameters. List result can be filtered by profile type defined by IpfixUpmProfileType.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_upm_profiles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applied_to_entity_id: ID of Entity Applied with Profile
        :param str applied_to_entity_type: Supported Entity Types
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str profile_types: IPFIX Profile Type List
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixUpmProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_ipfix_upm_profiles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_ipfix_upm_profiles_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_ipfix_upm_profiles_with_http_info(self, **kwargs):  # noqa: E501
        """List IPFIX Profies  # noqa: E501

        Query IPFIX profiles with list parameters. List result can be filtered by profile type defined by IpfixUpmProfileType.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_ipfix_upm_profiles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applied_to_entity_id: ID of Entity Applied with Profile
        :param str applied_to_entity_type: Supported Entity Types
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str profile_types: IPFIX Profile Type List
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: IpfixUpmProfileListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applied_to_entity_id', 'applied_to_entity_type', 'cursor', 'included_fields', 'page_size', 'profile_types', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_ipfix_upm_profiles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'applied_to_entity_id' in params:
            query_params.append(('applied_to_entity_id', params['applied_to_entity_id']))  # noqa: E501
        if 'applied_to_entity_type' in params:
            query_params.append(('applied_to_entity_type', params['applied_to_entity_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'profile_types' in params:
            query_params.append(('profile_types', params['profile_types']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-profiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixUpmProfileListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ipfix_collector_config(self, body, collector_config_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX collector configuration  # noqa: E501

        Update an existing IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_collector_config(body, collector_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorConfig body: (required)
        :param str collector_config_id: (required)
        :return: IpfixCollectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ipfix_collector_config_with_http_info(body, collector_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ipfix_collector_config_with_http_info(body, collector_config_id, **kwargs)  # noqa: E501
            return data

    def update_ipfix_collector_config_with_http_info(self, body, collector_config_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX collector configuration  # noqa: E501

        Update an existing IPFIX collector configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_collector_config_with_http_info(body, collector_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorConfig body: (required)
        :param str collector_config_id: (required)
        :return: IpfixCollectorConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'collector_config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ipfix_collector_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ipfix_collector_config`")  # noqa: E501
        # verify the required parameter 'collector_config_id' is set
        if ('collector_config_id' not in params or
                params['collector_config_id'] is None):
            raise ValueError("Missing the required parameter `collector_config_id` when calling `update_ipfix_collector_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'collector_config_id' in params:
            path_params['collector-config-id'] = params['collector_config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/collectorconfigs/{collector-config-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ipfix_collector_upm_profile(self, body, ipfix_collector_profile_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX collector profile  # noqa: E501

        Update an existing IPFIX collector profile with profile ID and modified properties.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_collector_upm_profile(body, ipfix_collector_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorUpmProfile body: (required)
        :param str ipfix_collector_profile_id: (required)
        :return: IpfixCollectorUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ipfix_collector_upm_profile_with_http_info(body, ipfix_collector_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ipfix_collector_upm_profile_with_http_info(body, ipfix_collector_profile_id, **kwargs)  # noqa: E501
            return data

    def update_ipfix_collector_upm_profile_with_http_info(self, body, ipfix_collector_profile_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX collector profile  # noqa: E501

        Update an existing IPFIX collector profile with profile ID and modified properties.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_collector_upm_profile_with_http_info(body, ipfix_collector_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixCollectorUpmProfile body: (required)
        :param str ipfix_collector_profile_id: (required)
        :return: IpfixCollectorUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ipfix_collector_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ipfix_collector_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ipfix_collector_upm_profile`")  # noqa: E501
        # verify the required parameter 'ipfix_collector_profile_id' is set
        if ('ipfix_collector_profile_id' not in params or
                params['ipfix_collector_profile_id'] is None):
            raise ValueError("Missing the required parameter `ipfix_collector_profile_id` when calling `update_ipfix_collector_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ipfix_collector_profile_id' in params:
            path_params['ipfix-collector-profile-id'] = params['ipfix_collector_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-collector-profiles/{ipfix-collector-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixCollectorUpmProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ipfix_config(self, body, config_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX configuration  # noqa: E501

        Update an existing IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_config(body, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixConfig body: (required)
        :param str config_id: (required)
        :return: IpfixConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ipfix_config_with_http_info(body, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ipfix_config_with_http_info(body, config_id, **kwargs)  # noqa: E501
            return data

    def update_ipfix_config_with_http_info(self, body, config_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX configuration  # noqa: E501

        Update an existing IPFIX configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_config_with_http_info(body, config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixConfig body: (required)
        :param str config_id: (required)
        :return: IpfixConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'config_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ipfix_config`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `update_ipfix_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_id' in params:
            path_params['config-id'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix/configs/{config-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ipfix_upm_profile(self, body, ipfix_profile_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX profile  # noqa: E501

        Update an existing IPFIX profile with profile ID and modified properties.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_upm_profile(body, ipfix_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixUpmProfile body: (required)
        :param str ipfix_profile_id: (required)
        :return: IpfixUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ipfix_upm_profile_with_http_info(body, ipfix_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ipfix_upm_profile_with_http_info(body, ipfix_profile_id, **kwargs)  # noqa: E501
            return data

    def update_ipfix_upm_profile_with_http_info(self, body, ipfix_profile_id, **kwargs):  # noqa: E501
        """Update an existing IPFIX profile  # noqa: E501

        Update an existing IPFIX profile with profile ID and modified properties.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ipfix_upm_profile_with_http_info(body, ipfix_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixUpmProfile body: (required)
        :param str ipfix_profile_id: (required)
        :return: IpfixUpmProfile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ipfix_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ipfix_upm_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ipfix_upm_profile`")  # noqa: E501
        # verify the required parameter 'ipfix_profile_id' is set
        if ('ipfix_profile_id' not in params or
                params['ipfix_profile_id'] is None):
            raise ValueError("Missing the required parameter `ipfix_profile_id` when calling `update_ipfix_upm_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ipfix_profile_id' in params:
            path_params['ipfix-profile-id'] = params['ipfix_profile_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-profiles/{ipfix-profile-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixUpmProfile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_switch_ipfix_config(self, body, **kwargs):  # noqa: E501
        """Update global switch IPFIX export configuration  # noqa: E501

        Deprecated - Please use /ipfix-profiles/<ipfix-profile-id> for switch IPFIX profile and /ipfix-collector-profiles/<ipfix-collector-profile-id> for IPFIX collector profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_switch_ipfix_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixObsPointConfig body: (required)
        :return: IpfixObsPointConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_switch_ipfix_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_switch_ipfix_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_switch_ipfix_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update global switch IPFIX export configuration  # noqa: E501

        Deprecated - Please use /ipfix-profiles/<ipfix-profile-id> for switch IPFIX profile and /ipfix-collector-profiles/<ipfix-collector-profile-id> for IPFIX collector profile.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_switch_ipfix_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IpfixObsPointConfig body: (required)
        :return: IpfixObsPointConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_switch_ipfix_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_switch_ipfix_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ipfix-obs-points/switch-global', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IpfixObsPointConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
