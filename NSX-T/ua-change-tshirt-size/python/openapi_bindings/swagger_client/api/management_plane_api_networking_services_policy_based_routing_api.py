# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPINetworkingServicesPolicyBasedRoutingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_pbr_rule_in_section(self, body, section_id, **kwargs):  # noqa: E501
        """Add a Single Rule in a Section  # noqa: E501

        Adds a new PBR rule in existing PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_rule_in_section(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRule body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pbr_rule_in_section_with_http_info(body, section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pbr_rule_in_section_with_http_info(body, section_id, **kwargs)  # noqa: E501
            return data

    def add_pbr_rule_in_section_with_http_info(self, body, section_id, **kwargs):  # noqa: E501
        """Add a Single Rule in a Section  # noqa: E501

        Adds a new PBR rule in existing PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_rule_in_section_with_http_info(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRule body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pbr_rule_in_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_pbr_rule_in_section`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `add_pbr_rule_in_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_pbr_rules_in_section_create_multiple(self, body, section_id, **kwargs):  # noqa: E501
        """Add Multiple Rules in a Section  # noqa: E501

        Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_rules_in_section_create_multiple(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRuleList body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pbr_rules_in_section_create_multiple_with_http_info(body, section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pbr_rules_in_section_create_multiple_with_http_info(body, section_id, **kwargs)  # noqa: E501
            return data

    def add_pbr_rules_in_section_create_multiple_with_http_info(self, body, section_id, **kwargs):  # noqa: E501
        """Add Multiple Rules in a Section  # noqa: E501

        Create multiple PBR rules in existing PBR section bounded by limit of 1000 PBR rules per section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_rules_in_section_create_multiple_with_http_info(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRuleList body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pbr_rules_in_section_create_multiple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_pbr_rules_in_section_create_multiple`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `add_pbr_rules_in_section_create_multiple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules?action=create_multiple', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_pbr_section(self, body, **kwargs):  # noqa: E501
        """Create a New Empty Section  # noqa: E501

        Creates new empty PBR section in the system.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_section(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSection body: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pbr_section_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pbr_section_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_pbr_section_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a New Empty Section  # noqa: E501

        Creates new empty PBR section in the system.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_section_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSection body: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pbr_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_pbr_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_pbr_section_with_rules_create_with_rules(self, body, **kwargs):  # noqa: E501
        """Create a Section with Rules  # noqa: E501

        Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&lt;section-id&gt;/rules   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_section_with_rules_create_with_rules(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSectionRuleList body: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pbr_section_with_rules_create_with_rules_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pbr_section_with_rules_create_with_rules_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_pbr_section_with_rules_create_with_rules_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Section with Rules  # noqa: E501

        Creates a new PBR section with rules. The limit on the number of rules is defined by maxItems in collection types for PBRRule (PBRRuleXXXList types). When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number of rule references is not supported.  Instead, to create sections, use: POST /api/v1/pbr/sections  To create rules, use: POST /api/v1/pbr/sections/&lt;section-id&gt;/rules   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pbr_section_with_rules_create_with_rules_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSectionRuleList body: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pbr_section_with_rules_create_with_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_pbr_section_with_rules_create_with_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections?action=create_with_rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSectionRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbr_rule(self, section_id, rule_id, **kwargs):  # noqa: E501
        """Delete an Existing Rule  # noqa: E501

        Delete existing PBR rule in a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbr_rule(section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbr_rule_with_http_info(section_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbr_rule_with_http_info(section_id, rule_id, **kwargs)  # noqa: E501
            return data

    def delete_pbr_rule_with_http_info(self, section_id, rule_id, **kwargs):  # noqa: E501
        """Delete an Existing Rule  # noqa: E501

        Delete existing PBR rule in a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbr_rule_with_http_info(section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbr_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `delete_pbr_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `delete_pbr_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule-id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules/{rule-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pbr_section(self, section_id, **kwargs):  # noqa: E501
        """Delete an Existing Section and Its Associated Rules  # noqa: E501

        Removes PBR section from the system. PBR section with rules can only be deleted by passing \"cascade=true\" parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbr_section(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param bool cascade: Flag to cascade delete of this object to all it's child objects.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pbr_section_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pbr_section_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def delete_pbr_section_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Delete an Existing Section and Its Associated Rules  # noqa: E501

        Removes PBR section from the system. PBR section with rules can only be deleted by passing \"cascade=true\" parameter.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pbr_section_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param bool cascade: Flag to cascade delete of this object to all it's child objects.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'cascade']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pbr_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `delete_pbr_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'cascade' in params:
            query_params.append(('cascade', params['cascade']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbr_rule(self, section_id, rule_id, **kwargs):  # noqa: E501
        """Read an Existing Rule  # noqa: E501

        Return existing PBR rule information in a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_rule(section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbr_rule_with_http_info(section_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbr_rule_with_http_info(section_id, rule_id, **kwargs)  # noqa: E501
            return data

    def get_pbr_rule_with_http_info(self, section_id, rule_id, **kwargs):  # noqa: E501
        """Read an Existing Rule  # noqa: E501

        Return existing PBR rule information in a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_rule_with_http_info(section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbr_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `get_pbr_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `get_pbr_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule-id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules/{rule-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbr_rule_stats(self, section_id, rule_id, **kwargs):  # noqa: E501
        """Get PBR rule level statistics.  # noqa: E501

        Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_rule_stats(section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: PBRStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbr_rule_stats_with_http_info(section_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbr_rule_stats_with_http_info(section_id, rule_id, **kwargs)  # noqa: E501
            return data

    def get_pbr_rule_stats_with_http_info(self, section_id, rule_id, **kwargs):  # noqa: E501
        """Get PBR rule level statistics.  # noqa: E501

        Get aggregated statistics for a rule for given PBR rule. Stats include total number of packets and total number of bytes for the PBR rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_rule_stats_with_http_info(section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: PBRStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbr_rule_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `get_pbr_rule_stats`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `get_pbr_rule_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule-id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules/{rule-id}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbr_rules(self, section_id, **kwargs):  # noqa: E501
        """Get All the Rules for a Section  # noqa: E501

        Return all PBR rule(s) information for a given PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_rules(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str applied_tos: AppliedTo's referenced by this section or section's Distributed Service Rules .
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str destinations: Destinations referenced by this section's Distributed Service Rules .
        :param str filter_type: Filter type
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str services: NSService referenced by this section's Distributed Service Rules .
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str sources: Sources referenced by this section's Distributed Service Rules .
        :return: PBRRuleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbr_rules_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbr_rules_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def get_pbr_rules_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Get All the Rules for a Section  # noqa: E501

        Return all PBR rule(s) information for a given PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_rules_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :param str applied_tos: AppliedTo's referenced by this section or section's Distributed Service Rules .
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str destinations: Destinations referenced by this section's Distributed Service Rules .
        :param str filter_type: Filter type
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str services: NSService referenced by this section's Distributed Service Rules .
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str sources: Sources referenced by this section's Distributed Service Rules .
        :return: PBRRuleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'applied_tos', 'cursor', 'destinations', 'filter_type', 'included_fields', 'page_size', 'services', 'sort_ascending', 'sort_by', 'sources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbr_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `get_pbr_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'applied_tos' in params:
            query_params.append(('applied_tos', params['applied_tos']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'destinations' in params:
            query_params.append(('destinations', params['destinations']))  # noqa: E501
        if 'filter_type' in params:
            query_params.append(('filter_type', params['filter_type']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'services' in params:
            query_params.append(('services', params['services']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sources' in params:
            query_params.append(('sources', params['sources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRRuleListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbr_section(self, section_id, **kwargs):  # noqa: E501
        """Get an Existing Section  # noqa: E501

        Returns information about PBR section for the identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_section(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbr_section_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbr_section_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def get_pbr_section_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Get an Existing Section  # noqa: E501

        Returns information about PBR section for the identifier.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_section_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbr_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `get_pbr_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbr_section_stats(self, section_id, **kwargs):  # noqa: E501
        """Get PBR section level statistics.  # noqa: E501

        Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_section_stats(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :return: PBRStatsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbr_section_stats_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbr_section_stats_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def get_pbr_section_stats_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Get PBR section level statistics.  # noqa: E501

        Get aggregated statistics for all rules for a given pbr section. Data includes total number of packets, and total number of bytes for all PBR rules in the given section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_section_stats_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :return: PBRStatsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbr_section_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `get_pbr_section_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRStatsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pbr_section_with_rules_list_with_rules(self, section_id, **kwargs):  # noqa: E501
        """Get an Existing Section, Including Rules  # noqa: E501

        Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&lt;section-id&gt;/rules with the appropriate page_size.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_section_with_rules_list_with_rules(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pbr_section_with_rules_list_with_rules_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pbr_section_with_rules_list_with_rules_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def get_pbr_section_with_rules_list_with_rules_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Get an Existing Section, Including Rules  # noqa: E501

        Returns PBR section information with rules for a section identifier. When invoked on a section with a large number of rules, this API is supported only at low rates of invocation (not more than 4-5 times per minute). The typical latency of this API with about 1024 rules is about 4-5 seconds. This API should not be invoked with large payloads at automation speeds. More than 50 rules with a large number rule references is not supported.  Instead, to read PBR rules, use: GET /api/v1/pbr/sections/&lt;section-id&gt;/rules with the appropriate page_size.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pbr_section_with_rules_list_with_rules_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: (required)
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pbr_section_with_rules_list_with_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `get_pbr_section_with_rules_list_with_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}?action=list_with_rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSectionRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_pbr_sections(self, **kwargs):  # noqa: E501
        """List All PBR Sections  # noqa: E501

        List all PBR section in paginated form. A default page size is limited to 1000 PBR sections.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pbr_sections(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applied_tos: AppliedTo's referenced by this section or section's Distributed Service Rules .
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str destinations: Destinations referenced by this section's Distributed Service Rules .
        :param str exclude_applied_to_type: Resource type valid for use as AppliedTo filter in section API
        :param str filter_type: Filter type
        :param str include_applied_to_type: Resource type valid for use as AppliedTo filter in section API
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str services: NSService referenced by this section's Distributed Service Rules .
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str sources: Sources referenced by this section's Distributed Service Rules .
        :return: PBRSectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_pbr_sections_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_pbr_sections_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_pbr_sections_with_http_info(self, **kwargs):  # noqa: E501
        """List All PBR Sections  # noqa: E501

        List all PBR section in paginated form. A default page size is limited to 1000 PBR sections.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_pbr_sections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str applied_tos: AppliedTo's referenced by this section or section's Distributed Service Rules .
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str destinations: Destinations referenced by this section's Distributed Service Rules .
        :param str exclude_applied_to_type: Resource type valid for use as AppliedTo filter in section API
        :param str filter_type: Filter type
        :param str include_applied_to_type: Resource type valid for use as AppliedTo filter in section API
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str services: NSService referenced by this section's Distributed Service Rules .
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str sources: Sources referenced by this section's Distributed Service Rules .
        :return: PBRSectionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['applied_tos', 'cursor', 'destinations', 'exclude_applied_to_type', 'filter_type', 'include_applied_to_type', 'included_fields', 'page_size', 'services', 'sort_ascending', 'sort_by', 'sources']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_pbr_sections" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'applied_tos' in params:
            query_params.append(('applied_tos', params['applied_tos']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'destinations' in params:
            query_params.append(('destinations', params['destinations']))  # noqa: E501
        if 'exclude_applied_to_type' in params:
            query_params.append(('exclude_applied_to_type', params['exclude_applied_to_type']))  # noqa: E501
        if 'filter_type' in params:
            query_params.append(('filter_type', params['filter_type']))  # noqa: E501
        if 'include_applied_to_type' in params:
            query_params.append(('include_applied_to_type', params['include_applied_to_type']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'services' in params:
            query_params.append(('services', params['services']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sources' in params:
            query_params.append(('sources', params['sources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSectionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revise_pbr_rule_revise(self, body, section_id, rule_id, **kwargs):  # noqa: E501
        """Update an Existing Rule and Reorder the Rule  # noqa: E501

        Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_pbr_rule_revise(body, section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRule body: (required)
        :param str section_id: (required)
        :param str rule_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revise_pbr_rule_revise_with_http_info(body, section_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revise_pbr_rule_revise_with_http_info(body, section_id, rule_id, **kwargs)  # noqa: E501
            return data

    def revise_pbr_rule_revise_with_http_info(self, body, section_id, rule_id, **kwargs):  # noqa: E501
        """Update an Existing Rule and Reorder the Rule  # noqa: E501

        Modifies existing PBR rule along with relative position among other PBR rules inside a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_pbr_rule_revise_with_http_info(body, section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRule body: (required)
        :param str section_id: (required)
        :param str rule_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id', 'rule_id', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revise_pbr_rule_revise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `revise_pbr_rule_revise`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `revise_pbr_rule_revise`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `revise_pbr_rule_revise`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule-id'] = params['rule_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules/{rule-id}?action=revise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revise_pbr_section_revise(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section, including Its Position  # noqa: E501

        Modifies an existing PBR section along with its relative position among other PBR sections in the system.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_pbr_section_revise(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSection body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revise_pbr_section_revise_with_http_info(body, section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revise_pbr_section_revise_with_http_info(body, section_id, **kwargs)  # noqa: E501
            return data

    def revise_pbr_section_revise_with_http_info(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section, including Its Position  # noqa: E501

        Modifies an existing PBR section along with its relative position among other PBR sections in the system.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_pbr_section_revise_with_http_info(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSection body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revise_pbr_section_revise" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `revise_pbr_section_revise`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `revise_pbr_section_revise`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}?action=revise', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revise_pbr_section_with_rules_revise_with_rules(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section with Rules  # noqa: E501

        Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&lt;section-id&gt;?action=revise  To modify rules, use: PUT /api/v1/pbr/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_pbr_section_with_rules_revise_with_rules(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSectionRuleList body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revise_pbr_section_with_rules_revise_with_rules_with_http_info(body, section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.revise_pbr_section_with_rules_revise_with_rules_with_http_info(body, section_id, **kwargs)  # noqa: E501
            return data

    def revise_pbr_section_with_rules_revise_with_rules_with_http_info(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section with Rules  # noqa: E501

        Modifies an existing PBR section along with its relative position among other PBR sections with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to move a section above or below another section, use: POST /api/v1/pbr/sections/&lt;section-id&gt;?action=revise  To modify rules, use: PUT /api/v1/pbr/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revise_pbr_section_with_rules_revise_with_rules_with_http_info(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSectionRuleList body: (required)
        :param str section_id: (required)
        :param str id: Identifier of the anchor rule or section. This is a required field in case operation like 'insert_before' and 'insert_after'.
        :param str operation: Operation
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id', 'id', 'operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revise_pbr_section_with_rules_revise_with_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `revise_pbr_section_with_rules_revise_with_rules`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `revise_pbr_section_with_rules_revise_with_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}?action=revise_with_rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSectionRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbr_rule(self, body, section_id, rule_id, **kwargs):  # noqa: E501
        """Update an Existing Rule  # noqa: E501

        Modifies existing rule in a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbr_rule(body, section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRule body: (required)
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbr_rule_with_http_info(body, section_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbr_rule_with_http_info(body, section_id, rule_id, **kwargs)  # noqa: E501
            return data

    def update_pbr_rule_with_http_info(self, body, section_id, rule_id, **kwargs):  # noqa: E501
        """Update an Existing Rule  # noqa: E501

        Modifies existing rule in a PBR section.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbr_rule_with_http_info(body, section_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRRule body: (required)
        :param str section_id: (required)
        :param str rule_id: (required)
        :return: PBRRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbr_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_pbr_rule`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `update_pbr_rule`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `update_pbr_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['rule-id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}/rules/{rule-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRRule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbr_section(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section  # noqa: E501

        Modifies the specified section, but does not modify the section's associated rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbr_section(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSection body: (required)
        :param str section_id: (required)
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbr_section_with_http_info(body, section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbr_section_with_http_info(body, section_id, **kwargs)  # noqa: E501
            return data

    def update_pbr_section_with_http_info(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section  # noqa: E501

        Modifies the specified section, but does not modify the section's associated rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbr_section_with_http_info(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSection body: (required)
        :param str section_id: (required)
        :return: PBRSection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbr_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_pbr_section`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `update_pbr_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pbr_section_with_rules_update_with_rules(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section, Including Its Rules  # noqa: E501

        Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbr_section_with_rules_update_with_rules(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSectionRuleList body: (required)
        :param str section_id: (required)
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pbr_section_with_rules_update_with_rules_with_http_info(body, section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pbr_section_with_rules_update_with_rules_with_http_info(body, section_id, **kwargs)  # noqa: E501
            return data

    def update_pbr_section_with_rules_update_with_rules_with_http_info(self, body, section_id, **kwargs):  # noqa: E501
        """Update an Existing Section, Including Its Rules  # noqa: E501

        Modifies existing PBR section along with its association with rules. When invoked on a large number of rules, this API is supported only at low rates of invocation (not more than 2 times per minute). The typical latency of this API with about 1024 rules is about 15 seconds in a cluster setup. This API should not be invoked with large payloads at automation speeds.  Instead, to update rule content, use: PUT /api/v1/pbr/sections/&lt;section-id&gt;/rules/&lt;rule-id&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pbr_section_with_rules_update_with_rules_with_http_info(body, section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PBRSectionRuleList body: (required)
        :param str section_id: (required)
        :return: PBRSectionRuleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'section_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pbr_section_with_rules_update_with_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_pbr_section_with_rules_update_with_rules`")  # noqa: E501
        # verify the required parameter 'section_id' is set
        if ('section_id' not in params or
                params['section_id'] is None):
            raise ValueError("Missing the required parameter `section_id` when calling `update_pbr_section_with_rules_update_with_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section-id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/pbr/sections/{section-id}?action=update_with_rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PBRSectionRuleList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
