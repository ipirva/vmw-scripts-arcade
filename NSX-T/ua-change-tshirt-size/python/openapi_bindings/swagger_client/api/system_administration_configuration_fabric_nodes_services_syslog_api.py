# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesServicesSyslogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_syslog_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_syslog_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_syslog_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_syslog_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_syslog_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_syslog_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_syslog_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_syslog_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_syslog_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_syslog_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_syslog_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_syslog_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_syslog_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_syslog_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_syslog_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_syslog_exporter(self, exporter_name, **kwargs):  # noqa: E501
        """Delete node syslog exporter  # noqa: E501

        Removes a specified rule from the collection of syslog exporter rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_syslog_exporter(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
            return data

    def delete_node_syslog_exporter_with_http_info(self, exporter_name, **kwargs):  # noqa: E501
        """Delete node syslog exporter  # noqa: E501

        Removes a specified rule from the collection of syslog exporter rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_syslog_exporter_with_http_info(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_syslog_exporter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exporter_name' is set
        if ('exporter_name' not in params or
                params['exporter_name'] is None):
            raise ValueError("Missing the required parameter `exporter_name` when calling `delete_node_syslog_exporter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exporter_name' in params:
            path_params['exporter-name'] = params['exporter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters/{exporter-name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_syslog_exporter_all(self, **kwargs):  # noqa: E501
        """Delete all node syslog exporters  # noqa: E501

        Removes all syslog exporter rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_syslog_exporter_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_syslog_exporter_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_syslog_exporter_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_node_syslog_exporter_all_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all node syslog exporters  # noqa: E501

        Removes all syslog exporter rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_syslog_exporter_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_syslog_exporter_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_syslog_exporters(self, **kwargs):  # noqa: E501
        """List node syslog exporters  # noqa: E501

        Returns the collection of registered syslog exporter rules, if any. The rules specify the collector IP address and port, and the protocol to use.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_syslog_exporters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSyslogExporterPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_syslog_exporters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_syslog_exporters_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_syslog_exporters_with_http_info(self, **kwargs):  # noqa: E501
        """List node syslog exporters  # noqa: E501

        Returns the collection of registered syslog exporter rules, if any. The rules specify the collector IP address and port, and the protocol to use.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_syslog_exporters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSyslogExporterPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_syslog_exporters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSyslogExporterPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_node_syslog_exporter(self, body, **kwargs):  # noqa: E501
        """Add node syslog exporter  # noqa: E501

        Adds a rule for exporting syslog information to a specified server. The required parameters are the rule name (exporter_name); severity level (emerg, alert, crit, and so on); transmission protocol (TCP or UDP); and server IP address or hostname. The optional parameters are the syslog port number, which can be 1 through 65,535 (514, by default); facility level to use when logging messages to syslog (kern, user, mail, and so on); and message IDs (msgids), which identify the types of messages to export.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_node_syslog_exporter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSyslogExporterProperties body: (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_node_syslog_exporter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_node_syslog_exporter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_node_syslog_exporter_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add node syslog exporter  # noqa: E501

        Adds a rule for exporting syslog information to a specified server. The required parameters are the rule name (exporter_name); severity level (emerg, alert, crit, and so on); transmission protocol (TCP or UDP); and server IP address or hostname. The optional parameters are the syslog port number, which can be 1 through 65,535 (514, by default); facility level to use when logging messages to syslog (kern, user, mail, and so on); and message IDs (msgids), which identify the types of messages to export.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_node_syslog_exporter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSyslogExporterProperties body: (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_node_syslog_exporter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_node_syslog_exporter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSyslogExporterProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_syslog_exporter(self, exporter_name, **kwargs):  # noqa: E501
        """Read node syslog exporter  # noqa: E501

        Returns information about a specific syslog collection point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_syslog_exporter(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
            return data

    def read_node_syslog_exporter_with_http_info(self, exporter_name, **kwargs):  # noqa: E501
        """Read node syslog exporter  # noqa: E501

        Returns information about a specific syslog collection point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_syslog_exporter_with_http_info(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_syslog_exporter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exporter_name' is set
        if ('exporter_name' not in params or
                params['exporter_name'] is None):
            raise ValueError("Missing the required parameter `exporter_name` when calling `read_node_syslog_exporter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exporter_name' in params:
            path_params['exporter-name'] = params['exporter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters/{exporter-name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSyslogExporterProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_syslog_service(self, **kwargs):  # noqa: E501
        """Read syslog service properties  # noqa: E501

        Read syslog service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_syslog_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_syslog_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_syslog_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read syslog service properties  # noqa: E501

        Read syslog service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_syslog_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_syslog_service_status(self, **kwargs):  # noqa: E501
        """Read syslog service status  # noqa: E501

        Read syslog service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_syslog_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_syslog_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_syslog_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read syslog service status  # noqa: E501

        Read syslog service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_syslog_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_node_syslog_exporter_verify(self, **kwargs):  # noqa: E501
        """Verify node syslog exporter  # noqa: E501

        Collect iptables rules needed for all existing syslog exporters and verify if the existing iptables rules are the same. If not, remove the stale rules and add the new rules to make sure all exporters work properly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_node_syslog_exporter_verify(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_node_syslog_exporter_verify_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verify_node_syslog_exporter_verify_with_http_info(**kwargs)  # noqa: E501
            return data

    def verify_node_syslog_exporter_verify_with_http_info(self, **kwargs):  # noqa: E501
        """Verify node syslog exporter  # noqa: E501

        Collect iptables rules needed for all existing syslog exporters and verify if the existing iptables rules are the same. If not, remove the stale rules and add the new rules to make sure all exporters work properly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_node_syslog_exporter_verify_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_node_syslog_exporter_verify" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters?action=verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
