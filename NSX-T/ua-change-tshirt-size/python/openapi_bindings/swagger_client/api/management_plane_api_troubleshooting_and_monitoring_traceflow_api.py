# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneAPITroubleshootingAndMonitoringTraceflowApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_traceflow(self, body, **kwargs):  # noqa: E501
        """Initiate a Traceflow Operation on the Specified Port  # noqa: E501

        Initiate a Traceflow Operation on the Specified Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_traceflow(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TraceflowRequest body: (required)
        :return: Traceflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_traceflow_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_traceflow_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_traceflow_with_http_info(self, body, **kwargs):  # noqa: E501
        """Initiate a Traceflow Operation on the Specified Port  # noqa: E501

        Initiate a Traceflow Operation on the Specified Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_traceflow_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TraceflowRequest body: (required)
        :return: Traceflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_traceflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_traceflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/traceflows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Traceflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_traceflow(self, traceflow_id, **kwargs):  # noqa: E501
        """Delete the Traceflow round  # noqa: E501

        Delete the Traceflow round  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_traceflow(traceflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str traceflow_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_traceflow_with_http_info(traceflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_traceflow_with_http_info(traceflow_id, **kwargs)  # noqa: E501
            return data

    def delete_traceflow_with_http_info(self, traceflow_id, **kwargs):  # noqa: E501
        """Delete the Traceflow round  # noqa: E501

        Delete the Traceflow round  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_traceflow_with_http_info(traceflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str traceflow_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['traceflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_traceflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'traceflow_id' is set
        if ('traceflow_id' not in params or
                params['traceflow_id'] is None):
            raise ValueError("Missing the required parameter `traceflow_id` when calling `delete_traceflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'traceflow_id' in params:
            path_params['traceflow-id'] = params['traceflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/traceflows/{traceflow-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_traceflow(self, traceflow_id, **kwargs):  # noqa: E501
        """Get the Traceflow round status and result summary  # noqa: E501

        Get the Traceflow round status and result summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_traceflow(traceflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str traceflow_id: (required)
        :return: Traceflow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_traceflow_with_http_info(traceflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_traceflow_with_http_info(traceflow_id, **kwargs)  # noqa: E501
            return data

    def get_traceflow_with_http_info(self, traceflow_id, **kwargs):  # noqa: E501
        """Get the Traceflow round status and result summary  # noqa: E501

        Get the Traceflow round status and result summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_traceflow_with_http_info(traceflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str traceflow_id: (required)
        :return: Traceflow
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['traceflow_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_traceflow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'traceflow_id' is set
        if ('traceflow_id' not in params or
                params['traceflow_id'] is None):
            raise ValueError("Missing the required parameter `traceflow_id` when calling `get_traceflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'traceflow_id' in params:
            path_params['traceflow-id'] = params['traceflow_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/traceflows/{traceflow-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Traceflow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_traceflow_observations(self, traceflow_id, **kwargs):  # noqa: E501
        """Get observations for the Traceflow round  # noqa: E501

        Get observations for the Traceflow round  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_traceflow_observations(traceflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str traceflow_id: (required)
        :param str component_name: Observations having the given component name will be listed.
        :param str component_type: Observations having the given component type will be listed.
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str resource_type: The type of observations that will be listed.
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str transport_node_name: Observations having the given transport node name will be listed.
        :return: TraceflowObservationListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_traceflow_observations_with_http_info(traceflow_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_traceflow_observations_with_http_info(traceflow_id, **kwargs)  # noqa: E501
            return data

    def get_traceflow_observations_with_http_info(self, traceflow_id, **kwargs):  # noqa: E501
        """Get observations for the Traceflow round  # noqa: E501

        Get observations for the Traceflow round  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_traceflow_observations_with_http_info(traceflow_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str traceflow_id: (required)
        :param str component_name: Observations having the given component name will be listed.
        :param str component_type: Observations having the given component type will be listed.
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param str resource_type: The type of observations that will be listed.
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :param str transport_node_name: Observations having the given transport node name will be listed.
        :return: TraceflowObservationListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['traceflow_id', 'component_name', 'component_type', 'cursor', 'included_fields', 'page_size', 'resource_type', 'sort_ascending', 'sort_by', 'transport_node_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_traceflow_observations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'traceflow_id' is set
        if ('traceflow_id' not in params or
                params['traceflow_id'] is None):
            raise ValueError("Missing the required parameter `traceflow_id` when calling `get_traceflow_observations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'traceflow_id' in params:
            path_params['traceflow-id'] = params['traceflow_id']  # noqa: E501

        query_params = []
        if 'component_name' in params:
            query_params.append(('component_name', params['component_name']))  # noqa: E501
        if 'component_type' in params:
            query_params.append(('component_type', params['component_type']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'transport_node_name' in params:
            query_params.append(('transport_node_name', params['transport_node_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/traceflows/{traceflow-id}/observations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TraceflowObservationListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_traceflows(self, **kwargs):  # noqa: E501
        """List all Traceflow rounds  # noqa: E501

        List all Traceflow rounds; if a logical port id is given as a query parameter, only those originated from the logical port are returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_traceflows(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str lport_id: id of the source logical port where the trace flows originated
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: TraceflowListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_traceflows_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_traceflows_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_traceflows_with_http_info(self, **kwargs):  # noqa: E501
        """List all Traceflow rounds  # noqa: E501

        List all Traceflow rounds; if a logical port id is given as a query parameter, only those originated from the logical port are returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_traceflows_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str included_fields: Comma separated list of fields that should be included in query result
        :param str lport_id: id of the source logical port where the trace flows originated
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :param bool sort_ascending:
        :param str sort_by: Field by which records are sorted
        :return: TraceflowListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'included_fields', 'lport_id', 'page_size', 'sort_ascending', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_traceflows" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'included_fields' in params:
            query_params.append(('included_fields', params['included_fields']))  # noqa: E501
        if 'lport_id' in params:
            query_params.append(('lport_id', params['lport_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sort_ascending', params['sort_ascending']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/traceflows', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TraceflowListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
