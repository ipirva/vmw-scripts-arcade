# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 3.1.0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SystemAdministrationConfigurationFabricNodesTransportNodeInterfacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_fabric_node_interfaces(self, node_id, **kwargs):  # noqa: E501
        """List the specified node's Network Interfaces  # noqa: E501

        Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/<transport-node-id>/network/interfaces to list node network interfaces for the corresponding TN.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_fabric_node_interfaces(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str admin_status: Admin status of the interface
        :param str source: Data source type.
        :return: NodeInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_fabric_node_interfaces_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_fabric_node_interfaces_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def list_fabric_node_interfaces_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """List the specified node's Network Interfaces  # noqa: E501

        Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP). This api is deprecated. Please use Transport Node API GET /transport-nodes/<transport-node-id>/network/interfaces to list node network interfaces for the corresponding TN.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_fabric_node_interfaces_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str admin_status: Admin status of the interface
        :param str source: Data source type.
        :return: NodeInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'admin_status', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_fabric_node_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `list_fabric_node_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501

        query_params = []
        if 'admin_status' in params:
            query_params.append(('admin_status', params['admin_status']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/network/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfacePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transport_node_interfaces(self, transport_node_id, **kwargs):  # noqa: E501
        """List the specified transport node's network interfaces  # noqa: E501

        Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_interfaces(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param str admin_status: Admin status of the interface
        :param str source: Data source type.
        :return: NodeInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_transport_node_interfaces_with_http_info(transport_node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_transport_node_interfaces_with_http_info(transport_node_id, **kwargs)  # noqa: E501
            return data

    def list_transport_node_interfaces_with_http_info(self, transport_node_id, **kwargs):  # noqa: E501
        """List the specified transport node's network interfaces  # noqa: E501

        Returns the number of interfaces on the node and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_transport_node_interfaces_with_http_info(transport_node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param str admin_status: Admin status of the interface
        :param str source: Data source type.
        :return: NodeInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id', 'admin_status', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transport_node_interfaces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `list_transport_node_interfaces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501

        query_params = []
        if 'admin_status' in params:
            query_params.append(('admin_status', params['admin_status']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}/network/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfacePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_fabric_node_interface(self, node_id, interface_id, **kwargs):  # noqa: E501
        """Read the node's Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/<transport-node-id>/network/interfaces/<interface-id> to get interface details of a node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_fabric_node_interface(node_id, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_fabric_node_interface_with_http_info(node_id, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_fabric_node_interface_with_http_info(node_id, interface_id, **kwargs)  # noqa: E501
            return data

    def read_fabric_node_interface_with_http_info(self, node_id, interface_id, **kwargs):  # noqa: E501
        """Read the node's Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP). This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/<transport-node-id>/network/interfaces/<interface-id> to get interface details of a node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_fabric_node_interface_with_http_info(node_id, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'interface_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_fabric_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `read_fabric_node_interface`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_fabric_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['node-id'] = params['node_id']  # noqa: E501
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{node-id}/network/interfaces/{interface-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_transport_node_interface(self, transport_node_id, interface_id, **kwargs):  # noqa: E501
        """Read the transport node's network interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_transport_node_interface(transport_node_id, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_transport_node_interface_with_http_info(transport_node_id, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_transport_node_interface_with_http_info(transport_node_id, interface_id, **kwargs)  # noqa: E501
            return data

    def read_transport_node_interface_with_http_info(self, transport_node_id, interface_id, **kwargs):  # noqa: E501
        """Read the transport node's network interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_transport_node_interface_with_http_info(transport_node_id, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id', 'interface_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_transport_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `read_transport_node_interface`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_transport_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}/network/interfaces/{interface-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_transport_node_interface_statistics(self, transport_node_id, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager's Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_transport_node_interface_statistics(transport_node_id, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_transport_node_interface_statistics_with_http_info(transport_node_id, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_transport_node_interface_statistics_with_http_info(transport_node_id, interface_id, **kwargs)  # noqa: E501
            return data

    def read_transport_node_interface_statistics_with_http_info(self, transport_node_id, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager's Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_transport_node_interface_statistics_with_http_info(transport_node_id, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transport_node_id: (required)
        :param str interface_id: (required)
        :param str source: Data source type.
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transport_node_id', 'interface_id', 'source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_transport_node_interface_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transport_node_id' is set
        if ('transport_node_id' not in params or
                params['transport_node_id'] is None):
            raise ValueError("Missing the required parameter `transport_node_id` when calling `read_transport_node_interface_statistics`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_transport_node_interface_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transport_node_id' in params:
            path_params['transport-node-id'] = params['transport_node_id']  # noqa: E501
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{transport-node-id}/network/interfaces/{interface-id}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceStatisticsProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
